#NAME fix.

def Linear_fix_point__case_equiv :
  abst_T:cc.uT ->
  abst_base_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_inductive_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_case_complete:(dk_logic.eP 
                        (dk_logic.forall abst_T 
                           (x:(cc.eT abst_T) =>
                            dk_logic.or (dk_logic.ebP (abst_base_case x)) 
                              (dk_logic.ebP (abst_inductive_case x))))) ->
  abst_case_exclusive:(dk_logic.eP 
                         (dk_logic.forall abst_T 
                            (x:(cc.eT abst_T) =>
                             dk_logic.not 
                               (dk_logic.and 
                                  (dk_logic.ebP (abst_base_case x)) 
                                  (dk_logic.ebP (abst_inductive_case x)))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.eqv (dk_logic.ebP (abst_base_case x)) 
          (dk_logic.not (dk_logic.ebP (abst_inductive_case x)))))
  :=
  abst_T:cc.uT =>
  abst_base_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_inductive_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_case_complete:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.or (dk_logic.ebP (abst_base_case x)) 
           (dk_logic.ebP (abst_inductive_case x))))) =>
  abst_case_exclusive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.not 
           (dk_logic.and (dk_logic.ebP (abst_base_case x)) 
              (dk_logic.ebP (abst_inductive_case x)))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.eqv (zen.triangle (focal.is_true (abst_base_case v_Vzb))) 
          (zen.not (zen.triangle (focal.is_true (abst_inductive_case v_Vzb)))))) 
    (v_Vac:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.eqv (zen.triangle (focal.is_true (abst_base_case v_Vzb))) 
                 (zen.not 
                    (zen.triangle (focal.is_true (abst_inductive_case v_Vzb)))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.eqv (zen.triangle (focal.is_true (abst_base_case v_Vzb))) 
          (zen.not (zen.triangle (focal.is_true (abst_inductive_case v_Vzb))))) 
       (v_Vbc:(zen.term abst_T) =>
        v_Vcc:
        (zen.proof 
           (zen.not 
              (zen.eqv (zen.triangle (focal.is_true (abst_base_case v_Vbc))) 
                 (zen.not 
                    (zen.triangle (focal.is_true (abst_inductive_case v_Vbc))))))) =>
        zen.Rnotequiv (zen.triangle (focal.is_true (abst_base_case v_Vbc))) 
          (zen.not (zen.triangle (focal.is_true (abst_inductive_case v_Vbc)))) 
          (v_Vdc:
           (zen.proof 
              (zen.not (zen.triangle (focal.is_true (abst_base_case v_Vbc))))) =>
           v_Vec:
           (zen.proof 
              (zen.not 
                 (zen.triangle (focal.is_true (abst_inductive_case v_Vbc))))) =>
           zen.Rall abst_T 
             (v_Vzb:(zen.term abst_T) =>
              zen.or (zen.triangle (focal.is_true (abst_base_case v_Vzb))) 
                (zen.triangle (focal.is_true (abst_inductive_case v_Vzb)))) 
             v_Vbc 
             (v_Vfc:
              (zen.proof 
                 (zen.or 
                    (zen.triangle (focal.is_true (abst_base_case v_Vbc))) 
                    (zen.triangle (focal.is_true (abst_inductive_case v_Vbc))))) =>
              zen.Ror (zen.triangle (focal.is_true (abst_base_case v_Vbc))) 
                (zen.triangle (focal.is_true (abst_inductive_case v_Vbc))) 
                (v_Vgc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_base_case v_Vbc)))) =>
                 zen.Raxiom 
                   (zen.triangle (focal.is_true (abst_base_case v_Vbc))) 
                   v_Vgc v_Vdc) 
                (v_Vhc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_inductive_case v_Vbc)))) =>
                 zen.Raxiom 
                   (zen.triangle (focal.is_true (abst_inductive_case v_Vbc))) 
                   v_Vhc v_Vec) v_Vfc) abst_case_complete) 
          (v_Vgc:
           (zen.proof (zen.triangle (focal.is_true (abst_base_case v_Vbc)))) =>
           v_Vic:
           (zen.proof 
              (zen.not 
                 (zen.not 
                    (zen.triangle (focal.is_true (abst_inductive_case v_Vbc)))))) =>
           zen.Rnotnot 
             (zen.triangle (focal.is_true (abst_inductive_case v_Vbc))) 
             (v_Vhc:
              (zen.proof 
                 (zen.triangle (focal.is_true (abst_inductive_case v_Vbc)))) =>
              zen.Rall abst_T 
                (v_Vzb:(zen.term abst_T) =>
                 zen.not 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_base_case v_Vzb))) 
                      (zen.triangle 
                         (focal.is_true (abst_inductive_case v_Vzb))))) 
                v_Vbc 
                (v_Vjc:
                 (zen.proof 
                    (zen.not 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_base_case v_Vbc))) 
                          (zen.triangle 
                             (focal.is_true (abst_inductive_case v_Vbc)))))) =>
                 zen.Rnotand 
                   (zen.triangle (focal.is_true (abst_base_case v_Vbc))) 
                   (zen.triangle (focal.is_true (abst_inductive_case v_Vbc))) 
                   (v_Vdc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_base_case v_Vbc))))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (abst_base_case v_Vbc))) 
                      v_Vgc v_Vdc) 
                   (v_Vec:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_inductive_case v_Vbc))))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true (abst_inductive_case v_Vbc))) v_Vhc 
                      v_Vec) v_Vjc) abst_case_exclusive) v_Vic) v_Vcc) v_Vac).

def Linear_fixed_set__element :
  _p_A_T:cc.uT ->
  _p_A_element:(cc.eT _p_A_T) ->
  abst_T:cc.uT -> abst_base:((cc.eT _p_A_T) -> cc.eT abst_T) -> cc.eT abst_T
  :=
  _p_A_T:cc.uT =>
  _p_A_element:(cc.eT _p_A_T) =>
  abst_T:cc.uT =>
  abst_base:((cc.eT _p_A_T) -> cc.eT abst_T) => abst_base _p_A_element.

def Linear_fixed_set__equal :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_base_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_base_term:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_inductive_first_term:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  abst_inductive_second_term:((cc.eT abst_T) -> cc.eT abst_T) ->
  (cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t.

[y, x, abst_inductive_second_term, abst_inductive_first_term, abst_base_term, abst_base_case, abst_T, _p_B_equal, _p_A_equal, _p_B_T, _p_A_T]
  Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal abst_T 
    abst_base_case abst_base_term abst_inductive_first_term 
    abst_inductive_second_term x y
  -->
  dk_bool.ite basics.bool__t (abst_base_case x) 
    (dk_bool.ite basics.bool__t (abst_base_case y) 
       (_p_A_equal (abst_base_term x) (abst_base_term y)) dk_bool.false) 
    (dk_bool.ite basics.bool__t (abst_base_case y) dk_bool.false 
       (dk_bool.ite basics.bool__t 
          (_p_B_equal (abst_inductive_first_term x) 
             (abst_inductive_first_term y)) 
          ((_p_A_T:cc.uT =>
            _p_B_T:cc.uT =>
            _p_A_equal:
            ((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
            _p_B_equal:
            ((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
            abst_T:cc.uT =>
            abst_base_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
            abst_base_term:((cc.eT abst_T) -> cc.eT _p_A_T) =>
            abst_inductive_first_term:((cc.eT abst_T) -> cc.eT _p_B_T) =>
            abst_inductive_second_term:((cc.eT abst_T) -> cc.eT abst_T) =>
            x:(cc.eT abst_T) =>
            y:(cc.eT abst_T) =>
            dk_builtins.call_by_value abst_T basics.bool__t 
              (dk_builtins.call_by_value abst_T 
                 (cc.Arrow abst_T basics.bool__t) 
                 (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                    _p_B_equal abst_T abst_base_case abst_base_term 
                    abst_inductive_first_term abst_inductive_second_term) x) 
              y) _p_A_T _p_B_T _p_A_equal _p_B_equal abst_T abst_base_case 
             abst_base_term abst_inductive_first_term 
             abst_inductive_second_term (abst_inductive_second_term x) 
             (abst_inductive_second_term y)) dk_bool.false)).

def Linear_fixed_set__inductive_property :
  abst_T:cc.uT ->
  abst_base_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_inductive_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_inductive_second_term:((cc.eT abst_T) -> cc.eT abst_T) ->
  p:((cc.eT abst_T) -> dk_logic.Prop) -> dk_logic.Prop
  :=
  abst_T:cc.uT =>
  abst_base_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_inductive_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_inductive_second_term:((cc.eT abst_T) -> cc.eT abst_T) =>
  p:((cc.eT abst_T) -> dk_logic.Prop) =>
  dk_logic.imp 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.imp (dk_logic.ebP (abst_base_case x)) (p x))) 
    (dk_logic.imp 
       (dk_logic.forall abst_T 
          (x:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_inductive_case x)) 
             (dk_logic.imp (p (abst_inductive_second_term x)) (p x)))) 
       (dk_logic.forall abst_T (x:(cc.eT abst_T) => p x))).

def Linear_fixed_set__base_substitution_rule :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_A_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall _p_A_T 
                             (x:(cc.eT _p_A_T) =>
                              dk_logic.forall _p_A_T 
                                (y:(cc.eT _p_A_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (_p_A_equal x y)) 
                                   (dk_logic.ebP (_p_A_equal y x)))))) ->
  _p_A_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall _p_A_T 
                              (x:(cc.eT _p_A_T) =>
                               dk_logic.forall _p_A_T 
                                 (y:(cc.eT _p_A_T) =>
                                  dk_logic.forall _p_A_T 
                                    (z:(cc.eT _p_A_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_A_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (_p_A_equal y z)) 
                                          (dk_logic.ebP (_p_A_equal x z)))))))) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_base:((cc.eT _p_A_T) -> cc.eT abst_T) ->
  abst_base_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_base_term:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_inductive_first_term:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  abst_inductive_second_term:((cc.eT abst_T) -> cc.eT abst_T) ->
  abst_base_has_case:(dk_logic.eP 
                        (dk_logic.forall _p_A_T 
                           (x:(cc.eT _p_A_T) =>
                            dk_logic.ebP (abst_base_case (abst_base x))))) ->
  abst_base_reverse:(dk_logic.eP 
                       (dk_logic.forall _p_A_T 
                          (x:(cc.eT _p_A_T) =>
                           dk_logic.ebP 
                             (_p_A_equal (abst_base_term (abst_base x)) x)))) ->
  dk_logic.eP 
    (dk_logic.forall _p_A_T 
       (x_1:(cc.eT _p_A_T) =>
        dk_logic.forall _p_A_T 
          (x_2:(cc.eT _p_A_T) =>
           dk_logic.imp (dk_logic.ebP (_p_A_equal x_1 x_2)) 
             (dk_logic.ebP 
                (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                   abst_T abst_base_case abst_base_term 
                   abst_inductive_first_term abst_inductive_second_term 
                   (abst_base x_1) (abst_base x_2))))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_A_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_A_T 
           (y:(cc.eT _p_A_T) =>
            dk_logic.imp (dk_logic.ebP (_p_A_equal x y)) 
              (dk_logic.ebP (_p_A_equal y x)))))) =>
  _p_A_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_A_T 
           (y:(cc.eT _p_A_T) =>
            dk_logic.forall _p_A_T 
              (z:(cc.eT _p_A_T) =>
               dk_logic.imp (dk_logic.ebP (_p_A_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_A_equal y z)) 
                    (dk_logic.ebP (_p_A_equal x z)))))))) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_base:((cc.eT _p_A_T) -> cc.eT abst_T) =>
  abst_base_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_base_term:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_inductive_first_term:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  abst_inductive_second_term:((cc.eT abst_T) -> cc.eT abst_T) =>
  abst_base_has_case:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) => dk_logic.ebP (abst_base_case (abst_base x))))) =>
  abst_base_reverse:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.ebP (_p_A_equal (abst_base_term (abst_base x)) x)))) =>
  (__B_1_LEMMA:
   (x_1:(cc.eT _p_A_T) ->
    x_2:(cc.eT _p_A_T) ->
    H:(dk_logic.eP (dk_logic.ebP (_p_A_equal x_1 x_2))) ->
    dk_logic.eP 
      (dk_logic.ebP 
         (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal abst_T 
            abst_base_case abst_base_term abst_inductive_first_term 
            abst_inductive_second_term (abst_base x_1) (abst_base x_2)))) =>
   zen.nnpp 
     (zen.forall _p_A_T 
        (v_Vzb:(zen.term _p_A_T) =>
         zen.forall _p_A_T 
           (v_Vac:(zen.term _p_A_T) =>
            zen.imp (zen.triangle (focal.is_true (_p_A_equal v_Vzb v_Vac))) 
              (zen.triangle 
                 (focal.is_true 
                    (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                       _p_B_equal abst_T abst_base_case abst_base_term 
                       abst_inductive_first_term abst_inductive_second_term 
                       (abst_base v_Vzb) (abst_base v_Vac))))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall _p_A_T 
               (v_Vzb:(zen.term _p_A_T) =>
                zen.forall _p_A_T 
                  (v_Vac:(zen.term _p_A_T) =>
                   zen.imp 
                     (zen.triangle (focal.is_true (_p_A_equal v_Vzb v_Vac))) 
                     (zen.triangle 
                        (focal.is_true 
                           (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                              _p_B_equal abst_T abst_base_case 
                              abst_base_term abst_inductive_first_term 
                              abst_inductive_second_term (abst_base v_Vzb) 
                              (abst_base v_Vac))))))))) =>
      zen.Raxiom 
        (zen.forall _p_A_T 
           (v_Vzb:(zen.term _p_A_T) =>
            zen.forall _p_A_T 
              (v_Vac:(zen.term _p_A_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (_p_A_equal v_Vzb v_Vac))) 
                 (zen.triangle 
                    (focal.is_true 
                       (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                          _p_B_equal abst_T abst_base_case abst_base_term 
                          abst_inductive_first_term 
                          abst_inductive_second_term (abst_base v_Vzb) 
                          (abst_base v_Vac))))))) __B_1_LEMMA v_Vbc)) 
    (x_1:(cc.eT _p_A_T) =>
     x_2:(cc.eT _p_A_T) =>
     H:(dk_logic.eP (dk_logic.ebP (_p_A_equal x_1 x_2))) =>
     (__B_1_1_LEMMA:
      (dk_logic.eP (dk_logic.ebP (abst_base_case (abst_base x_1)))) =>
      (__B_1_2_LEMMA:
       (dk_logic.eP (dk_logic.ebP (abst_base_case (abst_base x_2)))) =>
       (__B_1_3_LEMMA:
        (dk_logic.eP 
           (dk_logic.ebP (_p_A_equal (abst_base_term (abst_base x_1)) x_1))) =>
        (__B_1_4_LEMMA:
         (dk_logic.eP 
            (dk_logic.ebP (_p_A_equal (abst_base_term (abst_base x_2)) x_2))) =>
         (__B_1_5_LEMMA:
          (dk_logic.eP 
             (dk_logic.ebP 
                (_p_A_equal (abst_base_term (abst_base x_1)) 
                   (abst_base_term (abst_base x_2))))) =>
          zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                     _p_B_equal abst_T abst_base_case abst_base_term 
                     abst_inductive_first_term abst_inductive_second_term 
                     (abst_base x_1) (abst_base x_2)))) 
            (v_Vzb:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (dk_bool.ite basics.bool__t 
                            (abst_base_case (abst_base x_1)) 
                            (dk_bool.ite basics.bool__t 
                               (abst_base_case (abst_base x_2)) 
                               (_p_A_equal (abst_base_term (abst_base x_1)) 
                                  (abst_base_term (abst_base x_2))) 
                               basics.false) 
                            (dk_bool.ite basics.bool__t 
                               (abst_base_case (abst_base x_2)) basics.false 
                               (dk_bool.ite basics.bool__t 
                                  (_p_B_equal 
                                     (abst_inductive_first_term 
                                        (abst_base x_1)) 
                                     (abst_inductive_first_term 
                                        (abst_base x_2))) 
                                  (dk_builtins.call_by_value abst_T 
                                     basics.bool__t 
                                     (dk_builtins.call_by_value abst_T 
                                        (zen.arrow abst_T basics.bool__t) 
                                        (Linear_fixed_set__equal _p_A_T 
                                           _p_B_T _p_A_equal _p_B_equal 
                                           abst_T abst_base_case 
                                           abst_base_term 
                                           abst_inductive_first_term 
                                           abst_inductive_second_term) 
                                        (abst_inductive_second_term 
                                           (abst_base x_1))) 
                                     (abst_inductive_second_term 
                                        (abst_base x_2))) basics.false))))))) =>
             focal.zenon_focal_ite_bool_n (abst_base_case (abst_base x_1)) 
               (dk_bool.ite basics.bool__t (abst_base_case (abst_base x_2)) 
                  (_p_A_equal (abst_base_term (abst_base x_1)) 
                     (abst_base_term (abst_base x_2))) basics.false) 
               (dk_bool.ite basics.bool__t (abst_base_case (abst_base x_2)) 
                  basics.false 
                  (dk_bool.ite basics.bool__t 
                     (_p_B_equal (abst_inductive_first_term (abst_base x_1)) 
                        (abst_inductive_first_term (abst_base x_2))) 
                     (dk_builtins.call_by_value abst_T basics.bool__t 
                        (dk_builtins.call_by_value abst_T 
                           (zen.arrow abst_T basics.bool__t) 
                           (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                              _p_B_equal abst_T abst_base_case 
                              abst_base_term abst_inductive_first_term 
                              abst_inductive_second_term) 
                           (abst_inductive_second_term (abst_base x_1))) 
                        (abst_inductive_second_term (abst_base x_2))) 
                     basics.false)) 
               (__B_1_1_LEMMA0:
                (zen.proof 
                   (zen.triangle 
                      (focal.is_true (abst_base_case (abst_base x_1))))) =>
                v_Vac:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (dk_bool.ite basics.bool__t 
                               (abst_base_case (abst_base x_2)) 
                               (_p_A_equal (abst_base_term (abst_base x_1)) 
                                  (abst_base_term (abst_base x_2))) 
                               basics.false))))) =>
                focal.zenon_focal_ite_bool_n 
                  (abst_base_case (abst_base x_2)) 
                  (_p_A_equal (abst_base_term (abst_base x_1)) 
                     (abst_base_term (abst_base x_2))) basics.false 
                  (__B_1_2_LEMMA0:
                   (zen.proof 
                      (zen.triangle 
                         (focal.is_true (abst_base_case (abst_base x_2))))) =>
                   v_Vbc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal (abst_base_term (abst_base x_1)) 
                                  (abst_base_term (abst_base x_2))))))) =>
                   zen.Raxiom 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_A_equal (abst_base_term (abst_base x_1)) 
                              (abst_base_term (abst_base x_2))))) 
                     __B_1_5_LEMMA v_Vbc) 
                  (v_Vcc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true (abst_base_case (abst_base x_2)))))) =>
                   v_Vdc:(zen.proof (zen.not zen.False)) =>
                   zen.Raxiom 
                     (zen.triangle 
                        (focal.is_true (abst_base_case (abst_base x_2)))) 
                     __B_1_2_LEMMA v_Vcc) v_Vac) 
               (v_Vec:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true (abst_base_case (abst_base x_1)))))) =>
                v_Vfc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (dk_bool.ite basics.bool__t 
                               (abst_base_case (abst_base x_2)) basics.false 
                               (dk_bool.ite basics.bool__t 
                                  (_p_B_equal 
                                     (abst_inductive_first_term 
                                        (abst_base x_1)) 
                                     (abst_inductive_first_term 
                                        (abst_base x_2))) 
                                  (dk_builtins.call_by_value abst_T 
                                     basics.bool__t 
                                     (dk_builtins.call_by_value abst_T 
                                        (zen.arrow abst_T basics.bool__t) 
                                        (Linear_fixed_set__equal _p_A_T 
                                           _p_B_T _p_A_equal _p_B_equal 
                                           abst_T abst_base_case 
                                           abst_base_term 
                                           abst_inductive_first_term 
                                           abst_inductive_second_term) 
                                        (abst_inductive_second_term 
                                           (abst_base x_1))) 
                                     (abst_inductive_second_term 
                                        (abst_base x_2))) basics.false)))))) =>
                zen.Raxiom 
                  (zen.triangle 
                     (focal.is_true (abst_base_case (abst_base x_1)))) 
                  __B_1_1_LEMMA v_Vec) v_Vzb)) 
           (zen.nnpp 
              (zen.triangle 
                 (focal.is_true 
                    (_p_A_equal (abst_base_term (abst_base x_1)) 
                       (abst_base_term (abst_base x_2))))) 
              (v_Vvc:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_A_equal (abst_base_term (abst_base x_1)) 
                              (abst_base_term (abst_base x_2))))))) =>
               zen.Rcut 
                 (zen.and 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal _p_A_T (abst_base_term (abst_base x_1)) 
                             (abst_base_term (abst_base x_1))))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_base_term (abst_base x_1)) 
                                (abst_base_term (abst_base x_1))))))) 
                 (v_Vwc:
                  (zen.proof 
                     (zen.and 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal _p_A_T 
                                 (abst_base_term (abst_base x_1)) 
                                 (abst_base_term (abst_base x_1))))) 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_A_equal 
                                    (abst_base_term (abst_base x_1)) 
                                    (abst_base_term (abst_base x_1)))))))) =>
                  zen.Rand 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal _p_A_T (abst_base_term (abst_base x_1)) 
                             (abst_base_term (abst_base x_1))))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_base_term (abst_base x_1)) 
                                (abst_base_term (abst_base x_1)))))) 
                    (v_Vxc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal _p_A_T 
                                 (abst_base_term (abst_base x_1)) 
                                 (abst_base_term (abst_base x_1)))))) =>
                     v_Vyc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_A_equal 
                                    (abst_base_term (abst_base x_1)) 
                                    (abst_base_term (abst_base x_1))))))) =>
                     zen.Rnoteq _p_A_T (abst_base_term (abst_base x_1)) v_Vxc) 
                    v_Vwc) 
                 (v_Vzc:
                  (zen.proof 
                     (zen.not 
                        (zen.and 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal _p_A_T 
                                    (abst_base_term (abst_base x_1)) 
                                    (abst_base_term (abst_base x_1))))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal 
                                       (abst_base_term (abst_base x_1)) 
                                       (abst_base_term (abst_base x_1))))))))) =>
                  zen.Rcut 
                    (zen.triangle 
                       (zen.equal _p_A_T x_1 (abst_base_term (abst_base x_2)))) 
                    (v_Vad:
                     (zen.proof 
                        (zen.triangle 
                           (zen.equal _p_A_T x_1 
                              (abst_base_term (abst_base x_2))))) =>
                     zen.Rsubst basics.bool__t 
                       (v_Vbd:(zen.term basics.bool__t) =>
                        zen.triangle (focal.is_true v_Vbd)) 
                       (_p_A_equal (abst_base_term (abst_base x_1)) x_1) 
                       (_p_A_equal (abst_base_term (abst_base x_1)) 
                          (abst_base_term (abst_base x_2))) 
                       (v_Vcd:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (_p_A_equal 
                                       (abst_base_term (abst_base x_1)) x_1) 
                                    (_p_A_equal 
                                       (abst_base_term (abst_base x_1)) 
                                       (abst_base_term (abst_base x_2))))))) =>
                        zen.Rsubst _p_A_T 
                          (v_Vdd:(zen.term _p_A_T) =>
                           zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (_p_A_equal v_Vdd x_1) 
                                   (_p_A_equal 
                                      (abst_base_term (abst_base x_1)) 
                                      (abst_base_term (abst_base x_2)))))) 
                          (abst_base_term (abst_base x_1)) 
                          (abst_base_term (abst_base x_1)) 
                          (v_Vxc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal _p_A_T 
                                       (abst_base_term (abst_base x_1)) 
                                       (abst_base_term (abst_base x_1)))))) =>
                           zen.Rnotand 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal _p_A_T 
                                      (abst_base_term (abst_base x_1)) 
                                      (abst_base_term (abst_base x_1))))) 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal 
                                         (abst_base_term (abst_base x_1)) 
                                         (abst_base_term (abst_base x_1)))))) 
                             (v_Ved:
                              (zen.proof 
                                 (zen.not 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal _p_A_T 
                                             (abst_base_term (abst_base x_1)) 
                                             (abst_base_term (abst_base x_1))))))) =>
                              zen.Rnotnot 
                                (zen.triangle 
                                   (zen.equal _p_A_T 
                                      (abst_base_term (abst_base x_1)) 
                                      (abst_base_term (abst_base x_1)))) 
                                (v_Vfd:
                                 (zen.proof 
                                    (zen.triangle 
                                       (zen.equal _p_A_T 
                                          (abst_base_term (abst_base x_1)) 
                                          (abst_base_term (abst_base x_1))))) =>
                                 zen.Rcut 
                                   (zen.triangle 
                                      (zen.equal _p_A_T 
                                         (abst_base_term (abst_base x_1)) 
                                         (abst_base_term (abst_base x_1)))) 
                                   (v_Vfd0:
                                    (zen.proof 
                                       (zen.triangle 
                                          (zen.equal _p_A_T 
                                             (abst_base_term (abst_base x_1)) 
                                             (abst_base_term (abst_base x_1))))) =>
                                    zen.Rsubst _p_A_T 
                                      (v_Vgd:(zen.term _p_A_T) =>
                                       zen.triangle 
                                         (zen.equal _p_A_T v_Vgd 
                                            (abst_base_term (abst_base x_1)))) 
                                      (abst_base_term (abst_base x_1)) 
                                      (abst_base_term (abst_base x_1)) 
                                      (v_Vxc0:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal _p_A_T 
                                                   (abst_base_term 
                                                      (abst_base x_1)) 
                                                   (abst_base_term 
                                                      (abst_base x_1)))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (zen.equal _p_A_T 
                                               (abst_base_term 
                                                  (abst_base x_1)) 
                                               (abst_base_term 
                                                  (abst_base x_1)))) v_Vfd0 
                                         v_Vxc0) 
                                      (v_Vfd0:
                                       (zen.proof 
                                          (zen.triangle 
                                             (zen.equal _p_A_T 
                                                (abst_base_term 
                                                   (abst_base x_1)) 
                                                (abst_base_term 
                                                   (abst_base x_1))))) =>
                                       zen.Rsubst _p_A_T 
                                         (v_Vhd:(zen.term _p_A_T) =>
                                          zen.triangle 
                                            (zen.equal _p_A_T 
                                               (abst_base_term 
                                                  (abst_base x_1)) v_Vhd)) 
                                         (abst_base_term (abst_base x_1)) 
                                         (abst_base_term (abst_base x_1)) 
                                         (v_Vxc0:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal _p_A_T 
                                                      (abst_base_term 
                                                         (abst_base x_1)) 
                                                      (abst_base_term 
                                                         (abst_base x_1)))))) =>
                                          zen.Rnoteq _p_A_T 
                                            (abst_base_term (abst_base x_1)) 
                                            v_Vxc0) 
                                         (v_Vfd0:
                                          (zen.proof 
                                             (zen.triangle 
                                                (zen.equal _p_A_T 
                                                   (abst_base_term 
                                                      (abst_base x_1)) 
                                                   (abst_base_term 
                                                      (abst_base x_1))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (zen.equal _p_A_T 
                                                  (abst_base_term 
                                                     (abst_base x_1)) 
                                                  (abst_base_term 
                                                     (abst_base x_1)))) 
                                            v_Vfd0 v_Vxc) v_Vfd0) v_Vfd0) 
                                   (v_Vxc0:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal _p_A_T 
                                                (abst_base_term 
                                                   (abst_base x_1)) 
                                                (abst_base_term 
                                                   (abst_base x_1)))))) =>
                                    zen.Rnoteq _p_A_T 
                                      (abst_base_term (abst_base x_1)) v_Vxc0)) 
                                v_Ved) 
                             (v_Vid:
                              (zen.proof 
                                 (zen.not 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_A_equal 
                                                (abst_base_term 
                                                   (abst_base x_1)) 
                                                (abst_base_term 
                                                   (abst_base x_1)))))))) =>
                              zen.Rnotnot 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal 
                                         (abst_base_term (abst_base x_1)) 
                                         (abst_base_term (abst_base x_1))))) 
                                (v_Vjd:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal 
                                             (abst_base_term (abst_base x_1)) 
                                             (abst_base_term (abst_base x_1)))))) =>
                                 zen.Rall _p_A_T 
                                   (v_Vkd:(zen.term _p_A_T) =>
                                    zen.forall _p_A_T 
                                      (v_Vld:(zen.term _p_A_T) =>
                                       zen.forall _p_A_T 
                                         (v_Vmd:(zen.term _p_A_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal v_Vkd v_Vld))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal v_Vld v_Vmd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal v_Vkd v_Vmd))))))) 
                                   (abst_base_term (abst_base x_1)) 
                                   (v_Vnd:
                                    (zen.proof 
                                       (zen.forall _p_A_T 
                                          (v_Vld:(zen.term _p_A_T) =>
                                           zen.forall _p_A_T 
                                             (v_Vmd:(zen.term _p_A_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_A_equal 
                                                         (abst_base_term 
                                                            (abst_base x_1)) 
                                                         v_Vld))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal v_Vld 
                                                            v_Vmd))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal 
                                                            (abst_base_term 
                                                               (abst_base x_1)) 
                                                            v_Vmd)))))))) =>
                                    zen.Rall _p_A_T 
                                      (v_Vld:(zen.term _p_A_T) =>
                                       zen.forall _p_A_T 
                                         (v_Vmd:(zen.term _p_A_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal 
                                                     (abst_base_term 
                                                        (abst_base x_1)) 
                                                     v_Vld))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal v_Vld v_Vmd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (abst_base_term 
                                                           (abst_base x_1)) 
                                                        v_Vmd)))))) 
                                      (abst_base_term (abst_base x_1)) 
                                      (v_Vod:
                                       (zen.proof 
                                          (zen.forall _p_A_T 
                                             (v_Vmd:(zen.term _p_A_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_A_equal 
                                                         (abst_base_term 
                                                            (abst_base x_1)) 
                                                         (abst_base_term 
                                                            (abst_base x_1))))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal 
                                                            (abst_base_term 
                                                               (abst_base x_1)) 
                                                            v_Vmd))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal 
                                                            (abst_base_term 
                                                               (abst_base x_1)) 
                                                            v_Vmd))))))) =>
                                       zen.Rall _p_A_T 
                                         (v_Vmd:(zen.term _p_A_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal 
                                                     (abst_base_term 
                                                        (abst_base x_1)) 
                                                     (abst_base_term 
                                                        (abst_base x_1))))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (abst_base_term 
                                                           (abst_base x_1)) 
                                                        v_Vmd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (abst_base_term 
                                                           (abst_base x_1)) 
                                                        v_Vmd))))) x_1 
                                         (v_Vpd:
                                          (zen.proof 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_A_equal 
                                                         (abst_base_term 
                                                            (abst_base x_1)) 
                                                         (abst_base_term 
                                                            (abst_base x_1))))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal 
                                                            (abst_base_term 
                                                               (abst_base x_1)) 
                                                            x_1))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal 
                                                            (abst_base_term 
                                                               (abst_base x_1)) 
                                                            x_1)))))) =>
                                          zen.Rimply 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal 
                                                     (abst_base_term 
                                                        (abst_base x_1)) 
                                                     (abst_base_term 
                                                        (abst_base x_1))))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (abst_base_term 
                                                           (abst_base x_1)) 
                                                        x_1))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (abst_base_term 
                                                           (abst_base x_1)) 
                                                        x_1)))) 
                                            (v_Vyc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal 
                                                            (abst_base_term 
                                                               (abst_base x_1)) 
                                                            (abst_base_term 
                                                               (abst_base x_1))))))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (abst_base_term 
                                                           (abst_base x_1)) 
                                                        (abst_base_term 
                                                           (abst_base x_1))))) 
                                               v_Vjd v_Vyc) 
                                            (v_Vqd:
                                             (zen.proof 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal 
                                                            (abst_base_term 
                                                               (abst_base x_1)) 
                                                            x_1))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal 
                                                            (abst_base_term 
                                                               (abst_base x_1)) 
                                                            x_1))))) =>
                                             zen.Rimply 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (abst_base_term 
                                                           (abst_base x_1)) 
                                                        x_1))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (abst_base_term 
                                                           (abst_base x_1)) 
                                                        x_1))) 
                                               (v_Vrd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_A_equal 
                                                               (abst_base_term 
                                                                  (abst_base 
                                                                    x_1)) x_1))))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal 
                                                           (abst_base_term 
                                                              (abst_base x_1)) 
                                                           x_1))) 
                                                  __B_1_3_LEMMA v_Vrd) 
                                               (__B_1_3_LEMMA0:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal 
                                                            (abst_base_term 
                                                               (abst_base x_1)) 
                                                            x_1)))) =>
                                                zen.Rsubst basics.bool__t 
                                                  (v_Vbd:
                                                   (zen.term basics.bool__t) =>
                                                   zen.triangle 
                                                     (focal.is_true v_Vbd)) 
                                                  (_p_A_equal 
                                                     (abst_base_term 
                                                        (abst_base x_1)) x_1) 
                                                  (_p_A_equal 
                                                     (abst_base_term 
                                                        (abst_base x_1)) 
                                                     (abst_base_term 
                                                        (abst_base x_2))) 
                                                  (v_Vcd0:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (_p_A_equal 
                                                                  (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) x_1) 
                                                               (_p_A_equal 
                                                                  (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                  (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))))) =>
                                                   zen.Rsubst _p_A_T 
                                                     (v_Vdd:
                                                      (zen.term _p_A_T) =>
                                                      zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_A_equal 
                                                                 v_Vdd x_1) 
                                                              (_p_A_equal 
                                                                 (abst_base_term 
                                                                    (
                                                                    abst_base 
                                                                    x_1)) 
                                                                 (abst_base_term 
                                                                    (
                                                                    abst_base 
                                                                    x_2)))))) 
                                                     (abst_base_term 
                                                        (abst_base x_1)) 
                                                     (abst_base_term 
                                                        (abst_base x_1)) 
                                                     (v_Vxc0:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  _p_A_T 
                                                                  (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                  (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)))))) =>
                                                      zen.Rnoteq _p_A_T 
                                                        (abst_base_term 
                                                           (abst_base x_1)) 
                                                        v_Vxc0) 
                                                     (v_Vcd0:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) x_1) 
                                                                  (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))))) =>
                                                      zen.Rsubst _p_A_T 
                                                        (v_Vsd:
                                                         (zen.term _p_A_T) =>
                                                         zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    v_Vsd) 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    (
                                                                    abst_base_term 
                                                                    (abst_base 
                                                                    x_2)))))) 
                                                        x_1 
                                                        (abst_base_term 
                                                           (abst_base x_2)) 
                                                        (v_Vtd:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    _p_A_T 
                                                                    x_1 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)))))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_A_T x_1 
                                                                 (abst_base_term 
                                                                    (
                                                                    abst_base 
                                                                    x_2)))) 
                                                           v_Vad v_Vtd) 
                                                        (v_Vud:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))) 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))))) =>
                                                         zen.Rnoteq 
                                                           basics.bool__t 
                                                           (_p_A_equal 
                                                              (abst_base_term 
                                                                 (abst_base 
                                                                    x_1)) 
                                                              (abst_base_term 
                                                                 (abst_base 
                                                                    x_2))) 
                                                           v_Vud) v_Vcd0) 
                                                     v_Vcd0) 
                                                  (v_Vvd:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_A_equal 
                                                               (abst_base_term 
                                                                  (abst_base 
                                                                    x_1)) 
                                                               (abst_base_term 
                                                                  (abst_base 
                                                                    x_2)))))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (abst_base_term 
                                                                 (abst_base 
                                                                    x_1)) 
                                                              (abst_base_term 
                                                                 (abst_base 
                                                                    x_2))))) 
                                                     v_Vvd v_Vvc) 
                                                  __B_1_3_LEMMA0) v_Vqd) 
                                            v_Vpd) v_Vod) v_Vnd) 
                                   _p_A_equal_transitive) v_Vid) v_Vzc) 
                          (v_Vcd0:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal basics.bool__t 
                                       (_p_A_equal 
                                          (abst_base_term (abst_base x_1)) 
                                          x_1) 
                                       (_p_A_equal 
                                          (abst_base_term (abst_base x_1)) 
                                          (abst_base_term (abst_base x_2))))))) =>
                           zen.Rsubst _p_A_T 
                             (v_Vsd:(zen.term _p_A_T) =>
                              zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (_p_A_equal 
                                         (abst_base_term (abst_base x_1)) 
                                         v_Vsd) 
                                      (_p_A_equal 
                                         (abst_base_term (abst_base x_1)) 
                                         (abst_base_term (abst_base x_2)))))) 
                             x_1 (abst_base_term (abst_base x_2)) 
                             (v_Vtd:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal _p_A_T x_1 
                                          (abst_base_term (abst_base x_2)))))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (zen.equal _p_A_T x_1 
                                      (abst_base_term (abst_base x_2)))) 
                                v_Vad v_Vtd) 
                             (v_Vud:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal basics.bool__t 
                                          (_p_A_equal 
                                             (abst_base_term (abst_base x_1)) 
                                             (abst_base_term (abst_base x_2))) 
                                          (_p_A_equal 
                                             (abst_base_term (abst_base x_1)) 
                                             (abst_base_term (abst_base x_2))))))) =>
                              zen.Rnoteq basics.bool__t 
                                (_p_A_equal (abst_base_term (abst_base x_1)) 
                                   (abst_base_term (abst_base x_2))) v_Vud) 
                             v_Vcd0) v_Vcd) 
                       (v_Vvd:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_A_equal 
                                    (abst_base_term (abst_base x_1)) 
                                    (abst_base_term (abst_base x_2)))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal (abst_base_term (abst_base x_1)) 
                                   (abst_base_term (abst_base x_2))))) v_Vvd 
                          v_Vvc) __B_1_3_LEMMA) 
                    (v_Vtd:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal _p_A_T x_1 
                                 (abst_base_term (abst_base x_2)))))) =>
                     zen.Rcut 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal x_1 (abst_base_term (abst_base x_2))))) 
                       (v_Vwd:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_A_equal x_1 
                                    (abst_base_term (abst_base x_2)))))) =>
                        zen.Rall _p_A_T 
                          (v_Vkd:(zen.term _p_A_T) =>
                           zen.forall _p_A_T 
                             (v_Vld:(zen.term _p_A_T) =>
                              zen.forall _p_A_T 
                                (v_Vmd:(zen.term _p_A_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (_p_A_equal v_Vkd v_Vld))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal v_Vld v_Vmd))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal v_Vkd v_Vmd))))))) 
                          (abst_base_term (abst_base x_1)) 
                          (v_Vnd:
                           (zen.proof 
                              (zen.forall _p_A_T 
                                 (v_Vld:(zen.term _p_A_T) =>
                                  zen.forall _p_A_T 
                                    (v_Vmd:(zen.term _p_A_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_A_equal 
                                                (abst_base_term 
                                                   (abst_base x_1)) v_Vld))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_A_equal v_Vld v_Vmd))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_A_equal 
                                                   (abst_base_term 
                                                      (abst_base x_1)) v_Vmd)))))))) =>
                           zen.Rall _p_A_T 
                             (v_Vld:(zen.term _p_A_T) =>
                              zen.forall _p_A_T 
                                (v_Vmd:(zen.term _p_A_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal 
                                            (abst_base_term (abst_base x_1)) 
                                            v_Vld))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal v_Vld v_Vmd))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal 
                                               (abst_base_term 
                                                  (abst_base x_1)) v_Vmd)))))) 
                             x_1 
                             (v_Vxd:
                              (zen.proof 
                                 (zen.forall _p_A_T 
                                    (v_Vmd:(zen.term _p_A_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_A_equal 
                                                (abst_base_term 
                                                   (abst_base x_1)) x_1))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_A_equal x_1 v_Vmd))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_A_equal 
                                                   (abst_base_term 
                                                      (abst_base x_1)) v_Vmd))))))) =>
                              zen.Rall _p_A_T 
                                (v_Vmd:(zen.term _p_A_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal 
                                            (abst_base_term (abst_base x_1)) 
                                            x_1))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal x_1 v_Vmd))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal 
                                               (abst_base_term 
                                                  (abst_base x_1)) v_Vmd))))) 
                                (abst_base_term (abst_base x_2)) 
                                (v_Vyd:
                                 (zen.proof 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_A_equal 
                                                (abst_base_term 
                                                   (abst_base x_1)) x_1))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_A_equal x_1 
                                                   (abst_base_term 
                                                      (abst_base x_2))))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_A_equal 
                                                   (abst_base_term 
                                                      (abst_base x_1)) 
                                                   (abst_base_term 
                                                      (abst_base x_2)))))))) =>
                                 zen.Rimply 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal 
                                            (abst_base_term (abst_base x_1)) 
                                            x_1))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal x_1 
                                               (abst_base_term 
                                                  (abst_base x_2))))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal 
                                               (abst_base_term 
                                                  (abst_base x_1)) 
                                               (abst_base_term 
                                                  (abst_base x_2)))))) 
                                   (v_Vrd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_A_equal 
                                                   (abst_base_term 
                                                      (abst_base x_1)) x_1))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal 
                                               (abst_base_term 
                                                  (abst_base x_1)) x_1))) 
                                      __B_1_3_LEMMA v_Vrd) 
                                   (v_Vzd:
                                    (zen.proof 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_A_equal x_1 
                                                   (abst_base_term 
                                                      (abst_base x_2))))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_A_equal 
                                                   (abst_base_term 
                                                      (abst_base x_1)) 
                                                   (abst_base_term 
                                                      (abst_base x_2))))))) =>
                                    zen.Rimply 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal x_1 
                                               (abst_base_term 
                                                  (abst_base x_2))))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal 
                                               (abst_base_term 
                                                  (abst_base x_1)) 
                                               (abst_base_term 
                                                  (abst_base x_2))))) 
                                      (v_Vae:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal x_1 
                                                      (abst_base_term 
                                                         (abst_base x_2))))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_A_equal x_1 
                                                  (abst_base_term 
                                                     (abst_base x_2))))) 
                                         v_Vwd v_Vae) 
                                      (v_Vvd:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_A_equal 
                                                   (abst_base_term 
                                                      (abst_base x_1)) 
                                                   (abst_base_term 
                                                      (abst_base x_2)))))) =>
                                       zen.Rsubst basics.bool__t 
                                         (v_Vbd:(zen.term basics.bool__t) =>
                                          zen.triangle (focal.is_true v_Vbd)) 
                                         (_p_A_equal 
                                            (abst_base_term (abst_base x_1)) 
                                            (abst_base_term (abst_base x_2))) 
                                         (_p_A_equal 
                                            (abst_base_term (abst_base x_1)) 
                                            (abst_base_term (abst_base x_2))) 
                                         (v_Vud:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (_p_A_equal 
                                                         (abst_base_term 
                                                            (abst_base x_1)) 
                                                         (abst_base_term 
                                                            (abst_base x_2))) 
                                                      (_p_A_equal 
                                                         (abst_base_term 
                                                            (abst_base x_1)) 
                                                         (abst_base_term 
                                                            (abst_base x_2))))))) =>
                                          zen.Rsubst _p_A_T 
                                            (v_Vbe:(zen.term _p_A_T) =>
                                             zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (_p_A_equal v_Vbe 
                                                        (abst_base_term 
                                                           (abst_base x_2))) 
                                                     (_p_A_equal 
                                                        (abst_base_term 
                                                           (abst_base x_1)) 
                                                        (abst_base_term 
                                                           (abst_base x_2)))))) 
                                            (abst_base_term (abst_base x_1)) 
                                            (abst_base_term (abst_base x_1)) 
                                            (v_Vxc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal _p_A_T 
                                                         (abst_base_term 
                                                            (abst_base x_1)) 
                                                         (abst_base_term 
                                                            (abst_base x_1)))))) =>
                                             zen.Rnotand 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_A_T 
                                                        (abst_base_term 
                                                           (abst_base x_1)) 
                                                        (abst_base_term 
                                                           (abst_base x_1))))) 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal 
                                                           (abst_base_term 
                                                              (abst_base x_1)) 
                                                           (abst_base_term 
                                                              (abst_base x_1)))))) 
                                               (v_Ved:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_A_T 
                                                               (abst_base_term 
                                                                  (abst_base 
                                                                    x_1)) 
                                                               (abst_base_term 
                                                                  (abst_base 
                                                                    x_1))))))) =>
                                                zen.Rnotnot 
                                                  (zen.triangle 
                                                     (zen.equal _p_A_T 
                                                        (abst_base_term 
                                                           (abst_base x_1)) 
                                                        (abst_base_term 
                                                           (abst_base x_1)))) 
                                                  (v_Vfd:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (zen.equal _p_A_T 
                                                            (abst_base_term 
                                                               (abst_base x_1)) 
                                                            (abst_base_term 
                                                               (abst_base x_1))))) =>
                                                   zen.Reqsym _p_A_T 
                                                     (abst_base_term 
                                                        (abst_base x_1)) 
                                                     (abst_base_term 
                                                        (abst_base x_1)) 
                                                     v_Vfd v_Vxc) v_Ved) 
                                               (v_Vid:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_A_equal 
                                                                  (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                  (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)))))))) =>
                                                zen.Rnotnot 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal 
                                                           (abst_base_term 
                                                              (abst_base x_1)) 
                                                           (abst_base_term 
                                                              (abst_base x_1))))) 
                                                  (v_Vjd:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_A_equal 
                                                               (abst_base_term 
                                                                  (abst_base 
                                                                    x_1)) 
                                                               (abst_base_term 
                                                                  (abst_base 
                                                                    x_1)))))) =>
                                                   zen.Rall _p_A_T 
                                                     (v_Vkd:
                                                      (zen.term _p_A_T) =>
                                                      zen.forall _p_A_T 
                                                        (v_Vld:
                                                         (zen.term _p_A_T) =>
                                                         zen.forall _p_A_T 
                                                           (v_Vmd:
                                                            (zen.term _p_A_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                     (abst_base_term 
                                                        (abst_base x_1)) 
                                                     (v_Vnd0:
                                                      (zen.proof 
                                                         (zen.forall _p_A_T 
                                                            (v_Vld:
                                                             (zen.term _p_A_T) =>
                                                             zen.forall 
                                                               _p_A_T 
                                                               (v_Vmd:
                                                                (zen.term 
                                                                   _p_A_T) =>
                                                                zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    v_Vld))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    v_Vmd)))))))) =>
                                                      zen.Rall _p_A_T 
                                                        (v_Vld:
                                                         (zen.term _p_A_T) =>
                                                         zen.forall _p_A_T 
                                                           (v_Vmd:
                                                            (zen.term _p_A_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    v_Vld))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    v_Vmd)))))) 
                                                        (abst_base_term 
                                                           (abst_base x_1)) 
                                                        (v_Vod:
                                                         (zen.proof 
                                                            (zen.forall 
                                                               _p_A_T 
                                                               (v_Vmd:
                                                                (zen.term 
                                                                   _p_A_T) =>
                                                                zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1))))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    v_Vmd))))))) =>
                                                         zen.Rall _p_A_T 
                                                           (v_Vmd:
                                                            (zen.term _p_A_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1))))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    v_Vmd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    v_Vmd))))) 
                                                           (abst_base_term 
                                                              (abst_base x_2)) 
                                                           (v_Vce:
                                                            (zen.proof 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1))))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)))))))) =>
                                                            zen.Rimply 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1))))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)))))) 
                                                              (v_Vyc:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1))))))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1))))) 
                                                                 v_Vjd v_Vyc) 
                                                              (v_Vde:
                                                               (zen.proof 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))))) =>
                                                               zen.Rimply 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))) 
                                                                 (v_Vvc0:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))) 
                                                                    v_Vvd 
                                                                    v_Vvc0) 
                                                                 (v_Vvd0:
                                                                  (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)))))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_1)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))) 
                                                                    v_Vvd0 
                                                                    v_Vvc) 
                                                                 v_Vde) v_Vce) 
                                                           v_Vod) v_Vnd0) 
                                                     _p_A_equal_transitive) 
                                                  v_Vid) v_Vzc) 
                                            (v_Vud0:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         basics.bool__t 
                                                         (_p_A_equal 
                                                            (abst_base_term 
                                                               (abst_base x_1)) 
                                                            (abst_base_term 
                                                               (abst_base x_2))) 
                                                         (_p_A_equal 
                                                            (abst_base_term 
                                                               (abst_base x_1)) 
                                                            (abst_base_term 
                                                               (abst_base x_2))))))) =>
                                             zen.Rsubst _p_A_T 
                                               (v_Vsd:(zen.term _p_A_T) =>
                                                zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (_p_A_equal 
                                                           (abst_base_term 
                                                              (abst_base x_1)) 
                                                           v_Vsd) 
                                                        (_p_A_equal 
                                                           (abst_base_term 
                                                              (abst_base x_1)) 
                                                           (abst_base_term 
                                                              (abst_base x_2)))))) 
                                               (abst_base_term 
                                                  (abst_base x_2)) 
                                               (abst_base_term 
                                                  (abst_base x_2)) 
                                               (v_Vee:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal _p_A_T 
                                                            (abst_base_term 
                                                               (abst_base x_2)) 
                                                            (abst_base_term 
                                                               (abst_base x_2)))))) =>
                                                zen.Rnoteq _p_A_T 
                                                  (abst_base_term 
                                                     (abst_base x_2)) v_Vee) 
                                               (v_Vud0:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (_p_A_equal 
                                                               (abst_base_term 
                                                                  (abst_base 
                                                                    x_1)) 
                                                               (abst_base_term 
                                                                  (abst_base 
                                                                    x_2))) 
                                                            (_p_A_equal 
                                                               (abst_base_term 
                                                                  (abst_base 
                                                                    x_1)) 
                                                               (abst_base_term 
                                                                  (abst_base 
                                                                    x_2))))))) =>
                                                zen.Rnoteq basics.bool__t 
                                                  (_p_A_equal 
                                                     (abst_base_term 
                                                        (abst_base x_1)) 
                                                     (abst_base_term 
                                                        (abst_base x_2))) 
                                                  v_Vud0) v_Vud0) v_Vud) 
                                         (v_Vvd0:
                                          (zen.proof 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal 
                                                      (abst_base_term 
                                                         (abst_base x_1)) 
                                                      (abst_base_term 
                                                         (abst_base x_2)))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal 
                                                     (abst_base_term 
                                                        (abst_base x_1)) 
                                                     (abst_base_term 
                                                        (abst_base x_2))))) 
                                            v_Vvd0 v_Vvc) v_Vvd) v_Vzd) v_Vyd) 
                                v_Vxd) v_Vnd) _p_A_equal_transitive) 
                       (v_Vae:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal x_1 
                                       (abst_base_term (abst_base x_2))))))) =>
                        zen.Rall _p_A_T 
                          (v_Vkd:(zen.term _p_A_T) =>
                           zen.forall _p_A_T 
                             (v_Vld:(zen.term _p_A_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true (_p_A_equal v_Vkd v_Vld))) 
                                (zen.triangle 
                                   (focal.is_true (_p_A_equal v_Vld v_Vkd))))) 
                          (abst_base_term (abst_base x_2)) 
                          (v_Vfe:
                           (zen.proof 
                              (zen.forall _p_A_T 
                                 (v_Vld:(zen.term _p_A_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal 
                                             (abst_base_term (abst_base x_2)) 
                                             v_Vld))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal v_Vld 
                                             (abst_base_term (abst_base x_2)))))))) =>
                           zen.Rall _p_A_T 
                             (v_Vld:(zen.term _p_A_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal 
                                         (abst_base_term (abst_base x_2)) 
                                         v_Vld))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal v_Vld 
                                         (abst_base_term (abst_base x_2)))))) 
                             x_1 
                             (v_Vge:
                              (zen.proof 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal 
                                             (abst_base_term (abst_base x_2)) 
                                             x_1))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal x_1 
                                             (abst_base_term (abst_base x_2))))))) =>
                              zen.Rimply 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal 
                                         (abst_base_term (abst_base x_2)) x_1))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal x_1 
                                         (abst_base_term (abst_base x_2))))) 
                                (v_Vhe:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_A_equal 
                                                (abst_base_term 
                                                   (abst_base x_2)) x_1))))) =>
                                 zen.Rcut 
                                   (zen.and 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal _p_A_T 
                                               (abst_base_term 
                                                  (abst_base x_2)) 
                                               (abst_base_term 
                                                  (abst_base x_2))))) 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_A_equal 
                                                  (abst_base_term 
                                                     (abst_base x_2)) 
                                                  (abst_base_term 
                                                     (abst_base x_2))))))) 
                                   (v_Vie:
                                    (zen.proof 
                                       (zen.and 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal _p_A_T 
                                                   (abst_base_term 
                                                      (abst_base x_2)) 
                                                   (abst_base_term 
                                                      (abst_base x_2))))) 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal 
                                                      (abst_base_term 
                                                         (abst_base x_2)) 
                                                      (abst_base_term 
                                                         (abst_base x_2)))))))) =>
                                    zen.Rand 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal _p_A_T 
                                               (abst_base_term 
                                                  (abst_base x_2)) 
                                               (abst_base_term 
                                                  (abst_base x_2))))) 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_A_equal 
                                                  (abst_base_term 
                                                     (abst_base x_2)) 
                                                  (abst_base_term 
                                                     (abst_base x_2)))))) 
                                      (v_Vee:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal _p_A_T 
                                                   (abst_base_term 
                                                      (abst_base x_2)) 
                                                   (abst_base_term 
                                                      (abst_base x_2)))))) =>
                                       v_Vje:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal 
                                                      (abst_base_term 
                                                         (abst_base x_2)) 
                                                      (abst_base_term 
                                                         (abst_base x_2))))))) =>
                                       zen.Rnoteq _p_A_T 
                                         (abst_base_term (abst_base x_2)) 
                                         v_Vee) v_Vie) 
                                   (v_Vke:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.and 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal _p_A_T 
                                                      (abst_base_term 
                                                         (abst_base x_2)) 
                                                      (abst_base_term 
                                                         (abst_base x_2))))) 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_A_equal 
                                                         (abst_base_term 
                                                            (abst_base x_2)) 
                                                         (abst_base_term 
                                                            (abst_base x_2))))))))) =>
                                    zen.Rcut 
                                      (zen.triangle 
                                         (zen.equal _p_A_T x_2 x_1)) 
                                      (v_Vle:
                                       (zen.proof 
                                          (zen.triangle 
                                             (zen.equal _p_A_T x_2 x_1))) =>
                                       zen.Rsubst basics.bool__t 
                                         (v_Vbd:(zen.term basics.bool__t) =>
                                          zen.triangle (focal.is_true v_Vbd)) 
                                         (_p_A_equal 
                                            (abst_base_term (abst_base x_2)) 
                                            x_2) 
                                         (_p_A_equal 
                                            (abst_base_term (abst_base x_2)) 
                                            x_1) 
                                         (v_Vme:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (_p_A_equal 
                                                         (abst_base_term 
                                                            (abst_base x_2)) 
                                                         x_2) 
                                                      (_p_A_equal 
                                                         (abst_base_term 
                                                            (abst_base x_2)) 
                                                         x_1))))) =>
                                          zen.Rsubst _p_A_T 
                                            (v_Vne:(zen.term _p_A_T) =>
                                             zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (_p_A_equal v_Vne x_2) 
                                                     (_p_A_equal 
                                                        (abst_base_term 
                                                           (abst_base x_2)) 
                                                        x_1)))) 
                                            (abst_base_term (abst_base x_2)) 
                                            (abst_base_term (abst_base x_2)) 
                                            (v_Vee:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal _p_A_T 
                                                         (abst_base_term 
                                                            (abst_base x_2)) 
                                                         (abst_base_term 
                                                            (abst_base x_2)))))) =>
                                             zen.Rnotand 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_A_T 
                                                        (abst_base_term 
                                                           (abst_base x_2)) 
                                                        (abst_base_term 
                                                           (abst_base x_2))))) 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal 
                                                           (abst_base_term 
                                                              (abst_base x_2)) 
                                                           (abst_base_term 
                                                              (abst_base x_2)))))) 
                                               (v_Voe:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_A_T 
                                                               (abst_base_term 
                                                                  (abst_base 
                                                                    x_2)) 
                                                               (abst_base_term 
                                                                  (abst_base 
                                                                    x_2))))))) =>
                                                zen.Rnotnot 
                                                  (zen.triangle 
                                                     (zen.equal _p_A_T 
                                                        (abst_base_term 
                                                           (abst_base x_2)) 
                                                        (abst_base_term 
                                                           (abst_base x_2)))) 
                                                  (v_Vpe:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (zen.equal _p_A_T 
                                                            (abst_base_term 
                                                               (abst_base x_2)) 
                                                            (abst_base_term 
                                                               (abst_base x_2))))) =>
                                                   zen.Rcut 
                                                     (zen.triangle 
                                                        (zen.equal _p_A_T 
                                                           (abst_base_term 
                                                              (abst_base x_2)) 
                                                           (abst_base_term 
                                                              (abst_base x_2)))) 
                                                     (v_Vpe0:
                                                      (zen.proof 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_A_T 
                                                               (abst_base_term 
                                                                  (abst_base 
                                                                    x_2)) 
                                                               (abst_base_term 
                                                                  (abst_base 
                                                                    x_2))))) =>
                                                      zen.Rsubst _p_A_T 
                                                        (v_Vqe:
                                                         (zen.term _p_A_T) =>
                                                         zen.triangle 
                                                           (zen.equal _p_A_T 
                                                              v_Vqe 
                                                              (abst_base_term 
                                                                 (abst_base 
                                                                    x_2)))) 
                                                        (abst_base_term 
                                                           (abst_base x_2)) 
                                                        (abst_base_term 
                                                           (abst_base x_2)) 
                                                        (v_Vee0:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)))))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_A_T 
                                                                 (abst_base_term 
                                                                    (
                                                                    abst_base 
                                                                    x_2)) 
                                                                 (abst_base_term 
                                                                    (
                                                                    abst_base 
                                                                    x_2)))) 
                                                           v_Vpe0 v_Vee0) 
                                                        (v_Vpe0:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  _p_A_T 
                                                                  (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                  (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))) =>
                                                         zen.Rsubst _p_A_T 
                                                           (v_Vre:
                                                            (zen.term _p_A_T) =>
                                                            zen.triangle 
                                                              (zen.equal 
                                                                 _p_A_T 
                                                                 (abst_base_term 
                                                                    (
                                                                    abst_base 
                                                                    x_2)) 
                                                                 v_Vre)) 
                                                           (abst_base_term 
                                                              (abst_base x_2)) 
                                                           (abst_base_term 
                                                              (abst_base x_2)) 
                                                           (v_Vee0:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)))))) =>
                                                            zen.Rnoteq 
                                                              _p_A_T 
                                                              (abst_base_term 
                                                                 (abst_base 
                                                                    x_2)) 
                                                              v_Vee0) 
                                                           (v_Vpe0:
                                                            (zen.proof 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))) =>
                                                            zen.Raxiom 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_A_T 
                                                                    (
                                                                    abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (
                                                                    abst_base_term 
                                                                    (abst_base 
                                                                    x_2)))) 
                                                              v_Vpe0 v_Vee) 
                                                           v_Vpe0) v_Vpe0) 
                                                     (v_Vee0:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  _p_A_T 
                                                                  (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                  (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)))))) =>
                                                      zen.Rnoteq _p_A_T 
                                                        (abst_base_term 
                                                           (abst_base x_2)) 
                                                        v_Vee0)) v_Voe) 
                                               (v_Vse:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_A_equal 
                                                                  (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                  (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)))))))) =>
                                                zen.Rnotnot 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal 
                                                           (abst_base_term 
                                                              (abst_base x_2)) 
                                                           (abst_base_term 
                                                              (abst_base x_2))))) 
                                                  (v_Vte:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_A_equal 
                                                               (abst_base_term 
                                                                  (abst_base 
                                                                    x_2)) 
                                                               (abst_base_term 
                                                                  (abst_base 
                                                                    x_2)))))) =>
                                                   zen.Rall _p_A_T 
                                                     (v_Vkd:
                                                      (zen.term _p_A_T) =>
                                                      zen.forall _p_A_T 
                                                        (v_Vld:
                                                         (zen.term _p_A_T) =>
                                                         zen.forall _p_A_T 
                                                           (v_Vmd:
                                                            (zen.term _p_A_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                     (abst_base_term 
                                                        (abst_base x_2)) 
                                                     (v_Vue:
                                                      (zen.proof 
                                                         (zen.forall _p_A_T 
                                                            (v_Vld:
                                                             (zen.term _p_A_T) =>
                                                             zen.forall 
                                                               _p_A_T 
                                                               (v_Vmd:
                                                                (zen.term 
                                                                   _p_A_T) =>
                                                                zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    v_Vld))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    v_Vmd)))))))) =>
                                                      zen.Rall _p_A_T 
                                                        (v_Vld:
                                                         (zen.term _p_A_T) =>
                                                         zen.forall _p_A_T 
                                                           (v_Vmd:
                                                            (zen.term _p_A_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    v_Vld))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    v_Vmd)))))) 
                                                        (abst_base_term 
                                                           (abst_base x_2)) 
                                                        (v_Vve:
                                                         (zen.proof 
                                                            (zen.forall 
                                                               _p_A_T 
                                                               (v_Vmd:
                                                                (zen.term 
                                                                   _p_A_T) =>
                                                                zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    v_Vmd))))))) =>
                                                         zen.Rall _p_A_T 
                                                           (v_Vmd:
                                                            (zen.term _p_A_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    v_Vmd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    v_Vmd))))) 
                                                           x_2 
                                                           (v_Vwe:
                                                            (zen.proof 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_2))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_2)))))) =>
                                                            zen.Rimply 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_2))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_2)))) 
                                                              (v_Vje:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))) 
                                                                 v_Vte v_Vje) 
                                                              (v_Vxe:
                                                               (zen.proof 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_2))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_2))))) =>
                                                               zen.Rimply 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_2))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_2))) 
                                                                 (v_Vye:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_2))))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_2))) 
                                                                    __B_1_4_LEMMA 
                                                                    v_Vye) 
                                                                 (__B_1_4_LEMMA0:
                                                                  (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_2)))) =>
                                                                  zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (
                                                                    v_Vbd:
                                                                    (
                                                                    zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vbd)) 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_2) 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1) 
                                                                    (
                                                                    v_Vme0:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_2) 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vne:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    v_Vne x_2) 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1)))) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (v_Vee0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_A_T 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    v_Vee0) 
                                                                    (v_Vme0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_2) 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vze:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    v_Vze) 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1)))) 
                                                                    x_2 x_1 
                                                                    (v_Vaf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    x_2 x_1)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    x_2 x_1)) 
                                                                    v_Vle 
                                                                    v_Vaf) 
                                                                    (v_Vbf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1) 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1) 
                                                                    v_Vbf) 
                                                                    v_Vme0) 
                                                                    v_Vme0) 
                                                                    (
                                                                    v_Vcf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1))) 
                                                                    v_Vcf 
                                                                    v_Vhe) 
                                                                    __B_1_4_LEMMA0) 
                                                                 v_Vxe) v_Vwe) 
                                                           v_Vve) v_Vue) 
                                                     _p_A_equal_transitive) 
                                                  v_Vse) v_Vke) 
                                            (v_Vme0:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         basics.bool__t 
                                                         (_p_A_equal 
                                                            (abst_base_term 
                                                               (abst_base x_2)) 
                                                            x_2) 
                                                         (_p_A_equal 
                                                            (abst_base_term 
                                                               (abst_base x_2)) 
                                                            x_1))))) =>
                                             zen.Rsubst _p_A_T 
                                               (v_Vze:(zen.term _p_A_T) =>
                                                zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (_p_A_equal 
                                                           (abst_base_term 
                                                              (abst_base x_2)) 
                                                           v_Vze) 
                                                        (_p_A_equal 
                                                           (abst_base_term 
                                                              (abst_base x_2)) 
                                                           x_1)))) x_2 x_1 
                                               (v_Vaf:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal _p_A_T 
                                                            x_2 x_1)))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (zen.equal _p_A_T x_2 
                                                        x_1)) v_Vle v_Vaf) 
                                               (v_Vbf:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (_p_A_equal 
                                                               (abst_base_term 
                                                                  (abst_base 
                                                                    x_2)) x_1) 
                                                            (_p_A_equal 
                                                               (abst_base_term 
                                                                  (abst_base 
                                                                    x_2)) x_1))))) =>
                                                zen.Rnoteq basics.bool__t 
                                                  (_p_A_equal 
                                                     (abst_base_term 
                                                        (abst_base x_2)) x_1) 
                                                  v_Vbf) v_Vme0) v_Vme) 
                                         (v_Vcf:
                                          (zen.proof 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal 
                                                      (abst_base_term 
                                                         (abst_base x_2)) x_1)))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal 
                                                     (abst_base_term 
                                                        (abst_base x_2)) x_1))) 
                                            v_Vcf v_Vhe) __B_1_4_LEMMA) 
                                      (v_Vaf:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal _p_A_T x_2 x_1)))) =>
                                       zen.Rcut 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_A_equal x_2 x_1))) 
                                         (v_Vdf:
                                          (zen.proof 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal x_2 x_1)))) =>
                                          zen.Rall _p_A_T 
                                            (v_Vkd:(zen.term _p_A_T) =>
                                             zen.forall _p_A_T 
                                               (v_Vld:(zen.term _p_A_T) =>
                                                zen.forall _p_A_T 
                                                  (v_Vmd:(zen.term _p_A_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal v_Vkd 
                                                              v_Vld))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 v_Vld v_Vmd))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 v_Vkd v_Vmd))))))) 
                                            (abst_base_term (abst_base x_2)) 
                                            (v_Vue:
                                             (zen.proof 
                                                (zen.forall _p_A_T 
                                                   (v_Vld:
                                                    (zen.term _p_A_T) =>
                                                    zen.forall _p_A_T 
                                                      (v_Vmd:
                                                       (zen.term _p_A_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_A_equal 
                                                                  (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                  v_Vld))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    v_Vmd)))))))) =>
                                             zen.Rall _p_A_T 
                                               (v_Vld:(zen.term _p_A_T) =>
                                                zen.forall _p_A_T 
                                                  (v_Vmd:(zen.term _p_A_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (abst_base_term 
                                                                 (abst_base 
                                                                    x_2)) 
                                                              v_Vld))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 v_Vld v_Vmd))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_base_term 
                                                                    (
                                                                    abst_base 
                                                                    x_2)) 
                                                                 v_Vmd)))))) 
                                               x_2 
                                               (v_Vef:
                                                (zen.proof 
                                                   (zen.forall _p_A_T 
                                                      (v_Vmd:
                                                       (zen.term _p_A_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_A_equal 
                                                                  (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_2))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    x_2 v_Vmd))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    v_Vmd))))))) =>
                                                zen.Rall _p_A_T 
                                                  (v_Vmd:(zen.term _p_A_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (abst_base_term 
                                                                 (abst_base 
                                                                    x_2)) x_2))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 x_2 v_Vmd))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_base_term 
                                                                    (
                                                                    abst_base 
                                                                    x_2)) 
                                                                 v_Vmd))))) 
                                                  x_1 
                                                  (v_Vff:
                                                   (zen.proof 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_A_equal 
                                                                  (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_2))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    x_2 x_1))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1)))))) =>
                                                   zen.Rimply 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (abst_base_term 
                                                                 (abst_base 
                                                                    x_2)) x_2))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 x_2 x_1))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_base_term 
                                                                    (
                                                                    abst_base 
                                                                    x_2)) x_1)))) 
                                                     (v_Vye:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_2))))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_base_term 
                                                                    (
                                                                    abst_base 
                                                                    x_2)) x_2))) 
                                                        __B_1_4_LEMMA v_Vye) 
                                                     (v_Vgf:
                                                      (zen.proof 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    x_2 x_1))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1))))) =>
                                                      zen.Rimply 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 x_2 x_1))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_base_term 
                                                                    (
                                                                    abst_base 
                                                                    x_2)) x_1))) 
                                                        (v_Vhf:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x_2 x_1))))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    x_2 x_1))) 
                                                           v_Vdf v_Vhf) 
                                                        (v_Vcf:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1)))) =>
                                                         zen.Rsubst 
                                                           basics.bool__t 
                                                           (v_Vbd:
                                                            (zen.term 
                                                               basics.bool__t) =>
                                                            zen.triangle 
                                                              (focal.is_true 
                                                                 v_Vbd)) 
                                                           (_p_A_equal 
                                                              (abst_base_term 
                                                                 (abst_base 
                                                                    x_2)) x_1) 
                                                           (_p_A_equal 
                                                              (abst_base_term 
                                                                 (abst_base 
                                                                    x_2)) x_1) 
                                                           (v_Vbf:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1) 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1))))) =>
                                                            zen.Rsubst 
                                                              _p_A_T 
                                                              (v_Vdd:
                                                               (zen.term 
                                                                  _p_A_T) =>
                                                               zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    v_Vdd x_1) 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1)))) 
                                                              (abst_base_term 
                                                                 (abst_base 
                                                                    x_2)) 
                                                              (abst_base_term 
                                                                 (abst_base 
                                                                    x_2)) 
                                                              (v_Vee:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)))))) =>
                                                               zen.Rnotand 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))) 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)))))) 
                                                                 (v_Voe:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))))) =>
                                                                  zen.Rnotnot 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)))) 
                                                                    (
                                                                    v_Vpe:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))) =>
                                                                    zen.Reqsym 
                                                                    _p_A_T 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    v_Vpe 
                                                                    v_Vee) 
                                                                    v_Voe) 
                                                                 (v_Vse:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)))))))) =>
                                                                  zen.Rnotnot 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))) 
                                                                    (
                                                                    v_Vte:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vkd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vld:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (v_Vue0:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vld:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    v_Vmd)))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vld:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    v_Vmd)))))) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (v_Vve:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    v_Vmd))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    v_Vmd))))) 
                                                                    x_1 
                                                                    (v_Vif:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1)))) 
                                                                    (v_Vje:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2))))) 
                                                                    v_Vte 
                                                                    v_Vje) 
                                                                    (v_Vjf:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1))) 
                                                                    (v_Vhe0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1))) 
                                                                    v_Vcf 
                                                                    v_Vhe0) 
                                                                    (v_Vcf0:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1))) 
                                                                    v_Vcf0 
                                                                    v_Vhe) 
                                                                    v_Vjf) 
                                                                    v_Vif) 
                                                                    v_Vve) 
                                                                    v_Vue0) 
                                                                    _p_A_equal_transitive) 
                                                                    v_Vse) 
                                                                 v_Vke) 
                                                              (v_Vbf0:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1) 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1))))) =>
                                                               zen.Rsubst 
                                                                 _p_A_T 
                                                                 (v_Vze:
                                                                  (zen.term 
                                                                    _p_A_T) =>
                                                                  zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) 
                                                                    v_Vze) 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1)))) 
                                                                 x_1 x_1 
                                                                 (v_Vkf:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    x_1 x_1)))) =>
                                                                  zen.Rnoteq 
                                                                    _p_A_T 
                                                                    x_1 v_Vkf) 
                                                                 (v_Vbf0:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1) 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1))))) =>
                                                                  zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1) 
                                                                    v_Vbf0) 
                                                                 v_Vbf0) 
                                                              v_Vbf) 
                                                           (v_Vcf0:
                                                            (zen.proof 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1)))) =>
                                                            zen.Raxiom 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_base_term 
                                                                    (abst_base 
                                                                    x_2)) x_1))) 
                                                              v_Vcf0 v_Vhe) 
                                                           v_Vcf) v_Vgf) 
                                                     v_Vff) v_Vef) v_Vue) 
                                            _p_A_equal_transitive) 
                                         (v_Vhf:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_A_equal x_2 x_1))))) =>
                                          zen.Rall _p_A_T 
                                            (v_Vkd:(zen.term _p_A_T) =>
                                             zen.forall _p_A_T 
                                               (v_Vld:(zen.term _p_A_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal v_Vkd 
                                                           v_Vld))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal v_Vld 
                                                           v_Vkd))))) x_1 
                                            (v_Vlf:
                                             (zen.proof 
                                                (zen.forall _p_A_T 
                                                   (v_Vld:
                                                    (zen.term _p_A_T) =>
                                                    zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_A_equal x_1 
                                                               v_Vld))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_A_equal 
                                                               v_Vld x_1)))))) =>
                                             zen.Rall _p_A_T 
                                               (v_Vld:(zen.term _p_A_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal x_1 v_Vld))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal v_Vld x_1)))) 
                                               x_2 
                                               (v_Vmf:
                                                (zen.proof 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_A_equal x_1 
                                                               x_2))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_A_equal x_2 
                                                               x_1))))) =>
                                                zen.Rimply 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal x_1 x_2))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal x_2 x_1))) 
                                                  (v_Vnf:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_A_equal 
                                                                  x_1 x_2))))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal x_1 
                                                              x_2))) H v_Vnf) 
                                                  (v_Vdf:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_A_equal x_2 
                                                               x_1)))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal x_2 
                                                              x_1))) v_Vdf 
                                                     v_Vhf) v_Vmf) v_Vlf) 
                                            _p_A_equal_symmetric)))) 
                                (v_Vwd:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal x_1 
                                             (abst_base_term (abst_base x_2)))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal x_1 
                                            (abst_base_term (abst_base x_2))))) 
                                   v_Vwd v_Vae) v_Vge) v_Vfe) 
                          _p_A_equal_symmetric)))))) 
          (zen.nnpp 
             (zen.triangle 
                (focal.is_true 
                   (_p_A_equal (abst_base_term (abst_base x_2)) x_2))) 
             (v_Vzb:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_A_equal (abst_base_term (abst_base x_2)) x_2))))) =>
              zen.Rall _p_A_T 
                (v_Vac:(zen.term _p_A_T) =>
                 zen.triangle 
                   (focal.is_true 
                      (_p_A_equal (abst_base_term (abst_base v_Vac)) v_Vac))) 
                x_2 
                (v_Vbc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_A_equal (abst_base_term (abst_base x_2)) x_2)))) =>
                 zen.Raxiom 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_A_equal (abst_base_term (abst_base x_2)) x_2))) 
                   v_Vbc v_Vzb) abst_base_reverse))) 
         (zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (_p_A_equal (abst_base_term (abst_base x_1)) x_1))) 
            (v_Vzb:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_A_equal (abst_base_term (abst_base x_1)) x_1))))) =>
             zen.Rall _p_A_T 
               (v_Vac:(zen.term _p_A_T) =>
                zen.triangle 
                  (focal.is_true 
                     (_p_A_equal (abst_base_term (abst_base v_Vac)) v_Vac))) 
               x_1 
               (v_Vbc:
                (zen.proof 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_A_equal (abst_base_term (abst_base x_1)) x_1)))) =>
                zen.Raxiom 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_A_equal (abst_base_term (abst_base x_1)) x_1))) 
                  v_Vbc v_Vzb) abst_base_reverse))) 
        (zen.nnpp 
           (zen.triangle (focal.is_true (abst_base_case (abst_base x_2)))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true (abst_base_case (abst_base x_2)))))) =>
            zen.Rall _p_A_T 
              (v_Vac:(zen.term _p_A_T) =>
               zen.triangle 
                 (focal.is_true (abst_base_case (abst_base v_Vac)))) x_2 
              (v_Vbc:
               (zen.proof 
                  (zen.triangle 
                     (focal.is_true (abst_base_case (abst_base x_2))))) =>
               zen.Raxiom 
                 (zen.triangle 
                    (focal.is_true (abst_base_case (abst_base x_2)))) v_Vbc 
                 v_Vzb) abst_base_has_case))) 
       (zen.nnpp 
          (zen.triangle (focal.is_true (abst_base_case (abst_base x_1)))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true (abst_base_case (abst_base x_1)))))) =>
           zen.Rall _p_A_T 
             (v_Vac:(zen.term _p_A_T) =>
              zen.triangle (focal.is_true (abst_base_case (abst_base v_Vac)))) 
             x_1 
             (v_Vbc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true (abst_base_case (abst_base x_1))))) =>
              zen.Raxiom 
                (zen.triangle 
                   (focal.is_true (abst_base_case (abst_base x_1)))) v_Vbc 
                v_Vzb) abst_base_has_case))).

def Linear_fixed_set__element_is_same :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_element:(cc.eT _p_A_T) ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_A_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall _p_A_T 
                             (x:(cc.eT _p_A_T) =>
                              dk_logic.ebP (_p_A_equal x x)))) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_base:((cc.eT _p_A_T) -> cc.eT abst_T) ->
  abst_base_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_base_term:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_inductive_first_term:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  abst_inductive_second_term:((cc.eT abst_T) -> cc.eT abst_T) ->
  abst_base_has_case:(dk_logic.eP 
                        (dk_logic.forall _p_A_T 
                           (x:(cc.eT _p_A_T) =>
                            dk_logic.ebP (abst_base_case (abst_base x))))) ->
  dk_logic.eP 
    (dk_logic.ebP 
       (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal abst_T 
          abst_base_case abst_base_term abst_inductive_first_term 
          abst_inductive_second_term 
          (Linear_fixed_set__element _p_A_T _p_A_element abst_T abst_base) 
          (Linear_fixed_set__element _p_A_T _p_A_element abst_T abst_base)))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_element:(cc.eT _p_A_T) =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_A_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) => dk_logic.ebP (_p_A_equal x x)))) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_base:((cc.eT _p_A_T) -> cc.eT abst_T) =>
  abst_base_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_base_term:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_inductive_first_term:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  abst_inductive_second_term:((cc.eT abst_T) -> cc.eT abst_T) =>
  abst_base_has_case:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) => dk_logic.ebP (abst_base_case (abst_base x))))) =>
  zen.nnpp 
    (zen.triangle 
       (focal.is_true 
          (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
             abst_T abst_base_case abst_base_term abst_inductive_first_term 
             abst_inductive_second_term 
             (Linear_fixed_set__element _p_A_T _p_A_element abst_T abst_base) 
             (Linear_fixed_set__element _p_A_T _p_A_element abst_T abst_base)))) 
    (v_Vzb:
     (zen.proof 
        (zen.not 
           (zen.triangle 
              (focal.is_true 
                 (dk_bool.ite basics.bool__t 
                    (abst_base_case (abst_base _p_A_element)) 
                    (dk_bool.ite basics.bool__t 
                       (abst_base_case (abst_base _p_A_element)) 
                       (_p_A_equal (abst_base_term (abst_base _p_A_element)) 
                          (abst_base_term (abst_base _p_A_element))) 
                       basics.false) 
                    (dk_bool.ite basics.bool__t 
                       (abst_base_case (abst_base _p_A_element)) 
                       basics.false 
                       (dk_bool.ite basics.bool__t 
                          (_p_B_equal 
                             (abst_inductive_first_term 
                                (abst_base _p_A_element)) 
                             (abst_inductive_first_term 
                                (abst_base _p_A_element))) 
                          (dk_builtins.call_by_value abst_T basics.bool__t 
                             (dk_builtins.call_by_value abst_T 
                                (zen.arrow abst_T basics.bool__t) 
                                (Linear_fixed_set__equal _p_A_T _p_B_T 
                                   _p_A_equal _p_B_equal abst_T 
                                   abst_base_case abst_base_term 
                                   abst_inductive_first_term 
                                   abst_inductive_second_term) 
                                (abst_inductive_second_term 
                                   (abst_base _p_A_element))) 
                             (abst_inductive_second_term 
                                (abst_base _p_A_element))) basics.false))))))) =>
     focal.zenon_focal_ite_bool_n (abst_base_case (abst_base _p_A_element)) 
       (dk_bool.ite basics.bool__t (abst_base_case (abst_base _p_A_element)) 
          (_p_A_equal (abst_base_term (abst_base _p_A_element)) 
             (abst_base_term (abst_base _p_A_element))) basics.false) 
       (dk_bool.ite basics.bool__t (abst_base_case (abst_base _p_A_element)) 
          basics.false 
          (dk_bool.ite basics.bool__t 
             (_p_B_equal 
                (abst_inductive_first_term (abst_base _p_A_element)) 
                (abst_inductive_first_term (abst_base _p_A_element))) 
             (dk_builtins.call_by_value abst_T basics.bool__t 
                (dk_builtins.call_by_value abst_T 
                   (zen.arrow abst_T basics.bool__t) 
                   (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                      _p_B_equal abst_T abst_base_case abst_base_term 
                      abst_inductive_first_term abst_inductive_second_term) 
                   (abst_inductive_second_term (abst_base _p_A_element))) 
                (abst_inductive_second_term (abst_base _p_A_element))) 
             basics.false)) 
       (v_Vac:
        (zen.proof 
           (zen.triangle 
              (focal.is_true (abst_base_case (abst_base _p_A_element))))) =>
        v_Vbc:
        (zen.proof 
           (zen.not 
              (zen.triangle 
                 (focal.is_true 
                    (dk_bool.ite basics.bool__t 
                       (abst_base_case (abst_base _p_A_element)) 
                       (_p_A_equal (abst_base_term (abst_base _p_A_element)) 
                          (abst_base_term (abst_base _p_A_element))) 
                       basics.false))))) =>
        focal.zenon_focal_ite_bool_n 
          (abst_base_case (abst_base _p_A_element)) 
          (_p_A_equal (abst_base_term (abst_base _p_A_element)) 
             (abst_base_term (abst_base _p_A_element))) basics.false 
          (v_Vac0:
           (zen.proof 
              (zen.triangle 
                 (focal.is_true (abst_base_case (abst_base _p_A_element))))) =>
           v_Vcc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_A_equal (abst_base_term (abst_base _p_A_element)) 
                          (abst_base_term (abst_base _p_A_element))))))) =>
           zen.Rall _p_A_T 
             (v_Vdc:(zen.term _p_A_T) =>
              zen.triangle (focal.is_true (_p_A_equal v_Vdc v_Vdc))) 
             (abst_base_term (abst_base _p_A_element)) 
             (v_Vec:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_A_equal (abst_base_term (abst_base _p_A_element)) 
                          (abst_base_term (abst_base _p_A_element)))))) =>
              zen.Raxiom 
                (zen.triangle 
                   (focal.is_true 
                      (_p_A_equal (abst_base_term (abst_base _p_A_element)) 
                         (abst_base_term (abst_base _p_A_element))))) v_Vec 
                v_Vcc) _p_A_equal_reflexive) 
          (v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true (abst_base_case (abst_base _p_A_element)))))) =>
           v_Vgc:(zen.proof (zen.not zen.False)) =>
           zen.Raxiom 
             (zen.triangle 
                (focal.is_true (abst_base_case (abst_base _p_A_element)))) 
             v_Vac v_Vfc) v_Vbc) 
       (v_Vfc:
        (zen.proof 
           (zen.not 
              (zen.triangle 
                 (focal.is_true (abst_base_case (abst_base _p_A_element)))))) =>
        v_Vhc:
        (zen.proof 
           (zen.not 
              (zen.triangle 
                 (focal.is_true 
                    (dk_bool.ite basics.bool__t 
                       (abst_base_case (abst_base _p_A_element)) 
                       basics.false 
                       (dk_bool.ite basics.bool__t 
                          (_p_B_equal 
                             (abst_inductive_first_term 
                                (abst_base _p_A_element)) 
                             (abst_inductive_first_term 
                                (abst_base _p_A_element))) 
                          (dk_builtins.call_by_value abst_T basics.bool__t 
                             (dk_builtins.call_by_value abst_T 
                                (zen.arrow abst_T basics.bool__t) 
                                (Linear_fixed_set__equal _p_A_T _p_B_T 
                                   _p_A_equal _p_B_equal abst_T 
                                   abst_base_case abst_base_term 
                                   abst_inductive_first_term 
                                   abst_inductive_second_term) 
                                (abst_inductive_second_term 
                                   (abst_base _p_A_element))) 
                             (abst_inductive_second_term 
                                (abst_base _p_A_element))) basics.false)))))) =>
        zen.Rall _p_A_T 
          (v_Vdc:(zen.term _p_A_T) =>
           zen.triangle (focal.is_true (abst_base_case (abst_base v_Vdc)))) 
          _p_A_element 
          (v_Vac:
           (zen.proof 
              (zen.triangle 
                 (focal.is_true (abst_base_case (abst_base _p_A_element))))) =>
           zen.Raxiom 
             (zen.triangle 
                (focal.is_true (abst_base_case (abst_base _p_A_element)))) 
             v_Vac v_Vfc) abst_base_has_case) v_Vzb).

def Linear_fixed_set__reflexive_prop :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  x:(cc.eT abst_T) -> dk_logic.Prop
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  x:(cc.eT abst_T) => dk_logic.ebP (abst_equal x x).

def Linear_fixed_set__structural_equal_inductive :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_inductive_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_inductive_first_term:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  abst_inductive_second_term:((cc.eT abst_T) -> cc.eT abst_T) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_inductive_case x)) 
             (dk_logic.imp (dk_logic.ebP (abst_inductive_case y)) 
                (dk_logic.imp 
                   (dk_logic.ebP 
                      (_p_B_equal (abst_inductive_first_term x) 
                         (abst_inductive_first_term y))) 
                   (dk_logic.imp 
                      (dk_logic.ebP 
                         (abst_equal (abst_inductive_second_term x) 
                            (abst_inductive_second_term y))) 
                      (dk_logic.ebP (abst_equal x y))))))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_inductive_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_inductive_first_term:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  abst_inductive_second_term:((cc.eT abst_T) -> cc.eT abst_T) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_inductive_case x)) 
             (dk_logic.imp (dk_logic.ebP (abst_inductive_case y)) 
                (dk_logic.imp 
                   (dk_logic.ebP 
                      (_p_B_equal (abst_inductive_first_term x) 
                         (abst_inductive_first_term y))) 
                   (dk_logic.imp 
                      (dk_logic.ebP 
                         (abst_equal (abst_inductive_second_term x) 
                            (abst_inductive_second_term y))) 
                      (dk_logic.ebP (abst_equal x y)))))))).

def Linear_fixed_set__symmetry_prop :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  x:(cc.eT abst_T) -> dk_logic.Prop
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  x:(cc.eT abst_T) =>
  dk_logic.forall abst_T 
    (y:(cc.eT abst_T) =>
     dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
       (dk_logic.ebP (abst_equal y x))).

def Linear_fixed_set__transitivity_prop :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  x:(cc.eT abst_T) -> dk_logic.Prop
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  x:(cc.eT abst_T) =>
  dk_logic.forall abst_T 
    (y:(cc.eT abst_T) =>
     dk_logic.forall abst_T 
       (z:(cc.eT abst_T) =>
        dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
          (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
             (dk_logic.ebP (abst_equal x z))))).

def Linear_fixed_set__equal_reflexive :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_A_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall _p_A_T 
                             (x:(cc.eT _p_A_T) =>
                              dk_logic.ebP (_p_A_equal x x)))) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  _p_B_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall _p_B_T 
                             (x:(cc.eT _p_B_T) =>
                              dk_logic.ebP (_p_B_equal x x)))) ->
  abst_T:cc.uT ->
  abst_base_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_base_term:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_inductive_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_inductive_first_term:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  abst_inductive_second_term:((cc.eT abst_T) -> cc.eT abst_T) ->
  abst_inductive_reflexivity:(dk_logic.eP 
                                (Linear_fixed_set__inductive_property abst_T 
                                   abst_base_case abst_inductive_case 
                                   abst_inductive_second_term 
                                   (Linear_fixed_set__reflexive_prop _p_A_T 
                                      _p_B_T abst_T 
                                      (Linear_fixed_set__equal _p_A_T _p_B_T 
                                         _p_A_equal _p_B_equal abst_T 
                                         abst_base_case abst_base_term 
                                         abst_inductive_first_term 
                                         abst_inductive_second_term)))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.ebP 
          (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
             abst_T abst_base_case abst_base_term abst_inductive_first_term 
             abst_inductive_second_term x x)))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_A_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) => dk_logic.ebP (_p_A_equal x x)))) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  _p_B_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) => dk_logic.ebP (_p_B_equal x x)))) =>
  abst_T:cc.uT =>
  abst_base_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_base_term:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_inductive_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_inductive_first_term:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  abst_inductive_second_term:((cc.eT abst_T) -> cc.eT abst_T) =>
  abst_inductive_reflexivity:
  (dk_logic.eP 
     (Linear_fixed_set__inductive_property abst_T abst_base_case 
        abst_inductive_case abst_inductive_second_term 
        (Linear_fixed_set__reflexive_prop _p_A_T _p_B_T abst_T 
           (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
              abst_T abst_base_case abst_base_term abst_inductive_first_term 
              abst_inductive_second_term)))) =>
  (__D_1_LEMMA:
   (dk_logic.eP 
      (dk_logic.forall abst_T 
         (x:(cc.eT abst_T) =>
          Linear_fixed_set__reflexive_prop _p_A_T _p_B_T abst_T 
            (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
               abst_T abst_base_case abst_base_term 
               abst_inductive_first_term abst_inductive_second_term) x))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.triangle 
           (focal.is_true 
              (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                 abst_T abst_base_case abst_base_term 
                 abst_inductive_first_term abst_inductive_second_term v_Vzb 
                 v_Vzb)))) 
     (v_Vac:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.triangle 
                  (focal.is_true 
                     (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                        _p_B_equal abst_T abst_base_case abst_base_term 
                        abst_inductive_first_term abst_inductive_second_term 
                        v_Vzb v_Vzb)))))) =>
      zen.Rnotall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.triangle 
           (focal.is_true 
              (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                 abst_T abst_base_case abst_base_term 
                 abst_inductive_first_term abst_inductive_second_term v_Vzb 
                 v_Vzb))) 
        (v_Vbc:(zen.term abst_T) =>
         v_Vcc:
         (zen.proof 
            (zen.not 
               (zen.triangle 
                  (focal.is_true 
                     (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                        _p_B_equal abst_T abst_base_case abst_base_term 
                        abst_inductive_first_term abst_inductive_second_term 
                        v_Vbc v_Vbc))))) =>
         zen.Rall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.triangle 
              (Linear_fixed_set__reflexive_prop _p_A_T _p_B_T abst_T 
                 (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                    _p_B_equal abst_T abst_base_case abst_base_term 
                    abst_inductive_first_term abst_inductive_second_term) 
                 v_Vzb)) v_Vbc 
           (v_Vdc:
            (zen.proof 
               (zen.triangle 
                  (focal.is_true 
                     (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                        _p_B_equal abst_T abst_base_case abst_base_term 
                        abst_inductive_first_term abst_inductive_second_term 
                        v_Vbc v_Vbc)))) =>
            zen.Raxiom 
              (zen.triangle 
                 (focal.is_true 
                    (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                       _p_B_equal abst_T abst_base_case abst_base_term 
                       abst_inductive_first_term abst_inductive_second_term 
                       v_Vbc v_Vbc))) v_Vdc v_Vcc) __D_1_LEMMA) v_Vac)) 
    ((__D_1_1_LEMMA:
      (x:(cc.eT abst_T) ->
       B:(dk_logic.eP (dk_logic.ebP (abst_base_case x))) ->
       dk_logic.eP 
         (Linear_fixed_set__reflexive_prop _p_A_T _p_B_T abst_T 
            (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
               abst_T abst_base_case abst_base_term 
               abst_inductive_first_term abst_inductive_second_term) x)) =>
      (__D_1_2_LEMMA:
       (x:(cc.eT abst_T) ->
        I:(dk_logic.eP (dk_logic.ebP (abst_inductive_case x))) ->
        R:(dk_logic.eP 
             (Linear_fixed_set__reflexive_prop _p_A_T _p_B_T abst_T 
                (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                   abst_T abst_base_case abst_base_term 
                   abst_inductive_first_term abst_inductive_second_term) 
                (abst_inductive_second_term x))) ->
        dk_logic.eP 
          (Linear_fixed_set__reflexive_prop _p_A_T _p_B_T abst_T 
             (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                abst_T abst_base_case abst_base_term 
                abst_inductive_first_term abst_inductive_second_term) x)) =>
       zen.nnpp 
         (zen.forall abst_T 
            (v_Vzb:(zen.term abst_T) =>
             zen.triangle 
               (Linear_fixed_set__reflexive_prop _p_A_T _p_B_T abst_T 
                  (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                     _p_B_equal abst_T abst_base_case abst_base_term 
                     abst_inductive_first_term abst_inductive_second_term) 
                  v_Vzb))) 
         (v_Vac:
          (zen.proof 
             (zen.not 
                (zen.forall abst_T 
                   (v_Vzb:(zen.term abst_T) =>
                    zen.triangle 
                      (Linear_fixed_set__reflexive_prop _p_A_T _p_B_T abst_T 
                         (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                            _p_B_equal abst_T abst_base_case abst_base_term 
                            abst_inductive_first_term 
                            abst_inductive_second_term) v_Vzb))))) =>
          zen.Rimply 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.imp 
                  (zen.triangle (focal.is_true (abst_base_case v_Vzb))) 
                  (zen.triangle 
                     (Linear_fixed_set__reflexive_prop _p_A_T _p_B_T abst_T 
                        (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                           _p_B_equal abst_T abst_base_case abst_base_term 
                           abst_inductive_first_term 
                           abst_inductive_second_term) v_Vzb)))) 
            (zen.imp 
               (zen.forall abst_T 
                  (v_Vzb:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle 
                        (focal.is_true (abst_inductive_case v_Vzb))) 
                     (zen.imp 
                        (zen.triangle 
                           (Linear_fixed_set__reflexive_prop _p_A_T _p_B_T 
                              abst_T 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term) 
                              (abst_inductive_second_term v_Vzb))) 
                        (zen.triangle 
                           (Linear_fixed_set__reflexive_prop _p_A_T _p_B_T 
                              abst_T 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term) v_Vzb))))) 
               (zen.forall abst_T 
                  (v_Vzb:(zen.term abst_T) =>
                   zen.triangle 
                     (Linear_fixed_set__reflexive_prop _p_A_T _p_B_T abst_T 
                        (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                           _p_B_equal abst_T abst_base_case abst_base_term 
                           abst_inductive_first_term 
                           abst_inductive_second_term) v_Vzb)))) 
            (v_Vbc:
             (zen.proof 
                (zen.not 
                   (zen.forall abst_T 
                      (v_Vzb:(zen.term abst_T) =>
                       zen.imp 
                         (zen.triangle (focal.is_true (abst_base_case v_Vzb))) 
                         (zen.triangle 
                            (Linear_fixed_set__reflexive_prop _p_A_T _p_B_T 
                               abst_T 
                               (Linear_fixed_set__equal _p_A_T _p_B_T 
                                  _p_A_equal _p_B_equal abst_T 
                                  abst_base_case abst_base_term 
                                  abst_inductive_first_term 
                                  abst_inductive_second_term) v_Vzb)))))) =>
             zen.Raxiom 
               (zen.forall abst_T 
                  (v_Vzb:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle (focal.is_true (abst_base_case v_Vzb))) 
                     (zen.triangle 
                        (Linear_fixed_set__reflexive_prop _p_A_T _p_B_T 
                           abst_T 
                           (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                              _p_B_equal abst_T abst_base_case 
                              abst_base_term abst_inductive_first_term 
                              abst_inductive_second_term) v_Vzb)))) 
               __D_1_1_LEMMA v_Vbc) 
            (v_Vcc:
             (zen.proof 
                (zen.imp 
                   (zen.forall abst_T 
                      (v_Vzb:(zen.term abst_T) =>
                       zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_inductive_case v_Vzb))) 
                         (zen.imp 
                            (zen.triangle 
                               (Linear_fixed_set__reflexive_prop _p_A_T 
                                  _p_B_T abst_T 
                                  (Linear_fixed_set__equal _p_A_T _p_B_T 
                                     _p_A_equal _p_B_equal abst_T 
                                     abst_base_case abst_base_term 
                                     abst_inductive_first_term 
                                     abst_inductive_second_term) 
                                  (abst_inductive_second_term v_Vzb))) 
                            (zen.triangle 
                               (Linear_fixed_set__reflexive_prop _p_A_T 
                                  _p_B_T abst_T 
                                  (Linear_fixed_set__equal _p_A_T _p_B_T 
                                     _p_A_equal _p_B_equal abst_T 
                                     abst_base_case abst_base_term 
                                     abst_inductive_first_term 
                                     abst_inductive_second_term) v_Vzb))))) 
                   (zen.forall abst_T 
                      (v_Vzb:(zen.term abst_T) =>
                       zen.triangle 
                         (Linear_fixed_set__reflexive_prop _p_A_T _p_B_T 
                            abst_T 
                            (Linear_fixed_set__equal _p_A_T _p_B_T 
                               _p_A_equal _p_B_equal abst_T abst_base_case 
                               abst_base_term abst_inductive_first_term 
                               abst_inductive_second_term) v_Vzb))))) =>
             zen.Rimply 
               (zen.forall abst_T 
                  (v_Vzb:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle 
                        (focal.is_true (abst_inductive_case v_Vzb))) 
                     (zen.imp 
                        (zen.triangle 
                           (Linear_fixed_set__reflexive_prop _p_A_T _p_B_T 
                              abst_T 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term) 
                              (abst_inductive_second_term v_Vzb))) 
                        (zen.triangle 
                           (Linear_fixed_set__reflexive_prop _p_A_T _p_B_T 
                              abst_T 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term) v_Vzb))))) 
               (zen.forall abst_T 
                  (v_Vzb:(zen.term abst_T) =>
                   zen.triangle 
                     (Linear_fixed_set__reflexive_prop _p_A_T _p_B_T abst_T 
                        (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                           _p_B_equal abst_T abst_base_case abst_base_term 
                           abst_inductive_first_term 
                           abst_inductive_second_term) v_Vzb))) 
               (v_Vdc:
                (zen.proof 
                   (zen.not 
                      (zen.forall abst_T 
                         (v_Vzb:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true (abst_inductive_case v_Vzb))) 
                            (zen.imp 
                               (zen.triangle 
                                  (Linear_fixed_set__reflexive_prop _p_A_T 
                                     _p_B_T abst_T 
                                     (Linear_fixed_set__equal _p_A_T _p_B_T 
                                        _p_A_equal _p_B_equal abst_T 
                                        abst_base_case abst_base_term 
                                        abst_inductive_first_term 
                                        abst_inductive_second_term) 
                                     (abst_inductive_second_term v_Vzb))) 
                               (zen.triangle 
                                  (Linear_fixed_set__reflexive_prop _p_A_T 
                                     _p_B_T abst_T 
                                     (Linear_fixed_set__equal _p_A_T _p_B_T 
                                        _p_A_equal _p_B_equal abst_T 
                                        abst_base_case abst_base_term 
                                        abst_inductive_first_term 
                                        abst_inductive_second_term) v_Vzb))))))) =>
                zen.Raxiom 
                  (zen.forall abst_T 
                     (v_Vzb:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true (abst_inductive_case v_Vzb))) 
                        (zen.imp 
                           (zen.triangle 
                              (Linear_fixed_set__reflexive_prop _p_A_T 
                                 _p_B_T abst_T 
                                 (Linear_fixed_set__equal _p_A_T _p_B_T 
                                    _p_A_equal _p_B_equal abst_T 
                                    abst_base_case abst_base_term 
                                    abst_inductive_first_term 
                                    abst_inductive_second_term) 
                                 (abst_inductive_second_term v_Vzb))) 
                           (zen.triangle 
                              (Linear_fixed_set__reflexive_prop _p_A_T 
                                 _p_B_T abst_T 
                                 (Linear_fixed_set__equal _p_A_T _p_B_T 
                                    _p_A_equal _p_B_equal abst_T 
                                    abst_base_case abst_base_term 
                                    abst_inductive_first_term 
                                    abst_inductive_second_term) v_Vzb))))) 
                  __D_1_2_LEMMA v_Vdc) 
               (v_Vec:
                (zen.proof 
                   (zen.forall abst_T 
                      (v_Vzb:(zen.term abst_T) =>
                       zen.triangle 
                         (Linear_fixed_set__reflexive_prop _p_A_T _p_B_T 
                            abst_T 
                            (Linear_fixed_set__equal _p_A_T _p_B_T 
                               _p_A_equal _p_B_equal abst_T abst_base_case 
                               abst_base_term abst_inductive_first_term 
                               abst_inductive_second_term) v_Vzb)))) =>
                zen.Raxiom 
                  (zen.forall abst_T 
                     (v_Vzb:(zen.term abst_T) =>
                      zen.triangle 
                        (Linear_fixed_set__reflexive_prop _p_A_T _p_B_T 
                           abst_T 
                           (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                              _p_B_equal abst_T abst_base_case 
                              abst_base_term abst_inductive_first_term 
                              abst_inductive_second_term) v_Vzb))) v_Vec 
                  v_Vac) v_Vcc) abst_inductive_reflexivity)) 
        (x:(cc.eT abst_T) =>
         I:(dk_logic.eP (dk_logic.ebP (abst_inductive_case x))) =>
         R:
         (dk_logic.eP 
            (Linear_fixed_set__reflexive_prop _p_A_T _p_B_T abst_T 
               (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                  abst_T abst_base_case abst_base_term 
                  abst_inductive_first_term abst_inductive_second_term) 
               (abst_inductive_second_term x))) =>
         (__D_1_2_1_LEMMA:
          (dk_logic.eP 
             (dk_logic.ebP 
                (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                   abst_T abst_base_case abst_base_term 
                   abst_inductive_first_term abst_inductive_second_term x x))) =>
          zen.nnpp 
            (zen.triangle 
               (Linear_fixed_set__reflexive_prop _p_A_T _p_B_T abst_T 
                  (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                     _p_B_equal abst_T abst_base_case abst_base_term 
                     abst_inductive_first_term abst_inductive_second_term) x)) 
            (v_Vzb:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                            _p_B_equal abst_T abst_base_case abst_base_term 
                            abst_inductive_first_term 
                            abst_inductive_second_term x x))))) =>
             zen.Raxiom 
               (zen.triangle 
                  (focal.is_true 
                     (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                        _p_B_equal abst_T abst_base_case abst_base_term 
                        abst_inductive_first_term abst_inductive_second_term 
                        x x))) __D_1_2_1_LEMMA v_Vzb)) 
           ((__D_1_2_1_1_LEMMA:
             (dk_logic.eP 
                (dk_logic.ebP 
                   (_p_B_equal (abst_inductive_first_term x) 
                      (abst_inductive_first_term x)))) =>
             dk_builtins.magic_prove 
               (dk_logic.ebP 
                  (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                     _p_B_equal abst_T abst_base_case abst_base_term 
                     abst_inductive_first_term abst_inductive_second_term x x))) 
              (zen.nnpp 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_B_equal (abst_inductive_first_term x) 
                          (abst_inductive_first_term x)))) 
                 (v_Vzb:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_B_equal (abst_inductive_first_term x) 
                                 (abst_inductive_first_term x)))))) =>
                  zen.Rall _p_B_T 
                    (v_Vac:(zen.term _p_B_T) =>
                     zen.triangle (focal.is_true (_p_B_equal v_Vac v_Vac))) 
                    (abst_inductive_first_term x) 
                    (v_Vbc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_B_equal (abst_inductive_first_term x) 
                                 (abst_inductive_first_term x))))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_B_equal (abst_inductive_first_term x) 
                                (abst_inductive_first_term x)))) v_Vbc v_Vzb) 
                    _p_B_equal_reflexive))))) 
       (x:(cc.eT abst_T) =>
        B:(dk_logic.eP (dk_logic.ebP (abst_base_case x))) =>
        zen.nnpp 
          (zen.triangle 
             (Linear_fixed_set__reflexive_prop _p_A_T _p_B_T abst_T 
                (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                   abst_T abst_base_case abst_base_term 
                   abst_inductive_first_term abst_inductive_second_term) x)) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (dk_bool.ite basics.bool__t (abst_base_case x) 
                          (dk_bool.ite basics.bool__t (abst_base_case x) 
                             (_p_A_equal (abst_base_term x) 
                                (abst_base_term x)) basics.false) 
                          (dk_bool.ite basics.bool__t (abst_base_case x) 
                             basics.false 
                             (dk_bool.ite basics.bool__t 
                                (_p_B_equal (abst_inductive_first_term x) 
                                   (abst_inductive_first_term x)) 
                                (dk_builtins.call_by_value abst_T 
                                   basics.bool__t 
                                   (dk_builtins.call_by_value abst_T 
                                      (zen.arrow abst_T basics.bool__t) 
                                      (Linear_fixed_set__equal _p_A_T _p_B_T 
                                         _p_A_equal _p_B_equal abst_T 
                                         abst_base_case abst_base_term 
                                         abst_inductive_first_term 
                                         abst_inductive_second_term) 
                                      (abst_inductive_second_term x)) 
                                   (abst_inductive_second_term x)) 
                                basics.false))))))) =>
           focal.zenon_focal_ite_bool_n (abst_base_case x) 
             (dk_bool.ite basics.bool__t (abst_base_case x) 
                (_p_A_equal (abst_base_term x) (abst_base_term x)) 
                basics.false) 
             (dk_bool.ite basics.bool__t (abst_base_case x) basics.false 
                (dk_bool.ite basics.bool__t 
                   (_p_B_equal (abst_inductive_first_term x) 
                      (abst_inductive_first_term x)) 
                   (dk_builtins.call_by_value abst_T basics.bool__t 
                      (dk_builtins.call_by_value abst_T 
                         (zen.arrow abst_T basics.bool__t) 
                         (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                            _p_B_equal abst_T abst_base_case abst_base_term 
                            abst_inductive_first_term 
                            abst_inductive_second_term) 
                         (abst_inductive_second_term x)) 
                      (abst_inductive_second_term x)) basics.false)) 
             (B0:
              (zen.proof (zen.triangle (focal.is_true (abst_base_case x)))) =>
              v_Vac:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (dk_bool.ite basics.bool__t (abst_base_case x) 
                             (_p_A_equal (abst_base_term x) 
                                (abst_base_term x)) basics.false))))) =>
              focal.zenon_focal_ite_bool_n (abst_base_case x) 
                (_p_A_equal (abst_base_term x) (abst_base_term x)) 
                basics.false 
                (B1:
                 (zen.proof (zen.triangle (focal.is_true (abst_base_case x)))) =>
                 v_Vbc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_base_term x) 
                                (abst_base_term x)))))) =>
                 zen.Rall _p_A_T 
                   (v_Vcc:(zen.term _p_A_T) =>
                    zen.triangle (focal.is_true (_p_A_equal v_Vcc v_Vcc))) 
                   (abst_base_term x) 
                   (v_Vdc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_base_term x) 
                                (abst_base_term x))))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_A_equal (abst_base_term x) (abst_base_term x)))) 
                      v_Vdc v_Vbc) _p_A_equal_reflexive) 
                (v_Vec:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_base_case x))))) =>
                 v_Vfc:(zen.proof (zen.not zen.False)) =>
                 zen.Raxiom 
                   (zen.triangle (focal.is_true (abst_base_case x))) B0 v_Vec) 
                v_Vac) 
             (v_Vec:
              (zen.proof 
                 (zen.not (zen.triangle (focal.is_true (abst_base_case x))))) =>
              v_Vgc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (dk_bool.ite basics.bool__t (abst_base_case x) 
                             basics.false 
                             (dk_bool.ite basics.bool__t 
                                (_p_B_equal (abst_inductive_first_term x) 
                                   (abst_inductive_first_term x)) 
                                (dk_builtins.call_by_value abst_T 
                                   basics.bool__t 
                                   (dk_builtins.call_by_value abst_T 
                                      (zen.arrow abst_T basics.bool__t) 
                                      (Linear_fixed_set__equal _p_A_T _p_B_T 
                                         _p_A_equal _p_B_equal abst_T 
                                         abst_base_case abst_base_term 
                                         abst_inductive_first_term 
                                         abst_inductive_second_term) 
                                      (abst_inductive_second_term x)) 
                                   (abst_inductive_second_term x)) 
                                basics.false)))))) =>
              zen.Raxiom (zen.triangle (focal.is_true (abst_base_case x))) B 
                v_Vec) v_Vzb))).

def Linear_fixed_set__equal_symmetric :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_A_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall _p_A_T 
                             (x:(cc.eT _p_A_T) =>
                              dk_logic.forall _p_A_T 
                                (y:(cc.eT _p_A_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (_p_A_equal x y)) 
                                   (dk_logic.ebP (_p_A_equal y x)))))) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  _p_B_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall _p_B_T 
                             (x:(cc.eT _p_B_T) =>
                              dk_logic.forall _p_B_T 
                                (y:(cc.eT _p_B_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (_p_B_equal x y)) 
                                   (dk_logic.ebP (_p_B_equal y x)))))) ->
  abst_T:cc.uT ->
  abst_base_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_base_term:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_inductive_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_inductive_first_term:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  abst_inductive_second_term:((cc.eT abst_T) -> cc.eT abst_T) ->
  abst_case_complete:(dk_logic.eP 
                        (dk_logic.forall abst_T 
                           (x:(cc.eT abst_T) =>
                            dk_logic.or (dk_logic.ebP (abst_base_case x)) 
                              (dk_logic.ebP (abst_inductive_case x))))) ->
  abst_case_exclusive:(dk_logic.eP 
                         (dk_logic.forall abst_T 
                            (x:(cc.eT abst_T) =>
                             dk_logic.not 
                               (dk_logic.and 
                                  (dk_logic.ebP (abst_base_case x)) 
                                  (dk_logic.ebP (abst_inductive_case x)))))) ->
  abst_inductive_symmetry:(dk_logic.eP 
                             (Linear_fixed_set__inductive_property abst_T 
                                abst_base_case abst_inductive_case 
                                abst_inductive_second_term 
                                (Linear_fixed_set__symmetry_prop _p_A_T 
                                   _p_B_T abst_T 
                                   (Linear_fixed_set__equal _p_A_T _p_B_T 
                                      _p_A_equal _p_B_equal abst_T 
                                      abst_base_case abst_base_term 
                                      abst_inductive_first_term 
                                      abst_inductive_second_term)))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                   abst_T abst_base_case abst_base_term 
                   abst_inductive_first_term abst_inductive_second_term x y)) 
             (dk_logic.ebP 
                (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                   abst_T abst_base_case abst_base_term 
                   abst_inductive_first_term abst_inductive_second_term y x)))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_A_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_A_T 
           (y:(cc.eT _p_A_T) =>
            dk_logic.imp (dk_logic.ebP (_p_A_equal x y)) 
              (dk_logic.ebP (_p_A_equal y x)))))) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  _p_B_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.imp (dk_logic.ebP (_p_B_equal x y)) 
              (dk_logic.ebP (_p_B_equal y x)))))) =>
  abst_T:cc.uT =>
  abst_base_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_base_term:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_inductive_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_inductive_first_term:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  abst_inductive_second_term:((cc.eT abst_T) -> cc.eT abst_T) =>
  abst_case_complete:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.or (dk_logic.ebP (abst_base_case x)) 
           (dk_logic.ebP (abst_inductive_case x))))) =>
  abst_case_exclusive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.not 
           (dk_logic.and (dk_logic.ebP (abst_base_case x)) 
              (dk_logic.ebP (abst_inductive_case x)))))) =>
  abst_inductive_symmetry:
  (dk_logic.eP 
     (Linear_fixed_set__inductive_property abst_T abst_base_case 
        abst_inductive_case abst_inductive_second_term 
        (Linear_fixed_set__symmetry_prop _p_A_T _p_B_T abst_T 
           (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
              abst_T abst_base_case abst_base_term abst_inductive_first_term 
              abst_inductive_second_term)))) =>
  (__E_1_LEMMA:
   (dk_logic.eP 
      (dk_logic.forall abst_T 
         (x:(cc.eT abst_T) =>
          Linear_fixed_set__symmetry_prop _p_A_T _p_B_T abst_T 
            (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
               abst_T abst_base_case abst_base_term 
               abst_inductive_first_term abst_inductive_second_term) x))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.imp 
              (zen.triangle 
                 (focal.is_true 
                    (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                       _p_B_equal abst_T abst_base_case abst_base_term 
                       abst_inductive_first_term abst_inductive_second_term 
                       v_Vzb v_Vac))) 
              (zen.triangle 
                 (focal.is_true 
                    (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                       _p_B_equal abst_T abst_base_case abst_base_term 
                       abst_inductive_first_term abst_inductive_second_term 
                       v_Vac v_Vzb)))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle 
                        (focal.is_true 
                           (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                              _p_B_equal abst_T abst_base_case 
                              abst_base_term abst_inductive_first_term 
                              abst_inductive_second_term v_Vzb v_Vac))) 
                     (zen.triangle 
                        (focal.is_true 
                           (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                              _p_B_equal abst_T abst_base_case 
                              abst_base_term abst_inductive_first_term 
                              abst_inductive_second_term v_Vac v_Vzb)))))))) =>
      zen.Rnotall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.imp 
              (zen.triangle 
                 (focal.is_true 
                    (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                       _p_B_equal abst_T abst_base_case abst_base_term 
                       abst_inductive_first_term abst_inductive_second_term 
                       v_Vzb v_Vac))) 
              (zen.triangle 
                 (focal.is_true 
                    (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                       _p_B_equal abst_T abst_base_case abst_base_term 
                       abst_inductive_first_term abst_inductive_second_term 
                       v_Vac v_Vzb))))) 
        (v_Vcc:(zen.term abst_T) =>
         v_Vdc:
         (zen.proof 
            (zen.not 
               (zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle 
                        (focal.is_true 
                           (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                              _p_B_equal abst_T abst_base_case 
                              abst_base_term abst_inductive_first_term 
                              abst_inductive_second_term v_Vcc v_Vac))) 
                     (zen.triangle 
                        (focal.is_true 
                           (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                              _p_B_equal abst_T abst_base_case 
                              abst_base_term abst_inductive_first_term 
                              abst_inductive_second_term v_Vac v_Vcc))))))) =>
         zen.Rnotall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.imp 
              (zen.triangle 
                 (focal.is_true 
                    (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                       _p_B_equal abst_T abst_base_case abst_base_term 
                       abst_inductive_first_term abst_inductive_second_term 
                       v_Vcc v_Vac))) 
              (zen.triangle 
                 (focal.is_true 
                    (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                       _p_B_equal abst_T abst_base_case abst_base_term 
                       abst_inductive_first_term abst_inductive_second_term 
                       v_Vac v_Vcc)))) 
           (v_Vec:(zen.term abst_T) =>
            v_Vfc:
            (zen.proof 
               (zen.not 
                  (zen.imp 
                     (zen.triangle 
                        (focal.is_true 
                           (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                              _p_B_equal abst_T abst_base_case 
                              abst_base_term abst_inductive_first_term 
                              abst_inductive_second_term v_Vcc v_Vec))) 
                     (zen.triangle 
                        (focal.is_true 
                           (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                              _p_B_equal abst_T abst_base_case 
                              abst_base_term abst_inductive_first_term 
                              abst_inductive_second_term v_Vec v_Vcc)))))) =>
            zen.Rnotimply 
              (zen.triangle 
                 (focal.is_true 
                    (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                       _p_B_equal abst_T abst_base_case abst_base_term 
                       abst_inductive_first_term abst_inductive_second_term 
                       v_Vcc v_Vec))) 
              (zen.triangle 
                 (focal.is_true 
                    (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                       _p_B_equal abst_T abst_base_case abst_base_term 
                       abst_inductive_first_term abst_inductive_second_term 
                       v_Vec v_Vcc))) 
              (v_Vgc:
               (zen.proof 
                  (zen.triangle 
                     (focal.is_true 
                        (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                           _p_B_equal abst_T abst_base_case abst_base_term 
                           abst_inductive_first_term 
                           abst_inductive_second_term v_Vcc v_Vec)))) =>
               v_Vhc:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                              _p_B_equal abst_T abst_base_case 
                              abst_base_term abst_inductive_first_term 
                              abst_inductive_second_term v_Vec v_Vcc))))) =>
               zen.Rall abst_T 
                 (v_Vzb:(zen.term abst_T) =>
                  zen.triangle 
                    (Linear_fixed_set__symmetry_prop _p_A_T _p_B_T abst_T 
                       (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                          _p_B_equal abst_T abst_base_case abst_base_term 
                          abst_inductive_first_term 
                          abst_inductive_second_term) v_Vzb)) v_Vcc 
                 (v_Vic:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vac:(zen.term abst_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (Linear_fixed_set__equal _p_A_T _p_B_T 
                                    _p_A_equal _p_B_equal abst_T 
                                    abst_base_case abst_base_term 
                                    abst_inductive_first_term 
                                    abst_inductive_second_term v_Vcc v_Vac))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (Linear_fixed_set__equal _p_A_T _p_B_T 
                                    _p_A_equal _p_B_equal abst_T 
                                    abst_base_case abst_base_term 
                                    abst_inductive_first_term 
                                    abst_inductive_second_term v_Vac v_Vcc)))))) =>
                  zen.Rall abst_T 
                    (v_Vac:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (Linear_fixed_set__equal _p_A_T _p_B_T 
                                _p_A_equal _p_B_equal abst_T abst_base_case 
                                abst_base_term abst_inductive_first_term 
                                abst_inductive_second_term v_Vcc v_Vac))) 
                       (zen.triangle 
                          (focal.is_true 
                             (Linear_fixed_set__equal _p_A_T _p_B_T 
                                _p_A_equal _p_B_equal abst_T abst_base_case 
                                abst_base_term abst_inductive_first_term 
                                abst_inductive_second_term v_Vac v_Vcc)))) 
                    v_Vec 
                    (v_Vjc:
                     (zen.proof 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (Linear_fixed_set__equal _p_A_T _p_B_T 
                                    _p_A_equal _p_B_equal abst_T 
                                    abst_base_case abst_base_term 
                                    abst_inductive_first_term 
                                    abst_inductive_second_term v_Vcc v_Vec))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (Linear_fixed_set__equal _p_A_T _p_B_T 
                                    _p_A_equal _p_B_equal abst_T 
                                    abst_base_case abst_base_term 
                                    abst_inductive_first_term 
                                    abst_inductive_second_term v_Vec v_Vcc))))) =>
                     zen.Rimply 
                       (zen.triangle 
                          (focal.is_true 
                             (Linear_fixed_set__equal _p_A_T _p_B_T 
                                _p_A_equal _p_B_equal abst_T abst_base_case 
                                abst_base_term abst_inductive_first_term 
                                abst_inductive_second_term v_Vcc v_Vec))) 
                       (zen.triangle 
                          (focal.is_true 
                             (Linear_fixed_set__equal _p_A_T _p_B_T 
                                _p_A_equal _p_B_equal abst_T abst_base_case 
                                abst_base_term abst_inductive_first_term 
                                abst_inductive_second_term v_Vec v_Vcc))) 
                       (v_Vkc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (Linear_fixed_set__equal _p_A_T _p_B_T 
                                       _p_A_equal _p_B_equal abst_T 
                                       abst_base_case abst_base_term 
                                       abst_inductive_first_term 
                                       abst_inductive_second_term v_Vcc v_Vec))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (Linear_fixed_set__equal _p_A_T _p_B_T 
                                   _p_A_equal _p_B_equal abst_T 
                                   abst_base_case abst_base_term 
                                   abst_inductive_first_term 
                                   abst_inductive_second_term v_Vcc v_Vec))) 
                          v_Vgc v_Vkc) 
                       (v_Vlc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (Linear_fixed_set__equal _p_A_T _p_B_T 
                                    _p_A_equal _p_B_equal abst_T 
                                    abst_base_case abst_base_term 
                                    abst_inductive_first_term 
                                    abst_inductive_second_term v_Vec v_Vcc)))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (Linear_fixed_set__equal _p_A_T _p_B_T 
                                   _p_A_equal _p_B_equal abst_T 
                                   abst_base_case abst_base_term 
                                   abst_inductive_first_term 
                                   abst_inductive_second_term v_Vec v_Vcc))) 
                          v_Vlc v_Vhc) v_Vjc) v_Vic) __E_1_LEMMA) v_Vfc) 
           v_Vdc) v_Vbc)) 
    ((__E_1_1_LEMMA:
      (x:(cc.eT abst_T) ->
       y:(cc.eT abst_T) ->
       B:(dk_logic.eP (dk_logic.ebP (abst_base_case x))) ->
       H:(dk_logic.eP 
            (dk_logic.ebP 
               (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                  abst_T abst_base_case abst_base_term 
                  abst_inductive_first_term abst_inductive_second_term x y))) ->
       dk_logic.eP 
         (dk_logic.ebP 
            (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
               abst_T abst_base_case abst_base_term 
               abst_inductive_first_term abst_inductive_second_term y x))) =>
      (__E_1_2_LEMMA:
       (x:(cc.eT abst_T) ->
        y:(cc.eT abst_T) ->
        I:(dk_logic.eP (dk_logic.ebP (abst_inductive_case x))) ->
        H:(dk_logic.eP 
             (dk_logic.ebP 
                (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                   abst_T abst_base_case abst_base_term 
                   abst_inductive_first_term abst_inductive_second_term x y))) ->
        R:(dk_logic.eP 
             (Linear_fixed_set__symmetry_prop _p_A_T _p_B_T abst_T 
                (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                   abst_T abst_base_case abst_base_term 
                   abst_inductive_first_term abst_inductive_second_term) 
                (abst_inductive_second_term x))) ->
        dk_logic.eP 
          (dk_logic.ebP 
             (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                abst_T abst_base_case abst_base_term 
                abst_inductive_first_term abst_inductive_second_term y x))) =>
       zen.nnpp 
         (zen.forall abst_T 
            (v_Vzb:(zen.term abst_T) =>
             zen.triangle 
               (Linear_fixed_set__symmetry_prop _p_A_T _p_B_T abst_T 
                  (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                     _p_B_equal abst_T abst_base_case abst_base_term 
                     abst_inductive_first_term abst_inductive_second_term) 
                  v_Vzb))) 
         (v_Vac:
          (zen.proof 
             (zen.not 
                (zen.forall abst_T 
                   (v_Vzb:(zen.term abst_T) =>
                    zen.triangle 
                      (Linear_fixed_set__symmetry_prop _p_A_T _p_B_T abst_T 
                         (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                            _p_B_equal abst_T abst_base_case abst_base_term 
                            abst_inductive_first_term 
                            abst_inductive_second_term) v_Vzb))))) =>
          zen.Rimply 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.imp 
                  (zen.triangle (focal.is_true (abst_base_case v_Vzb))) 
                  (zen.triangle 
                     (Linear_fixed_set__symmetry_prop _p_A_T _p_B_T abst_T 
                        (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                           _p_B_equal abst_T abst_base_case abst_base_term 
                           abst_inductive_first_term 
                           abst_inductive_second_term) v_Vzb)))) 
            (zen.imp 
               (zen.forall abst_T 
                  (v_Vzb:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle 
                        (focal.is_true (abst_inductive_case v_Vzb))) 
                     (zen.imp 
                        (zen.triangle 
                           (Linear_fixed_set__symmetry_prop _p_A_T _p_B_T 
                              abst_T 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term) 
                              (abst_inductive_second_term v_Vzb))) 
                        (zen.triangle 
                           (Linear_fixed_set__symmetry_prop _p_A_T _p_B_T 
                              abst_T 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term) v_Vzb))))) 
               (zen.forall abst_T 
                  (v_Vzb:(zen.term abst_T) =>
                   zen.triangle 
                     (Linear_fixed_set__symmetry_prop _p_A_T _p_B_T abst_T 
                        (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                           _p_B_equal abst_T abst_base_case abst_base_term 
                           abst_inductive_first_term 
                           abst_inductive_second_term) v_Vzb)))) 
            (v_Vbc:
             (zen.proof 
                (zen.not 
                   (zen.forall abst_T 
                      (v_Vzb:(zen.term abst_T) =>
                       zen.imp 
                         (zen.triangle (focal.is_true (abst_base_case v_Vzb))) 
                         (zen.triangle 
                            (Linear_fixed_set__symmetry_prop _p_A_T _p_B_T 
                               abst_T 
                               (Linear_fixed_set__equal _p_A_T _p_B_T 
                                  _p_A_equal _p_B_equal abst_T 
                                  abst_base_case abst_base_term 
                                  abst_inductive_first_term 
                                  abst_inductive_second_term) v_Vzb)))))) =>
             zen.Rnotall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.imp 
                  (zen.triangle (focal.is_true (abst_base_case v_Vzb))) 
                  (zen.triangle 
                     (Linear_fixed_set__symmetry_prop _p_A_T _p_B_T abst_T 
                        (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                           _p_B_equal abst_T abst_base_case abst_base_term 
                           abst_inductive_first_term 
                           abst_inductive_second_term) v_Vzb))) 
               (v_Vcc:(zen.term abst_T) =>
                v_Vdc:
                (zen.proof 
                   (zen.not 
                      (zen.imp 
                         (zen.triangle (focal.is_true (abst_base_case v_Vcc))) 
                         (zen.triangle 
                            (Linear_fixed_set__symmetry_prop _p_A_T _p_B_T 
                               abst_T 
                               (Linear_fixed_set__equal _p_A_T _p_B_T 
                                  _p_A_equal _p_B_equal abst_T 
                                  abst_base_case abst_base_term 
                                  abst_inductive_first_term 
                                  abst_inductive_second_term) v_Vcc))))) =>
                zen.Rnotimply 
                  (zen.triangle (focal.is_true (abst_base_case v_Vcc))) 
                  (zen.triangle 
                     (Linear_fixed_set__symmetry_prop _p_A_T _p_B_T abst_T 
                        (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                           _p_B_equal abst_T abst_base_case abst_base_term 
                           abst_inductive_first_term 
                           abst_inductive_second_term) v_Vcc)) 
                  (v_Vec:
                   (zen.proof 
                      (zen.triangle (focal.is_true (abst_base_case v_Vcc)))) =>
                   v_Vfc:
                   (zen.proof 
                      (zen.not 
                         (zen.forall abst_T 
                            (v_Vgc:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (Linear_fixed_set__equal _p_A_T _p_B_T 
                                        _p_A_equal _p_B_equal abst_T 
                                        abst_base_case abst_base_term 
                                        abst_inductive_first_term 
                                        abst_inductive_second_term v_Vcc 
                                        v_Vgc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (Linear_fixed_set__equal _p_A_T _p_B_T 
                                        _p_A_equal _p_B_equal abst_T 
                                        abst_base_case abst_base_term 
                                        abst_inductive_first_term 
                                        abst_inductive_second_term v_Vgc 
                                        v_Vcc))))))) =>
                   zen.Rnotall abst_T 
                     (v_Vgc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term v_Vcc v_Vgc))) 
                        (zen.triangle 
                           (focal.is_true 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term v_Vgc v_Vcc)))) 
                     (v_Vhc:(zen.term abst_T) =>
                      v_Vic:
                      (zen.proof 
                         (zen.not 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (Linear_fixed_set__equal _p_A_T _p_B_T 
                                        _p_A_equal _p_B_equal abst_T 
                                        abst_base_case abst_base_term 
                                        abst_inductive_first_term 
                                        abst_inductive_second_term v_Vcc 
                                        v_Vhc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (Linear_fixed_set__equal _p_A_T _p_B_T 
                                        _p_A_equal _p_B_equal abst_T 
                                        abst_base_case abst_base_term 
                                        abst_inductive_first_term 
                                        abst_inductive_second_term v_Vhc 
                                        v_Vcc)))))) =>
                      zen.Rnotimply 
                        (zen.triangle 
                           (focal.is_true 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term v_Vcc v_Vhc))) 
                        (zen.triangle 
                           (focal.is_true 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term v_Vhc v_Vcc))) 
                        (v_Vjc:
                         (zen.proof 
                            (zen.triangle 
                               (focal.is_true 
                                  (Linear_fixed_set__equal _p_A_T _p_B_T 
                                     _p_A_equal _p_B_equal abst_T 
                                     abst_base_case abst_base_term 
                                     abst_inductive_first_term 
                                     abst_inductive_second_term v_Vcc v_Vhc)))) =>
                         v_Vkc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (Linear_fixed_set__equal _p_A_T _p_B_T 
                                        _p_A_equal _p_B_equal abst_T 
                                        abst_base_case abst_base_term 
                                        abst_inductive_first_term 
                                        abst_inductive_second_term v_Vhc 
                                        v_Vcc))))) =>
                         zen.Rall abst_T 
                           (v_Vzb:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vgc:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (abst_base_case v_Vzb))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (Linear_fixed_set__equal _p_A_T 
                                             _p_B_T _p_A_equal _p_B_equal 
                                             abst_T abst_base_case 
                                             abst_base_term 
                                             abst_inductive_first_term 
                                             abst_inductive_second_term 
                                             v_Vzb v_Vgc))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (Linear_fixed_set__equal _p_A_T 
                                             _p_B_T _p_A_equal _p_B_equal 
                                             abst_T abst_base_case 
                                             abst_base_term 
                                             abst_inductive_first_term 
                                             abst_inductive_second_term 
                                             v_Vgc v_Vzb)))))) v_Vcc 
                           (v_Vlc:
                            (zen.proof 
                               (zen.forall abst_T 
                                  (v_Vgc:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (abst_base_case v_Vcc))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (Linear_fixed_set__equal 
                                                 _p_A_T _p_B_T _p_A_equal 
                                                 _p_B_equal abst_T 
                                                 abst_base_case 
                                                 abst_base_term 
                                                 abst_inductive_first_term 
                                                 abst_inductive_second_term 
                                                 v_Vcc v_Vgc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (Linear_fixed_set__equal 
                                                 _p_A_T _p_B_T _p_A_equal 
                                                 _p_B_equal abst_T 
                                                 abst_base_case 
                                                 abst_base_term 
                                                 abst_inductive_first_term 
                                                 abst_inductive_second_term 
                                                 v_Vgc v_Vcc))))))) =>
                            zen.Rall abst_T 
                              (v_Vgc:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (abst_base_case v_Vcc))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (Linear_fixed_set__equal _p_A_T 
                                             _p_B_T _p_A_equal _p_B_equal 
                                             abst_T abst_base_case 
                                             abst_base_term 
                                             abst_inductive_first_term 
                                             abst_inductive_second_term 
                                             v_Vcc v_Vgc))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (Linear_fixed_set__equal _p_A_T 
                                             _p_B_T _p_A_equal _p_B_equal 
                                             abst_T abst_base_case 
                                             abst_base_term 
                                             abst_inductive_first_term 
                                             abst_inductive_second_term 
                                             v_Vgc v_Vcc))))) v_Vhc 
                              (v_Vmc:
                               (zen.proof 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (abst_base_case v_Vcc))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (Linear_fixed_set__equal 
                                                 _p_A_T _p_B_T _p_A_equal 
                                                 _p_B_equal abst_T 
                                                 abst_base_case 
                                                 abst_base_term 
                                                 abst_inductive_first_term 
                                                 abst_inductive_second_term 
                                                 v_Vcc v_Vhc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (Linear_fixed_set__equal 
                                                 _p_A_T _p_B_T _p_A_equal 
                                                 _p_B_equal abst_T 
                                                 abst_base_case 
                                                 abst_base_term 
                                                 abst_inductive_first_term 
                                                 abst_inductive_second_term 
                                                 v_Vhc v_Vcc)))))) =>
                               zen.Rimply 
                                 (zen.triangle 
                                    (focal.is_true (abst_base_case v_Vcc))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (Linear_fixed_set__equal _p_A_T 
                                             _p_B_T _p_A_equal _p_B_equal 
                                             abst_T abst_base_case 
                                             abst_base_term 
                                             abst_inductive_first_term 
                                             abst_inductive_second_term 
                                             v_Vcc v_Vhc))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (Linear_fixed_set__equal _p_A_T 
                                             _p_B_T _p_A_equal _p_B_equal 
                                             abst_T abst_base_case 
                                             abst_base_term 
                                             abst_inductive_first_term 
                                             abst_inductive_second_term 
                                             v_Vhc v_Vcc)))) 
                                 (v_Vnc:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_base_case v_Vcc))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true (abst_base_case v_Vcc))) 
                                    v_Vec v_Vnc) 
                                 (v_Voc:
                                  (zen.proof 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (Linear_fixed_set__equal 
                                                 _p_A_T _p_B_T _p_A_equal 
                                                 _p_B_equal abst_T 
                                                 abst_base_case 
                                                 abst_base_term 
                                                 abst_inductive_first_term 
                                                 abst_inductive_second_term 
                                                 v_Vcc v_Vhc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (Linear_fixed_set__equal 
                                                 _p_A_T _p_B_T _p_A_equal 
                                                 _p_B_equal abst_T 
                                                 abst_base_case 
                                                 abst_base_term 
                                                 abst_inductive_first_term 
                                                 abst_inductive_second_term 
                                                 v_Vhc v_Vcc))))) =>
                                  zen.Rimply 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (Linear_fixed_set__equal _p_A_T 
                                             _p_B_T _p_A_equal _p_B_equal 
                                             abst_T abst_base_case 
                                             abst_base_term 
                                             abst_inductive_first_term 
                                             abst_inductive_second_term 
                                             v_Vcc v_Vhc))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (Linear_fixed_set__equal _p_A_T 
                                             _p_B_T _p_A_equal _p_B_equal 
                                             abst_T abst_base_case 
                                             abst_base_term 
                                             abst_inductive_first_term 
                                             abst_inductive_second_term 
                                             v_Vhc v_Vcc))) 
                                    (v_Vpc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (Linear_fixed_set__equal 
                                                    _p_A_T _p_B_T _p_A_equal 
                                                    _p_B_equal abst_T 
                                                    abst_base_case 
                                                    abst_base_term 
                                                    abst_inductive_first_term 
                                                    abst_inductive_second_term 
                                                    v_Vcc v_Vhc))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (Linear_fixed_set__equal _p_A_T 
                                                _p_B_T _p_A_equal _p_B_equal 
                                                abst_T abst_base_case 
                                                abst_base_term 
                                                abst_inductive_first_term 
                                                abst_inductive_second_term 
                                                v_Vcc v_Vhc))) v_Vjc v_Vpc) 
                                    (v_Vqc:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (Linear_fixed_set__equal 
                                                 _p_A_T _p_B_T _p_A_equal 
                                                 _p_B_equal abst_T 
                                                 abst_base_case 
                                                 abst_base_term 
                                                 abst_inductive_first_term 
                                                 abst_inductive_second_term 
                                                 v_Vhc v_Vcc)))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (Linear_fixed_set__equal _p_A_T 
                                                _p_B_T _p_A_equal _p_B_equal 
                                                abst_T abst_base_case 
                                                abst_base_term 
                                                abst_inductive_first_term 
                                                abst_inductive_second_term 
                                                v_Vhc v_Vcc))) v_Vqc v_Vkc) 
                                    v_Voc) v_Vmc) v_Vlc) __E_1_1_LEMMA) v_Vic) 
                     v_Vfc) v_Vdc) v_Vbc) 
            (v_Vrc:
             (zen.proof 
                (zen.imp 
                   (zen.forall abst_T 
                      (v_Vzb:(zen.term abst_T) =>
                       zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_inductive_case v_Vzb))) 
                         (zen.imp 
                            (zen.triangle 
                               (Linear_fixed_set__symmetry_prop _p_A_T 
                                  _p_B_T abst_T 
                                  (Linear_fixed_set__equal _p_A_T _p_B_T 
                                     _p_A_equal _p_B_equal abst_T 
                                     abst_base_case abst_base_term 
                                     abst_inductive_first_term 
                                     abst_inductive_second_term) 
                                  (abst_inductive_second_term v_Vzb))) 
                            (zen.triangle 
                               (Linear_fixed_set__symmetry_prop _p_A_T 
                                  _p_B_T abst_T 
                                  (Linear_fixed_set__equal _p_A_T _p_B_T 
                                     _p_A_equal _p_B_equal abst_T 
                                     abst_base_case abst_base_term 
                                     abst_inductive_first_term 
                                     abst_inductive_second_term) v_Vzb))))) 
                   (zen.forall abst_T 
                      (v_Vzb:(zen.term abst_T) =>
                       zen.triangle 
                         (Linear_fixed_set__symmetry_prop _p_A_T _p_B_T 
                            abst_T 
                            (Linear_fixed_set__equal _p_A_T _p_B_T 
                               _p_A_equal _p_B_equal abst_T abst_base_case 
                               abst_base_term abst_inductive_first_term 
                               abst_inductive_second_term) v_Vzb))))) =>
             zen.Rimply 
               (zen.forall abst_T 
                  (v_Vzb:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle 
                        (focal.is_true (abst_inductive_case v_Vzb))) 
                     (zen.imp 
                        (zen.triangle 
                           (Linear_fixed_set__symmetry_prop _p_A_T _p_B_T 
                              abst_T 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term) 
                              (abst_inductive_second_term v_Vzb))) 
                        (zen.triangle 
                           (Linear_fixed_set__symmetry_prop _p_A_T _p_B_T 
                              abst_T 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term) v_Vzb))))) 
               (zen.forall abst_T 
                  (v_Vzb:(zen.term abst_T) =>
                   zen.triangle 
                     (Linear_fixed_set__symmetry_prop _p_A_T _p_B_T abst_T 
                        (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                           _p_B_equal abst_T abst_base_case abst_base_term 
                           abst_inductive_first_term 
                           abst_inductive_second_term) v_Vzb))) 
               (v_Vsc:
                (zen.proof 
                   (zen.not 
                      (zen.forall abst_T 
                         (v_Vzb:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true (abst_inductive_case v_Vzb))) 
                            (zen.imp 
                               (zen.triangle 
                                  (Linear_fixed_set__symmetry_prop _p_A_T 
                                     _p_B_T abst_T 
                                     (Linear_fixed_set__equal _p_A_T _p_B_T 
                                        _p_A_equal _p_B_equal abst_T 
                                        abst_base_case abst_base_term 
                                        abst_inductive_first_term 
                                        abst_inductive_second_term) 
                                     (abst_inductive_second_term v_Vzb))) 
                               (zen.triangle 
                                  (Linear_fixed_set__symmetry_prop _p_A_T 
                                     _p_B_T abst_T 
                                     (Linear_fixed_set__equal _p_A_T _p_B_T 
                                        _p_A_equal _p_B_equal abst_T 
                                        abst_base_case abst_base_term 
                                        abst_inductive_first_term 
                                        abst_inductive_second_term) v_Vzb))))))) =>
                zen.Rnotall abst_T 
                  (v_Vzb:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle 
                        (focal.is_true (abst_inductive_case v_Vzb))) 
                     (zen.imp 
                        (zen.triangle 
                           (Linear_fixed_set__symmetry_prop _p_A_T _p_B_T 
                              abst_T 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term) 
                              (abst_inductive_second_term v_Vzb))) 
                        (zen.triangle 
                           (Linear_fixed_set__symmetry_prop _p_A_T _p_B_T 
                              abst_T 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term) v_Vzb)))) 
                  (v_Vtc:(zen.term abst_T) =>
                   v_Vuc:
                   (zen.proof 
                      (zen.not 
                         (zen.imp 
                            (zen.triangle 
                               (focal.is_true (abst_inductive_case v_Vtc))) 
                            (zen.imp 
                               (zen.triangle 
                                  (Linear_fixed_set__symmetry_prop _p_A_T 
                                     _p_B_T abst_T 
                                     (Linear_fixed_set__equal _p_A_T _p_B_T 
                                        _p_A_equal _p_B_equal abst_T 
                                        abst_base_case abst_base_term 
                                        abst_inductive_first_term 
                                        abst_inductive_second_term) 
                                     (abst_inductive_second_term v_Vtc))) 
                               (zen.triangle 
                                  (Linear_fixed_set__symmetry_prop _p_A_T 
                                     _p_B_T abst_T 
                                     (Linear_fixed_set__equal _p_A_T _p_B_T 
                                        _p_A_equal _p_B_equal abst_T 
                                        abst_base_case abst_base_term 
                                        abst_inductive_first_term 
                                        abst_inductive_second_term) v_Vtc)))))) =>
                   zen.Rnotimply 
                     (zen.triangle 
                        (focal.is_true (abst_inductive_case v_Vtc))) 
                     (zen.imp 
                        (zen.triangle 
                           (Linear_fixed_set__symmetry_prop _p_A_T _p_B_T 
                              abst_T 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term) 
                              (abst_inductive_second_term v_Vtc))) 
                        (zen.triangle 
                           (Linear_fixed_set__symmetry_prop _p_A_T _p_B_T 
                              abst_T 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term) v_Vtc))) 
                     (v_Vvc:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true (abst_inductive_case v_Vtc)))) =>
                      v_Vwc:
                      (zen.proof 
                         (zen.not 
                            (zen.imp 
                               (zen.triangle 
                                  (Linear_fixed_set__symmetry_prop _p_A_T 
                                     _p_B_T abst_T 
                                     (Linear_fixed_set__equal _p_A_T _p_B_T 
                                        _p_A_equal _p_B_equal abst_T 
                                        abst_base_case abst_base_term 
                                        abst_inductive_first_term 
                                        abst_inductive_second_term) 
                                     (abst_inductive_second_term v_Vtc))) 
                               (zen.triangle 
                                  (Linear_fixed_set__symmetry_prop _p_A_T 
                                     _p_B_T abst_T 
                                     (Linear_fixed_set__equal _p_A_T _p_B_T 
                                        _p_A_equal _p_B_equal abst_T 
                                        abst_base_case abst_base_term 
                                        abst_inductive_first_term 
                                        abst_inductive_second_term) v_Vtc))))) =>
                      zen.Rnotimply 
                        (zen.triangle 
                           (Linear_fixed_set__symmetry_prop _p_A_T _p_B_T 
                              abst_T 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term) 
                              (abst_inductive_second_term v_Vtc))) 
                        (zen.triangle 
                           (Linear_fixed_set__symmetry_prop _p_A_T _p_B_T 
                              abst_T 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term) v_Vtc)) 
                        (v_Vxc:
                         (zen.proof 
                            (zen.forall abst_T 
                               (v_Vgc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (Linear_fixed_set__equal _p_A_T 
                                           _p_B_T _p_A_equal _p_B_equal 
                                           abst_T abst_base_case 
                                           abst_base_term 
                                           abst_inductive_first_term 
                                           abst_inductive_second_term 
                                           (abst_inductive_second_term v_Vtc) 
                                           v_Vgc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (Linear_fixed_set__equal _p_A_T 
                                           _p_B_T _p_A_equal _p_B_equal 
                                           abst_T abst_base_case 
                                           abst_base_term 
                                           abst_inductive_first_term 
                                           abst_inductive_second_term v_Vgc 
                                           (abst_inductive_second_term v_Vtc))))))) =>
                         v_Vyc:
                         (zen.proof 
                            (zen.not 
                               (zen.forall abst_T 
                                  (v_Vgc:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (Linear_fixed_set__equal _p_A_T 
                                              _p_B_T _p_A_equal _p_B_equal 
                                              abst_T abst_base_case 
                                              abst_base_term 
                                              abst_inductive_first_term 
                                              abst_inductive_second_term 
                                              v_Vtc v_Vgc))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (Linear_fixed_set__equal _p_A_T 
                                              _p_B_T _p_A_equal _p_B_equal 
                                              abst_T abst_base_case 
                                              abst_base_term 
                                              abst_inductive_first_term 
                                              abst_inductive_second_term 
                                              v_Vgc v_Vtc))))))) =>
                         zen.Rnotall abst_T 
                           (v_Vgc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (Linear_fixed_set__equal _p_A_T _p_B_T 
                                       _p_A_equal _p_B_equal abst_T 
                                       abst_base_case abst_base_term 
                                       abst_inductive_first_term 
                                       abst_inductive_second_term v_Vtc v_Vgc))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (Linear_fixed_set__equal _p_A_T _p_B_T 
                                       _p_A_equal _p_B_equal abst_T 
                                       abst_base_case abst_base_term 
                                       abst_inductive_first_term 
                                       abst_inductive_second_term v_Vgc v_Vtc)))) 
                           (v_Vzc:(zen.term abst_T) =>
                            v_Vad:
                            (zen.proof 
                               (zen.not 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (Linear_fixed_set__equal _p_A_T 
                                              _p_B_T _p_A_equal _p_B_equal 
                                              abst_T abst_base_case 
                                              abst_base_term 
                                              abst_inductive_first_term 
                                              abst_inductive_second_term 
                                              v_Vtc v_Vzc))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (Linear_fixed_set__equal _p_A_T 
                                              _p_B_T _p_A_equal _p_B_equal 
                                              abst_T abst_base_case 
                                              abst_base_term 
                                              abst_inductive_first_term 
                                              abst_inductive_second_term 
                                              v_Vzc v_Vtc)))))) =>
                            zen.Rnotimply 
                              (zen.triangle 
                                 (focal.is_true 
                                    (Linear_fixed_set__equal _p_A_T _p_B_T 
                                       _p_A_equal _p_B_equal abst_T 
                                       abst_base_case abst_base_term 
                                       abst_inductive_first_term 
                                       abst_inductive_second_term v_Vtc v_Vzc))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (Linear_fixed_set__equal _p_A_T _p_B_T 
                                       _p_A_equal _p_B_equal abst_T 
                                       abst_base_case abst_base_term 
                                       abst_inductive_first_term 
                                       abst_inductive_second_term v_Vzc v_Vtc))) 
                              (v_Vbd:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (Linear_fixed_set__equal _p_A_T 
                                           _p_B_T _p_A_equal _p_B_equal 
                                           abst_T abst_base_case 
                                           abst_base_term 
                                           abst_inductive_first_term 
                                           abst_inductive_second_term v_Vtc 
                                           v_Vzc)))) =>
                               v_Vcd:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (Linear_fixed_set__equal _p_A_T 
                                              _p_B_T _p_A_equal _p_B_equal 
                                              abst_T abst_base_case 
                                              abst_base_term 
                                              abst_inductive_first_term 
                                              abst_inductive_second_term 
                                              v_Vzc v_Vtc))))) =>
                               zen.Rall abst_T 
                                 (v_Vzb:(zen.term abst_T) =>
                                  zen.forall abst_T 
                                    (v_Vgc:(zen.term abst_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_inductive_case v_Vzb))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (Linear_fixed_set__equal 
                                                   _p_A_T _p_B_T _p_A_equal 
                                                   _p_B_equal abst_T 
                                                   abst_base_case 
                                                   abst_base_term 
                                                   abst_inductive_first_term 
                                                   abst_inductive_second_term 
                                                   v_Vzb v_Vgc))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (Linear_fixed_set__symmetry_prop 
                                                   _p_A_T _p_B_T abst_T 
                                                   (Linear_fixed_set__equal 
                                                      _p_A_T _p_B_T 
                                                      _p_A_equal _p_B_equal 
                                                      abst_T abst_base_case 
                                                      abst_base_term 
                                                      abst_inductive_first_term 
                                                      abst_inductive_second_term) 
                                                   (abst_inductive_second_term 
                                                      v_Vzb))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (Linear_fixed_set__equal 
                                                      _p_A_T _p_B_T 
                                                      _p_A_equal _p_B_equal 
                                                      abst_T abst_base_case 
                                                      abst_base_term 
                                                      abst_inductive_first_term 
                                                      abst_inductive_second_term 
                                                      v_Vgc v_Vzb))))))) 
                                 v_Vtc 
                                 (v_Vdd:
                                  (zen.proof 
                                     (zen.forall abst_T 
                                        (v_Vgc:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_inductive_case v_Vtc))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (Linear_fixed_set__equal 
                                                       _p_A_T _p_B_T 
                                                       _p_A_equal _p_B_equal 
                                                       abst_T abst_base_case 
                                                       abst_base_term 
                                                       abst_inductive_first_term 
                                                       abst_inductive_second_term 
                                                       v_Vtc v_Vgc))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (Linear_fixed_set__symmetry_prop 
                                                       _p_A_T _p_B_T abst_T 
                                                       (Linear_fixed_set__equal 
                                                          _p_A_T _p_B_T 
                                                          _p_A_equal 
                                                          _p_B_equal abst_T 
                                                          abst_base_case 
                                                          abst_base_term 
                                                          abst_inductive_first_term 
                                                          abst_inductive_second_term) 
                                                       (abst_inductive_second_term 
                                                          v_Vtc))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (Linear_fixed_set__equal 
                                                          _p_A_T _p_B_T 
                                                          _p_A_equal 
                                                          _p_B_equal abst_T 
                                                          abst_base_case 
                                                          abst_base_term 
                                                          abst_inductive_first_term 
                                                          abst_inductive_second_term 
                                                          v_Vgc v_Vtc)))))))) =>
                                  zen.Rall abst_T 
                                    (v_Vgc:(zen.term abst_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_inductive_case v_Vtc))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (Linear_fixed_set__equal 
                                                   _p_A_T _p_B_T _p_A_equal 
                                                   _p_B_equal abst_T 
                                                   abst_base_case 
                                                   abst_base_term 
                                                   abst_inductive_first_term 
                                                   abst_inductive_second_term 
                                                   v_Vtc v_Vgc))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (Linear_fixed_set__symmetry_prop 
                                                   _p_A_T _p_B_T abst_T 
                                                   (Linear_fixed_set__equal 
                                                      _p_A_T _p_B_T 
                                                      _p_A_equal _p_B_equal 
                                                      abst_T abst_base_case 
                                                      abst_base_term 
                                                      abst_inductive_first_term 
                                                      abst_inductive_second_term) 
                                                   (abst_inductive_second_term 
                                                      v_Vtc))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (Linear_fixed_set__equal 
                                                      _p_A_T _p_B_T 
                                                      _p_A_equal _p_B_equal 
                                                      abst_T abst_base_case 
                                                      abst_base_term 
                                                      abst_inductive_first_term 
                                                      abst_inductive_second_term 
                                                      v_Vgc v_Vtc)))))) 
                                    v_Vzc 
                                    (v_Ved:
                                     (zen.proof 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_inductive_case v_Vtc))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (Linear_fixed_set__equal 
                                                       _p_A_T _p_B_T 
                                                       _p_A_equal _p_B_equal 
                                                       abst_T abst_base_case 
                                                       abst_base_term 
                                                       abst_inductive_first_term 
                                                       abst_inductive_second_term 
                                                       v_Vtc v_Vzc))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (Linear_fixed_set__symmetry_prop 
                                                       _p_A_T _p_B_T abst_T 
                                                       (Linear_fixed_set__equal 
                                                          _p_A_T _p_B_T 
                                                          _p_A_equal 
                                                          _p_B_equal abst_T 
                                                          abst_base_case 
                                                          abst_base_term 
                                                          abst_inductive_first_term 
                                                          abst_inductive_second_term) 
                                                       (abst_inductive_second_term 
                                                          v_Vtc))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (Linear_fixed_set__equal 
                                                          _p_A_T _p_B_T 
                                                          _p_A_equal 
                                                          _p_B_equal abst_T 
                                                          abst_base_case 
                                                          abst_base_term 
                                                          abst_inductive_first_term 
                                                          abst_inductive_second_term 
                                                          v_Vzc v_Vtc))))))) =>
                                     zen.Rimply 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_inductive_case v_Vtc))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (Linear_fixed_set__equal 
                                                   _p_A_T _p_B_T _p_A_equal 
                                                   _p_B_equal abst_T 
                                                   abst_base_case 
                                                   abst_base_term 
                                                   abst_inductive_first_term 
                                                   abst_inductive_second_term 
                                                   v_Vtc v_Vzc))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (Linear_fixed_set__symmetry_prop 
                                                   _p_A_T _p_B_T abst_T 
                                                   (Linear_fixed_set__equal 
                                                      _p_A_T _p_B_T 
                                                      _p_A_equal _p_B_equal 
                                                      abst_T abst_base_case 
                                                      abst_base_term 
                                                      abst_inductive_first_term 
                                                      abst_inductive_second_term) 
                                                   (abst_inductive_second_term 
                                                      v_Vtc))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (Linear_fixed_set__equal 
                                                      _p_A_T _p_B_T 
                                                      _p_A_equal _p_B_equal 
                                                      abst_T abst_base_case 
                                                      abst_base_term 
                                                      abst_inductive_first_term 
                                                      abst_inductive_second_term 
                                                      v_Vzc v_Vtc))))) 
                                       (v_Vfd:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_inductive_case 
                                                       v_Vtc))))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_inductive_case v_Vtc))) 
                                          v_Vvc v_Vfd) 
                                       (v_Vgd:
                                        (zen.proof 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (Linear_fixed_set__equal 
                                                       _p_A_T _p_B_T 
                                                       _p_A_equal _p_B_equal 
                                                       abst_T abst_base_case 
                                                       abst_base_term 
                                                       abst_inductive_first_term 
                                                       abst_inductive_second_term 
                                                       v_Vtc v_Vzc))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (Linear_fixed_set__symmetry_prop 
                                                       _p_A_T _p_B_T abst_T 
                                                       (Linear_fixed_set__equal 
                                                          _p_A_T _p_B_T 
                                                          _p_A_equal 
                                                          _p_B_equal abst_T 
                                                          abst_base_case 
                                                          abst_base_term 
                                                          abst_inductive_first_term 
                                                          abst_inductive_second_term) 
                                                       (abst_inductive_second_term 
                                                          v_Vtc))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (Linear_fixed_set__equal 
                                                          _p_A_T _p_B_T 
                                                          _p_A_equal 
                                                          _p_B_equal abst_T 
                                                          abst_base_case 
                                                          abst_base_term 
                                                          abst_inductive_first_term 
                                                          abst_inductive_second_term 
                                                          v_Vzc v_Vtc)))))) =>
                                        zen.Rimply 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (Linear_fixed_set__equal 
                                                   _p_A_T _p_B_T _p_A_equal 
                                                   _p_B_equal abst_T 
                                                   abst_base_case 
                                                   abst_base_term 
                                                   abst_inductive_first_term 
                                                   abst_inductive_second_term 
                                                   v_Vtc v_Vzc))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (Linear_fixed_set__symmetry_prop 
                                                   _p_A_T _p_B_T abst_T 
                                                   (Linear_fixed_set__equal 
                                                      _p_A_T _p_B_T 
                                                      _p_A_equal _p_B_equal 
                                                      abst_T abst_base_case 
                                                      abst_base_term 
                                                      abst_inductive_first_term 
                                                      abst_inductive_second_term) 
                                                   (abst_inductive_second_term 
                                                      v_Vtc))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (Linear_fixed_set__equal 
                                                      _p_A_T _p_B_T 
                                                      _p_A_equal _p_B_equal 
                                                      abst_T abst_base_case 
                                                      abst_base_term 
                                                      abst_inductive_first_term 
                                                      abst_inductive_second_term 
                                                      v_Vzc v_Vtc)))) 
                                          (v_Vhd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (Linear_fixed_set__equal 
                                                          _p_A_T _p_B_T 
                                                          _p_A_equal 
                                                          _p_B_equal abst_T 
                                                          abst_base_case 
                                                          abst_base_term 
                                                          abst_inductive_first_term 
                                                          abst_inductive_second_term 
                                                          v_Vtc v_Vzc))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (Linear_fixed_set__equal 
                                                      _p_A_T _p_B_T 
                                                      _p_A_equal _p_B_equal 
                                                      abst_T abst_base_case 
                                                      abst_base_term 
                                                      abst_inductive_first_term 
                                                      abst_inductive_second_term 
                                                      v_Vtc v_Vzc))) v_Vbd 
                                             v_Vhd) 
                                          (v_Vid:
                                           (zen.proof 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (Linear_fixed_set__symmetry_prop 
                                                       _p_A_T _p_B_T abst_T 
                                                       (Linear_fixed_set__equal 
                                                          _p_A_T _p_B_T 
                                                          _p_A_equal 
                                                          _p_B_equal abst_T 
                                                          abst_base_case 
                                                          abst_base_term 
                                                          abst_inductive_first_term 
                                                          abst_inductive_second_term) 
                                                       (abst_inductive_second_term 
                                                          v_Vtc))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (Linear_fixed_set__equal 
                                                          _p_A_T _p_B_T 
                                                          _p_A_equal 
                                                          _p_B_equal abst_T 
                                                          abst_base_case 
                                                          abst_base_term 
                                                          abst_inductive_first_term 
                                                          abst_inductive_second_term 
                                                          v_Vzc v_Vtc))))) =>
                                           zen.Rimply 
                                             (zen.triangle 
                                                (Linear_fixed_set__symmetry_prop 
                                                   _p_A_T _p_B_T abst_T 
                                                   (Linear_fixed_set__equal 
                                                      _p_A_T _p_B_T 
                                                      _p_A_equal _p_B_equal 
                                                      abst_T abst_base_case 
                                                      abst_base_term 
                                                      abst_inductive_first_term 
                                                      abst_inductive_second_term) 
                                                   (abst_inductive_second_term 
                                                      v_Vtc))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (Linear_fixed_set__equal 
                                                      _p_A_T _p_B_T 
                                                      _p_A_equal _p_B_equal 
                                                      abst_T abst_base_case 
                                                      abst_base_term 
                                                      abst_inductive_first_term 
                                                      abst_inductive_second_term 
                                                      v_Vzc v_Vtc))) 
                                             (v_Vjd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.forall abst_T 
                                                       (v_Vgc:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (Linear_fixed_set__equal 
                                                                   _p_A_T 
                                                                   _p_B_T 
                                                                   _p_A_equal 
                                                                   _p_B_equal 
                                                                   abst_T 
                                                                   abst_base_case 
                                                                   abst_base_term 
                                                                   abst_inductive_first_term 
                                                                   abst_inductive_second_term 
                                                                   (abst_inductive_second_term 
                                                                    v_Vtc) 
                                                                   v_Vgc))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (Linear_fixed_set__equal 
                                                                   _p_A_T 
                                                                   _p_B_T 
                                                                   _p_A_equal 
                                                                   _p_B_equal 
                                                                   abst_T 
                                                                   abst_base_case 
                                                                   abst_base_term 
                                                                   abst_inductive_first_term 
                                                                   abst_inductive_second_term 
                                                                   v_Vgc 
                                                                   (abst_inductive_second_term 
                                                                    v_Vtc)))))))) =>
                                              zen.Raxiom 
                                                (zen.forall abst_T 
                                                   (v_Vgc:
                                                    (zen.term abst_T) =>
                                                    zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (Linear_fixed_set__equal 
                                                               _p_A_T _p_B_T 
                                                               _p_A_equal 
                                                               _p_B_equal 
                                                               abst_T 
                                                               abst_base_case 
                                                               abst_base_term 
                                                               abst_inductive_first_term 
                                                               abst_inductive_second_term 
                                                               (abst_inductive_second_term 
                                                                  v_Vtc) 
                                                               v_Vgc))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (Linear_fixed_set__equal 
                                                               _p_A_T _p_B_T 
                                                               _p_A_equal 
                                                               _p_B_equal 
                                                               abst_T 
                                                               abst_base_case 
                                                               abst_base_term 
                                                               abst_inductive_first_term 
                                                               abst_inductive_second_term 
                                                               v_Vgc 
                                                               (abst_inductive_second_term 
                                                                  v_Vtc)))))) 
                                                v_Vxc v_Vjd) 
                                             (v_Vkd:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (Linear_fixed_set__equal 
                                                          _p_A_T _p_B_T 
                                                          _p_A_equal 
                                                          _p_B_equal abst_T 
                                                          abst_base_case 
                                                          abst_base_term 
                                                          abst_inductive_first_term 
                                                          abst_inductive_second_term 
                                                          v_Vzc v_Vtc)))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (Linear_fixed_set__equal 
                                                         _p_A_T _p_B_T 
                                                         _p_A_equal 
                                                         _p_B_equal abst_T 
                                                         abst_base_case 
                                                         abst_base_term 
                                                         abst_inductive_first_term 
                                                         abst_inductive_second_term 
                                                         v_Vzc v_Vtc))) 
                                                v_Vkd v_Vcd) v_Vid) v_Vgd) 
                                       v_Ved) v_Vdd) __E_1_2_LEMMA) v_Vad) 
                           v_Vyc) v_Vwc) v_Vuc) v_Vsc) 
               (v_Vld:
                (zen.proof 
                   (zen.forall abst_T 
                      (v_Vzb:(zen.term abst_T) =>
                       zen.triangle 
                         (Linear_fixed_set__symmetry_prop _p_A_T _p_B_T 
                            abst_T 
                            (Linear_fixed_set__equal _p_A_T _p_B_T 
                               _p_A_equal _p_B_equal abst_T abst_base_case 
                               abst_base_term abst_inductive_first_term 
                               abst_inductive_second_term) v_Vzb)))) =>
                zen.Raxiom 
                  (zen.forall abst_T 
                     (v_Vzb:(zen.term abst_T) =>
                      zen.triangle 
                        (Linear_fixed_set__symmetry_prop _p_A_T _p_B_T 
                           abst_T 
                           (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                              _p_B_equal abst_T abst_base_case 
                              abst_base_term abst_inductive_first_term 
                              abst_inductive_second_term) v_Vzb))) v_Vld 
                  v_Vac) v_Vrc) abst_inductive_symmetry)) 
        (x:(cc.eT abst_T) =>
         y:(cc.eT abst_T) =>
         I:(dk_logic.eP (dk_logic.ebP (abst_inductive_case x))) =>
         H:
         (dk_logic.eP 
            (dk_logic.ebP 
               (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                  abst_T abst_base_case abst_base_term 
                  abst_inductive_first_term abst_inductive_second_term x y))) =>
         R:
         (dk_logic.eP 
            (Linear_fixed_set__symmetry_prop _p_A_T _p_B_T abst_T 
               (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                  abst_T abst_base_case abst_base_term 
                  abst_inductive_first_term abst_inductive_second_term) 
               (abst_inductive_second_term x))) =>
         (__E_1_2_1_LEMMA:
          (dk_logic.eP 
             (dk_logic.ebP 
                (_p_B_equal (abst_inductive_first_term y) 
                   (abst_inductive_first_term x)))) =>
          (__E_1_2_2_LEMMA:
           (dk_logic.eP 
              (dk_logic.ebP 
                 (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                    _p_B_equal abst_T abst_base_case abst_base_term 
                    abst_inductive_first_term abst_inductive_second_term 
                    (abst_inductive_second_term y) 
                    (abst_inductive_second_term x)))) =>
           (__E_1_2_3_LEMMA:
            (dk_logic.eP (dk_logic.not (dk_logic.ebP (abst_base_case y)))) =>
            dk_builtins.magic_prove 
              (dk_logic.ebP 
                 (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                    _p_B_equal abst_T abst_base_case abst_base_term 
                    abst_inductive_first_term abst_inductive_second_term y x))) 
             (zen.nnpp 
                (zen.not (zen.triangle (focal.is_true (abst_base_case y)))) 
                (v_Vzb:
                 (zen.proof 
                    (zen.not 
                       (zen.not 
                          (zen.triangle (focal.is_true (abst_base_case y)))))) =>
                 zen.Rnotnot 
                   (zen.triangle (focal.is_true (abst_base_case y))) 
                   (v_Vac:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_base_case y)))) =>
                    focal.zenon_focal_ite_bool (abst_base_case x) 
                      (dk_bool.ite basics.bool__t (abst_base_case y) 
                         (_p_A_equal (abst_base_term x) (abst_base_term y)) 
                         basics.false) 
                      (dk_bool.ite basics.bool__t (abst_base_case y) 
                         basics.false 
                         (dk_bool.ite basics.bool__t 
                            (_p_B_equal (abst_inductive_first_term x) 
                               (abst_inductive_first_term y)) 
                            (dk_builtins.call_by_value abst_T basics.bool__t 
                               (dk_builtins.call_by_value abst_T 
                                  (zen.arrow abst_T basics.bool__t) 
                                  (Linear_fixed_set__equal _p_A_T _p_B_T 
                                     _p_A_equal _p_B_equal abst_T 
                                     abst_base_case abst_base_term 
                                     abst_inductive_first_term 
                                     abst_inductive_second_term) 
                                  (abst_inductive_second_term x)) 
                               (abst_inductive_second_term y)) basics.false)) 
                      (v_Vbc:
                       (zen.proof 
                          (zen.triangle (focal.is_true (abst_base_case x)))) =>
                       v_Vcc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (dk_bool.ite basics.bool__t 
                                   (abst_base_case y) 
                                   (_p_A_equal (abst_base_term x) 
                                      (abst_base_term y)) basics.false)))) =>
                       zen.Rall abst_T 
                         (v_Vdc:(zen.term abst_T) =>
                          zen.not 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (abst_base_case v_Vdc))) 
                               (zen.triangle 
                                  (focal.is_true (abst_inductive_case v_Vdc))))) 
                         x 
                         (v_Vec:
                          (zen.proof 
                             (zen.not 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true (abst_base_case x))) 
                                   (zen.triangle 
                                      (focal.is_true (abst_inductive_case x)))))) =>
                          zen.Rnotand 
                            (zen.triangle (focal.is_true (abst_base_case x))) 
                            (zen.triangle 
                               (focal.is_true (abst_inductive_case x))) 
                            (v_Vfc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_base_case x))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (abst_base_case x))) v_Vbc 
                               v_Vfc) 
                            (v_Vgc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_inductive_case x))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (abst_inductive_case x))) I 
                               v_Vgc) v_Vec) abst_case_exclusive) 
                      (v_Vfc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle (focal.is_true (abst_base_case x))))) =>
                       v_Vhc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (dk_bool.ite basics.bool__t 
                                   (abst_base_case y) basics.false 
                                   (dk_bool.ite basics.bool__t 
                                      (_p_B_equal 
                                         (abst_inductive_first_term x) 
                                         (abst_inductive_first_term y)) 
                                      (dk_builtins.call_by_value abst_T 
                                         basics.bool__t 
                                         (dk_builtins.call_by_value abst_T 
                                            (zen.arrow abst_T basics.bool__t) 
                                            (Linear_fixed_set__equal _p_A_T 
                                               _p_B_T _p_A_equal _p_B_equal 
                                               abst_T abst_base_case 
                                               abst_base_term 
                                               abst_inductive_first_term 
                                               abst_inductive_second_term) 
                                            (abst_inductive_second_term x)) 
                                         (abst_inductive_second_term y)) 
                                      basics.false))))) =>
                       focal.zenon_focal_ite_bool (abst_base_case y) 
                         basics.false 
                         (dk_bool.ite basics.bool__t 
                            (_p_B_equal (abst_inductive_first_term x) 
                               (abst_inductive_first_term y)) 
                            (dk_builtins.call_by_value abst_T basics.bool__t 
                               (dk_builtins.call_by_value abst_T 
                                  (zen.arrow abst_T basics.bool__t) 
                                  (Linear_fixed_set__equal _p_A_T _p_B_T 
                                     _p_A_equal _p_B_equal abst_T 
                                     abst_base_case abst_base_term 
                                     abst_inductive_first_term 
                                     abst_inductive_second_term) 
                                  (abst_inductive_second_term x)) 
                               (abst_inductive_second_term y)) basics.false) 
                         (v_Vac0:
                          (zen.proof 
                             (zen.triangle (focal.is_true (abst_base_case y)))) =>
                          v_Vic:(zen.proof zen.False) => zen.Rfalse v_Vic) 
                         (v_Vjc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_base_case y))))) =>
                          v_Vkc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (dk_bool.ite basics.bool__t 
                                      (_p_B_equal 
                                         (abst_inductive_first_term x) 
                                         (abst_inductive_first_term y)) 
                                      (dk_builtins.call_by_value abst_T 
                                         basics.bool__t 
                                         (dk_builtins.call_by_value abst_T 
                                            (zen.arrow abst_T basics.bool__t) 
                                            (Linear_fixed_set__equal _p_A_T 
                                               _p_B_T _p_A_equal _p_B_equal 
                                               abst_T abst_base_case 
                                               abst_base_term 
                                               abst_inductive_first_term 
                                               abst_inductive_second_term) 
                                            (abst_inductive_second_term x)) 
                                         (abst_inductive_second_term y)) 
                                      basics.false)))) =>
                          zen.Raxiom 
                            (zen.triangle (focal.is_true (abst_base_case y))) 
                            v_Vac v_Vjc) v_Vhc) H) v_Vzb))) 
            ((__E_1_2_2_1_LEMMA:
              (dk_logic.eP 
                 (dk_logic.ebP 
                    (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                       _p_B_equal abst_T abst_base_case abst_base_term 
                       abst_inductive_first_term abst_inductive_second_term 
                       (abst_inductive_second_term x) 
                       (abst_inductive_second_term y)))) =>
              zen.nnpp 
                (zen.triangle 
                   (focal.is_true 
                      (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                         _p_B_equal abst_T abst_base_case abst_base_term 
                         abst_inductive_first_term 
                         abst_inductive_second_term 
                         (abst_inductive_second_term y) 
                         (abst_inductive_second_term x)))) 
                (v_Vzb:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (Linear_fixed_set__equal _p_A_T _p_B_T 
                                _p_A_equal _p_B_equal abst_T abst_base_case 
                                abst_base_term abst_inductive_first_term 
                                abst_inductive_second_term 
                                (abst_inductive_second_term y) 
                                (abst_inductive_second_term x)))))) =>
                 zen.Rall abst_T 
                   (v_Vac:(zen.term abst_T) =>
                    zen.imp 
                      (zen.triangle 
                         (focal.is_true 
                            (Linear_fixed_set__equal _p_A_T _p_B_T 
                               _p_A_equal _p_B_equal abst_T abst_base_case 
                               abst_base_term abst_inductive_first_term 
                               abst_inductive_second_term 
                               (abst_inductive_second_term x) v_Vac))) 
                      (zen.triangle 
                         (focal.is_true 
                            (Linear_fixed_set__equal _p_A_T _p_B_T 
                               _p_A_equal _p_B_equal abst_T abst_base_case 
                               abst_base_term abst_inductive_first_term 
                               abst_inductive_second_term v_Vac 
                               (abst_inductive_second_term x))))) 
                   (abst_inductive_second_term y) 
                   (v_Vbc:
                    (zen.proof 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (Linear_fixed_set__equal _p_A_T _p_B_T 
                                   _p_A_equal _p_B_equal abst_T 
                                   abst_base_case abst_base_term 
                                   abst_inductive_first_term 
                                   abst_inductive_second_term 
                                   (abst_inductive_second_term x) 
                                   (abst_inductive_second_term y)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Linear_fixed_set__equal _p_A_T _p_B_T 
                                   _p_A_equal _p_B_equal abst_T 
                                   abst_base_case abst_base_term 
                                   abst_inductive_first_term 
                                   abst_inductive_second_term 
                                   (abst_inductive_second_term y) 
                                   (abst_inductive_second_term x)))))) =>
                    zen.Rimply 
                      (zen.triangle 
                         (focal.is_true 
                            (Linear_fixed_set__equal _p_A_T _p_B_T 
                               _p_A_equal _p_B_equal abst_T abst_base_case 
                               abst_base_term abst_inductive_first_term 
                               abst_inductive_second_term 
                               (abst_inductive_second_term x) 
                               (abst_inductive_second_term y)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (Linear_fixed_set__equal _p_A_T _p_B_T 
                               _p_A_equal _p_B_equal abst_T abst_base_case 
                               abst_base_term abst_inductive_first_term 
                               abst_inductive_second_term 
                               (abst_inductive_second_term y) 
                               (abst_inductive_second_term x)))) 
                      (v_Vcc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (Linear_fixed_set__equal _p_A_T _p_B_T 
                                      _p_A_equal _p_B_equal abst_T 
                                      abst_base_case abst_base_term 
                                      abst_inductive_first_term 
                                      abst_inductive_second_term 
                                      (abst_inductive_second_term x) 
                                      (abst_inductive_second_term y)))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (Linear_fixed_set__equal _p_A_T _p_B_T 
                                  _p_A_equal _p_B_equal abst_T 
                                  abst_base_case abst_base_term 
                                  abst_inductive_first_term 
                                  abst_inductive_second_term 
                                  (abst_inductive_second_term x) 
                                  (abst_inductive_second_term y)))) 
                         __E_1_2_2_1_LEMMA v_Vcc) 
                      (v_Vdc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (Linear_fixed_set__equal _p_A_T _p_B_T 
                                   _p_A_equal _p_B_equal abst_T 
                                   abst_base_case abst_base_term 
                                   abst_inductive_first_term 
                                   abst_inductive_second_term 
                                   (abst_inductive_second_term y) 
                                   (abst_inductive_second_term x))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (Linear_fixed_set__equal _p_A_T _p_B_T 
                                  _p_A_equal _p_B_equal abst_T 
                                  abst_base_case abst_base_term 
                                  abst_inductive_first_term 
                                  abst_inductive_second_term 
                                  (abst_inductive_second_term y) 
                                  (abst_inductive_second_term x)))) v_Vdc 
                         v_Vzb) v_Vbc) R)) 
               (dk_builtins.magic_prove 
                  (dk_logic.ebP 
                     (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                        _p_B_equal abst_T abst_base_case abst_base_term 
                        abst_inductive_first_term abst_inductive_second_term 
                        (abst_inductive_second_term x) 
                        (abst_inductive_second_term y)))))) 
           ((__E_1_2_1_1_LEMMA:
             (dk_logic.eP 
                (dk_logic.ebP 
                   (_p_B_equal (abst_inductive_first_term x) 
                      (abst_inductive_first_term y)))) =>
             zen.nnpp 
               (zen.triangle 
                  (focal.is_true 
                     (_p_B_equal (abst_inductive_first_term y) 
                        (abst_inductive_first_term x)))) 
               (v_Vzb:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal (abst_inductive_first_term y) 
                               (abst_inductive_first_term x)))))) =>
                zen.Rall _p_B_T 
                  (v_Vac:(zen.term _p_B_T) =>
                   zen.forall _p_B_T 
                     (v_Vbc:(zen.term _p_B_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true (_p_B_equal v_Vac v_Vbc))) 
                        (zen.triangle 
                           (focal.is_true (_p_B_equal v_Vbc v_Vac))))) 
                  (abst_inductive_first_term x) 
                  (v_Vcc:
                   (zen.proof 
                      (zen.forall _p_B_T 
                         (v_Vbc:(zen.term _p_B_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_B_equal (abst_inductive_first_term x) 
                                     v_Vbc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_B_equal v_Vbc 
                                     (abst_inductive_first_term x))))))) =>
                   zen.Rall _p_B_T 
                     (v_Vbc:(zen.term _p_B_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_B_equal (abst_inductive_first_term x) v_Vbc))) 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_B_equal v_Vbc (abst_inductive_first_term x))))) 
                     (abst_inductive_first_term y) 
                     (v_Vdc:
                      (zen.proof 
                         (zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_B_equal (abst_inductive_first_term x) 
                                     (abst_inductive_first_term y)))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_B_equal (abst_inductive_first_term y) 
                                     (abst_inductive_first_term x)))))) =>
                      zen.Rimply 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_B_equal (abst_inductive_first_term x) 
                                 (abst_inductive_first_term y)))) 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_B_equal (abst_inductive_first_term y) 
                                 (abst_inductive_first_term x)))) 
                        (v_Vec:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_inductive_first_term x) 
                                        (abst_inductive_first_term y)))))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_B_equal (abst_inductive_first_term x) 
                                    (abst_inductive_first_term y)))) 
                           __E_1_2_1_1_LEMMA v_Vec) 
                        (v_Vfc:
                         (zen.proof 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_B_equal (abst_inductive_first_term y) 
                                     (abst_inductive_first_term x))))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_B_equal (abst_inductive_first_term y) 
                                    (abst_inductive_first_term x)))) v_Vfc 
                           v_Vzb) v_Vdc) v_Vcc) _p_B_equal_symmetric)) 
              (zen.nnpp 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_B_equal (abst_inductive_first_term x) 
                          (abst_inductive_first_term y)))) 
                 (v_Vzb:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_B_equal (abst_inductive_first_term x) 
                                 (abst_inductive_first_term y)))))) =>
                  focal.zenon_focal_ite_bool (abst_base_case x) 
                    (dk_bool.ite basics.bool__t (abst_base_case y) 
                       (_p_A_equal (abst_base_term x) (abst_base_term y)) 
                       basics.false) 
                    (dk_bool.ite basics.bool__t (abst_base_case y) 
                       basics.false 
                       (dk_bool.ite basics.bool__t 
                          (_p_B_equal (abst_inductive_first_term x) 
                             (abst_inductive_first_term y)) 
                          (dk_builtins.call_by_value abst_T basics.bool__t 
                             (dk_builtins.call_by_value abst_T 
                                (zen.arrow abst_T basics.bool__t) 
                                (Linear_fixed_set__equal _p_A_T _p_B_T 
                                   _p_A_equal _p_B_equal abst_T 
                                   abst_base_case abst_base_term 
                                   abst_inductive_first_term 
                                   abst_inductive_second_term) 
                                (abst_inductive_second_term x)) 
                             (abst_inductive_second_term y)) basics.false)) 
                    (v_Vac:
                     (zen.proof 
                        (zen.triangle (focal.is_true (abst_base_case x)))) =>
                     v_Vbc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (dk_bool.ite basics.bool__t (abst_base_case y) 
                                 (_p_A_equal (abst_base_term x) 
                                    (abst_base_term y)) basics.false)))) =>
                     zen.Rall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.not 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_base_case v_Vcc))) 
                             (zen.triangle 
                                (focal.is_true (abst_inductive_case v_Vcc))))) 
                       x 
                       (v_Vdc:
                        (zen.proof 
                           (zen.not 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_base_case x))) 
                                 (zen.triangle 
                                    (focal.is_true (abst_inductive_case x)))))) =>
                        zen.Rnotand 
                          (zen.triangle (focal.is_true (abst_base_case x))) 
                          (zen.triangle 
                             (focal.is_true (abst_inductive_case x))) 
                          (v_Vec:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true (abst_base_case x))))) =>
                           zen.Raxiom 
                             (zen.triangle (focal.is_true (abst_base_case x))) 
                             v_Vac v_Vec) 
                          (v_Vfc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true (abst_inductive_case x))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true (abst_inductive_case x))) I 
                             v_Vfc) v_Vdc) abst_case_exclusive) 
                    (v_Vec:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle (focal.is_true (abst_base_case x))))) =>
                     v_Vgc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (dk_bool.ite basics.bool__t (abst_base_case y) 
                                 basics.false 
                                 (dk_bool.ite basics.bool__t 
                                    (_p_B_equal 
                                       (abst_inductive_first_term x) 
                                       (abst_inductive_first_term y)) 
                                    (dk_builtins.call_by_value abst_T 
                                       basics.bool__t 
                                       (dk_builtins.call_by_value abst_T 
                                          (zen.arrow abst_T basics.bool__t) 
                                          (Linear_fixed_set__equal _p_A_T 
                                             _p_B_T _p_A_equal _p_B_equal 
                                             abst_T abst_base_case 
                                             abst_base_term 
                                             abst_inductive_first_term 
                                             abst_inductive_second_term) 
                                          (abst_inductive_second_term x)) 
                                       (abst_inductive_second_term y)) 
                                    basics.false))))) =>
                     focal.zenon_focal_ite_bool (abst_base_case y) 
                       basics.false 
                       (dk_bool.ite basics.bool__t 
                          (_p_B_equal (abst_inductive_first_term x) 
                             (abst_inductive_first_term y)) 
                          (dk_builtins.call_by_value abst_T basics.bool__t 
                             (dk_builtins.call_by_value abst_T 
                                (zen.arrow abst_T basics.bool__t) 
                                (Linear_fixed_set__equal _p_A_T _p_B_T 
                                   _p_A_equal _p_B_equal abst_T 
                                   abst_base_case abst_base_term 
                                   abst_inductive_first_term 
                                   abst_inductive_second_term) 
                                (abst_inductive_second_term x)) 
                             (abst_inductive_second_term y)) basics.false) 
                       (v_Vhc:
                        (zen.proof 
                           (zen.triangle (focal.is_true (abst_base_case y)))) =>
                        v_Vic:(zen.proof zen.False) => zen.Rfalse v_Vic) 
                       (v_Vjc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true (abst_base_case y))))) =>
                        v_Vkc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (dk_bool.ite basics.bool__t 
                                    (_p_B_equal 
                                       (abst_inductive_first_term x) 
                                       (abst_inductive_first_term y)) 
                                    (dk_builtins.call_by_value abst_T 
                                       basics.bool__t 
                                       (dk_builtins.call_by_value abst_T 
                                          (zen.arrow abst_T basics.bool__t) 
                                          (Linear_fixed_set__equal _p_A_T 
                                             _p_B_T _p_A_equal _p_B_equal 
                                             abst_T abst_base_case 
                                             abst_base_term 
                                             abst_inductive_first_term 
                                             abst_inductive_second_term) 
                                          (abst_inductive_second_term x)) 
                                       (abst_inductive_second_term y)) 
                                    basics.false)))) =>
                        focal.zenon_focal_ite_bool 
                          (_p_B_equal (abst_inductive_first_term x) 
                             (abst_inductive_first_term y)) 
                          (dk_builtins.call_by_value abst_T basics.bool__t 
                             (dk_builtins.call_by_value abst_T 
                                (zen.arrow abst_T basics.bool__t) 
                                (Linear_fixed_set__equal _p_A_T _p_B_T 
                                   _p_A_equal _p_B_equal abst_T 
                                   abst_base_case abst_base_term 
                                   abst_inductive_first_term 
                                   abst_inductive_second_term) 
                                (abst_inductive_second_term x)) 
                             (abst_inductive_second_term y)) basics.false 
                          (v_Vlc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal 
                                       (abst_inductive_first_term x) 
                                       (abst_inductive_first_term y))))) =>
                           v_Vmc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (dk_builtins.call_by_value abst_T 
                                       basics.bool__t 
                                       (dk_builtins.call_by_value abst_T 
                                          (zen.arrow abst_T basics.bool__t) 
                                          (Linear_fixed_set__equal _p_A_T 
                                             _p_B_T _p_A_equal _p_B_equal 
                                             abst_T abst_base_case 
                                             abst_base_term 
                                             abst_inductive_first_term 
                                             abst_inductive_second_term) 
                                          (abst_inductive_second_term x)) 
                                       (abst_inductive_second_term y))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (abst_inductive_first_term x) 
                                      (abst_inductive_first_term y)))) v_Vlc 
                             v_Vzb) 
                          (v_Vzb0:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_B_equal 
                                          (abst_inductive_first_term x) 
                                          (abst_inductive_first_term y)))))) =>
                           v_Vic:(zen.proof zen.False) => zen.Rfalse v_Vic) 
                          v_Vkc) v_Vgc) H))))) 
       (x:(cc.eT abst_T) =>
        y:(cc.eT abst_T) =>
        B:(dk_logic.eP (dk_logic.ebP (abst_base_case x))) =>
        H:
        (dk_logic.eP 
           (dk_logic.ebP 
              (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                 abst_T abst_base_case abst_base_term 
                 abst_inductive_first_term abst_inductive_second_term x y))) =>
        zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                   abst_T abst_base_case abst_base_term 
                   abst_inductive_first_term abst_inductive_second_term y x))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (dk_bool.ite basics.bool__t (abst_base_case y) 
                          (dk_bool.ite basics.bool__t (abst_base_case x) 
                             (_p_A_equal (abst_base_term y) 
                                (abst_base_term x)) basics.false) 
                          (dk_bool.ite basics.bool__t (abst_base_case x) 
                             basics.false 
                             (dk_bool.ite basics.bool__t 
                                (_p_B_equal (abst_inductive_first_term y) 
                                   (abst_inductive_first_term x)) 
                                (dk_builtins.call_by_value abst_T 
                                   basics.bool__t 
                                   (dk_builtins.call_by_value abst_T 
                                      (zen.arrow abst_T basics.bool__t) 
                                      (Linear_fixed_set__equal _p_A_T _p_B_T 
                                         _p_A_equal _p_B_equal abst_T 
                                         abst_base_case abst_base_term 
                                         abst_inductive_first_term 
                                         abst_inductive_second_term) 
                                      (abst_inductive_second_term y)) 
                                   (abst_inductive_second_term x)) 
                                basics.false))))))) =>
           focal.zenon_focal_ite_bool_n (abst_base_case y) 
             (dk_bool.ite basics.bool__t (abst_base_case x) 
                (_p_A_equal (abst_base_term y) (abst_base_term x)) 
                basics.false) 
             (dk_bool.ite basics.bool__t (abst_base_case x) basics.false 
                (dk_bool.ite basics.bool__t 
                   (_p_B_equal (abst_inductive_first_term y) 
                      (abst_inductive_first_term x)) 
                   (dk_builtins.call_by_value abst_T basics.bool__t 
                      (dk_builtins.call_by_value abst_T 
                         (zen.arrow abst_T basics.bool__t) 
                         (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                            _p_B_equal abst_T abst_base_case abst_base_term 
                            abst_inductive_first_term 
                            abst_inductive_second_term) 
                         (abst_inductive_second_term y)) 
                      (abst_inductive_second_term x)) basics.false)) 
             (v_Vac:
              (zen.proof (zen.triangle (focal.is_true (abst_base_case y)))) =>
              v_Vbc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (dk_bool.ite basics.bool__t (abst_base_case x) 
                             (_p_A_equal (abst_base_term y) 
                                (abst_base_term x)) basics.false))))) =>
              focal.zenon_focal_ite_bool_n (abst_base_case x) 
                (_p_A_equal (abst_base_term y) (abst_base_term x)) 
                basics.false 
                (B0:
                 (zen.proof (zen.triangle (focal.is_true (abst_base_case x)))) =>
                 v_Vcc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_base_term y) 
                                (abst_base_term x)))))) =>
                 focal.zenon_focal_ite_bool (abst_base_case x) 
                   (dk_bool.ite basics.bool__t (abst_base_case y) 
                      (_p_A_equal (abst_base_term x) (abst_base_term y)) 
                      basics.false) 
                   (dk_bool.ite basics.bool__t (abst_base_case y) 
                      basics.false 
                      (dk_bool.ite basics.bool__t 
                         (_p_B_equal (abst_inductive_first_term x) 
                            (abst_inductive_first_term y)) 
                         (dk_builtins.call_by_value abst_T basics.bool__t 
                            (dk_builtins.call_by_value abst_T 
                               (zen.arrow abst_T basics.bool__t) 
                               (Linear_fixed_set__equal _p_A_T _p_B_T 
                                  _p_A_equal _p_B_equal abst_T 
                                  abst_base_case abst_base_term 
                                  abst_inductive_first_term 
                                  abst_inductive_second_term) 
                               (abst_inductive_second_term x)) 
                            (abst_inductive_second_term y)) basics.false)) 
                   (B1:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_base_case x)))) =>
                    v_Vdc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (dk_bool.ite basics.bool__t (abst_base_case y) 
                                (_p_A_equal (abst_base_term x) 
                                   (abst_base_term y)) basics.false)))) =>
                    focal.zenon_focal_ite_bool (abst_base_case y) 
                      (_p_A_equal (abst_base_term x) (abst_base_term y)) 
                      basics.false 
                      (v_Vac0:
                       (zen.proof 
                          (zen.triangle (focal.is_true (abst_base_case y)))) =>
                       v_Vec:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal (abst_base_term x) 
                                   (abst_base_term y))))) =>
                       zen.Rall _p_A_T 
                         (v_Vfc:(zen.term _p_A_T) =>
                          zen.forall _p_A_T 
                            (v_Vgc:(zen.term _p_A_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true (_p_A_equal v_Vfc v_Vgc))) 
                               (zen.triangle 
                                  (focal.is_true (_p_A_equal v_Vgc v_Vfc))))) 
                         (abst_base_term x) 
                         (v_Vhc:
                          (zen.proof 
                             (zen.forall _p_A_T 
                                (v_Vgc:(zen.term _p_A_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal (abst_base_term x) v_Vgc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal v_Vgc (abst_base_term x))))))) =>
                          zen.Rall _p_A_T 
                            (v_Vgc:(zen.term _p_A_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_A_equal (abst_base_term x) v_Vgc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_A_equal v_Vgc (abst_base_term x))))) 
                            (abst_base_term y) 
                            (v_Vic:
                             (zen.proof 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal (abst_base_term x) 
                                            (abst_base_term y)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal (abst_base_term y) 
                                            (abst_base_term x)))))) =>
                             zen.Rimply 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_A_equal (abst_base_term x) 
                                        (abst_base_term y)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_A_equal (abst_base_term y) 
                                        (abst_base_term x)))) 
                               (v_Vjc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal (abst_base_term x) 
                                               (abst_base_term y)))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal (abst_base_term x) 
                                           (abst_base_term y)))) v_Vec v_Vjc) 
                               (v_Vkc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal (abst_base_term y) 
                                            (abst_base_term x))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal (abst_base_term y) 
                                           (abst_base_term x)))) v_Vkc v_Vcc) 
                               v_Vic) v_Vhc) _p_A_equal_symmetric) 
                      (v_Vlc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle (focal.is_true (abst_base_case y))))) =>
                       v_Vmc:(zen.proof zen.False) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_base_case y))) 
                         v_Vac v_Vlc) v_Vdc) 
                   (v_Vnc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle (focal.is_true (abst_base_case x))))) =>
                    v_Voc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (dk_bool.ite basics.bool__t (abst_base_case y) 
                                basics.false 
                                (dk_bool.ite basics.bool__t 
                                   (_p_B_equal (abst_inductive_first_term x) 
                                      (abst_inductive_first_term y)) 
                                   (dk_builtins.call_by_value abst_T 
                                      basics.bool__t 
                                      (dk_builtins.call_by_value abst_T 
                                         (zen.arrow abst_T basics.bool__t) 
                                         (Linear_fixed_set__equal _p_A_T 
                                            _p_B_T _p_A_equal _p_B_equal 
                                            abst_T abst_base_case 
                                            abst_base_term 
                                            abst_inductive_first_term 
                                            abst_inductive_second_term) 
                                         (abst_inductive_second_term x)) 
                                      (abst_inductive_second_term y)) 
                                   basics.false))))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (abst_base_case x))) B0 
                      v_Vnc) H) 
                (v_Vnc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_base_case x))))) =>
                 v_Vpc:(zen.proof (zen.not zen.False)) =>
                 zen.Raxiom 
                   (zen.triangle (focal.is_true (abst_base_case x))) B v_Vnc) 
                v_Vbc) 
             (v_Vlc:
              (zen.proof 
                 (zen.not (zen.triangle (focal.is_true (abst_base_case y))))) =>
              v_Vqc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (dk_bool.ite basics.bool__t (abst_base_case x) 
                             basics.false 
                             (dk_bool.ite basics.bool__t 
                                (_p_B_equal (abst_inductive_first_term y) 
                                   (abst_inductive_first_term x)) 
                                (dk_builtins.call_by_value abst_T 
                                   basics.bool__t 
                                   (dk_builtins.call_by_value abst_T 
                                      (zen.arrow abst_T basics.bool__t) 
                                      (Linear_fixed_set__equal _p_A_T _p_B_T 
                                         _p_A_equal _p_B_equal abst_T 
                                         abst_base_case abst_base_term 
                                         abst_inductive_first_term 
                                         abst_inductive_second_term) 
                                      (abst_inductive_second_term y)) 
                                   (abst_inductive_second_term x)) 
                                basics.false)))))) =>
              focal.zenon_focal_ite_bool (abst_base_case x) 
                (dk_bool.ite basics.bool__t (abst_base_case y) 
                   (_p_A_equal (abst_base_term x) (abst_base_term y)) 
                   basics.false) 
                (dk_bool.ite basics.bool__t (abst_base_case y) basics.false 
                   (dk_bool.ite basics.bool__t 
                      (_p_B_equal (abst_inductive_first_term x) 
                         (abst_inductive_first_term y)) 
                      (dk_builtins.call_by_value abst_T basics.bool__t 
                         (dk_builtins.call_by_value abst_T 
                            (zen.arrow abst_T basics.bool__t) 
                            (Linear_fixed_set__equal _p_A_T _p_B_T 
                               _p_A_equal _p_B_equal abst_T abst_base_case 
                               abst_base_term abst_inductive_first_term 
                               abst_inductive_second_term) 
                            (abst_inductive_second_term x)) 
                         (abst_inductive_second_term y)) basics.false)) 
                (B0:
                 (zen.proof (zen.triangle (focal.is_true (abst_base_case x)))) =>
                 v_Vdc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (dk_bool.ite basics.bool__t (abst_base_case y) 
                             (_p_A_equal (abst_base_term x) 
                                (abst_base_term y)) basics.false)))) =>
                 focal.zenon_focal_ite_bool (abst_base_case y) 
                   (_p_A_equal (abst_base_term x) (abst_base_term y)) 
                   basics.false 
                   (v_Vac:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_base_case y)))) =>
                    v_Vec:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_base_term x) 
                                (abst_base_term y))))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (abst_base_case y))) 
                      v_Vac v_Vlc) 
                   (v_Vlc0:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle (focal.is_true (abst_base_case y))))) =>
                    v_Vmc:(zen.proof zen.False) => zen.Rfalse v_Vmc) v_Vdc) 
                (v_Vnc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_base_case x))))) =>
                 v_Voc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (dk_bool.ite basics.bool__t (abst_base_case y) 
                             basics.false 
                             (dk_bool.ite basics.bool__t 
                                (_p_B_equal (abst_inductive_first_term x) 
                                   (abst_inductive_first_term y)) 
                                (dk_builtins.call_by_value abst_T 
                                   basics.bool__t 
                                   (dk_builtins.call_by_value abst_T 
                                      (zen.arrow abst_T basics.bool__t) 
                                      (Linear_fixed_set__equal _p_A_T _p_B_T 
                                         _p_A_equal _p_B_equal abst_T 
                                         abst_base_case abst_base_term 
                                         abst_inductive_first_term 
                                         abst_inductive_second_term) 
                                      (abst_inductive_second_term x)) 
                                   (abst_inductive_second_term y)) 
                                basics.false))))) =>
                 zen.Raxiom 
                   (zen.triangle (focal.is_true (abst_base_case x))) B v_Vnc) 
                H) v_Vzb))).

def Linear_fixed_set__equal_transitive :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_A_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall _p_A_T 
                              (x:(cc.eT _p_A_T) =>
                               dk_logic.forall _p_A_T 
                                 (y:(cc.eT _p_A_T) =>
                                  dk_logic.forall _p_A_T 
                                    (z:(cc.eT _p_A_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_A_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (_p_A_equal y z)) 
                                          (dk_logic.ebP (_p_A_equal x z)))))))) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  _p_B_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall _p_B_T 
                              (x:(cc.eT _p_B_T) =>
                               dk_logic.forall _p_B_T 
                                 (y:(cc.eT _p_B_T) =>
                                  dk_logic.forall _p_B_T 
                                    (z:(cc.eT _p_B_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_B_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (_p_B_equal y z)) 
                                          (dk_logic.ebP (_p_B_equal x z)))))))) ->
  abst_T:cc.uT ->
  abst_base_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_base_term:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_inductive_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_inductive_first_term:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  abst_inductive_second_term:((cc.eT abst_T) -> cc.eT abst_T) ->
  abst_case_complete:(dk_logic.eP 
                        (dk_logic.forall abst_T 
                           (x:(cc.eT abst_T) =>
                            dk_logic.or (dk_logic.ebP (abst_base_case x)) 
                              (dk_logic.ebP (abst_inductive_case x))))) ->
  abst_case_exclusive:(dk_logic.eP 
                         (dk_logic.forall abst_T 
                            (x:(cc.eT abst_T) =>
                             dk_logic.not 
                               (dk_logic.and 
                                  (dk_logic.ebP (abst_base_case x)) 
                                  (dk_logic.ebP (abst_inductive_case x)))))) ->
  abst_inductive_transitivity:(dk_logic.eP 
                                 (Linear_fixed_set__inductive_property 
                                    abst_T abst_base_case 
                                    abst_inductive_case 
                                    abst_inductive_second_term 
                                    (Linear_fixed_set__transitivity_prop 
                                       _p_A_T _p_B_T abst_T 
                                       (Linear_fixed_set__equal _p_A_T 
                                          _p_B_T _p_A_equal _p_B_equal 
                                          abst_T abst_base_case 
                                          abst_base_term 
                                          abst_inductive_first_term 
                                          abst_inductive_second_term)))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp 
                (dk_logic.ebP 
                   (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                      _p_B_equal abst_T abst_base_case abst_base_term 
                      abst_inductive_first_term abst_inductive_second_term x 
                      y)) 
                (dk_logic.imp 
                   (dk_logic.ebP 
                      (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                         _p_B_equal abst_T abst_base_case abst_base_term 
                         abst_inductive_first_term 
                         abst_inductive_second_term y z)) 
                   (dk_logic.ebP 
                      (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                         _p_B_equal abst_T abst_base_case abst_base_term 
                         abst_inductive_first_term 
                         abst_inductive_second_term x z)))))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_A_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_A_T 
           (y:(cc.eT _p_A_T) =>
            dk_logic.forall _p_A_T 
              (z:(cc.eT _p_A_T) =>
               dk_logic.imp (dk_logic.ebP (_p_A_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_A_equal y z)) 
                    (dk_logic.ebP (_p_A_equal x z)))))))) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  _p_B_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.forall _p_B_T 
              (z:(cc.eT _p_B_T) =>
               dk_logic.imp (dk_logic.ebP (_p_B_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_B_equal y z)) 
                    (dk_logic.ebP (_p_B_equal x z)))))))) =>
  abst_T:cc.uT =>
  abst_base_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_base_term:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_inductive_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_inductive_first_term:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  abst_inductive_second_term:((cc.eT abst_T) -> cc.eT abst_T) =>
  abst_case_complete:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.or (dk_logic.ebP (abst_base_case x)) 
           (dk_logic.ebP (abst_inductive_case x))))) =>
  abst_case_exclusive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.not 
           (dk_logic.and (dk_logic.ebP (abst_base_case x)) 
              (dk_logic.ebP (abst_inductive_case x)))))) =>
  abst_inductive_transitivity:
  (dk_logic.eP 
     (Linear_fixed_set__inductive_property abst_T abst_base_case 
        abst_inductive_case abst_inductive_second_term 
        (Linear_fixed_set__transitivity_prop _p_A_T _p_B_T abst_T 
           (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
              abst_T abst_base_case abst_base_term abst_inductive_first_term 
              abst_inductive_second_term)))) =>
  (__F_1_LEMMA:
   (dk_logic.eP 
      (dk_logic.forall abst_T 
         (x:(cc.eT abst_T) =>
          Linear_fixed_set__transitivity_prop _p_A_T _p_B_T abst_T 
            (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
               abst_T abst_base_case abst_base_term 
               abst_inductive_first_term abst_inductive_second_term) x))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                          _p_B_equal abst_T abst_base_case abst_base_term 
                          abst_inductive_first_term 
                          abst_inductive_second_term v_Vzb v_Vac))) 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_base_case abst_base_term 
                             abst_inductive_first_term 
                             abst_inductive_second_term v_Vac v_Vbc))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_base_case abst_base_term 
                             abst_inductive_first_term 
                             abst_inductive_second_term v_Vzb v_Vbc)))))))) 
     (v_Vcc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term v_Vzb v_Vac))) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (Linear_fixed_set__equal _p_A_T _p_B_T 
                                    _p_A_equal _p_B_equal abst_T 
                                    abst_base_case abst_base_term 
                                    abst_inductive_first_term 
                                    abst_inductive_second_term v_Vac v_Vbc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (Linear_fixed_set__equal _p_A_T _p_B_T 
                                    _p_A_equal _p_B_equal abst_T 
                                    abst_base_case abst_base_term 
                                    abst_inductive_first_term 
                                    abst_inductive_second_term v_Vzb v_Vbc)))))))))) =>
      zen.Rnotall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                          _p_B_equal abst_T abst_base_case abst_base_term 
                          abst_inductive_first_term 
                          abst_inductive_second_term v_Vzb v_Vac))) 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_base_case abst_base_term 
                             abst_inductive_first_term 
                             abst_inductive_second_term v_Vac v_Vbc))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_base_case abst_base_term 
                             abst_inductive_first_term 
                             abst_inductive_second_term v_Vzb v_Vbc))))))) 
        (v_Vdc:(zen.term abst_T) =>
         v_Vec:
         (zen.proof 
            (zen.not 
               (zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term v_Vdc v_Vac))) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (Linear_fixed_set__equal _p_A_T _p_B_T 
                                    _p_A_equal _p_B_equal abst_T 
                                    abst_base_case abst_base_term 
                                    abst_inductive_first_term 
                                    abst_inductive_second_term v_Vac v_Vbc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (Linear_fixed_set__equal _p_A_T _p_B_T 
                                    _p_A_equal _p_B_equal abst_T 
                                    abst_base_case abst_base_term 
                                    abst_inductive_first_term 
                                    abst_inductive_second_term v_Vdc v_Vbc))))))))) =>
         zen.Rnotall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                          _p_B_equal abst_T abst_base_case abst_base_term 
                          abst_inductive_first_term 
                          abst_inductive_second_term v_Vdc v_Vac))) 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_base_case abst_base_term 
                             abst_inductive_first_term 
                             abst_inductive_second_term v_Vac v_Vbc))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_base_case abst_base_term 
                             abst_inductive_first_term 
                             abst_inductive_second_term v_Vdc v_Vbc)))))) 
           (v_Vfc:(zen.term abst_T) =>
            v_Vgc:
            (zen.proof 
               (zen.not 
                  (zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term v_Vdc v_Vfc))) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (Linear_fixed_set__equal _p_A_T _p_B_T 
                                    _p_A_equal _p_B_equal abst_T 
                                    abst_base_case abst_base_term 
                                    abst_inductive_first_term 
                                    abst_inductive_second_term v_Vfc v_Vbc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (Linear_fixed_set__equal _p_A_T _p_B_T 
                                    _p_A_equal _p_B_equal abst_T 
                                    abst_base_case abst_base_term 
                                    abst_inductive_first_term 
                                    abst_inductive_second_term v_Vdc v_Vbc)))))))) =>
            zen.Rnotall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                          _p_B_equal abst_T abst_base_case abst_base_term 
                          abst_inductive_first_term 
                          abst_inductive_second_term v_Vdc v_Vfc))) 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_base_case abst_base_term 
                             abst_inductive_first_term 
                             abst_inductive_second_term v_Vfc v_Vbc))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_base_case abst_base_term 
                             abst_inductive_first_term 
                             abst_inductive_second_term v_Vdc v_Vbc))))) 
              (v_Vhc:(zen.term abst_T) =>
               v_Vic:
               (zen.proof 
                  (zen.not 
                     (zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term v_Vdc v_Vfc))) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (Linear_fixed_set__equal _p_A_T _p_B_T 
                                    _p_A_equal _p_B_equal abst_T 
                                    abst_base_case abst_base_term 
                                    abst_inductive_first_term 
                                    abst_inductive_second_term v_Vfc v_Vhc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (Linear_fixed_set__equal _p_A_T _p_B_T 
                                    _p_A_equal _p_B_equal abst_T 
                                    abst_base_case abst_base_term 
                                    abst_inductive_first_term 
                                    abst_inductive_second_term v_Vdc v_Vhc))))))) =>
               zen.Rnotimply 
                 (zen.triangle 
                    (focal.is_true 
                       (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                          _p_B_equal abst_T abst_base_case abst_base_term 
                          abst_inductive_first_term 
                          abst_inductive_second_term v_Vdc v_Vfc))) 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_base_case abst_base_term 
                             abst_inductive_first_term 
                             abst_inductive_second_term v_Vfc v_Vhc))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_base_case abst_base_term 
                             abst_inductive_first_term 
                             abst_inductive_second_term v_Vdc v_Vhc)))) 
                 (v_Vjc:
                  (zen.proof 
                     (zen.triangle 
                        (focal.is_true 
                           (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                              _p_B_equal abst_T abst_base_case 
                              abst_base_term abst_inductive_first_term 
                              abst_inductive_second_term v_Vdc v_Vfc)))) =>
                  v_Vkc:
                  (zen.proof 
                     (zen.not 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (Linear_fixed_set__equal _p_A_T _p_B_T 
                                    _p_A_equal _p_B_equal abst_T 
                                    abst_base_case abst_base_term 
                                    abst_inductive_first_term 
                                    abst_inductive_second_term v_Vfc v_Vhc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (Linear_fixed_set__equal _p_A_T _p_B_T 
                                    _p_A_equal _p_B_equal abst_T 
                                    abst_base_case abst_base_term 
                                    abst_inductive_first_term 
                                    abst_inductive_second_term v_Vdc v_Vhc)))))) =>
                  zen.Rnotimply 
                    (zen.triangle 
                       (focal.is_true 
                          (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_base_case abst_base_term 
                             abst_inductive_first_term 
                             abst_inductive_second_term v_Vfc v_Vhc))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_base_case abst_base_term 
                             abst_inductive_first_term 
                             abst_inductive_second_term v_Vdc v_Vhc))) 
                    (v_Vlc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term v_Vfc v_Vhc)))) =>
                     v_Vmc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (Linear_fixed_set__equal _p_A_T _p_B_T 
                                    _p_A_equal _p_B_equal abst_T 
                                    abst_base_case abst_base_term 
                                    abst_inductive_first_term 
                                    abst_inductive_second_term v_Vdc v_Vhc))))) =>
                     zen.Rall abst_T 
                       (v_Vzb:(zen.term abst_T) =>
                        zen.triangle 
                          (Linear_fixed_set__transitivity_prop _p_A_T _p_B_T 
                             abst_T 
                             (Linear_fixed_set__equal _p_A_T _p_B_T 
                                _p_A_equal _p_B_equal abst_T abst_base_case 
                                abst_base_term abst_inductive_first_term 
                                abst_inductive_second_term) v_Vzb)) v_Vdc 
                       (v_Vnc:
                        (zen.proof 
                           (zen.forall abst_T 
                              (v_Vac:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vbc:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (Linear_fixed_set__equal _p_A_T 
                                             _p_B_T _p_A_equal _p_B_equal 
                                             abst_T abst_base_case 
                                             abst_base_term 
                                             abst_inductive_first_term 
                                             abst_inductive_second_term 
                                             v_Vdc v_Vac))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (Linear_fixed_set__equal _p_A_T 
                                                _p_B_T _p_A_equal _p_B_equal 
                                                abst_T abst_base_case 
                                                abst_base_term 
                                                abst_inductive_first_term 
                                                abst_inductive_second_term 
                                                v_Vac v_Vbc))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (Linear_fixed_set__equal _p_A_T 
                                                _p_B_T _p_A_equal _p_B_equal 
                                                abst_T abst_base_case 
                                                abst_base_term 
                                                abst_inductive_first_term 
                                                abst_inductive_second_term 
                                                v_Vdc v_Vbc)))))))) =>
                        zen.Rall abst_T 
                          (v_Vac:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vbc:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (Linear_fixed_set__equal _p_A_T _p_B_T 
                                         _p_A_equal _p_B_equal abst_T 
                                         abst_base_case abst_base_term 
                                         abst_inductive_first_term 
                                         abst_inductive_second_term v_Vdc 
                                         v_Vac))) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (Linear_fixed_set__equal _p_A_T 
                                            _p_B_T _p_A_equal _p_B_equal 
                                            abst_T abst_base_case 
                                            abst_base_term 
                                            abst_inductive_first_term 
                                            abst_inductive_second_term v_Vac 
                                            v_Vbc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (Linear_fixed_set__equal _p_A_T 
                                            _p_B_T _p_A_equal _p_B_equal 
                                            abst_T abst_base_case 
                                            abst_base_term 
                                            abst_inductive_first_term 
                                            abst_inductive_second_term v_Vdc 
                                            v_Vbc)))))) v_Vfc 
                          (v_Voc:
                           (zen.proof 
                              (zen.forall abst_T 
                                 (v_Vbc:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (Linear_fixed_set__equal _p_A_T 
                                             _p_B_T _p_A_equal _p_B_equal 
                                             abst_T abst_base_case 
                                             abst_base_term 
                                             abst_inductive_first_term 
                                             abst_inductive_second_term 
                                             v_Vdc v_Vfc))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (Linear_fixed_set__equal _p_A_T 
                                                _p_B_T _p_A_equal _p_B_equal 
                                                abst_T abst_base_case 
                                                abst_base_term 
                                                abst_inductive_first_term 
                                                abst_inductive_second_term 
                                                v_Vfc v_Vbc))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (Linear_fixed_set__equal _p_A_T 
                                                _p_B_T _p_A_equal _p_B_equal 
                                                abst_T abst_base_case 
                                                abst_base_term 
                                                abst_inductive_first_term 
                                                abst_inductive_second_term 
                                                v_Vdc v_Vbc))))))) =>
                           zen.Rall abst_T 
                             (v_Vbc:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (Linear_fixed_set__equal _p_A_T _p_B_T 
                                         _p_A_equal _p_B_equal abst_T 
                                         abst_base_case abst_base_term 
                                         abst_inductive_first_term 
                                         abst_inductive_second_term v_Vdc 
                                         v_Vfc))) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (Linear_fixed_set__equal _p_A_T 
                                            _p_B_T _p_A_equal _p_B_equal 
                                            abst_T abst_base_case 
                                            abst_base_term 
                                            abst_inductive_first_term 
                                            abst_inductive_second_term v_Vfc 
                                            v_Vbc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (Linear_fixed_set__equal _p_A_T 
                                            _p_B_T _p_A_equal _p_B_equal 
                                            abst_T abst_base_case 
                                            abst_base_term 
                                            abst_inductive_first_term 
                                            abst_inductive_second_term v_Vdc 
                                            v_Vbc))))) v_Vhc 
                             (v_Vpc:
                              (zen.proof 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (Linear_fixed_set__equal _p_A_T 
                                             _p_B_T _p_A_equal _p_B_equal 
                                             abst_T abst_base_case 
                                             abst_base_term 
                                             abst_inductive_first_term 
                                             abst_inductive_second_term 
                                             v_Vdc v_Vfc))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (Linear_fixed_set__equal _p_A_T 
                                                _p_B_T _p_A_equal _p_B_equal 
                                                abst_T abst_base_case 
                                                abst_base_term 
                                                abst_inductive_first_term 
                                                abst_inductive_second_term 
                                                v_Vfc v_Vhc))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (Linear_fixed_set__equal _p_A_T 
                                                _p_B_T _p_A_equal _p_B_equal 
                                                abst_T abst_base_case 
                                                abst_base_term 
                                                abst_inductive_first_term 
                                                abst_inductive_second_term 
                                                v_Vdc v_Vhc)))))) =>
                              zen.Rimply 
                                (zen.triangle 
                                   (focal.is_true 
                                      (Linear_fixed_set__equal _p_A_T _p_B_T 
                                         _p_A_equal _p_B_equal abst_T 
                                         abst_base_case abst_base_term 
                                         abst_inductive_first_term 
                                         abst_inductive_second_term v_Vdc 
                                         v_Vfc))) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (Linear_fixed_set__equal _p_A_T 
                                            _p_B_T _p_A_equal _p_B_equal 
                                            abst_T abst_base_case 
                                            abst_base_term 
                                            abst_inductive_first_term 
                                            abst_inductive_second_term v_Vfc 
                                            v_Vhc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (Linear_fixed_set__equal _p_A_T 
                                            _p_B_T _p_A_equal _p_B_equal 
                                            abst_T abst_base_case 
                                            abst_base_term 
                                            abst_inductive_first_term 
                                            abst_inductive_second_term v_Vdc 
                                            v_Vhc)))) 
                                (v_Vqc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (Linear_fixed_set__equal _p_A_T 
                                                _p_B_T _p_A_equal _p_B_equal 
                                                abst_T abst_base_case 
                                                abst_base_term 
                                                abst_inductive_first_term 
                                                abst_inductive_second_term 
                                                v_Vdc v_Vfc))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (Linear_fixed_set__equal _p_A_T 
                                            _p_B_T _p_A_equal _p_B_equal 
                                            abst_T abst_base_case 
                                            abst_base_term 
                                            abst_inductive_first_term 
                                            abst_inductive_second_term v_Vdc 
                                            v_Vfc))) v_Vjc v_Vqc) 
                                (v_Vrc:
                                 (zen.proof 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (Linear_fixed_set__equal _p_A_T 
                                                _p_B_T _p_A_equal _p_B_equal 
                                                abst_T abst_base_case 
                                                abst_base_term 
                                                abst_inductive_first_term 
                                                abst_inductive_second_term 
                                                v_Vfc v_Vhc))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (Linear_fixed_set__equal _p_A_T 
                                                _p_B_T _p_A_equal _p_B_equal 
                                                abst_T abst_base_case 
                                                abst_base_term 
                                                abst_inductive_first_term 
                                                abst_inductive_second_term 
                                                v_Vdc v_Vhc))))) =>
                                 zen.Rimply 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (Linear_fixed_set__equal _p_A_T 
                                            _p_B_T _p_A_equal _p_B_equal 
                                            abst_T abst_base_case 
                                            abst_base_term 
                                            abst_inductive_first_term 
                                            abst_inductive_second_term v_Vfc 
                                            v_Vhc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (Linear_fixed_set__equal _p_A_T 
                                            _p_B_T _p_A_equal _p_B_equal 
                                            abst_T abst_base_case 
                                            abst_base_term 
                                            abst_inductive_first_term 
                                            abst_inductive_second_term v_Vdc 
                                            v_Vhc))) 
                                   (v_Vsc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (Linear_fixed_set__equal 
                                                   _p_A_T _p_B_T _p_A_equal 
                                                   _p_B_equal abst_T 
                                                   abst_base_case 
                                                   abst_base_term 
                                                   abst_inductive_first_term 
                                                   abst_inductive_second_term 
                                                   v_Vfc v_Vhc))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (Linear_fixed_set__equal _p_A_T 
                                               _p_B_T _p_A_equal _p_B_equal 
                                               abst_T abst_base_case 
                                               abst_base_term 
                                               abst_inductive_first_term 
                                               abst_inductive_second_term 
                                               v_Vfc v_Vhc))) v_Vlc v_Vsc) 
                                   (v_Vtc:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (Linear_fixed_set__equal _p_A_T 
                                                _p_B_T _p_A_equal _p_B_equal 
                                                abst_T abst_base_case 
                                                abst_base_term 
                                                abst_inductive_first_term 
                                                abst_inductive_second_term 
                                                v_Vdc v_Vhc)))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (Linear_fixed_set__equal _p_A_T 
                                               _p_B_T _p_A_equal _p_B_equal 
                                               abst_T abst_base_case 
                                               abst_base_term 
                                               abst_inductive_first_term 
                                               abst_inductive_second_term 
                                               v_Vdc v_Vhc))) v_Vtc v_Vmc) 
                                   v_Vrc) v_Vpc) v_Voc) v_Vnc) __F_1_LEMMA) 
                    v_Vkc) v_Vic) v_Vgc) v_Vec) v_Vcc)) 
    ((__F_1_1_LEMMA:
      (x:(cc.eT abst_T) ->
       B:(dk_logic.eP (dk_logic.ebP (abst_base_case x))) ->
       dk_logic.eP 
         (Linear_fixed_set__transitivity_prop _p_A_T _p_B_T abst_T 
            (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
               abst_T abst_base_case abst_base_term 
               abst_inductive_first_term abst_inductive_second_term) x)) =>
      (__F_1_2_LEMMA:
       (x:(cc.eT abst_T) ->
        I:(dk_logic.eP (dk_logic.ebP (abst_inductive_case x))) ->
        R:(dk_logic.eP 
             (Linear_fixed_set__transitivity_prop _p_A_T _p_B_T abst_T 
                (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                   abst_T abst_base_case abst_base_term 
                   abst_inductive_first_term abst_inductive_second_term) 
                (abst_inductive_second_term x))) ->
        dk_logic.eP 
          (Linear_fixed_set__transitivity_prop _p_A_T _p_B_T abst_T 
             (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                abst_T abst_base_case abst_base_term 
                abst_inductive_first_term abst_inductive_second_term) x)) =>
       zen.nnpp 
         (zen.forall abst_T 
            (v_Vzb:(zen.term abst_T) =>
             zen.triangle 
               (Linear_fixed_set__transitivity_prop _p_A_T _p_B_T abst_T 
                  (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                     _p_B_equal abst_T abst_base_case abst_base_term 
                     abst_inductive_first_term abst_inductive_second_term) 
                  v_Vzb))) 
         (v_Vac:
          (zen.proof 
             (zen.not 
                (zen.forall abst_T 
                   (v_Vzb:(zen.term abst_T) =>
                    zen.triangle 
                      (Linear_fixed_set__transitivity_prop _p_A_T _p_B_T 
                         abst_T 
                         (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                            _p_B_equal abst_T abst_base_case abst_base_term 
                            abst_inductive_first_term 
                            abst_inductive_second_term) v_Vzb))))) =>
          zen.Rimply 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.imp 
                  (zen.triangle (focal.is_true (abst_base_case v_Vzb))) 
                  (zen.triangle 
                     (Linear_fixed_set__transitivity_prop _p_A_T _p_B_T 
                        abst_T 
                        (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                           _p_B_equal abst_T abst_base_case abst_base_term 
                           abst_inductive_first_term 
                           abst_inductive_second_term) v_Vzb)))) 
            (zen.imp 
               (zen.forall abst_T 
                  (v_Vzb:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle 
                        (focal.is_true (abst_inductive_case v_Vzb))) 
                     (zen.imp 
                        (zen.triangle 
                           (Linear_fixed_set__transitivity_prop _p_A_T 
                              _p_B_T abst_T 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term) 
                              (abst_inductive_second_term v_Vzb))) 
                        (zen.triangle 
                           (Linear_fixed_set__transitivity_prop _p_A_T 
                              _p_B_T abst_T 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term) v_Vzb))))) 
               (zen.forall abst_T 
                  (v_Vzb:(zen.term abst_T) =>
                   zen.triangle 
                     (Linear_fixed_set__transitivity_prop _p_A_T _p_B_T 
                        abst_T 
                        (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                           _p_B_equal abst_T abst_base_case abst_base_term 
                           abst_inductive_first_term 
                           abst_inductive_second_term) v_Vzb)))) 
            (v_Vbc:
             (zen.proof 
                (zen.not 
                   (zen.forall abst_T 
                      (v_Vzb:(zen.term abst_T) =>
                       zen.imp 
                         (zen.triangle (focal.is_true (abst_base_case v_Vzb))) 
                         (zen.triangle 
                            (Linear_fixed_set__transitivity_prop _p_A_T 
                               _p_B_T abst_T 
                               (Linear_fixed_set__equal _p_A_T _p_B_T 
                                  _p_A_equal _p_B_equal abst_T 
                                  abst_base_case abst_base_term 
                                  abst_inductive_first_term 
                                  abst_inductive_second_term) v_Vzb)))))) =>
             zen.Raxiom 
               (zen.forall abst_T 
                  (v_Vzb:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle (focal.is_true (abst_base_case v_Vzb))) 
                     (zen.triangle 
                        (Linear_fixed_set__transitivity_prop _p_A_T _p_B_T 
                           abst_T 
                           (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                              _p_B_equal abst_T abst_base_case 
                              abst_base_term abst_inductive_first_term 
                              abst_inductive_second_term) v_Vzb)))) 
               __F_1_1_LEMMA v_Vbc) 
            (v_Vcc:
             (zen.proof 
                (zen.imp 
                   (zen.forall abst_T 
                      (v_Vzb:(zen.term abst_T) =>
                       zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_inductive_case v_Vzb))) 
                         (zen.imp 
                            (zen.triangle 
                               (Linear_fixed_set__transitivity_prop _p_A_T 
                                  _p_B_T abst_T 
                                  (Linear_fixed_set__equal _p_A_T _p_B_T 
                                     _p_A_equal _p_B_equal abst_T 
                                     abst_base_case abst_base_term 
                                     abst_inductive_first_term 
                                     abst_inductive_second_term) 
                                  (abst_inductive_second_term v_Vzb))) 
                            (zen.triangle 
                               (Linear_fixed_set__transitivity_prop _p_A_T 
                                  _p_B_T abst_T 
                                  (Linear_fixed_set__equal _p_A_T _p_B_T 
                                     _p_A_equal _p_B_equal abst_T 
                                     abst_base_case abst_base_term 
                                     abst_inductive_first_term 
                                     abst_inductive_second_term) v_Vzb))))) 
                   (zen.forall abst_T 
                      (v_Vzb:(zen.term abst_T) =>
                       zen.triangle 
                         (Linear_fixed_set__transitivity_prop _p_A_T _p_B_T 
                            abst_T 
                            (Linear_fixed_set__equal _p_A_T _p_B_T 
                               _p_A_equal _p_B_equal abst_T abst_base_case 
                               abst_base_term abst_inductive_first_term 
                               abst_inductive_second_term) v_Vzb))))) =>
             zen.Rimply 
               (zen.forall abst_T 
                  (v_Vzb:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle 
                        (focal.is_true (abst_inductive_case v_Vzb))) 
                     (zen.imp 
                        (zen.triangle 
                           (Linear_fixed_set__transitivity_prop _p_A_T 
                              _p_B_T abst_T 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term) 
                              (abst_inductive_second_term v_Vzb))) 
                        (zen.triangle 
                           (Linear_fixed_set__transitivity_prop _p_A_T 
                              _p_B_T abst_T 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term) v_Vzb))))) 
               (zen.forall abst_T 
                  (v_Vzb:(zen.term abst_T) =>
                   zen.triangle 
                     (Linear_fixed_set__transitivity_prop _p_A_T _p_B_T 
                        abst_T 
                        (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                           _p_B_equal abst_T abst_base_case abst_base_term 
                           abst_inductive_first_term 
                           abst_inductive_second_term) v_Vzb))) 
               (v_Vdc:
                (zen.proof 
                   (zen.not 
                      (zen.forall abst_T 
                         (v_Vzb:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true (abst_inductive_case v_Vzb))) 
                            (zen.imp 
                               (zen.triangle 
                                  (Linear_fixed_set__transitivity_prop 
                                     _p_A_T _p_B_T abst_T 
                                     (Linear_fixed_set__equal _p_A_T _p_B_T 
                                        _p_A_equal _p_B_equal abst_T 
                                        abst_base_case abst_base_term 
                                        abst_inductive_first_term 
                                        abst_inductive_second_term) 
                                     (abst_inductive_second_term v_Vzb))) 
                               (zen.triangle 
                                  (Linear_fixed_set__transitivity_prop 
                                     _p_A_T _p_B_T abst_T 
                                     (Linear_fixed_set__equal _p_A_T _p_B_T 
                                        _p_A_equal _p_B_equal abst_T 
                                        abst_base_case abst_base_term 
                                        abst_inductive_first_term 
                                        abst_inductive_second_term) v_Vzb))))))) =>
                zen.Raxiom 
                  (zen.forall abst_T 
                     (v_Vzb:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true (abst_inductive_case v_Vzb))) 
                        (zen.imp 
                           (zen.triangle 
                              (Linear_fixed_set__transitivity_prop _p_A_T 
                                 _p_B_T abst_T 
                                 (Linear_fixed_set__equal _p_A_T _p_B_T 
                                    _p_A_equal _p_B_equal abst_T 
                                    abst_base_case abst_base_term 
                                    abst_inductive_first_term 
                                    abst_inductive_second_term) 
                                 (abst_inductive_second_term v_Vzb))) 
                           (zen.triangle 
                              (Linear_fixed_set__transitivity_prop _p_A_T 
                                 _p_B_T abst_T 
                                 (Linear_fixed_set__equal _p_A_T _p_B_T 
                                    _p_A_equal _p_B_equal abst_T 
                                    abst_base_case abst_base_term 
                                    abst_inductive_first_term 
                                    abst_inductive_second_term) v_Vzb))))) 
                  __F_1_2_LEMMA v_Vdc) 
               (v_Vec:
                (zen.proof 
                   (zen.forall abst_T 
                      (v_Vzb:(zen.term abst_T) =>
                       zen.triangle 
                         (Linear_fixed_set__transitivity_prop _p_A_T _p_B_T 
                            abst_T 
                            (Linear_fixed_set__equal _p_A_T _p_B_T 
                               _p_A_equal _p_B_equal abst_T abst_base_case 
                               abst_base_term abst_inductive_first_term 
                               abst_inductive_second_term) v_Vzb)))) =>
                zen.Raxiom 
                  (zen.forall abst_T 
                     (v_Vzb:(zen.term abst_T) =>
                      zen.triangle 
                        (Linear_fixed_set__transitivity_prop _p_A_T _p_B_T 
                           abst_T 
                           (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                              _p_B_equal abst_T abst_base_case 
                              abst_base_term abst_inductive_first_term 
                              abst_inductive_second_term) v_Vzb))) v_Vec 
                  v_Vac) v_Vcc) abst_inductive_transitivity)) 
        (x:(cc.eT abst_T) =>
         I:(dk_logic.eP (dk_logic.ebP (abst_inductive_case x))) =>
         R:
         (dk_logic.eP 
            (Linear_fixed_set__transitivity_prop _p_A_T _p_B_T abst_T 
               (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                  abst_T abst_base_case abst_base_term 
                  abst_inductive_first_term abst_inductive_second_term) 
               (abst_inductive_second_term x))) =>
         (__F_1_2_1_LEMMA:
          (y:(cc.eT abst_T) ->
           z:(cc.eT abst_T) ->
           H_xy:(dk_logic.eP 
                   (dk_logic.ebP 
                      (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                         _p_B_equal abst_T abst_base_case abst_base_term 
                         abst_inductive_first_term 
                         abst_inductive_second_term x y))) ->
           H_yz:(dk_logic.eP 
                   (dk_logic.ebP 
                      (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                         _p_B_equal abst_T abst_base_case abst_base_term 
                         abst_inductive_first_term 
                         abst_inductive_second_term y z))) ->
           dk_logic.eP 
             (dk_logic.ebP 
                (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                   abst_T abst_base_case abst_base_term 
                   abst_inductive_first_term abst_inductive_second_term x z))) =>
          zen.nnpp 
            (zen.triangle 
               (Linear_fixed_set__transitivity_prop _p_A_T _p_B_T abst_T 
                  (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                     _p_B_equal abst_T abst_base_case abst_base_term 
                     abst_inductive_first_term abst_inductive_second_term) x)) 
            (v_Vzb:
             (zen.proof 
                (zen.not 
                   (zen.forall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (Linear_fixed_set__equal _p_A_T _p_B_T 
                                     _p_A_equal _p_B_equal abst_T 
                                     abst_base_case abst_base_term 
                                     abst_inductive_first_term 
                                     abst_inductive_second_term x v_Vac))) 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (Linear_fixed_set__equal _p_A_T _p_B_T 
                                        _p_A_equal _p_B_equal abst_T 
                                        abst_base_case abst_base_term 
                                        abst_inductive_first_term 
                                        abst_inductive_second_term v_Vac 
                                        v_Vbc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (Linear_fixed_set__equal _p_A_T _p_B_T 
                                        _p_A_equal _p_B_equal abst_T 
                                        abst_base_case abst_base_term 
                                        abst_inductive_first_term 
                                        abst_inductive_second_term x v_Vbc))))))))) =>
             zen.Raxiom 
               (zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (Linear_fixed_set__equal _p_A_T _p_B_T 
                                 _p_A_equal _p_B_equal abst_T abst_base_case 
                                 abst_base_term abst_inductive_first_term 
                                 abst_inductive_second_term x v_Vac))) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (Linear_fixed_set__equal _p_A_T _p_B_T 
                                    _p_A_equal _p_B_equal abst_T 
                                    abst_base_case abst_base_term 
                                    abst_inductive_first_term 
                                    abst_inductive_second_term v_Vac v_Vbc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (Linear_fixed_set__equal _p_A_T _p_B_T 
                                    _p_A_equal _p_B_equal abst_T 
                                    abst_base_case abst_base_term 
                                    abst_inductive_first_term 
                                    abst_inductive_second_term x v_Vbc))))))) 
               __F_1_2_1_LEMMA v_Vzb)) 
           (y:(cc.eT abst_T) =>
            z:(cc.eT abst_T) =>
            H_xy:
            (dk_logic.eP 
               (dk_logic.ebP 
                  (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                     _p_B_equal abst_T abst_base_case abst_base_term 
                     abst_inductive_first_term abst_inductive_second_term x y))) =>
            H_yz:
            (dk_logic.eP 
               (dk_logic.ebP 
                  (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                     _p_B_equal abst_T abst_base_case abst_base_term 
                     abst_inductive_first_term abst_inductive_second_term y z))) =>
            (__F_1_2_1_a_LEMMA:
             (dk_logic.eP (dk_logic.ebP (abst_inductive_case y))) =>
             (__F_1_2_1_b_LEMMA:
              (dk_logic.eP (dk_logic.ebP (abst_inductive_case z))) =>
              (__F_1_2_1_1_LEMMA:
               (dk_logic.eP 
                  (dk_logic.ebP 
                     (_p_B_equal (abst_inductive_first_term x) 
                        (abst_inductive_first_term z)))) =>
               (__F_1_2_1_2_LEMMA:
                (dk_logic.eP 
                   (dk_logic.ebP 
                      (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                         _p_B_equal abst_T abst_base_case abst_base_term 
                         abst_inductive_first_term 
                         abst_inductive_second_term 
                         (abst_inductive_second_term x) 
                         (abst_inductive_second_term z)))) =>
                dk_builtins.magic_prove 
                  (dk_logic.ebP 
                     (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                        _p_B_equal abst_T abst_base_case abst_base_term 
                        abst_inductive_first_term abst_inductive_second_term 
                        x z))) 
                 ((__F_1_2_1_2_1_LEMMA:
                   (dk_logic.eP 
                      (dk_logic.ebP 
                         (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                            _p_B_equal abst_T abst_base_case abst_base_term 
                            abst_inductive_first_term 
                            abst_inductive_second_term 
                            (abst_inductive_second_term x) 
                            (abst_inductive_second_term y)))) =>
                   (__F_1_2_1_2_2_LEMMA:
                    (dk_logic.eP 
                       (dk_logic.ebP 
                          (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_base_case abst_base_term 
                             abst_inductive_first_term 
                             abst_inductive_second_term 
                             (abst_inductive_second_term y) 
                             (abst_inductive_second_term z)))) =>
                    zen.nnpp 
                      (zen.triangle 
                         (focal.is_true 
                            (Linear_fixed_set__equal _p_A_T _p_B_T 
                               _p_A_equal _p_B_equal abst_T abst_base_case 
                               abst_base_term abst_inductive_first_term 
                               abst_inductive_second_term 
                               (abst_inductive_second_term x) 
                               (abst_inductive_second_term z)))) 
                      (v_Vzb:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (Linear_fixed_set__equal _p_A_T _p_B_T 
                                      _p_A_equal _p_B_equal abst_T 
                                      abst_base_case abst_base_term 
                                      abst_inductive_first_term 
                                      abst_inductive_second_term 
                                      (abst_inductive_second_term x) 
                                      (abst_inductive_second_term z)))))) =>
                       zen.Rall abst_T 
                         (v_Vac:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vbc:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (Linear_fixed_set__equal _p_A_T _p_B_T 
                                        _p_A_equal _p_B_equal abst_T 
                                        abst_base_case abst_base_term 
                                        abst_inductive_first_term 
                                        abst_inductive_second_term 
                                        (abst_inductive_second_term x) v_Vac))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (Linear_fixed_set__equal _p_A_T 
                                           _p_B_T _p_A_equal _p_B_equal 
                                           abst_T abst_base_case 
                                           abst_base_term 
                                           abst_inductive_first_term 
                                           abst_inductive_second_term v_Vac 
                                           v_Vbc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (Linear_fixed_set__equal _p_A_T 
                                           _p_B_T _p_A_equal _p_B_equal 
                                           abst_T abst_base_case 
                                           abst_base_term 
                                           abst_inductive_first_term 
                                           abst_inductive_second_term 
                                           (abst_inductive_second_term x) 
                                           v_Vbc)))))) 
                         (abst_inductive_second_term y) 
                         (v_Vcc:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vbc:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (Linear_fixed_set__equal _p_A_T 
                                            _p_B_T _p_A_equal _p_B_equal 
                                            abst_T abst_base_case 
                                            abst_base_term 
                                            abst_inductive_first_term 
                                            abst_inductive_second_term 
                                            (abst_inductive_second_term x) 
                                            (abst_inductive_second_term y)))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (Linear_fixed_set__equal _p_A_T 
                                               _p_B_T _p_A_equal _p_B_equal 
                                               abst_T abst_base_case 
                                               abst_base_term 
                                               abst_inductive_first_term 
                                               abst_inductive_second_term 
                                               (abst_inductive_second_term y) 
                                               v_Vbc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (Linear_fixed_set__equal _p_A_T 
                                               _p_B_T _p_A_equal _p_B_equal 
                                               abst_T abst_base_case 
                                               abst_base_term 
                                               abst_inductive_first_term 
                                               abst_inductive_second_term 
                                               (abst_inductive_second_term x) 
                                               v_Vbc))))))) =>
                          zen.Rall abst_T 
                            (v_Vbc:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (Linear_fixed_set__equal _p_A_T _p_B_T 
                                        _p_A_equal _p_B_equal abst_T 
                                        abst_base_case abst_base_term 
                                        abst_inductive_first_term 
                                        abst_inductive_second_term 
                                        (abst_inductive_second_term x) 
                                        (abst_inductive_second_term y)))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (Linear_fixed_set__equal _p_A_T 
                                           _p_B_T _p_A_equal _p_B_equal 
                                           abst_T abst_base_case 
                                           abst_base_term 
                                           abst_inductive_first_term 
                                           abst_inductive_second_term 
                                           (abst_inductive_second_term y) 
                                           v_Vbc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (Linear_fixed_set__equal _p_A_T 
                                           _p_B_T _p_A_equal _p_B_equal 
                                           abst_T abst_base_case 
                                           abst_base_term 
                                           abst_inductive_first_term 
                                           abst_inductive_second_term 
                                           (abst_inductive_second_term x) 
                                           v_Vbc))))) 
                            (abst_inductive_second_term z) 
                            (v_Vdc:
                             (zen.proof 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (Linear_fixed_set__equal _p_A_T 
                                            _p_B_T _p_A_equal _p_B_equal 
                                            abst_T abst_base_case 
                                            abst_base_term 
                                            abst_inductive_first_term 
                                            abst_inductive_second_term 
                                            (abst_inductive_second_term x) 
                                            (abst_inductive_second_term y)))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (Linear_fixed_set__equal _p_A_T 
                                               _p_B_T _p_A_equal _p_B_equal 
                                               abst_T abst_base_case 
                                               abst_base_term 
                                               abst_inductive_first_term 
                                               abst_inductive_second_term 
                                               (abst_inductive_second_term y) 
                                               (abst_inductive_second_term z)))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (Linear_fixed_set__equal _p_A_T 
                                               _p_B_T _p_A_equal _p_B_equal 
                                               abst_T abst_base_case 
                                               abst_base_term 
                                               abst_inductive_first_term 
                                               abst_inductive_second_term 
                                               (abst_inductive_second_term x) 
                                               (abst_inductive_second_term z))))))) =>
                             zen.Rimply 
                               (zen.triangle 
                                  (focal.is_true 
                                     (Linear_fixed_set__equal _p_A_T _p_B_T 
                                        _p_A_equal _p_B_equal abst_T 
                                        abst_base_case abst_base_term 
                                        abst_inductive_first_term 
                                        abst_inductive_second_term 
                                        (abst_inductive_second_term x) 
                                        (abst_inductive_second_term y)))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (Linear_fixed_set__equal _p_A_T 
                                           _p_B_T _p_A_equal _p_B_equal 
                                           abst_T abst_base_case 
                                           abst_base_term 
                                           abst_inductive_first_term 
                                           abst_inductive_second_term 
                                           (abst_inductive_second_term y) 
                                           (abst_inductive_second_term z)))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (Linear_fixed_set__equal _p_A_T 
                                           _p_B_T _p_A_equal _p_B_equal 
                                           abst_T abst_base_case 
                                           abst_base_term 
                                           abst_inductive_first_term 
                                           abst_inductive_second_term 
                                           (abst_inductive_second_term x) 
                                           (abst_inductive_second_term z))))) 
                               (v_Vec:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (Linear_fixed_set__equal _p_A_T 
                                               _p_B_T _p_A_equal _p_B_equal 
                                               abst_T abst_base_case 
                                               abst_base_term 
                                               abst_inductive_first_term 
                                               abst_inductive_second_term 
                                               (abst_inductive_second_term x) 
                                               (abst_inductive_second_term y)))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (Linear_fixed_set__equal _p_A_T 
                                           _p_B_T _p_A_equal _p_B_equal 
                                           abst_T abst_base_case 
                                           abst_base_term 
                                           abst_inductive_first_term 
                                           abst_inductive_second_term 
                                           (abst_inductive_second_term x) 
                                           (abst_inductive_second_term y)))) 
                                  __F_1_2_1_2_1_LEMMA v_Vec) 
                               (v_Vfc:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (Linear_fixed_set__equal _p_A_T 
                                               _p_B_T _p_A_equal _p_B_equal 
                                               abst_T abst_base_case 
                                               abst_base_term 
                                               abst_inductive_first_term 
                                               abst_inductive_second_term 
                                               (abst_inductive_second_term y) 
                                               (abst_inductive_second_term z)))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (Linear_fixed_set__equal _p_A_T 
                                               _p_B_T _p_A_equal _p_B_equal 
                                               abst_T abst_base_case 
                                               abst_base_term 
                                               abst_inductive_first_term 
                                               abst_inductive_second_term 
                                               (abst_inductive_second_term x) 
                                               (abst_inductive_second_term z)))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (Linear_fixed_set__equal _p_A_T 
                                           _p_B_T _p_A_equal _p_B_equal 
                                           abst_T abst_base_case 
                                           abst_base_term 
                                           abst_inductive_first_term 
                                           abst_inductive_second_term 
                                           (abst_inductive_second_term y) 
                                           (abst_inductive_second_term z)))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (Linear_fixed_set__equal _p_A_T 
                                           _p_B_T _p_A_equal _p_B_equal 
                                           abst_T abst_base_case 
                                           abst_base_term 
                                           abst_inductive_first_term 
                                           abst_inductive_second_term 
                                           (abst_inductive_second_term x) 
                                           (abst_inductive_second_term z)))) 
                                  (v_Vgc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (Linear_fixed_set__equal 
                                                  _p_A_T _p_B_T _p_A_equal 
                                                  _p_B_equal abst_T 
                                                  abst_base_case 
                                                  abst_base_term 
                                                  abst_inductive_first_term 
                                                  abst_inductive_second_term 
                                                  (abst_inductive_second_term 
                                                     y) 
                                                  (abst_inductive_second_term 
                                                     z)))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (Linear_fixed_set__equal _p_A_T 
                                              _p_B_T _p_A_equal _p_B_equal 
                                              abst_T abst_base_case 
                                              abst_base_term 
                                              abst_inductive_first_term 
                                              abst_inductive_second_term 
                                              (abst_inductive_second_term y) 
                                              (abst_inductive_second_term z)))) 
                                     __F_1_2_1_2_2_LEMMA v_Vgc) 
                                  (v_Vhc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (Linear_fixed_set__equal _p_A_T 
                                               _p_B_T _p_A_equal _p_B_equal 
                                               abst_T abst_base_case 
                                               abst_base_term 
                                               abst_inductive_first_term 
                                               abst_inductive_second_term 
                                               (abst_inductive_second_term x) 
                                               (abst_inductive_second_term z))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (Linear_fixed_set__equal _p_A_T 
                                              _p_B_T _p_A_equal _p_B_equal 
                                              abst_T abst_base_case 
                                              abst_base_term 
                                              abst_inductive_first_term 
                                              abst_inductive_second_term 
                                              (abst_inductive_second_term x) 
                                              (abst_inductive_second_term z)))) 
                                     v_Vhc v_Vzb) v_Vfc) v_Vdc) v_Vcc) R)) 
                     (dk_builtins.magic_prove 
                        (dk_logic.ebP 
                           (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                              _p_B_equal abst_T abst_base_case 
                              abst_base_term abst_inductive_first_term 
                              abst_inductive_second_term 
                              (abst_inductive_second_term y) 
                              (abst_inductive_second_term z))))) 
                    (dk_builtins.magic_prove 
                       (dk_logic.ebP 
                          (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_base_case abst_base_term 
                             abst_inductive_first_term 
                             abst_inductive_second_term 
                             (abst_inductive_second_term x) 
                             (abst_inductive_second_term y)))))) 
                ((__F_1_2_1_1_1_LEMMA:
                  (dk_logic.eP 
                     (dk_logic.ebP 
                        (_p_B_equal (abst_inductive_first_term x) 
                           (abst_inductive_first_term y)))) =>
                  (__F_1_2_1_1_2_LEMMA:
                   (dk_logic.eP 
                      (dk_logic.ebP 
                         (_p_B_equal (abst_inductive_first_term y) 
                            (abst_inductive_first_term z)))) =>
                   zen.nnpp 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_B_equal (abst_inductive_first_term x) 
                              (abst_inductive_first_term z)))) 
                     (v_Vkc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_B_equal (abst_inductive_first_term x) 
                                     (abst_inductive_first_term z)))))) =>
                      zen.Rcut 
                        (zen.and 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal _p_B_T 
                                    (abst_inductive_first_term x) 
                                    (abst_inductive_first_term x)))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal 
                                       (abst_inductive_first_term x) 
                                       (abst_inductive_first_term x)))))) 
                        (v_Vlc:
                         (zen.proof 
                            (zen.and 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal _p_B_T 
                                        (abst_inductive_first_term x) 
                                        (abst_inductive_first_term x)))) 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_inductive_first_term x) 
                                           (abst_inductive_first_term x))))))) =>
                         zen.Rand 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal _p_B_T 
                                    (abst_inductive_first_term x) 
                                    (abst_inductive_first_term x)))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal 
                                       (abst_inductive_first_term x) 
                                       (abst_inductive_first_term x))))) 
                           (v_Vmc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal _p_B_T 
                                        (abst_inductive_first_term x) 
                                        (abst_inductive_first_term x))))) =>
                            v_Vnc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_inductive_first_term x) 
                                           (abst_inductive_first_term x)))))) =>
                            zen.Rnoteq _p_B_T (abst_inductive_first_term x) 
                              v_Vmc) v_Vlc) 
                        (v_Voc:
                         (zen.proof 
                            (zen.not 
                               (zen.and 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal _p_B_T 
                                           (abst_inductive_first_term x) 
                                           (abst_inductive_first_term x)))) 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_inductive_first_term x) 
                                              (abst_inductive_first_term x)))))))) =>
                         zen.Rcut 
                           (zen.triangle 
                              (zen.equal _p_B_T 
                                 (abst_inductive_first_term y) 
                                 (abst_inductive_first_term z))) 
                           (v_Vpc:
                            (zen.proof 
                               (zen.triangle 
                                  (zen.equal _p_B_T 
                                     (abst_inductive_first_term y) 
                                     (abst_inductive_first_term z)))) =>
                            zen.Rsubst basics.bool__t 
                              (v_Vqc:(zen.term basics.bool__t) =>
                               zen.triangle (focal.is_true v_Vqc)) 
                              (_p_B_equal (abst_inductive_first_term x) 
                                 (abst_inductive_first_term y)) 
                              (_p_B_equal (abst_inductive_first_term x) 
                                 (abst_inductive_first_term z)) 
                              (v_Vrc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (_p_B_equal 
                                              (abst_inductive_first_term x) 
                                              (abst_inductive_first_term y)) 
                                           (_p_B_equal 
                                              (abst_inductive_first_term x) 
                                              (abst_inductive_first_term z)))))) =>
                               zen.Rsubst _p_B_T 
                                 (v_Vsc:(zen.term _p_B_T) =>
                                  zen.not 
                                    (zen.triangle 
                                       (zen.equal basics.bool__t 
                                          (_p_B_equal v_Vsc 
                                             (abst_inductive_first_term y)) 
                                          (_p_B_equal 
                                             (abst_inductive_first_term x) 
                                             (abst_inductive_first_term z))))) 
                                 (abst_inductive_first_term x) 
                                 (abst_inductive_first_term x) 
                                 (v_Vmc:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal _p_B_T 
                                              (abst_inductive_first_term x) 
                                              (abst_inductive_first_term x))))) =>
                                  zen.Rnotand 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal _p_B_T 
                                             (abst_inductive_first_term x) 
                                             (abst_inductive_first_term x)))) 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_B_equal 
                                                (abst_inductive_first_term x) 
                                                (abst_inductive_first_term x))))) 
                                    (v_Vtc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal _p_B_T 
                                                    (abst_inductive_first_term 
                                                       x) 
                                                    (abst_inductive_first_term 
                                                       x)))))) =>
                                     zen.Rnotnot 
                                       (zen.triangle 
                                          (zen.equal _p_B_T 
                                             (abst_inductive_first_term x) 
                                             (abst_inductive_first_term x))) 
                                       (v_Vuc:
                                        (zen.proof 
                                           (zen.triangle 
                                              (zen.equal _p_B_T 
                                                 (abst_inductive_first_term x) 
                                                 (abst_inductive_first_term x)))) =>
                                        zen.Rcut 
                                          (zen.triangle 
                                             (zen.equal _p_B_T 
                                                (abst_inductive_first_term x) 
                                                (abst_inductive_first_term x))) 
                                          (v_Vuc0:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (zen.equal _p_B_T 
                                                    (abst_inductive_first_term 
                                                       x) 
                                                    (abst_inductive_first_term 
                                                       x)))) =>
                                           zen.Rsubst _p_B_T 
                                             (v_Vvc:(zen.term _p_B_T) =>
                                              zen.triangle 
                                                (zen.equal _p_B_T v_Vvc 
                                                   (abst_inductive_first_term 
                                                      x))) 
                                             (abst_inductive_first_term x) 
                                             (abst_inductive_first_term x) 
                                             (v_Vmc0:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal _p_B_T 
                                                          (abst_inductive_first_term 
                                                             x) 
                                                          (abst_inductive_first_term 
                                                             x))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (zen.equal _p_B_T 
                                                      (abst_inductive_first_term 
                                                         x) 
                                                      (abst_inductive_first_term 
                                                         x))) v_Vuc0 v_Vmc0) 
                                             (v_Vuc1:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (zen.equal _p_B_T 
                                                       (abst_inductive_first_term 
                                                          x) 
                                                       (abst_inductive_first_term 
                                                          x)))) =>
                                              zen.Rsubst _p_B_T 
                                                (v_Vwc:(zen.term _p_B_T) =>
                                                 zen.triangle 
                                                   (zen.equal _p_B_T 
                                                      (abst_inductive_first_term 
                                                         x) v_Vwc)) 
                                                (abst_inductive_first_term x) 
                                                (abst_inductive_first_term x) 
                                                (v_Vmc0:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal _p_B_T 
                                                             (abst_inductive_first_term 
                                                                x) 
                                                             (abst_inductive_first_term 
                                                                x))))) =>
                                                 zen.Rnoteq _p_B_T 
                                                   (abst_inductive_first_term 
                                                      x) v_Vmc0) 
                                                (v_Vuc2:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (zen.equal _p_B_T 
                                                          (abst_inductive_first_term 
                                                             x) 
                                                          (abst_inductive_first_term 
                                                             x)))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (zen.equal _p_B_T 
                                                         (abst_inductive_first_term 
                                                            x) 
                                                         (abst_inductive_first_term 
                                                            x))) v_Vuc2 v_Vmc) 
                                                v_Vuc1) v_Vuc0) 
                                          (v_Vmc0:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal _p_B_T 
                                                       (abst_inductive_first_term 
                                                          x) 
                                                       (abst_inductive_first_term 
                                                          x))))) =>
                                           zen.Rnoteq _p_B_T 
                                             (abst_inductive_first_term x) 
                                             v_Vmc0)) v_Vtc) 
                                    (v_Vxc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_inductive_first_term 
                                                          x) 
                                                       (abst_inductive_first_term 
                                                          x))))))) =>
                                     zen.Rnotnot 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_B_equal 
                                                (abst_inductive_first_term x) 
                                                (abst_inductive_first_term x)))) 
                                       (v_Vyc:
                                        (zen.proof 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_inductive_first_term 
                                                       x) 
                                                    (abst_inductive_first_term 
                                                       x))))) =>
                                        zen.Rall _p_B_T 
                                          (v_Vzc:(zen.term _p_B_T) =>
                                           zen.forall _p_B_T 
                                             (v_Vad:(zen.term _p_B_T) =>
                                              zen.forall _p_B_T 
                                                (v_Vbd:(zen.term _p_B_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_B_equal v_Vzc 
                                                            v_Vad))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_B_equal 
                                                               v_Vad v_Vbd))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_B_equal 
                                                               v_Vzc v_Vbd))))))) 
                                          (abst_inductive_first_term x) 
                                          (v_Vcd:
                                           (zen.proof 
                                              (zen.forall _p_B_T 
                                                 (v_Vad:(zen.term _p_B_T) =>
                                                  zen.forall _p_B_T 
                                                    (v_Vbd:
                                                     (zen.term _p_B_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_inductive_first_term 
                                                                   x) v_Vad))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   v_Vad 
                                                                   v_Vbd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   (abst_inductive_first_term 
                                                                    x) v_Vbd)))))))) =>
                                           zen.Rall _p_B_T 
                                             (v_Vad:(zen.term _p_B_T) =>
                                              zen.forall _p_B_T 
                                                (v_Vbd:(zen.term _p_B_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_B_equal 
                                                            (abst_inductive_first_term 
                                                               x) v_Vad))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_B_equal 
                                                               v_Vad v_Vbd))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_B_equal 
                                                               (abst_inductive_first_term 
                                                                  x) v_Vbd)))))) 
                                             (abst_inductive_first_term x) 
                                             (v_Vdd:
                                              (zen.proof 
                                                 (zen.forall _p_B_T 
                                                    (v_Vbd:
                                                     (zen.term _p_B_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_inductive_first_term 
                                                                   x) 
                                                                (abst_inductive_first_term 
                                                                   x)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   (abst_inductive_first_term 
                                                                    x) v_Vbd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   (abst_inductive_first_term 
                                                                    x) v_Vbd))))))) =>
                                              zen.Rall _p_B_T 
                                                (v_Vbd:(zen.term _p_B_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_B_equal 
                                                            (abst_inductive_first_term 
                                                               x) 
                                                            (abst_inductive_first_term 
                                                               x)))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_B_equal 
                                                               (abst_inductive_first_term 
                                                                  x) v_Vbd))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_B_equal 
                                                               (abst_inductive_first_term 
                                                                  x) v_Vbd))))) 
                                                (abst_inductive_first_term y) 
                                                (v_Ved:
                                                 (zen.proof 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_inductive_first_term 
                                                                   x) 
                                                                (abst_inductive_first_term 
                                                                   x)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   (abst_inductive_first_term 
                                                                    x) 
                                                                   (abst_inductive_first_term 
                                                                    y)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   (abst_inductive_first_term 
                                                                    x) 
                                                                   (abst_inductive_first_term 
                                                                    y))))))) =>
                                                 zen.Rimply 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_B_equal 
                                                            (abst_inductive_first_term 
                                                               x) 
                                                            (abst_inductive_first_term 
                                                               x)))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_B_equal 
                                                               (abst_inductive_first_term 
                                                                  x) 
                                                               (abst_inductive_first_term 
                                                                  y)))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_B_equal 
                                                               (abst_inductive_first_term 
                                                                  x) 
                                                               (abst_inductive_first_term 
                                                                  y))))) 
                                                   (v_Vnc:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   (abst_inductive_first_term 
                                                                    x) 
                                                                   (abst_inductive_first_term 
                                                                    x)))))) =>
                                                    zen.Raxiom 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_B_equal 
                                                               (abst_inductive_first_term 
                                                                  x) 
                                                               (abst_inductive_first_term 
                                                                  x)))) 
                                                      v_Vyc v_Vnc) 
                                                   (v_Vfd:
                                                    (zen.proof 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   (abst_inductive_first_term 
                                                                    x) 
                                                                   (abst_inductive_first_term 
                                                                    y)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   (abst_inductive_first_term 
                                                                    x) 
                                                                   (abst_inductive_first_term 
                                                                    y)))))) =>
                                                    zen.Rimply 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_B_equal 
                                                               (abst_inductive_first_term 
                                                                  x) 
                                                               (abst_inductive_first_term 
                                                                  y)))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_B_equal 
                                                               (abst_inductive_first_term 
                                                                  x) 
                                                               (abst_inductive_first_term 
                                                                  y)))) 
                                                      (v_Vgd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    y)))))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_B_equal 
                                                                  (abst_inductive_first_term 
                                                                    x) 
                                                                  (abst_inductive_first_term 
                                                                    y)))) 
                                                         __F_1_2_1_1_1_LEMMA 
                                                         v_Vgd) 
                                                      (__F_1_2_1_1_1_LEMMA0:
                                                       (zen.proof 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   (abst_inductive_first_term 
                                                                    x) 
                                                                   (abst_inductive_first_term 
                                                                    y))))) =>
                                                       zen.Rsubst 
                                                         basics.bool__t 
                                                         (v_Vqc:
                                                          (zen.term 
                                                             basics.bool__t) =>
                                                          zen.triangle 
                                                            (focal.is_true 
                                                               v_Vqc)) 
                                                         (_p_B_equal 
                                                            (abst_inductive_first_term 
                                                               x) 
                                                            (abst_inductive_first_term 
                                                               y)) 
                                                         (_p_B_equal 
                                                            (abst_inductive_first_term 
                                                               x) 
                                                            (abst_inductive_first_term 
                                                               z)) 
                                                         (v_Vrc0:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    y)) 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    z)))))) =>
                                                          zen.Rsubst _p_B_T 
                                                            (v_Vsc:
                                                             (zen.term _p_B_T) =>
                                                             zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    v_Vsc 
                                                                    (abst_inductive_first_term 
                                                                    y)) 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    z))))) 
                                                            (abst_inductive_first_term 
                                                               x) 
                                                            (abst_inductive_first_term 
                                                               x) 
                                                            (v_Vmc0:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    x))))) =>
                                                             zen.Rnoteq 
                                                               _p_B_T 
                                                               (abst_inductive_first_term 
                                                                  x) v_Vmc0) 
                                                            (v_Vrc1:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    y)) 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    z)))))) =>
                                                             zen.Rsubst 
                                                               _p_B_T 
                                                               (v_Vhd:
                                                                (zen.term 
                                                                   _p_B_T) =>
                                                                zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) v_Vhd) 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    z))))) 
                                                               (abst_inductive_first_term 
                                                                  y) 
                                                               (abst_inductive_first_term 
                                                                  z) 
                                                               (v_Vid:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_inductive_first_term 
                                                                    y) 
                                                                    (abst_inductive_first_term 
                                                                    z))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_inductive_first_term 
                                                                    y) 
                                                                    (abst_inductive_first_term 
                                                                    z))) 
                                                                  v_Vpc v_Vid) 
                                                               (v_Vjd:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    z)) 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    z)))))) =>
                                                                zen.Rnoteq 
                                                                  basics.bool__t 
                                                                  (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    z)) v_Vjd) 
                                                               v_Vrc1) v_Vrc0) 
                                                         (v_Vkd:
                                                          (zen.proof 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    z))))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    z)))) 
                                                            v_Vkd v_Vkc) 
                                                         __F_1_2_1_1_1_LEMMA0) 
                                                      v_Vfd) v_Ved) v_Vdd) 
                                             v_Vcd) _p_B_equal_transitive) 
                                       v_Vxc) v_Voc) 
                                 (v_Vrc0:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal basics.bool__t 
                                              (_p_B_equal 
                                                 (abst_inductive_first_term x) 
                                                 (abst_inductive_first_term y)) 
                                              (_p_B_equal 
                                                 (abst_inductive_first_term x) 
                                                 (abst_inductive_first_term z)))))) =>
                                  zen.Rsubst _p_B_T 
                                    (v_Vhd:(zen.term _p_B_T) =>
                                     zen.not 
                                       (zen.triangle 
                                          (zen.equal basics.bool__t 
                                             (_p_B_equal 
                                                (abst_inductive_first_term x) 
                                                v_Vhd) 
                                             (_p_B_equal 
                                                (abst_inductive_first_term x) 
                                                (abst_inductive_first_term z))))) 
                                    (abst_inductive_first_term y) 
                                    (abst_inductive_first_term z) 
                                    (v_Vid:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal _p_B_T 
                                                 (abst_inductive_first_term y) 
                                                 (abst_inductive_first_term z))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (zen.equal _p_B_T 
                                             (abst_inductive_first_term y) 
                                             (abst_inductive_first_term z))) 
                                       v_Vpc v_Vid) 
                                    (v_Vjd:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (_p_B_equal 
                                                    (abst_inductive_first_term 
                                                       x) 
                                                    (abst_inductive_first_term 
                                                       z)) 
                                                 (_p_B_equal 
                                                    (abst_inductive_first_term 
                                                       x) 
                                                    (abst_inductive_first_term 
                                                       z)))))) =>
                                     zen.Rnoteq basics.bool__t 
                                       (_p_B_equal 
                                          (abst_inductive_first_term x) 
                                          (abst_inductive_first_term z)) 
                                       v_Vjd) v_Vrc0) v_Vrc) 
                              (v_Vkd:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_inductive_first_term x) 
                                           (abst_inductive_first_term z))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_B_equal 
                                          (abst_inductive_first_term x) 
                                          (abst_inductive_first_term z)))) 
                                 v_Vkd v_Vkc) __F_1_2_1_1_1_LEMMA) 
                           (v_Vid:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal _p_B_T 
                                        (abst_inductive_first_term y) 
                                        (abst_inductive_first_term z))))) =>
                            zen.Rcut 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal 
                                       (abst_inductive_first_term y) 
                                       (abst_inductive_first_term z)))) 
                              (__F_1_2_1_1_2_LEMMA0:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_inductive_first_term y) 
                                           (abst_inductive_first_term z))))) =>
                               zen.Rall _p_B_T 
                                 (v_Vzc:(zen.term _p_B_T) =>
                                  zen.forall _p_B_T 
                                    (v_Vad:(zen.term _p_B_T) =>
                                     zen.forall _p_B_T 
                                       (v_Vbd:(zen.term _p_B_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_B_equal v_Vzc v_Vad))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_B_equal v_Vad v_Vbd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_B_equal v_Vzc v_Vbd))))))) 
                                 (abst_inductive_first_term x) 
                                 (v_Vcd:
                                  (zen.proof 
                                     (zen.forall _p_B_T 
                                        (v_Vad:(zen.term _p_B_T) =>
                                         zen.forall _p_B_T 
                                           (v_Vbd:(zen.term _p_B_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_inductive_first_term 
                                                          x) v_Vad))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal v_Vad 
                                                          v_Vbd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_inductive_first_term 
                                                             x) v_Vbd)))))))) =>
                                  zen.Rall _p_B_T 
                                    (v_Vad:(zen.term _p_B_T) =>
                                     zen.forall _p_B_T 
                                       (v_Vbd:(zen.term _p_B_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_B_equal 
                                                   (abst_inductive_first_term 
                                                      x) v_Vad))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_B_equal v_Vad v_Vbd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_B_equal 
                                                      (abst_inductive_first_term 
                                                         x) v_Vbd)))))) 
                                    (abst_inductive_first_term y) 
                                    (v_Vld:
                                     (zen.proof 
                                        (zen.forall _p_B_T 
                                           (v_Vbd:(zen.term _p_B_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_inductive_first_term 
                                                          x) 
                                                       (abst_inductive_first_term 
                                                          y)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_inductive_first_term 
                                                             y) v_Vbd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_inductive_first_term 
                                                             x) v_Vbd))))))) =>
                                     zen.Rall _p_B_T 
                                       (v_Vbd:(zen.term _p_B_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_B_equal 
                                                   (abst_inductive_first_term 
                                                      x) 
                                                   (abst_inductive_first_term 
                                                      y)))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_B_equal 
                                                      (abst_inductive_first_term 
                                                         y) v_Vbd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_B_equal 
                                                      (abst_inductive_first_term 
                                                         x) v_Vbd))))) 
                                       (abst_inductive_first_term z) 
                                       (v_Vmd:
                                        (zen.proof 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_inductive_first_term 
                                                          x) 
                                                       (abst_inductive_first_term 
                                                          y)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_inductive_first_term 
                                                             y) 
                                                          (abst_inductive_first_term 
                                                             z)))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_inductive_first_term 
                                                             x) 
                                                          (abst_inductive_first_term 
                                                             z))))))) =>
                                        zen.Rimply 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_B_equal 
                                                   (abst_inductive_first_term 
                                                      x) 
                                                   (abst_inductive_first_term 
                                                      y)))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_B_equal 
                                                      (abst_inductive_first_term 
                                                         y) 
                                                      (abst_inductive_first_term 
                                                         z)))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_B_equal 
                                                      (abst_inductive_first_term 
                                                         x) 
                                                      (abst_inductive_first_term 
                                                         z))))) 
                                          (v_Vgd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_inductive_first_term 
                                                             x) 
                                                          (abst_inductive_first_term 
                                                             y)))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_B_equal 
                                                      (abst_inductive_first_term 
                                                         x) 
                                                      (abst_inductive_first_term 
                                                         y)))) 
                                             __F_1_2_1_1_1_LEMMA v_Vgd) 
                                          (v_Vnd:
                                           (zen.proof 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_inductive_first_term 
                                                             y) 
                                                          (abst_inductive_first_term 
                                                             z)))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_inductive_first_term 
                                                             x) 
                                                          (abst_inductive_first_term 
                                                             z)))))) =>
                                           zen.Rimply 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_B_equal 
                                                      (abst_inductive_first_term 
                                                         y) 
                                                      (abst_inductive_first_term 
                                                         z)))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_B_equal 
                                                      (abst_inductive_first_term 
                                                         x) 
                                                      (abst_inductive_first_term 
                                                         z)))) 
                                             (v_Vod:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_inductive_first_term 
                                                                y) 
                                                             (abst_inductive_first_term 
                                                                z)))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_B_equal 
                                                         (abst_inductive_first_term 
                                                            y) 
                                                         (abst_inductive_first_term 
                                                            z)))) 
                                                __F_1_2_1_1_2_LEMMA0 v_Vod) 
                                             (v_Vkd:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_inductive_first_term 
                                                             x) 
                                                          (abst_inductive_first_term 
                                                             z))))) =>
                                              zen.Rsubst basics.bool__t 
                                                (v_Vqc:
                                                 (zen.term basics.bool__t) =>
                                                 zen.triangle 
                                                   (focal.is_true v_Vqc)) 
                                                (_p_B_equal 
                                                   (abst_inductive_first_term 
                                                      x) 
                                                   (abst_inductive_first_term 
                                                      z)) 
                                                (_p_B_equal 
                                                   (abst_inductive_first_term 
                                                      x) 
                                                   (abst_inductive_first_term 
                                                      z)) 
                                                (v_Vjd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (_p_B_equal 
                                                                (abst_inductive_first_term 
                                                                   x) 
                                                                (abst_inductive_first_term 
                                                                   z)) 
                                                             (_p_B_equal 
                                                                (abst_inductive_first_term 
                                                                   x) 
                                                                (abst_inductive_first_term 
                                                                   z)))))) =>
                                                 zen.Rsubst _p_B_T 
                                                   (v_Vpd:
                                                    (zen.term _p_B_T) =>
                                                    zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (_p_B_equal 
                                                               v_Vpd 
                                                               (abst_inductive_first_term 
                                                                  z)) 
                                                            (_p_B_equal 
                                                               (abst_inductive_first_term 
                                                                  x) 
                                                               (abst_inductive_first_term 
                                                                  z))))) 
                                                   (abst_inductive_first_term 
                                                      x) 
                                                   (abst_inductive_first_term 
                                                      x) 
                                                   (v_Vmc:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_B_T 
                                                                (abst_inductive_first_term 
                                                                   x) 
                                                                (abst_inductive_first_term 
                                                                   x))))) =>
                                                    zen.Rnotand 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_B_T 
                                                               (abst_inductive_first_term 
                                                                  x) 
                                                               (abst_inductive_first_term 
                                                                  x)))) 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_B_equal 
                                                                  (abst_inductive_first_term 
                                                                    x) 
                                                                  (abst_inductive_first_term 
                                                                    x))))) 
                                                      (v_Vtc:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    x)))))) =>
                                                       zen.Rnotnot 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_B_T 
                                                               (abst_inductive_first_term 
                                                                  x) 
                                                               (abst_inductive_first_term 
                                                                  x))) 
                                                         (v_Vuc:
                                                          (zen.proof 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   _p_B_T 
                                                                   (abst_inductive_first_term 
                                                                    x) 
                                                                   (abst_inductive_first_term 
                                                                    x)))) =>
                                                          zen.Reqsym _p_B_T 
                                                            (abst_inductive_first_term 
                                                               x) 
                                                            (abst_inductive_first_term 
                                                               x) v_Vuc v_Vmc) 
                                                         v_Vtc) 
                                                      (v_Vxc:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    x))))))) =>
                                                       zen.Rnotnot 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_B_equal 
                                                                  (abst_inductive_first_term 
                                                                    x) 
                                                                  (abst_inductive_first_term 
                                                                    x)))) 
                                                         (v_Vyc:
                                                          (zen.proof 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    x))))) =>
                                                          zen.Rall _p_B_T 
                                                            (v_Vzc:
                                                             (zen.term _p_B_T) =>
                                                             zen.forall 
                                                               _p_B_T 
                                                               (v_Vad:
                                                                (zen.term 
                                                                   _p_B_T) =>
                                                                zen.forall 
                                                                  _p_B_T 
                                                                  (v_Vbd:
                                                                   (zen.term 
                                                                    _p_B_T) =>
                                                                   zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vzc 
                                                                    v_Vbd))))))) 
                                                            (abst_inductive_first_term 
                                                               x) 
                                                            (v_Vcd0:
                                                             (zen.proof 
                                                                (zen.forall 
                                                                   _p_B_T 
                                                                   (v_Vad:
                                                                    (
                                                                    zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vbd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) v_Vad))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) v_Vbd)))))))) =>
                                                             zen.Rall _p_B_T 
                                                               (v_Vad:
                                                                (zen.term 
                                                                   _p_B_T) =>
                                                                zen.forall 
                                                                  _p_B_T 
                                                                  (v_Vbd:
                                                                   (zen.term 
                                                                    _p_B_T) =>
                                                                   zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) v_Vad))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) v_Vbd)))))) 
                                                               (abst_inductive_first_term 
                                                                  x) 
                                                               (v_Vdd:
                                                                (zen.proof 
                                                                   (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vbd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    x)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) v_Vbd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) v_Vbd))))))) =>
                                                                zen.Rall 
                                                                  _p_B_T 
                                                                  (v_Vbd:
                                                                   (zen.term 
                                                                    _p_B_T) =>
                                                                   zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    x)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) v_Vbd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) v_Vbd))))) 
                                                                  (abst_inductive_first_term 
                                                                    z) 
                                                                  (v_Vqd:
                                                                   (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    x)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    z)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    z))))))) =>
                                                                   zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    x)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    z)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    z))))) 
                                                                    (v_Vnc:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    x)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    x)))) 
                                                                    v_Vyc 
                                                                    v_Vnc) 
                                                                    (v_Vrd:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    z)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    z)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    z)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    z)))) 
                                                                    (v_Vkc0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    z)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    z)))) 
                                                                    v_Vkd 
                                                                    v_Vkc0) 
                                                                    (v_Vkd0:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    z))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    z)))) 
                                                                    v_Vkd0 
                                                                    v_Vkc) 
                                                                    v_Vrd) 
                                                                    v_Vqd) 
                                                                  v_Vdd) 
                                                               v_Vcd0) 
                                                            _p_B_equal_transitive) 
                                                         v_Vxc) v_Voc) 
                                                   (v_Vjd0:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (_p_B_equal 
                                                                   (abst_inductive_first_term 
                                                                    x) 
                                                                   (abst_inductive_first_term 
                                                                    z)) 
                                                                (_p_B_equal 
                                                                   (abst_inductive_first_term 
                                                                    x) 
                                                                   (abst_inductive_first_term 
                                                                    z)))))) =>
                                                    zen.Rsubst _p_B_T 
                                                      (v_Vhd:
                                                       (zen.term _p_B_T) =>
                                                       zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (_p_B_equal 
                                                                  (abst_inductive_first_term 
                                                                    x) v_Vhd) 
                                                               (_p_B_equal 
                                                                  (abst_inductive_first_term 
                                                                    x) 
                                                                  (abst_inductive_first_term 
                                                                    z))))) 
                                                      (abst_inductive_first_term 
                                                         z) 
                                                      (abst_inductive_first_term 
                                                         z) 
                                                      (v_Vsd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   _p_B_T 
                                                                   (abst_inductive_first_term 
                                                                    z) 
                                                                   (abst_inductive_first_term 
                                                                    z))))) =>
                                                       zen.Rnoteq _p_B_T 
                                                         (abst_inductive_first_term 
                                                            z) v_Vsd) 
                                                      (v_Vjd1:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    z)) 
                                                                   (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    x) 
                                                                    (abst_inductive_first_term 
                                                                    z)))))) =>
                                                       zen.Rnoteq 
                                                         basics.bool__t 
                                                         (_p_B_equal 
                                                            (abst_inductive_first_term 
                                                               x) 
                                                            (abst_inductive_first_term 
                                                               z)) v_Vjd1) 
                                                      v_Vjd0) v_Vjd) 
                                                (v_Vkd0:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_inductive_first_term 
                                                                x) 
                                                             (abst_inductive_first_term 
                                                                z))))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_B_equal 
                                                            (abst_inductive_first_term 
                                                               x) 
                                                            (abst_inductive_first_term 
                                                               z)))) v_Vkd0 
                                                   v_Vkc) v_Vkd) v_Vnd) v_Vmd) 
                                       v_Vld) v_Vcd) _p_B_equal_transitive) 
                              (v_Vod:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_inductive_first_term y) 
                                              (abst_inductive_first_term z)))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_B_equal 
                                          (abst_inductive_first_term y) 
                                          (abst_inductive_first_term z)))) 
                                 __F_1_2_1_1_2_LEMMA v_Vod))))) 
                    (zen.nnpp 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_B_equal (abst_inductive_first_term y) 
                                (abst_inductive_first_term z)))) 
                       (v_Vzb:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal 
                                       (abst_inductive_first_term y) 
                                       (abst_inductive_first_term z)))))) =>
                        focal.zenon_focal_ite_bool (abst_base_case y) 
                          (dk_bool.ite basics.bool__t (abst_base_case z) 
                             (_p_A_equal (abst_base_term y) 
                                (abst_base_term z)) basics.false) 
                          (dk_bool.ite basics.bool__t (abst_base_case z) 
                             basics.false 
                             (dk_bool.ite basics.bool__t 
                                (_p_B_equal (abst_inductive_first_term y) 
                                   (abst_inductive_first_term z)) 
                                (dk_builtins.call_by_value abst_T 
                                   basics.bool__t 
                                   (dk_builtins.call_by_value abst_T 
                                      (zen.arrow abst_T basics.bool__t) 
                                      (Linear_fixed_set__equal _p_A_T _p_B_T 
                                         _p_A_equal _p_B_equal abst_T 
                                         abst_base_case abst_base_term 
                                         abst_inductive_first_term 
                                         abst_inductive_second_term) 
                                      (abst_inductive_second_term y)) 
                                   (abst_inductive_second_term z)) 
                                basics.false)) 
                          (v_Vac:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true (abst_base_case y)))) =>
                           v_Vbc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (dk_bool.ite basics.bool__t 
                                       (abst_base_case z) 
                                       (_p_A_equal (abst_base_term y) 
                                          (abst_base_term z)) basics.false)))) =>
                           zen.Rall abst_T 
                             (v_Vcc:(zen.term abst_T) =>
                              zen.not 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true (abst_base_case v_Vcc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_inductive_case v_Vcc))))) y 
                             (v_Vdc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true (abst_base_case y))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_inductive_case y)))))) =>
                              zen.Rnotand 
                                (zen.triangle 
                                   (focal.is_true (abst_base_case y))) 
                                (zen.triangle 
                                   (focal.is_true (abst_inductive_case y))) 
                                (v_Vec:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true (abst_base_case y))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true (abst_base_case y))) 
                                   v_Vac v_Vec) 
                                (v_Vfc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_inductive_case y))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true (abst_inductive_case y))) 
                                   __F_1_2_1_a_LEMMA v_Vfc) v_Vdc) 
                             abst_case_exclusive) 
                          (v_Vec:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true (abst_base_case y))))) =>
                           v_Vgc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (dk_bool.ite basics.bool__t 
                                       (abst_base_case z) basics.false 
                                       (dk_bool.ite basics.bool__t 
                                          (_p_B_equal 
                                             (abst_inductive_first_term y) 
                                             (abst_inductive_first_term z)) 
                                          (dk_builtins.call_by_value abst_T 
                                             basics.bool__t 
                                             (dk_builtins.call_by_value 
                                                abst_T 
                                                (zen.arrow abst_T 
                                                   basics.bool__t) 
                                                (Linear_fixed_set__equal 
                                                   _p_A_T _p_B_T _p_A_equal 
                                                   _p_B_equal abst_T 
                                                   abst_base_case 
                                                   abst_base_term 
                                                   abst_inductive_first_term 
                                                   abst_inductive_second_term) 
                                                (abst_inductive_second_term y)) 
                                             (abst_inductive_second_term z)) 
                                          basics.false))))) =>
                           focal.zenon_focal_ite_bool (abst_base_case z) 
                             basics.false 
                             (dk_bool.ite basics.bool__t 
                                (_p_B_equal (abst_inductive_first_term y) 
                                   (abst_inductive_first_term z)) 
                                (dk_builtins.call_by_value abst_T 
                                   basics.bool__t 
                                   (dk_builtins.call_by_value abst_T 
                                      (zen.arrow abst_T basics.bool__t) 
                                      (Linear_fixed_set__equal _p_A_T _p_B_T 
                                         _p_A_equal _p_B_equal abst_T 
                                         abst_base_case abst_base_term 
                                         abst_inductive_first_term 
                                         abst_inductive_second_term) 
                                      (abst_inductive_second_term y)) 
                                   (abst_inductive_second_term z)) 
                                basics.false) 
                             (v_Vhc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true (abst_base_case z)))) =>
                              v_Vic:(zen.proof zen.False) => zen.Rfalse v_Vic) 
                             (v_Vjc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true (abst_base_case z))))) =>
                              v_Vkc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (dk_bool.ite basics.bool__t 
                                          (_p_B_equal 
                                             (abst_inductive_first_term y) 
                                             (abst_inductive_first_term z)) 
                                          (dk_builtins.call_by_value abst_T 
                                             basics.bool__t 
                                             (dk_builtins.call_by_value 
                                                abst_T 
                                                (zen.arrow abst_T 
                                                   basics.bool__t) 
                                                (Linear_fixed_set__equal 
                                                   _p_A_T _p_B_T _p_A_equal 
                                                   _p_B_equal abst_T 
                                                   abst_base_case 
                                                   abst_base_term 
                                                   abst_inductive_first_term 
                                                   abst_inductive_second_term) 
                                                (abst_inductive_second_term y)) 
                                             (abst_inductive_second_term z)) 
                                          basics.false)))) =>
                              focal.zenon_focal_ite_bool 
                                (_p_B_equal (abst_inductive_first_term y) 
                                   (abst_inductive_first_term z)) 
                                (dk_builtins.call_by_value abst_T 
                                   basics.bool__t 
                                   (dk_builtins.call_by_value abst_T 
                                      (zen.arrow abst_T basics.bool__t) 
                                      (Linear_fixed_set__equal _p_A_T _p_B_T 
                                         _p_A_equal _p_B_equal abst_T 
                                         abst_base_case abst_base_term 
                                         abst_inductive_first_term 
                                         abst_inductive_second_term) 
                                      (abst_inductive_second_term y)) 
                                   (abst_inductive_second_term z)) 
                                basics.false 
                                (v_Vlc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_B_equal 
                                             (abst_inductive_first_term y) 
                                             (abst_inductive_first_term z))))) =>
                                 v_Vmc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (dk_builtins.call_by_value abst_T 
                                             basics.bool__t 
                                             (dk_builtins.call_by_value 
                                                abst_T 
                                                (zen.arrow abst_T 
                                                   basics.bool__t) 
                                                (Linear_fixed_set__equal 
                                                   _p_A_T _p_B_T _p_A_equal 
                                                   _p_B_equal abst_T 
                                                   abst_base_case 
                                                   abst_base_term 
                                                   abst_inductive_first_term 
                                                   abst_inductive_second_term) 
                                                (abst_inductive_second_term y)) 
                                             (abst_inductive_second_term z))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_inductive_first_term y) 
                                            (abst_inductive_first_term z)))) 
                                   v_Vlc v_Vzb) 
                                (v_Vzb0:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_B_equal 
                                                (abst_inductive_first_term y) 
                                                (abst_inductive_first_term z)))))) =>
                                 v_Vic:(zen.proof zen.False) =>
                                 zen.Rfalse v_Vic) v_Vkc) v_Vgc) H_yz))) 
                   (zen.nnpp 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal (abst_inductive_first_term x) 
                               (abst_inductive_first_term y)))) 
                      (v_Vzb:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (abst_inductive_first_term x) 
                                      (abst_inductive_first_term y)))))) =>
                       focal.zenon_focal_ite_bool (abst_base_case x) 
                         (dk_bool.ite basics.bool__t (abst_base_case y) 
                            (_p_A_equal (abst_base_term x) (abst_base_term y)) 
                            basics.false) 
                         (dk_bool.ite basics.bool__t (abst_base_case y) 
                            basics.false 
                            (dk_bool.ite basics.bool__t 
                               (_p_B_equal (abst_inductive_first_term x) 
                                  (abst_inductive_first_term y)) 
                               (dk_builtins.call_by_value abst_T 
                                  basics.bool__t 
                                  (dk_builtins.call_by_value abst_T 
                                     (zen.arrow abst_T basics.bool__t) 
                                     (Linear_fixed_set__equal _p_A_T _p_B_T 
                                        _p_A_equal _p_B_equal abst_T 
                                        abst_base_case abst_base_term 
                                        abst_inductive_first_term 
                                        abst_inductive_second_term) 
                                     (abst_inductive_second_term x)) 
                                  (abst_inductive_second_term y)) 
                               basics.false)) 
                         (v_Vac:
                          (zen.proof 
                             (zen.triangle (focal.is_true (abst_base_case x)))) =>
                          v_Vbc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (dk_bool.ite basics.bool__t 
                                      (abst_base_case y) 
                                      (_p_A_equal (abst_base_term x) 
                                         (abst_base_term y)) basics.false)))) =>
                          zen.Rall abst_T 
                            (v_Vcc:(zen.term abst_T) =>
                             zen.not 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (abst_base_case v_Vcc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_inductive_case v_Vcc))))) x 
                            (v_Vdc:
                             (zen.proof 
                                (zen.not 
                                   (zen.and 
                                      (zen.triangle 
                                         (focal.is_true (abst_base_case x))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_inductive_case x)))))) =>
                             zen.Rnotand 
                               (zen.triangle 
                                  (focal.is_true (abst_base_case x))) 
                               (zen.triangle 
                                  (focal.is_true (abst_inductive_case x))) 
                               (v_Vec:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true (abst_base_case x))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true (abst_base_case x))) 
                                  v_Vac v_Vec) 
                               (v_Vfc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_inductive_case x))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true (abst_inductive_case x))) 
                                  I v_Vfc) v_Vdc) abst_case_exclusive) 
                         (v_Vec:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_base_case x))))) =>
                          v_Vgc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (dk_bool.ite basics.bool__t 
                                      (abst_base_case y) basics.false 
                                      (dk_bool.ite basics.bool__t 
                                         (_p_B_equal 
                                            (abst_inductive_first_term x) 
                                            (abst_inductive_first_term y)) 
                                         (dk_builtins.call_by_value abst_T 
                                            basics.bool__t 
                                            (dk_builtins.call_by_value 
                                               abst_T 
                                               (zen.arrow abst_T 
                                                  basics.bool__t) 
                                               (Linear_fixed_set__equal 
                                                  _p_A_T _p_B_T _p_A_equal 
                                                  _p_B_equal abst_T 
                                                  abst_base_case 
                                                  abst_base_term 
                                                  abst_inductive_first_term 
                                                  abst_inductive_second_term) 
                                               (abst_inductive_second_term x)) 
                                            (abst_inductive_second_term y)) 
                                         basics.false))))) =>
                          focal.zenon_focal_ite_bool (abst_base_case y) 
                            basics.false 
                            (dk_bool.ite basics.bool__t 
                               (_p_B_equal (abst_inductive_first_term x) 
                                  (abst_inductive_first_term y)) 
                               (dk_builtins.call_by_value abst_T 
                                  basics.bool__t 
                                  (dk_builtins.call_by_value abst_T 
                                     (zen.arrow abst_T basics.bool__t) 
                                     (Linear_fixed_set__equal _p_A_T _p_B_T 
                                        _p_A_equal _p_B_equal abst_T 
                                        abst_base_case abst_base_term 
                                        abst_inductive_first_term 
                                        abst_inductive_second_term) 
                                     (abst_inductive_second_term x)) 
                                  (abst_inductive_second_term y)) 
                               basics.false) 
                            (v_Vhc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (abst_base_case y)))) =>
                             v_Vic:(zen.proof zen.False) => zen.Rfalse v_Vic) 
                            (v_Vjc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_base_case y))))) =>
                             v_Vkc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (dk_bool.ite basics.bool__t 
                                         (_p_B_equal 
                                            (abst_inductive_first_term x) 
                                            (abst_inductive_first_term y)) 
                                         (dk_builtins.call_by_value abst_T 
                                            basics.bool__t 
                                            (dk_builtins.call_by_value 
                                               abst_T 
                                               (zen.arrow abst_T 
                                                  basics.bool__t) 
                                               (Linear_fixed_set__equal 
                                                  _p_A_T _p_B_T _p_A_equal 
                                                  _p_B_equal abst_T 
                                                  abst_base_case 
                                                  abst_base_term 
                                                  abst_inductive_first_term 
                                                  abst_inductive_second_term) 
                                               (abst_inductive_second_term x)) 
                                            (abst_inductive_second_term y)) 
                                         basics.false)))) =>
                             focal.zenon_focal_ite_bool 
                               (_p_B_equal (abst_inductive_first_term x) 
                                  (abst_inductive_first_term y)) 
                               (dk_builtins.call_by_value abst_T 
                                  basics.bool__t 
                                  (dk_builtins.call_by_value abst_T 
                                     (zen.arrow abst_T basics.bool__t) 
                                     (Linear_fixed_set__equal _p_A_T _p_B_T 
                                        _p_A_equal _p_B_equal abst_T 
                                        abst_base_case abst_base_term 
                                        abst_inductive_first_term 
                                        abst_inductive_second_term) 
                                     (abst_inductive_second_term x)) 
                                  (abst_inductive_second_term y)) 
                               basics.false 
                               (v_Vlc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_inductive_first_term x) 
                                            (abst_inductive_first_term y))))) =>
                                v_Vmc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (dk_builtins.call_by_value abst_T 
                                            basics.bool__t 
                                            (dk_builtins.call_by_value 
                                               abst_T 
                                               (zen.arrow abst_T 
                                                  basics.bool__t) 
                                               (Linear_fixed_set__equal 
                                                  _p_A_T _p_B_T _p_A_equal 
                                                  _p_B_equal abst_T 
                                                  abst_base_case 
                                                  abst_base_term 
                                                  abst_inductive_first_term 
                                                  abst_inductive_second_term) 
                                               (abst_inductive_second_term x)) 
                                            (abst_inductive_second_term y))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_inductive_first_term x) 
                                           (abst_inductive_first_term y)))) 
                                  v_Vlc v_Vzb) 
                               (v_Vzb0:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_inductive_first_term x) 
                                               (abst_inductive_first_term y)))))) =>
                                v_Vic:(zen.proof zen.False) =>
                                zen.Rfalse v_Vic) v_Vkc) v_Vgc) H_xy)))) 
               (zen.nnpp 
                  (zen.triangle (focal.is_true (abst_inductive_case z))) 
                  (v_Vzb:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true (abst_inductive_case z))))) =>
                   focal.zenon_focal_ite_bool (abst_base_case y) 
                     (dk_bool.ite basics.bool__t (abst_base_case z) 
                        (_p_A_equal (abst_base_term y) (abst_base_term z)) 
                        basics.false) 
                     (dk_bool.ite basics.bool__t (abst_base_case z) 
                        basics.false 
                        (dk_bool.ite basics.bool__t 
                           (_p_B_equal (abst_inductive_first_term y) 
                              (abst_inductive_first_term z)) 
                           (dk_builtins.call_by_value abst_T basics.bool__t 
                              (dk_builtins.call_by_value abst_T 
                                 (zen.arrow abst_T basics.bool__t) 
                                 (Linear_fixed_set__equal _p_A_T _p_B_T 
                                    _p_A_equal _p_B_equal abst_T 
                                    abst_base_case abst_base_term 
                                    abst_inductive_first_term 
                                    abst_inductive_second_term) 
                                 (abst_inductive_second_term y)) 
                              (abst_inductive_second_term z)) basics.false)) 
                     (v_Vac:
                      (zen.proof 
                         (zen.triangle (focal.is_true (abst_base_case y)))) =>
                      v_Vbc:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (dk_bool.ite basics.bool__t 
                                  (abst_base_case z) 
                                  (_p_A_equal (abst_base_term y) 
                                     (abst_base_term z)) basics.false)))) =>
                      zen.Rall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.not 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_base_case v_Vcc))) 
                              (zen.triangle 
                                 (focal.is_true (abst_inductive_case v_Vcc))))) 
                        y 
                        (v_Vdc:
                         (zen.proof 
                            (zen.not 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (abst_base_case y))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_inductive_case y)))))) =>
                         zen.Rnotand 
                           (zen.triangle (focal.is_true (abst_base_case y))) 
                           (zen.triangle 
                              (focal.is_true (abst_inductive_case y))) 
                           (v_Vec:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true (abst_base_case y))))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (focal.is_true (abst_base_case y))) v_Vac 
                              v_Vec) 
                           (v_Vfc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true (abst_inductive_case y))))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (focal.is_true (abst_inductive_case y))) 
                              __F_1_2_1_a_LEMMA v_Vfc) v_Vdc) 
                        abst_case_exclusive) 
                     (v_Vec:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle (focal.is_true (abst_base_case y))))) =>
                      v_Vgc:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (dk_bool.ite basics.bool__t 
                                  (abst_base_case z) basics.false 
                                  (dk_bool.ite basics.bool__t 
                                     (_p_B_equal 
                                        (abst_inductive_first_term y) 
                                        (abst_inductive_first_term z)) 
                                     (dk_builtins.call_by_value abst_T 
                                        basics.bool__t 
                                        (dk_builtins.call_by_value abst_T 
                                           (zen.arrow abst_T basics.bool__t) 
                                           (Linear_fixed_set__equal _p_A_T 
                                              _p_B_T _p_A_equal _p_B_equal 
                                              abst_T abst_base_case 
                                              abst_base_term 
                                              abst_inductive_first_term 
                                              abst_inductive_second_term) 
                                           (abst_inductive_second_term y)) 
                                        (abst_inductive_second_term z)) 
                                     basics.false))))) =>
                      focal.zenon_focal_ite_bool (abst_base_case z) 
                        basics.false 
                        (dk_bool.ite basics.bool__t 
                           (_p_B_equal (abst_inductive_first_term y) 
                              (abst_inductive_first_term z)) 
                           (dk_builtins.call_by_value abst_T basics.bool__t 
                              (dk_builtins.call_by_value abst_T 
                                 (zen.arrow abst_T basics.bool__t) 
                                 (Linear_fixed_set__equal _p_A_T _p_B_T 
                                    _p_A_equal _p_B_equal abst_T 
                                    abst_base_case abst_base_term 
                                    abst_inductive_first_term 
                                    abst_inductive_second_term) 
                                 (abst_inductive_second_term y)) 
                              (abst_inductive_second_term z)) basics.false) 
                        (v_Vhc:
                         (zen.proof 
                            (zen.triangle (focal.is_true (abst_base_case z)))) =>
                         v_Vic:(zen.proof zen.False) => zen.Rfalse v_Vic) 
                        (v_Vjc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true (abst_base_case z))))) =>
                         v_Vkc:
                         (zen.proof 
                            (zen.triangle 
                               (focal.is_true 
                                  (dk_bool.ite basics.bool__t 
                                     (_p_B_equal 
                                        (abst_inductive_first_term y) 
                                        (abst_inductive_first_term z)) 
                                     (dk_builtins.call_by_value abst_T 
                                        basics.bool__t 
                                        (dk_builtins.call_by_value abst_T 
                                           (zen.arrow abst_T basics.bool__t) 
                                           (Linear_fixed_set__equal _p_A_T 
                                              _p_B_T _p_A_equal _p_B_equal 
                                              abst_T abst_base_case 
                                              abst_base_term 
                                              abst_inductive_first_term 
                                              abst_inductive_second_term) 
                                           (abst_inductive_second_term y)) 
                                        (abst_inductive_second_term z)) 
                                     basics.false)))) =>
                         zen.Rall abst_T 
                           (v_Vcc:(zen.term abst_T) =>
                            zen.or 
                              (zen.triangle 
                                 (focal.is_true (abst_base_case v_Vcc))) 
                              (zen.triangle 
                                 (focal.is_true (abst_inductive_case v_Vcc)))) 
                           z 
                           (v_Vlc:
                            (zen.proof 
                               (zen.or 
                                  (zen.triangle 
                                     (focal.is_true (abst_base_case z))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_inductive_case z))))) =>
                            zen.Ror 
                              (zen.triangle 
                                 (focal.is_true (abst_base_case z))) 
                              (zen.triangle 
                                 (focal.is_true (abst_inductive_case z))) 
                              (v_Vhc:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true (abst_base_case z)))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true (abst_base_case z))) 
                                 v_Vhc v_Vjc) 
                              (v_Vmc:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true (abst_inductive_case z)))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true (abst_inductive_case z))) 
                                 v_Vmc v_Vzb) v_Vlc) abst_case_complete) 
                        v_Vgc) H_yz))) 
              (zen.nnpp 
                 (zen.triangle (focal.is_true (abst_inductive_case y))) 
                 (v_Vzb:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle (focal.is_true (abst_inductive_case y))))) =>
                  focal.zenon_focal_ite_bool (abst_base_case x) 
                    (dk_bool.ite basics.bool__t (abst_base_case y) 
                       (_p_A_equal (abst_base_term x) (abst_base_term y)) 
                       basics.false) 
                    (dk_bool.ite basics.bool__t (abst_base_case y) 
                       basics.false 
                       (dk_bool.ite basics.bool__t 
                          (_p_B_equal (abst_inductive_first_term x) 
                             (abst_inductive_first_term y)) 
                          (dk_builtins.call_by_value abst_T basics.bool__t 
                             (dk_builtins.call_by_value abst_T 
                                (zen.arrow abst_T basics.bool__t) 
                                (Linear_fixed_set__equal _p_A_T _p_B_T 
                                   _p_A_equal _p_B_equal abst_T 
                                   abst_base_case abst_base_term 
                                   abst_inductive_first_term 
                                   abst_inductive_second_term) 
                                (abst_inductive_second_term x)) 
                             (abst_inductive_second_term y)) basics.false)) 
                    (v_Vac:
                     (zen.proof 
                        (zen.triangle (focal.is_true (abst_base_case x)))) =>
                     v_Vbc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (dk_bool.ite basics.bool__t (abst_base_case y) 
                                 (_p_A_equal (abst_base_term x) 
                                    (abst_base_term y)) basics.false)))) =>
                     zen.Rall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.not 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_base_case v_Vcc))) 
                             (zen.triangle 
                                (focal.is_true (abst_inductive_case v_Vcc))))) 
                       x 
                       (v_Vdc:
                        (zen.proof 
                           (zen.not 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_base_case x))) 
                                 (zen.triangle 
                                    (focal.is_true (abst_inductive_case x)))))) =>
                        zen.Rnotand 
                          (zen.triangle (focal.is_true (abst_base_case x))) 
                          (zen.triangle 
                             (focal.is_true (abst_inductive_case x))) 
                          (v_Vec:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true (abst_base_case x))))) =>
                           zen.Raxiom 
                             (zen.triangle (focal.is_true (abst_base_case x))) 
                             v_Vac v_Vec) 
                          (v_Vfc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true (abst_inductive_case x))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true (abst_inductive_case x))) I 
                             v_Vfc) v_Vdc) abst_case_exclusive) 
                    (v_Vec:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle (focal.is_true (abst_base_case x))))) =>
                     v_Vgc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (dk_bool.ite basics.bool__t (abst_base_case y) 
                                 basics.false 
                                 (dk_bool.ite basics.bool__t 
                                    (_p_B_equal 
                                       (abst_inductive_first_term x) 
                                       (abst_inductive_first_term y)) 
                                    (dk_builtins.call_by_value abst_T 
                                       basics.bool__t 
                                       (dk_builtins.call_by_value abst_T 
                                          (zen.arrow abst_T basics.bool__t) 
                                          (Linear_fixed_set__equal _p_A_T 
                                             _p_B_T _p_A_equal _p_B_equal 
                                             abst_T abst_base_case 
                                             abst_base_term 
                                             abst_inductive_first_term 
                                             abst_inductive_second_term) 
                                          (abst_inductive_second_term x)) 
                                       (abst_inductive_second_term y)) 
                                    basics.false))))) =>
                     focal.zenon_focal_ite_bool (abst_base_case y) 
                       basics.false 
                       (dk_bool.ite basics.bool__t 
                          (_p_B_equal (abst_inductive_first_term x) 
                             (abst_inductive_first_term y)) 
                          (dk_builtins.call_by_value abst_T basics.bool__t 
                             (dk_builtins.call_by_value abst_T 
                                (zen.arrow abst_T basics.bool__t) 
                                (Linear_fixed_set__equal _p_A_T _p_B_T 
                                   _p_A_equal _p_B_equal abst_T 
                                   abst_base_case abst_base_term 
                                   abst_inductive_first_term 
                                   abst_inductive_second_term) 
                                (abst_inductive_second_term x)) 
                             (abst_inductive_second_term y)) basics.false) 
                       (v_Vhc:
                        (zen.proof 
                           (zen.triangle (focal.is_true (abst_base_case y)))) =>
                        v_Vic:(zen.proof zen.False) => zen.Rfalse v_Vic) 
                       (v_Vjc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true (abst_base_case y))))) =>
                        v_Vkc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (dk_bool.ite basics.bool__t 
                                    (_p_B_equal 
                                       (abst_inductive_first_term x) 
                                       (abst_inductive_first_term y)) 
                                    (dk_builtins.call_by_value abst_T 
                                       basics.bool__t 
                                       (dk_builtins.call_by_value abst_T 
                                          (zen.arrow abst_T basics.bool__t) 
                                          (Linear_fixed_set__equal _p_A_T 
                                             _p_B_T _p_A_equal _p_B_equal 
                                             abst_T abst_base_case 
                                             abst_base_term 
                                             abst_inductive_first_term 
                                             abst_inductive_second_term) 
                                          (abst_inductive_second_term x)) 
                                       (abst_inductive_second_term y)) 
                                    basics.false)))) =>
                        zen.Rall abst_T 
                          (v_Vcc:(zen.term abst_T) =>
                           zen.or 
                             (zen.triangle 
                                (focal.is_true (abst_base_case v_Vcc))) 
                             (zen.triangle 
                                (focal.is_true (abst_inductive_case v_Vcc)))) 
                          y 
                          (v_Vlc:
                           (zen.proof 
                              (zen.or 
                                 (zen.triangle 
                                    (focal.is_true (abst_base_case y))) 
                                 (zen.triangle 
                                    (focal.is_true (abst_inductive_case y))))) =>
                           zen.Ror 
                             (zen.triangle (focal.is_true (abst_base_case y))) 
                             (zen.triangle 
                                (focal.is_true (abst_inductive_case y))) 
                             (v_Vhc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true (abst_base_case y)))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true (abst_base_case y))) v_Vhc 
                                v_Vjc) 
                             (v_Vmc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true (abst_inductive_case y)))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true (abst_inductive_case y))) 
                                v_Vmc v_Vzb) v_Vlc) abst_case_complete) v_Vgc) 
                    H_xy))))) 
       (x:(cc.eT abst_T) =>
        B:(dk_logic.eP (dk_logic.ebP (abst_base_case x))) =>
        (__F_1_1_1_LEMMA:
         (y:(cc.eT abst_T) ->
          z:(cc.eT abst_T) ->
          H_xy:(dk_logic.eP 
                  (dk_logic.ebP 
                     (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                        _p_B_equal abst_T abst_base_case abst_base_term 
                        abst_inductive_first_term abst_inductive_second_term 
                        x y))) ->
          H_yz:(dk_logic.eP 
                  (dk_logic.ebP 
                     (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                        _p_B_equal abst_T abst_base_case abst_base_term 
                        abst_inductive_first_term abst_inductive_second_term 
                        y z))) ->
          dk_logic.eP 
            (dk_logic.ebP 
               (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                  abst_T abst_base_case abst_base_term 
                  abst_inductive_first_term abst_inductive_second_term x z))) =>
         zen.nnpp 
           (zen.triangle 
              (Linear_fixed_set__transitivity_prop _p_A_T _p_B_T abst_T 
                 (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                    _p_B_equal abst_T abst_base_case abst_base_term 
                    abst_inductive_first_term abst_inductive_second_term) x)) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.forall abst_T 
                     (v_Vac:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vbc:(zen.term abst_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (Linear_fixed_set__equal _p_A_T _p_B_T 
                                    _p_A_equal _p_B_equal abst_T 
                                    abst_base_case abst_base_term 
                                    abst_inductive_first_term 
                                    abst_inductive_second_term x v_Vac))) 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (Linear_fixed_set__equal _p_A_T _p_B_T 
                                       _p_A_equal _p_B_equal abst_T 
                                       abst_base_case abst_base_term 
                                       abst_inductive_first_term 
                                       abst_inductive_second_term v_Vac v_Vbc))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (Linear_fixed_set__equal _p_A_T _p_B_T 
                                       _p_A_equal _p_B_equal abst_T 
                                       abst_base_case abst_base_term 
                                       abst_inductive_first_term 
                                       abst_inductive_second_term x v_Vbc))))))))) =>
            zen.Raxiom 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (Linear_fixed_set__equal _p_A_T _p_B_T 
                                _p_A_equal _p_B_equal abst_T abst_base_case 
                                abst_base_term abst_inductive_first_term 
                                abst_inductive_second_term x v_Vac))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (Linear_fixed_set__equal _p_A_T _p_B_T 
                                   _p_A_equal _p_B_equal abst_T 
                                   abst_base_case abst_base_term 
                                   abst_inductive_first_term 
                                   abst_inductive_second_term v_Vac v_Vbc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Linear_fixed_set__equal _p_A_T _p_B_T 
                                   _p_A_equal _p_B_equal abst_T 
                                   abst_base_case abst_base_term 
                                   abst_inductive_first_term 
                                   abst_inductive_second_term x v_Vbc))))))) 
              __F_1_1_1_LEMMA v_Vzb)) 
          (y:(cc.eT abst_T) =>
           z:(cc.eT abst_T) =>
           H_xy:
           (dk_logic.eP 
              (dk_logic.ebP 
                 (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                    _p_B_equal abst_T abst_base_case abst_base_term 
                    abst_inductive_first_term abst_inductive_second_term x y))) =>
           H_yz:
           (dk_logic.eP 
              (dk_logic.ebP 
                 (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                    _p_B_equal abst_T abst_base_case abst_base_term 
                    abst_inductive_first_term abst_inductive_second_term y z))) =>
           zen.nnpp 
             (zen.triangle 
                (focal.is_true 
                   (Linear_fixed_set__equal _p_A_T _p_B_T _p_A_equal 
                      _p_B_equal abst_T abst_base_case abst_base_term 
                      abst_inductive_first_term abst_inductive_second_term x 
                      z))) 
             (v_Vkc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (dk_bool.ite basics.bool__t (abst_base_case x) 
                             (dk_bool.ite basics.bool__t (abst_base_case z) 
                                (_p_A_equal (abst_base_term x) 
                                   (abst_base_term z)) basics.false) 
                             (dk_bool.ite basics.bool__t (abst_base_case z) 
                                basics.false 
                                (dk_bool.ite basics.bool__t 
                                   (_p_B_equal (abst_inductive_first_term x) 
                                      (abst_inductive_first_term z)) 
                                   (dk_builtins.call_by_value abst_T 
                                      basics.bool__t 
                                      (dk_builtins.call_by_value abst_T 
                                         (zen.arrow abst_T basics.bool__t) 
                                         (Linear_fixed_set__equal _p_A_T 
                                            _p_B_T _p_A_equal _p_B_equal 
                                            abst_T abst_base_case 
                                            abst_base_term 
                                            abst_inductive_first_term 
                                            abst_inductive_second_term) 
                                         (abst_inductive_second_term x)) 
                                      (abst_inductive_second_term z)) 
                                   basics.false))))))) =>
              focal.zenon_focal_ite_bool_n (abst_base_case x) 
                (dk_bool.ite basics.bool__t (abst_base_case z) 
                   (_p_A_equal (abst_base_term x) (abst_base_term z)) 
                   basics.false) 
                (dk_bool.ite basics.bool__t (abst_base_case z) basics.false 
                   (dk_bool.ite basics.bool__t 
                      (_p_B_equal (abst_inductive_first_term x) 
                         (abst_inductive_first_term z)) 
                      (dk_builtins.call_by_value abst_T basics.bool__t 
                         (dk_builtins.call_by_value abst_T 
                            (zen.arrow abst_T basics.bool__t) 
                            (Linear_fixed_set__equal _p_A_T _p_B_T 
                               _p_A_equal _p_B_equal abst_T abst_base_case 
                               abst_base_term abst_inductive_first_term 
                               abst_inductive_second_term) 
                            (abst_inductive_second_term x)) 
                         (abst_inductive_second_term z)) basics.false)) 
                (B0:
                 (zen.proof (zen.triangle (focal.is_true (abst_base_case x)))) =>
                 v_Vlc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (dk_bool.ite basics.bool__t (abst_base_case z) 
                                (_p_A_equal (abst_base_term x) 
                                   (abst_base_term z)) basics.false))))) =>
                 focal.zenon_focal_ite_bool_n (abst_base_case z) 
                   (_p_A_equal (abst_base_term x) (abst_base_term z)) 
                   basics.false 
                   (v_Vmc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_base_case z)))) =>
                    v_Vnc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal (abst_base_term x) 
                                   (abst_base_term z)))))) =>
                    focal.zenon_focal_ite_bool (abst_base_case y) 
                      (dk_bool.ite basics.bool__t (abst_base_case z) 
                         (_p_A_equal (abst_base_term y) (abst_base_term z)) 
                         basics.false) 
                      (dk_bool.ite basics.bool__t (abst_base_case z) 
                         basics.false 
                         (dk_bool.ite basics.bool__t 
                            (_p_B_equal (abst_inductive_first_term y) 
                               (abst_inductive_first_term z)) 
                            (dk_builtins.call_by_value abst_T basics.bool__t 
                               (dk_builtins.call_by_value abst_T 
                                  (zen.arrow abst_T basics.bool__t) 
                                  (Linear_fixed_set__equal _p_A_T _p_B_T 
                                     _p_A_equal _p_B_equal abst_T 
                                     abst_base_case abst_base_term 
                                     abst_inductive_first_term 
                                     abst_inductive_second_term) 
                                  (abst_inductive_second_term y)) 
                               (abst_inductive_second_term z)) basics.false)) 
                      (v_Voc:
                       (zen.proof 
                          (zen.triangle (focal.is_true (abst_base_case y)))) =>
                       v_Vpc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (dk_bool.ite basics.bool__t 
                                   (abst_base_case z) 
                                   (_p_A_equal (abst_base_term y) 
                                      (abst_base_term z)) basics.false)))) =>
                       focal.zenon_focal_ite_bool (abst_base_case z) 
                         (_p_A_equal (abst_base_term y) (abst_base_term z)) 
                         basics.false 
                         (v_Vmc0:
                          (zen.proof 
                             (zen.triangle (focal.is_true (abst_base_case z)))) =>
                          v_Vqc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_base_term y) 
                                      (abst_base_term z))))) =>
                          zen.Rcut 
                            (zen.and 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal _p_A_T (abst_base_term x) 
                                        (abst_base_term y)))) 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal (abst_base_term x) 
                                           (abst_base_term y)))))) 
                            (v_Vrc:
                             (zen.proof 
                                (zen.and 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal _p_A_T 
                                            (abst_base_term x) 
                                            (abst_base_term y)))) 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal (abst_base_term x) 
                                               (abst_base_term y))))))) =>
                             zen.Rand 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal _p_A_T (abst_base_term x) 
                                        (abst_base_term y)))) 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal (abst_base_term x) 
                                           (abst_base_term y))))) 
                               (v_Vsc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal _p_A_T 
                                            (abst_base_term x) 
                                            (abst_base_term y))))) =>
                                v_Vtc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal (abst_base_term x) 
                                               (abst_base_term y)))))) =>
                                focal.zenon_focal_ite_bool 
                                  (abst_base_case x) 
                                  (dk_bool.ite basics.bool__t 
                                     (abst_base_case y) 
                                     (_p_A_equal (abst_base_term x) 
                                        (abst_base_term y)) basics.false) 
                                  (dk_bool.ite basics.bool__t 
                                     (abst_base_case y) basics.false 
                                     (dk_bool.ite basics.bool__t 
                                        (_p_B_equal 
                                           (abst_inductive_first_term x) 
                                           (abst_inductive_first_term y)) 
                                        (dk_builtins.call_by_value abst_T 
                                           basics.bool__t 
                                           (dk_builtins.call_by_value abst_T 
                                              (zen.arrow abst_T 
                                                 basics.bool__t) 
                                              (Linear_fixed_set__equal 
                                                 _p_A_T _p_B_T _p_A_equal 
                                                 _p_B_equal abst_T 
                                                 abst_base_case 
                                                 abst_base_term 
                                                 abst_inductive_first_term 
                                                 abst_inductive_second_term) 
                                              (abst_inductive_second_term x)) 
                                           (abst_inductive_second_term y)) 
                                        basics.false)) 
                                  (B1:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true (abst_base_case x)))) =>
                                   v_Vuc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (dk_bool.ite basics.bool__t 
                                               (abst_base_case y) 
                                               (_p_A_equal 
                                                  (abst_base_term x) 
                                                  (abst_base_term y)) 
                                               basics.false)))) =>
                                   focal.zenon_focal_ite_bool 
                                     (abst_base_case y) 
                                     (_p_A_equal (abst_base_term x) 
                                        (abst_base_term y)) basics.false 
                                     (v_Voc0:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true (abst_base_case y)))) =>
                                      v_Vvc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_A_equal 
                                                  (abst_base_term x) 
                                                  (abst_base_term y))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal (abst_base_term x) 
                                                 (abst_base_term y)))) v_Vvc 
                                        v_Vtc) 
                                     (v_Vwc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_base_case y))))) =>
                                      v_Vxc:(zen.proof zen.False) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true (abst_base_case y))) 
                                        v_Voc v_Vwc) v_Vuc) 
                                  (v_Vyc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true (abst_base_case x))))) =>
                                   v_Vzc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (dk_bool.ite basics.bool__t 
                                               (abst_base_case y) 
                                               basics.false 
                                               (dk_bool.ite basics.bool__t 
                                                  (_p_B_equal 
                                                     (abst_inductive_first_term 
                                                        x) 
                                                     (abst_inductive_first_term 
                                                        y)) 
                                                  (dk_builtins.call_by_value 
                                                     abst_T basics.bool__t 
                                                     (dk_builtins.call_by_value 
                                                        abst_T 
                                                        (zen.arrow abst_T 
                                                           basics.bool__t) 
                                                        (Linear_fixed_set__equal 
                                                           _p_A_T _p_B_T 
                                                           _p_A_equal 
                                                           _p_B_equal abst_T 
                                                           abst_base_case 
                                                           abst_base_term 
                                                           abst_inductive_first_term 
                                                           abst_inductive_second_term) 
                                                        (abst_inductive_second_term 
                                                           x)) 
                                                     (abst_inductive_second_term 
                                                        y)) basics.false))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true (abst_base_case x))) 
                                     B0 v_Vyc) H_xy) v_Vrc) 
                            (v_Vad:
                             (zen.proof 
                                (zen.not 
                                   (zen.and 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal _p_A_T 
                                               (abst_base_term x) 
                                               (abst_base_term y)))) 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_A_equal 
                                                  (abst_base_term x) 
                                                  (abst_base_term y)))))))) =>
                             zen.Rcut 
                               (zen.triangle 
                                  (zen.equal _p_A_T (abst_base_term z) 
                                     (abst_base_term z))) 
                               (v_Vbd:
                                (zen.proof 
                                   (zen.triangle 
                                      (zen.equal _p_A_T (abst_base_term z) 
                                         (abst_base_term z)))) =>
                                zen.Rsubst basics.bool__t 
                                  (v_Vcd:(zen.term basics.bool__t) =>
                                   zen.triangle (focal.is_true v_Vcd)) 
                                  (_p_A_equal (abst_base_term y) 
                                     (abst_base_term z)) 
                                  (_p_A_equal (abst_base_term x) 
                                     (abst_base_term z)) 
                                  (v_Vdd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (_p_A_equal 
                                                  (abst_base_term y) 
                                                  (abst_base_term z)) 
                                               (_p_A_equal 
                                                  (abst_base_term x) 
                                                  (abst_base_term z)))))) =>
                                   zen.Rsubst _p_A_T 
                                     (v_Ved:(zen.term _p_A_T) =>
                                      zen.not 
                                        (zen.triangle 
                                           (zen.equal basics.bool__t 
                                              (_p_A_equal v_Ved 
                                                 (abst_base_term z)) 
                                              (_p_A_equal (abst_base_term x) 
                                                 (abst_base_term z))))) 
                                     (abst_base_term y) (abst_base_term x) 
                                     (v_Vfd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_A_T 
                                                  (abst_base_term y) 
                                                  (abst_base_term x))))) =>
                                      zen.Rnotand 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal _p_A_T 
                                                 (abst_base_term x) 
                                                 (abst_base_term y)))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_A_equal 
                                                    (abst_base_term x) 
                                                    (abst_base_term y))))) 
                                        (v_Vgd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_A_T 
                                                        (abst_base_term x) 
                                                        (abst_base_term y)))))) =>
                                         zen.Rnotnot 
                                           (zen.triangle 
                                              (zen.equal _p_A_T 
                                                 (abst_base_term x) 
                                                 (abst_base_term y))) 
                                           (v_Vhd:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal _p_A_T 
                                                     (abst_base_term x) 
                                                     (abst_base_term y)))) =>
                                            zen.Rcut 
                                              (zen.triangle 
                                                 (zen.equal _p_A_T 
                                                    (abst_base_term x) 
                                                    (abst_base_term x))) 
                                              (v_Vid:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal _p_A_T 
                                                        (abst_base_term x) 
                                                        (abst_base_term x)))) =>
                                               zen.Rsubst _p_A_T 
                                                 (v_Vjd:(zen.term _p_A_T) =>
                                                  zen.triangle 
                                                    (zen.equal _p_A_T v_Vjd 
                                                       (abst_base_term x))) 
                                                 (abst_base_term x) 
                                                 (abst_base_term y) 
                                                 (v_Vsc:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal _p_A_T 
                                                              (abst_base_term 
                                                                 x) 
                                                              (abst_base_term 
                                                                 y))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (zen.equal _p_A_T 
                                                          (abst_base_term x) 
                                                          (abst_base_term y))) 
                                                    v_Vhd v_Vsc) 
                                                 (v_Vkd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal _p_A_T 
                                                           (abst_base_term y) 
                                                           (abst_base_term x)))) =>
                                                  zen.Rsubst _p_A_T 
                                                    (v_Vld:
                                                     (zen.term _p_A_T) =>
                                                     zen.triangle 
                                                       (zen.equal _p_A_T 
                                                          (abst_base_term y) 
                                                          v_Vld)) 
                                                    (abst_base_term x) 
                                                    (abst_base_term x) 
                                                    (v_Vmd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_A_T 
                                                                 (abst_base_term 
                                                                    x) 
                                                                 (abst_base_term 
                                                                    x))))) =>
                                                     zen.Rnoteq _p_A_T 
                                                       (abst_base_term x) 
                                                       v_Vmd) 
                                                    (v_Vkd0:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (zen.equal _p_A_T 
                                                              (abst_base_term 
                                                                 y) 
                                                              (abst_base_term 
                                                                 x)))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (zen.equal _p_A_T 
                                                             (abst_base_term 
                                                                y) 
                                                             (abst_base_term 
                                                                x))) v_Vkd0 
                                                       v_Vfd) v_Vkd) v_Vid) 
                                              (v_Vmd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_A_T 
                                                           (abst_base_term x) 
                                                           (abst_base_term x))))) =>
                                               zen.Rnoteq _p_A_T 
                                                 (abst_base_term x) v_Vmd)) 
                                           v_Vgd) 
                                        (v_Vnd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal 
                                                           (abst_base_term x) 
                                                           (abst_base_term y))))))) =>
                                         zen.Rnotnot 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_A_equal 
                                                    (abst_base_term x) 
                                                    (abst_base_term y)))) 
                                           (v_Vvc:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (abst_base_term x) 
                                                        (abst_base_term y))))) =>
                                            zen.Rall _p_A_T 
                                              (v_Vod:(zen.term _p_A_T) =>
                                               zen.forall _p_A_T 
                                                 (v_Vpd:(zen.term _p_A_T) =>
                                                  zen.forall _p_A_T 
                                                    (v_Vqd:
                                                     (zen.term _p_A_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                v_Vod v_Vpd))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   v_Vpd 
                                                                   v_Vqd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   v_Vod 
                                                                   v_Vqd))))))) 
                                              (abst_base_term x) 
                                              (v_Vrd:
                                               (zen.proof 
                                                  (zen.forall _p_A_T 
                                                     (v_Vpd:
                                                      (zen.term _p_A_T) =>
                                                      zen.forall _p_A_T 
                                                        (v_Vqd:
                                                         (zen.term _p_A_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_base_term 
                                                                    x) v_Vpd))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    v_Vpd 
                                                                    v_Vqd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_base_term 
                                                                    x) v_Vqd)))))))) =>
                                               zen.Rall _p_A_T 
                                                 (v_Vpd:(zen.term _p_A_T) =>
                                                  zen.forall _p_A_T 
                                                    (v_Vqd:
                                                     (zen.term _p_A_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_base_term 
                                                                   x) v_Vpd))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   v_Vpd 
                                                                   v_Vqd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (abst_base_term 
                                                                    x) v_Vqd)))))) 
                                                 (abst_base_term y) 
                                                 (v_Vsd:
                                                  (zen.proof 
                                                     (zen.forall _p_A_T 
                                                        (v_Vqd:
                                                         (zen.term _p_A_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_base_term 
                                                                    x) 
                                                                    (
                                                                    abst_base_term 
                                                                    y)))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_base_term 
                                                                    y) v_Vqd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_base_term 
                                                                    x) v_Vqd))))))) =>
                                                  zen.Rall _p_A_T 
                                                    (v_Vqd:
                                                     (zen.term _p_A_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_base_term 
                                                                   x) 
                                                                (abst_base_term 
                                                                   y)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (abst_base_term 
                                                                    y) v_Vqd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (abst_base_term 
                                                                    x) v_Vqd))))) 
                                                    (abst_base_term z) 
                                                    (v_Vtd:
                                                     (zen.proof 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_base_term 
                                                                    x) 
                                                                    (
                                                                    abst_base_term 
                                                                    y)))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_base_term 
                                                                    y) 
                                                                    (abst_base_term 
                                                                    z)))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    z))))))) =>
                                                     zen.Rimply 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_base_term 
                                                                   x) 
                                                                (abst_base_term 
                                                                   y)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (abst_base_term 
                                                                    y) 
                                                                   (abst_base_term 
                                                                    z)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (abst_base_term 
                                                                    x) 
                                                                   (abst_base_term 
                                                                    z))))) 
                                                       (v_Vtc:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    y)))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (abst_base_term 
                                                                    x) 
                                                                   (abst_base_term 
                                                                    y)))) 
                                                          v_Vvc v_Vtc) 
                                                       (v_Vud:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_base_term 
                                                                    y) 
                                                                    (abst_base_term 
                                                                    z)))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    z)))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (abst_base_term 
                                                                    y) 
                                                                   (abst_base_term 
                                                                    z)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (abst_base_term 
                                                                    x) 
                                                                   (abst_base_term 
                                                                    z)))) 
                                                          (v_Vvd:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    y) 
                                                                    (abst_base_term 
                                                                    z)))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_A_equal 
                                                                    (abst_base_term 
                                                                    y) 
                                                                    (abst_base_term 
                                                                    z)))) 
                                                             v_Vqc v_Vvd) 
                                                          (v_Vwd:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    z))))) =>
                                                           zen.Rsubst 
                                                             basics.bool__t 
                                                             (v_Vcd:
                                                              (zen.term 
                                                                 basics.bool__t) =>
                                                              zen.triangle 
                                                                (focal.is_true 
                                                                   v_Vcd)) 
                                                             (_p_A_equal 
                                                                (abst_base_term 
                                                                   x) 
                                                                (abst_base_term 
                                                                   z)) 
                                                             (_p_A_equal 
                                                                (abst_base_term 
                                                                   x) 
                                                                (abst_base_term 
                                                                   z)) 
                                                             (v_Vxd:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    z)) 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    z)))))) =>
                                                              zen.Rsubst 
                                                                _p_A_T 
                                                                (v_Ved:
                                                                 (zen.term 
                                                                    _p_A_T) =>
                                                                 zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    v_Ved 
                                                                    (abst_base_term 
                                                                    z)) 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    z))))) 
                                                                (abst_base_term 
                                                                   x) 
                                                                (abst_base_term 
                                                                   x) 
                                                                (v_Vmd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    x))))) =>
                                                                 zen.Rnoteq 
                                                                   _p_A_T 
                                                                   (abst_base_term 
                                                                    x) v_Vmd) 
                                                                (v_Vxd0:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    z)) 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    z)))))) =>
                                                                 zen.Rsubst 
                                                                   _p_A_T 
                                                                   (v_Vyd:
                                                                    (
                                                                    zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) v_Vyd) 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    z))))) 
                                                                   (abst_base_term 
                                                                    z) 
                                                                   (abst_base_term 
                                                                    z) 
                                                                   (v_Vzd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_base_term 
                                                                    z) 
                                                                    (abst_base_term 
                                                                    z))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_base_term 
                                                                    z) 
                                                                    (abst_base_term 
                                                                    z))) 
                                                                    v_Vbd 
                                                                    v_Vzd) 
                                                                   (v_Vxd1:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    z)) 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    z)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    z)) 
                                                                    v_Vxd1) 
                                                                   v_Vxd0) 
                                                                v_Vxd) 
                                                             (v_Vwd0:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    z))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    z)))) 
                                                                v_Vwd0 v_Vnc) 
                                                             v_Vwd) v_Vud) 
                                                       v_Vtd) v_Vsd) v_Vrd) 
                                              _p_A_equal_transitive) v_Vnd) 
                                        v_Vad) 
                                     (v_Vxd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (_p_A_equal 
                                                     (abst_base_term x) 
                                                     (abst_base_term z)) 
                                                  (_p_A_equal 
                                                     (abst_base_term x) 
                                                     (abst_base_term z)))))) =>
                                      zen.Rsubst _p_A_T 
                                        (v_Vae:(zen.term _p_A_T) =>
                                         zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (_p_A_equal 
                                                    (abst_base_term x) v_Vae) 
                                                 (_p_A_equal 
                                                    (abst_base_term x) 
                                                    (abst_base_term z))))) 
                                        (abst_base_term z) 
                                        (abst_base_term z) 
                                        (v_Vzd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_A_T 
                                                     (abst_base_term z) 
                                                     (abst_base_term z))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal _p_A_T 
                                                 (abst_base_term z) 
                                                 (abst_base_term z))) v_Vbd 
                                           v_Vzd) 
                                        (v_Vxd0:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (_p_A_equal 
                                                        (abst_base_term x) 
                                                        (abst_base_term z)) 
                                                     (_p_A_equal 
                                                        (abst_base_term x) 
                                                        (abst_base_term z)))))) =>
                                         zen.Rnoteq basics.bool__t 
                                           (_p_A_equal (abst_base_term x) 
                                              (abst_base_term z)) v_Vxd0) 
                                        v_Vxd) v_Vdd) 
                                  (v_Vwd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal (abst_base_term x) 
                                               (abst_base_term z))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal (abst_base_term x) 
                                              (abst_base_term z)))) v_Vwd 
                                     v_Vnc) v_Vqc) 
                               (v_Vzd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal _p_A_T 
                                            (abst_base_term z) 
                                            (abst_base_term z))))) =>
                                zen.Rcut 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal (abst_base_term z) 
                                           (abst_base_term z)))) 
                                  (v_Vbe:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal (abst_base_term z) 
                                               (abst_base_term z))))) =>
                                   zen.Rall _p_A_T 
                                     (v_Vod:(zen.term _p_A_T) =>
                                      zen.forall _p_A_T 
                                        (v_Vpd:(zen.term _p_A_T) =>
                                         zen.forall _p_A_T 
                                           (v_Vqd:(zen.term _p_A_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_A_equal v_Vod v_Vpd))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal v_Vpd 
                                                          v_Vqd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal v_Vod 
                                                          v_Vqd))))))) 
                                     (abst_base_term y) 
                                     (v_Vce:
                                      (zen.proof 
                                         (zen.forall _p_A_T 
                                            (v_Vpd:(zen.term _p_A_T) =>
                                             zen.forall _p_A_T 
                                               (v_Vqd:(zen.term _p_A_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal 
                                                           (abst_base_term y) 
                                                           v_Vpd))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal v_Vpd 
                                                              v_Vqd))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (abst_base_term 
                                                                 y) v_Vqd)))))))) =>
                                      zen.Rall _p_A_T 
                                        (v_Vpd:(zen.term _p_A_T) =>
                                         zen.forall _p_A_T 
                                           (v_Vqd:(zen.term _p_A_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_A_equal 
                                                       (abst_base_term y) 
                                                       v_Vpd))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal v_Vpd 
                                                          v_Vqd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_base_term y) 
                                                          v_Vqd)))))) 
                                        (abst_base_term z) 
                                        (v_Vde:
                                         (zen.proof 
                                            (zen.forall _p_A_T 
                                               (v_Vqd:(zen.term _p_A_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal 
                                                           (abst_base_term y) 
                                                           (abst_base_term z)))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (abst_base_term 
                                                                 z) v_Vqd))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (abst_base_term 
                                                                 y) v_Vqd))))))) =>
                                         zen.Rall _p_A_T 
                                           (v_Vqd:(zen.term _p_A_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_A_equal 
                                                       (abst_base_term y) 
                                                       (abst_base_term z)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_base_term z) 
                                                          v_Vqd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_base_term y) 
                                                          v_Vqd))))) 
                                           (abst_base_term z) 
                                           (v_Vee:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal 
                                                           (abst_base_term y) 
                                                           (abst_base_term z)))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (abst_base_term 
                                                                 z) 
                                                              (abst_base_term 
                                                                 z)))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (abst_base_term 
                                                                 y) 
                                                              (abst_base_term 
                                                                 z))))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_A_equal 
                                                       (abst_base_term y) 
                                                       (abst_base_term z)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_base_term z) 
                                                          (abst_base_term z)))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_base_term y) 
                                                          (abst_base_term z))))) 
                                              (v_Vvd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (abst_base_term 
                                                                 y) 
                                                              (abst_base_term 
                                                                 z)))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_base_term y) 
                                                          (abst_base_term z)))) 
                                                 v_Vqc v_Vvd) 
                                              (v_Vfe:
                                               (zen.proof 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (abst_base_term 
                                                                 z) 
                                                              (abst_base_term 
                                                                 z)))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (abst_base_term 
                                                                 y) 
                                                              (abst_base_term 
                                                                 z)))))) =>
                                               zen.Rimply 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_base_term z) 
                                                          (abst_base_term z)))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_base_term y) 
                                                          (abst_base_term z)))) 
                                                 (v_Vge:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_base_term 
                                                                    z) 
                                                                 (abst_base_term 
                                                                    z)))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (abst_base_term 
                                                                z) 
                                                             (abst_base_term 
                                                                z)))) v_Vbe 
                                                    v_Vge) 
                                                 (v_Vqc0:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (abst_base_term 
                                                                 y) 
                                                              (abst_base_term 
                                                                 z))))) =>
                                                  zen.Rsubst basics.bool__t 
                                                    (v_Vhe:
                                                     (zen.term basics.bool__t) =>
                                                     zen.triangle 
                                                       (focal.is_true v_Vhe)) 
                                                    (_p_A_equal 
                                                       (abst_base_term y) 
                                                       (abst_base_term z)) 
                                                    (_p_A_equal 
                                                       (abst_base_term x) 
                                                       (abst_base_term z)) 
                                                    (v_Vdd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_base_term 
                                                                    y) 
                                                                    (
                                                                    abst_base_term 
                                                                    z)) 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_base_term 
                                                                    x) 
                                                                    (
                                                                    abst_base_term 
                                                                    z)))))) =>
                                                     zen.Rsubst _p_A_T 
                                                       (v_Vie:
                                                        (zen.term _p_A_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (_p_A_equal 
                                                                   v_Vie 
                                                                   (abst_base_term 
                                                                    z)) 
                                                                (_p_A_equal 
                                                                   (abst_base_term 
                                                                    x) 
                                                                   (abst_base_term 
                                                                    z))))) 
                                                       (abst_base_term y) 
                                                       (abst_base_term x) 
                                                       (v_Vfd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_A_T 
                                                                    (
                                                                    abst_base_term 
                                                                    y) 
                                                                    (
                                                                    abst_base_term 
                                                                    x))))) =>
                                                        zen.Rnotand 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   _p_A_T 
                                                                   (abst_base_term 
                                                                    x) 
                                                                   (abst_base_term 
                                                                    y)))) 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    y))))) 
                                                          (v_Vgd:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    y)))))) =>
                                                           zen.Rnotnot 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   _p_A_T 
                                                                   (abst_base_term 
                                                                    x) 
                                                                   (abst_base_term 
                                                                    y))) 
                                                             (v_Vhd:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_A_T 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    y)))) =>
                                                              zen.Reqsym 
                                                                _p_A_T 
                                                                (abst_base_term 
                                                                   x) 
                                                                (abst_base_term 
                                                                   y) v_Vhd 
                                                                v_Vfd) v_Vgd) 
                                                          (v_Vnd:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    y))))))) =>
                                                           zen.Rnotnot 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    y)))) 
                                                             (v_Vvc:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    y))))) =>
                                                              zen.Rall 
                                                                _p_A_T 
                                                                (v_Vod:
                                                                 (zen.term 
                                                                    _p_A_T) =>
                                                                 zen.forall 
                                                                   _p_A_T 
                                                                   (v_Vpd:
                                                                    (
                                                                    zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vqd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vod 
                                                                    v_Vpd))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vpd 
                                                                    v_Vqd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vod 
                                                                    v_Vqd))))))) 
                                                                (abst_base_term 
                                                                   x) 
                                                                (v_Vrd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vpd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vqd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) v_Vpd))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vpd 
                                                                    v_Vqd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) v_Vqd)))))))) =>
                                                                 zen.Rall 
                                                                   _p_A_T 
                                                                   (v_Vpd:
                                                                    (
                                                                    zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vqd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) v_Vpd))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vpd 
                                                                    v_Vqd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) v_Vqd)))))) 
                                                                   (abst_base_term 
                                                                    y) 
                                                                   (v_Vsd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vqd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    y)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    y) v_Vqd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) v_Vqd))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vqd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    y)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    y) v_Vqd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) v_Vqd))))) 
                                                                    (abst_base_term 
                                                                    z) 
                                                                    (v_Vtd:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    y)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    y) 
                                                                    (abst_base_term 
                                                                    z)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    z))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    y)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    y) 
                                                                    (abst_base_term 
                                                                    z)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    z))))) 
                                                                    (v_Vtc:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    y)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    y)))) 
                                                                    v_Vvc 
                                                                    v_Vtc) 
                                                                    (v_Vud:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    y) 
                                                                    (abst_base_term 
                                                                    z)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    z)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    y) 
                                                                    (abst_base_term 
                                                                    z)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    z)))) 
                                                                    (v_Vvd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    y) 
                                                                    (abst_base_term 
                                                                    z)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    y) 
                                                                    (abst_base_term 
                                                                    z)))) 
                                                                    v_Vqc0 
                                                                    v_Vvd) 
                                                                    (v_Vwd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    z))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    z)))) 
                                                                    v_Vwd 
                                                                    v_Vnc) 
                                                                    v_Vud) 
                                                                    v_Vtd) 
                                                                    v_Vsd) 
                                                                   v_Vrd) 
                                                                _p_A_equal_transitive) 
                                                             v_Vnd) v_Vad) 
                                                       (v_Vxd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    z)) 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    z)))))) =>
                                                        zen.Rsubst _p_A_T 
                                                          (v_Vae:
                                                           (zen.term _p_A_T) =>
                                                           zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) v_Vae) 
                                                                   (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    z))))) 
                                                          (abst_base_term z) 
                                                          (abst_base_term z) 
                                                          (v_Vzd0:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_A_T 
                                                                    (abst_base_term 
                                                                    z) 
                                                                    (abst_base_term 
                                                                    z))))) =>
                                                           zen.Rnoteq _p_A_T 
                                                             (abst_base_term 
                                                                z) v_Vzd0) 
                                                          (v_Vxd0:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    z)) 
                                                                    (_p_A_equal 
                                                                    (abst_base_term 
                                                                    x) 
                                                                    (abst_base_term 
                                                                    z)))))) =>
                                                           zen.Rnoteq 
                                                             basics.bool__t 
                                                             (_p_A_equal 
                                                                (abst_base_term 
                                                                   x) 
                                                                (abst_base_term 
                                                                   z)) v_Vxd0) 
                                                          v_Vxd) v_Vdd) 
                                                    (v_Vwd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_base_term 
                                                                    x) 
                                                                 (abst_base_term 
                                                                    z))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_base_term 
                                                                   x) 
                                                                (abst_base_term 
                                                                   z)))) 
                                                       v_Vwd v_Vnc) v_Vqc0) 
                                                 v_Vfe) v_Vee) v_Vde) v_Vce) 
                                     _p_A_equal_transitive) 
                                  (v_Vge:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_A_equal 
                                                  (abst_base_term z) 
                                                  (abst_base_term z)))))) =>
                                   zen.Rnoteq _p_A_T (abst_base_term z) v_Vzd)))) 
                         (v_Vje:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_base_case z))))) =>
                          v_Vxc:(zen.proof zen.False) =>
                          zen.Raxiom 
                            (zen.triangle (focal.is_true (abst_base_case z))) 
                            v_Vmc v_Vje) v_Vpc) 
                      (v_Vwc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle (focal.is_true (abst_base_case y))))) =>
                       v_Vke:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (dk_bool.ite basics.bool__t 
                                   (abst_base_case z) basics.false 
                                   (dk_bool.ite basics.bool__t 
                                      (_p_B_equal 
                                         (abst_inductive_first_term y) 
                                         (abst_inductive_first_term z)) 
                                      (dk_builtins.call_by_value abst_T 
                                         basics.bool__t 
                                         (dk_builtins.call_by_value abst_T 
                                            (zen.arrow abst_T basics.bool__t) 
                                            (Linear_fixed_set__equal _p_A_T 
                                               _p_B_T _p_A_equal _p_B_equal 
                                               abst_T abst_base_case 
                                               abst_base_term 
                                               abst_inductive_first_term 
                                               abst_inductive_second_term) 
                                            (abst_inductive_second_term y)) 
                                         (abst_inductive_second_term z)) 
                                      basics.false))))) =>
                       focal.zenon_focal_ite_bool (abst_base_case x) 
                         (dk_bool.ite basics.bool__t (abst_base_case y) 
                            (_p_A_equal (abst_base_term x) (abst_base_term y)) 
                            basics.false) 
                         (dk_bool.ite basics.bool__t (abst_base_case y) 
                            basics.false 
                            (dk_bool.ite basics.bool__t 
                               (_p_B_equal (abst_inductive_first_term x) 
                                  (abst_inductive_first_term y)) 
                               (dk_builtins.call_by_value abst_T 
                                  basics.bool__t 
                                  (dk_builtins.call_by_value abst_T 
                                     (zen.arrow abst_T basics.bool__t) 
                                     (Linear_fixed_set__equal _p_A_T _p_B_T 
                                        _p_A_equal _p_B_equal abst_T 
                                        abst_base_case abst_base_term 
                                        abst_inductive_first_term 
                                        abst_inductive_second_term) 
                                     (abst_inductive_second_term x)) 
                                  (abst_inductive_second_term y)) 
                               basics.false)) 
                         (B1:
                          (zen.proof 
                             (zen.triangle (focal.is_true (abst_base_case x)))) =>
                          v_Vuc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (dk_bool.ite basics.bool__t 
                                      (abst_base_case y) 
                                      (_p_A_equal (abst_base_term x) 
                                         (abst_base_term y)) basics.false)))) =>
                          focal.zenon_focal_ite_bool (abst_base_case y) 
                            (_p_A_equal (abst_base_term x) (abst_base_term y)) 
                            basics.false 
                            (v_Voc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (abst_base_case y)))) =>
                             v_Vvc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal (abst_base_term x) 
                                         (abst_base_term y))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (abst_base_case y))) v_Voc 
                               v_Vwc) 
                            (v_Vwc0:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_base_case y))))) =>
                             v_Vxc:(zen.proof zen.False) => zen.Rfalse v_Vxc) 
                            v_Vuc) 
                         (v_Vyc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_base_case x))))) =>
                          v_Vzc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (dk_bool.ite basics.bool__t 
                                      (abst_base_case y) basics.false 
                                      (dk_bool.ite basics.bool__t 
                                         (_p_B_equal 
                                            (abst_inductive_first_term x) 
                                            (abst_inductive_first_term y)) 
                                         (dk_builtins.call_by_value abst_T 
                                            basics.bool__t 
                                            (dk_builtins.call_by_value 
                                               abst_T 
                                               (zen.arrow abst_T 
                                                  basics.bool__t) 
                                               (Linear_fixed_set__equal 
                                                  _p_A_T _p_B_T _p_A_equal 
                                                  _p_B_equal abst_T 
                                                  abst_base_case 
                                                  abst_base_term 
                                                  abst_inductive_first_term 
                                                  abst_inductive_second_term) 
                                               (abst_inductive_second_term x)) 
                                            (abst_inductive_second_term y)) 
                                         basics.false))))) =>
                          zen.Raxiom 
                            (zen.triangle (focal.is_true (abst_base_case x))) 
                            B0 v_Vyc) H_xy) H_yz) 
                   (v_Vje:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle (focal.is_true (abst_base_case z))))) =>
                    v_Vle:(zen.proof (zen.not zen.False)) =>
                    focal.zenon_focal_ite_bool (abst_base_case y) 
                      (dk_bool.ite basics.bool__t (abst_base_case z) 
                         (_p_A_equal (abst_base_term y) (abst_base_term z)) 
                         basics.false) 
                      (dk_bool.ite basics.bool__t (abst_base_case z) 
                         basics.false 
                         (dk_bool.ite basics.bool__t 
                            (_p_B_equal (abst_inductive_first_term y) 
                               (abst_inductive_first_term z)) 
                            (dk_builtins.call_by_value abst_T basics.bool__t 
                               (dk_builtins.call_by_value abst_T 
                                  (zen.arrow abst_T basics.bool__t) 
                                  (Linear_fixed_set__equal _p_A_T _p_B_T 
                                     _p_A_equal _p_B_equal abst_T 
                                     abst_base_case abst_base_term 
                                     abst_inductive_first_term 
                                     abst_inductive_second_term) 
                                  (abst_inductive_second_term y)) 
                               (abst_inductive_second_term z)) basics.false)) 
                      (v_Voc:
                       (zen.proof 
                          (zen.triangle (focal.is_true (abst_base_case y)))) =>
                       v_Vpc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (dk_bool.ite basics.bool__t 
                                   (abst_base_case z) 
                                   (_p_A_equal (abst_base_term y) 
                                      (abst_base_term z)) basics.false)))) =>
                       focal.zenon_focal_ite_bool (abst_base_case z) 
                         (_p_A_equal (abst_base_term y) (abst_base_term z)) 
                         basics.false 
                         (v_Vmc:
                          (zen.proof 
                             (zen.triangle (focal.is_true (abst_base_case z)))) =>
                          v_Vqc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_base_term y) 
                                      (abst_base_term z))))) =>
                          zen.Raxiom 
                            (zen.triangle (focal.is_true (abst_base_case z))) 
                            v_Vmc v_Vje) 
                         (v_Vje0:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_base_case z))))) =>
                          v_Vxc:(zen.proof zen.False) => zen.Rfalse v_Vxc) 
                         v_Vpc) 
                      (v_Vwc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle (focal.is_true (abst_base_case y))))) =>
                       v_Vke:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (dk_bool.ite basics.bool__t 
                                   (abst_base_case z) basics.false 
                                   (dk_bool.ite basics.bool__t 
                                      (_p_B_equal 
                                         (abst_inductive_first_term y) 
                                         (abst_inductive_first_term z)) 
                                      (dk_builtins.call_by_value abst_T 
                                         basics.bool__t 
                                         (dk_builtins.call_by_value abst_T 
                                            (zen.arrow abst_T basics.bool__t) 
                                            (Linear_fixed_set__equal _p_A_T 
                                               _p_B_T _p_A_equal _p_B_equal 
                                               abst_T abst_base_case 
                                               abst_base_term 
                                               abst_inductive_first_term 
                                               abst_inductive_second_term) 
                                            (abst_inductive_second_term y)) 
                                         (abst_inductive_second_term z)) 
                                      basics.false))))) =>
                       focal.zenon_focal_ite_bool (abst_base_case x) 
                         (dk_bool.ite basics.bool__t (abst_base_case y) 
                            (_p_A_equal (abst_base_term x) (abst_base_term y)) 
                            basics.false) 
                         (dk_bool.ite basics.bool__t (abst_base_case y) 
                            basics.false 
                            (dk_bool.ite basics.bool__t 
                               (_p_B_equal (abst_inductive_first_term x) 
                                  (abst_inductive_first_term y)) 
                               (dk_builtins.call_by_value abst_T 
                                  basics.bool__t 
                                  (dk_builtins.call_by_value abst_T 
                                     (zen.arrow abst_T basics.bool__t) 
                                     (Linear_fixed_set__equal _p_A_T _p_B_T 
                                        _p_A_equal _p_B_equal abst_T 
                                        abst_base_case abst_base_term 
                                        abst_inductive_first_term 
                                        abst_inductive_second_term) 
                                     (abst_inductive_second_term x)) 
                                  (abst_inductive_second_term y)) 
                               basics.false)) 
                         (B1:
                          (zen.proof 
                             (zen.triangle (focal.is_true (abst_base_case x)))) =>
                          v_Vuc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (dk_bool.ite basics.bool__t 
                                      (abst_base_case y) 
                                      (_p_A_equal (abst_base_term x) 
                                         (abst_base_term y)) basics.false)))) =>
                          focal.zenon_focal_ite_bool (abst_base_case y) 
                            (_p_A_equal (abst_base_term x) (abst_base_term y)) 
                            basics.false 
                            (v_Voc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (abst_base_case y)))) =>
                             v_Vvc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal (abst_base_term x) 
                                         (abst_base_term y))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (abst_base_case y))) v_Voc 
                               v_Vwc) 
                            (v_Vwc0:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_base_case y))))) =>
                             v_Vxc:(zen.proof zen.False) => zen.Rfalse v_Vxc) 
                            v_Vuc) 
                         (v_Vyc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_base_case x))))) =>
                          v_Vzc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (dk_bool.ite basics.bool__t 
                                      (abst_base_case y) basics.false 
                                      (dk_bool.ite basics.bool__t 
                                         (_p_B_equal 
                                            (abst_inductive_first_term x) 
                                            (abst_inductive_first_term y)) 
                                         (dk_builtins.call_by_value abst_T 
                                            basics.bool__t 
                                            (dk_builtins.call_by_value 
                                               abst_T 
                                               (zen.arrow abst_T 
                                                  basics.bool__t) 
                                               (Linear_fixed_set__equal 
                                                  _p_A_T _p_B_T _p_A_equal 
                                                  _p_B_equal abst_T 
                                                  abst_base_case 
                                                  abst_base_term 
                                                  abst_inductive_first_term 
                                                  abst_inductive_second_term) 
                                               (abst_inductive_second_term x)) 
                                            (abst_inductive_second_term y)) 
                                         basics.false))))) =>
                          zen.Raxiom 
                            (zen.triangle (focal.is_true (abst_base_case x))) 
                            B0 v_Vyc) H_xy) H_yz) v_Vlc) 
                (v_Vyc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_base_case x))))) =>
                 v_Vme:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (dk_bool.ite basics.bool__t (abst_base_case z) 
                                basics.false 
                                (dk_bool.ite basics.bool__t 
                                   (_p_B_equal (abst_inductive_first_term x) 
                                      (abst_inductive_first_term z)) 
                                   (dk_builtins.call_by_value abst_T 
                                      basics.bool__t 
                                      (dk_builtins.call_by_value abst_T 
                                         (zen.arrow abst_T basics.bool__t) 
                                         (Linear_fixed_set__equal _p_A_T 
                                            _p_B_T _p_A_equal _p_B_equal 
                                            abst_T abst_base_case 
                                            abst_base_term 
                                            abst_inductive_first_term 
                                            abst_inductive_second_term) 
                                         (abst_inductive_second_term x)) 
                                      (abst_inductive_second_term z)) 
                                   basics.false)))))) =>
                 zen.Raxiom 
                   (zen.triangle (focal.is_true (abst_base_case x))) B v_Vyc) 
                v_Vkc)))).

def Linear_fixed_set__inductive_left_substitution_rule :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  _p_B_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall _p_B_T 
                             (x:(cc.eT _p_B_T) =>
                              dk_logic.forall _p_B_T 
                                (y:(cc.eT _p_B_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (_p_B_equal x y)) 
                                   (dk_logic.ebP (_p_B_equal y x)))))) ->
  _p_B_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall _p_B_T 
                              (x:(cc.eT _p_B_T) =>
                               dk_logic.forall _p_B_T 
                                 (y:(cc.eT _p_B_T) =>
                                  dk_logic.forall _p_B_T 
                                    (z:(cc.eT _p_B_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_B_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (_p_B_equal y z)) 
                                          (dk_logic.ebP (_p_B_equal x z)))))))) ->
  abst_T:cc.uT ->
  abst_inductive:((cc.eT _p_B_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_inductive_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_inductive_first_term:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  abst_inductive_second_term:((cc.eT abst_T) -> cc.eT abst_T) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_inductive_has_case:(dk_logic.eP 
                             (dk_logic.forall _p_B_T 
                                (x:(cc.eT _p_B_T) =>
                                 dk_logic.forall abst_T 
                                   (y:(cc.eT abst_T) =>
                                    dk_logic.ebP 
                                      (abst_inductive_case 
                                         (abst_inductive x y)))))) ->
  abst_inductive_reverse_first:(dk_logic.eP 
                                  (dk_logic.forall _p_B_T 
                                     (x:(cc.eT _p_B_T) =>
                                      dk_logic.forall abst_T 
                                        (y:(cc.eT abst_T) =>
                                         dk_logic.ebP 
                                           (_p_B_equal 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x y)) x))))) ->
  abst_inductive_reverse_second:(dk_logic.eP 
                                   (dk_logic.forall _p_B_T 
                                      (x:(cc.eT _p_B_T) =>
                                       dk_logic.forall abst_T 
                                         (y:(cc.eT abst_T) =>
                                          dk_logic.ebP 
                                            (abst_equal 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x y)) y))))) ->
  abst_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (abst_equal x y)) 
                                   (dk_logic.ebP (abst_equal y x)))))) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_B_T 
       (x_1:(cc.eT _p_B_T) =>
        dk_logic.forall _p_B_T 
          (x_2:(cc.eT _p_B_T) =>
           dk_logic.forall abst_T 
             (y:(cc.eT abst_T) =>
              dk_logic.imp (dk_logic.ebP (_p_B_equal x_1 x_2)) 
                (dk_logic.ebP 
                   (abst_equal (abst_inductive x_1 y) (abst_inductive x_2 y)))))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  _p_B_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.imp (dk_logic.ebP (_p_B_equal x y)) 
              (dk_logic.ebP (_p_B_equal y x)))))) =>
  _p_B_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.forall _p_B_T 
              (z:(cc.eT _p_B_T) =>
               dk_logic.imp (dk_logic.ebP (_p_B_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_B_equal y z)) 
                    (dk_logic.ebP (_p_B_equal x z)))))))) =>
  abst_T:cc.uT =>
  abst_inductive:((cc.eT _p_B_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_inductive_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_inductive_first_term:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  abst_inductive_second_term:((cc.eT abst_T) -> cc.eT abst_T) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_inductive_has_case:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.ebP (abst_inductive_case (abst_inductive x y)))))) =>
  abst_inductive_reverse_first:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.ebP 
              (_p_B_equal (abst_inductive_first_term (abst_inductive x y)) x))))) =>
  abst_inductive_reverse_second:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.ebP 
              (abst_equal (abst_inductive_second_term (abst_inductive x y)) y))))) =>
  abst_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal y x)))))) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  (__G_1_LEMMA:
   (x_1:(cc.eT _p_B_T) ->
    x_2:(cc.eT _p_B_T) ->
    y:(cc.eT abst_T) ->
    H:(dk_logic.eP (dk_logic.ebP (_p_B_equal x_1 x_2))) ->
    dk_logic.eP 
      (dk_logic.ebP 
         (abst_equal (abst_inductive x_1 y) (abst_inductive x_2 y)))) =>
   zen.nnpp 
     (zen.forall _p_B_T 
        (v_Vzb:(zen.term _p_B_T) =>
         zen.forall _p_B_T 
           (v_Vac:(zen.term _p_B_T) =>
            zen.forall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (_p_B_equal v_Vzb v_Vac))) 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_inductive v_Vzb v_Vbc) 
                          (abst_inductive v_Vac v_Vbc)))))))) 
     (v_Vcc:
      (zen.proof 
         (zen.not 
            (zen.forall _p_B_T 
               (v_Vzb:(zen.term _p_B_T) =>
                zen.forall _p_B_T 
                  (v_Vac:(zen.term _p_B_T) =>
                   zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true (_p_B_equal v_Vzb v_Vac))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_inductive v_Vzb v_Vbc) 
                                 (abst_inductive v_Vac v_Vbc)))))))))) =>
      zen.Raxiom 
        (zen.forall _p_B_T 
           (v_Vzb:(zen.term _p_B_T) =>
            zen.forall _p_B_T 
              (v_Vac:(zen.term _p_B_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (_p_B_equal v_Vzb v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_inductive v_Vzb v_Vbc) 
                             (abst_inductive v_Vac v_Vbc)))))))) __G_1_LEMMA 
        v_Vcc)) 
    (x_1:(cc.eT _p_B_T) =>
     x_2:(cc.eT _p_B_T) =>
     y:(cc.eT abst_T) =>
     H:(dk_logic.eP (dk_logic.ebP (_p_B_equal x_1 x_2))) =>
     (__G_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.and 
            (dk_logic.ebP (abst_inductive_case (abst_inductive x_1 y))) 
            (dk_logic.ebP (abst_inductive_case (abst_inductive x_2 y))))) =>
      (__G_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP 
             (_p_B_equal (abst_inductive_first_term (abst_inductive x_1 y)) 
                (abst_inductive_first_term (abst_inductive x_2 y))))) =>
       (__G_1_3_LEMMA:
        (dk_logic.eP 
           (dk_logic.ebP 
              (abst_equal 
                 (abst_inductive_second_term (abst_inductive x_1 y)) 
                 (abst_inductive_second_term (abst_inductive x_2 y))))) =>
        dk_builtins.magic_prove 
          (dk_logic.ebP 
             (abst_equal (abst_inductive x_1 y) (abst_inductive x_2 y)))) 
         ((__G_1_3_1_LEMMA:
           (dk_logic.eP 
              (dk_logic.ebP 
                 (abst_equal 
                    (abst_inductive_second_term (abst_inductive x_1 y)) y))) =>
           (__G_1_3_2_LEMMA:
            (dk_logic.eP 
               (dk_logic.ebP 
                  (abst_equal 
                     (abst_inductive_second_term (abst_inductive x_2 y)) y))) =>
            zen.nnpp 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal 
                       (abst_inductive_second_term (abst_inductive x_1 y)) 
                       (abst_inductive_second_term (abst_inductive x_2 y))))) 
              (v_Vkc:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal 
                              (abst_inductive_second_term 
                                 (abst_inductive x_1 y)) 
                              (abst_inductive_second_term 
                                 (abst_inductive x_2 y))))))) =>
               zen.Rcut 
                 (zen.and 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal abst_T 
                             (abst_inductive_second_term 
                                (abst_inductive x_1 y)) 
                             (abst_inductive_second_term 
                                (abst_inductive x_1 y))))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_inductive_second_term 
                                   (abst_inductive x_1 y)) 
                                (abst_inductive_second_term 
                                   (abst_inductive x_1 y))))))) 
                 (v_Vlc:
                  (zen.proof 
                     (zen.and 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal abst_T 
                                 (abst_inductive_second_term 
                                    (abst_inductive x_1 y)) 
                                 (abst_inductive_second_term 
                                    (abst_inductive x_1 y))))) 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_inductive_second_term 
                                       (abst_inductive x_1 y)) 
                                    (abst_inductive_second_term 
                                       (abst_inductive x_1 y)))))))) =>
                  zen.Rand 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal abst_T 
                             (abst_inductive_second_term 
                                (abst_inductive x_1 y)) 
                             (abst_inductive_second_term 
                                (abst_inductive x_1 y))))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_inductive_second_term 
                                   (abst_inductive x_1 y)) 
                                (abst_inductive_second_term 
                                   (abst_inductive x_1 y)))))) 
                    (v_Vmc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal abst_T 
                                 (abst_inductive_second_term 
                                    (abst_inductive x_1 y)) 
                                 (abst_inductive_second_term 
                                    (abst_inductive x_1 y)))))) =>
                     v_Vnc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_inductive_second_term 
                                       (abst_inductive x_1 y)) 
                                    (abst_inductive_second_term 
                                       (abst_inductive x_1 y))))))) =>
                     zen.Rnoteq abst_T 
                       (abst_inductive_second_term (abst_inductive x_1 y)) 
                       v_Vmc) v_Vlc) 
                 (v_Voc:
                  (zen.proof 
                     (zen.not 
                        (zen.and 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal abst_T 
                                    (abst_inductive_second_term 
                                       (abst_inductive x_1 y)) 
                                    (abst_inductive_second_term 
                                       (abst_inductive x_1 y))))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_inductive_second_term 
                                          (abst_inductive x_1 y)) 
                                       (abst_inductive_second_term 
                                          (abst_inductive x_1 y))))))))) =>
                  zen.Rcut 
                    (zen.triangle 
                       (zen.equal abst_T y 
                          (abst_inductive_second_term (abst_inductive x_2 y)))) 
                    (v_Vpc:
                     (zen.proof 
                        (zen.triangle 
                           (zen.equal abst_T y 
                              (abst_inductive_second_term 
                                 (abst_inductive x_2 y))))) =>
                     zen.Rsubst basics.bool__t 
                       (v_Vqc:(zen.term basics.bool__t) =>
                        zen.triangle (focal.is_true v_Vqc)) 
                       (abst_equal 
                          (abst_inductive_second_term (abst_inductive x_1 y)) 
                          y) 
                       (abst_equal 
                          (abst_inductive_second_term (abst_inductive x_1 y)) 
                          (abst_inductive_second_term (abst_inductive x_2 y))) 
                       (v_Vrc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (abst_equal 
                                       (abst_inductive_second_term 
                                          (abst_inductive x_1 y)) y) 
                                    (abst_equal 
                                       (abst_inductive_second_term 
                                          (abst_inductive x_1 y)) 
                                       (abst_inductive_second_term 
                                          (abst_inductive x_2 y))))))) =>
                        zen.Rsubst abst_T 
                          (v_Vsc:(zen.term abst_T) =>
                           zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (abst_equal v_Vsc y) 
                                   (abst_equal 
                                      (abst_inductive_second_term 
                                         (abst_inductive x_1 y)) 
                                      (abst_inductive_second_term 
                                         (abst_inductive x_2 y)))))) 
                          (abst_inductive_second_term (abst_inductive x_1 y)) 
                          (abst_inductive_second_term (abst_inductive x_1 y)) 
                          (v_Vmc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal abst_T 
                                       (abst_inductive_second_term 
                                          (abst_inductive x_1 y)) 
                                       (abst_inductive_second_term 
                                          (abst_inductive x_1 y)))))) =>
                           zen.Rnotand 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_inductive_second_term 
                                         (abst_inductive x_1 y)) 
                                      (abst_inductive_second_term 
                                         (abst_inductive x_1 y))))) 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_inductive_second_term 
                                            (abst_inductive x_1 y)) 
                                         (abst_inductive_second_term 
                                            (abst_inductive x_1 y)))))) 
                             (v_Vtc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_inductive_second_term 
                                                (abst_inductive x_1 y)) 
                                             (abst_inductive_second_term 
                                                (abst_inductive x_1 y))))))) =>
                              zen.Rnotnot 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_inductive_second_term 
                                         (abst_inductive x_1 y)) 
                                      (abst_inductive_second_term 
                                         (abst_inductive x_1 y)))) 
                                (v_Vuc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (zen.equal abst_T 
                                          (abst_inductive_second_term 
                                             (abst_inductive x_1 y)) 
                                          (abst_inductive_second_term 
                                             (abst_inductive x_1 y))))) =>
                                 zen.Rcut 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_inductive_second_term 
                                            (abst_inductive x_1 y)) 
                                         (abst_inductive_second_term 
                                            (abst_inductive x_1 y)))) 
                                   (v_Vuc:
                                    (zen.proof 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_inductive_second_term 
                                                (abst_inductive x_1 y)) 
                                             (abst_inductive_second_term 
                                                (abst_inductive x_1 y))))) =>
                                    zen.Rsubst abst_T 
                                      (v_Vvc:(zen.term abst_T) =>
                                       zen.triangle 
                                         (zen.equal abst_T v_Vvc 
                                            (abst_inductive_second_term 
                                               (abst_inductive x_1 y)))) 
                                      (abst_inductive_second_term 
                                         (abst_inductive x_1 y)) 
                                      (abst_inductive_second_term 
                                         (abst_inductive x_1 y)) 
                                      (v_Vmc:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal abst_T 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x_1 y)) 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x_1 y)))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x_1 y)) 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x_1 y)))) 
                                         v_Vuc v_Vmc) 
                                      (v_Vuc:
                                       (zen.proof 
                                          (zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_inductive_second_term 
                                                   (abst_inductive x_1 y)) 
                                                (abst_inductive_second_term 
                                                   (abst_inductive x_1 y))))) =>
                                       zen.Rsubst abst_T 
                                         (v_Vwc:(zen.term abst_T) =>
                                          zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x_1 y)) 
                                               v_Vwc)) 
                                         (abst_inductive_second_term 
                                            (abst_inductive x_1 y)) 
                                         (abst_inductive_second_term 
                                            (abst_inductive x_1 y)) 
                                         (v_Vmc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_inductive_second_term 
                                                         (abst_inductive x_1 
                                                            y)) 
                                                      (abst_inductive_second_term 
                                                         (abst_inductive x_1 
                                                            y)))))) =>
                                          zen.Rnoteq abst_T 
                                            (abst_inductive_second_term 
                                               (abst_inductive x_1 y)) v_Vmc) 
                                         (v_Vuc:
                                          (zen.proof 
                                             (zen.triangle 
                                                (zen.equal abst_T 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x_1 y)) 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x_1 y))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_inductive_second_term 
                                                     (abst_inductive x_1 y)) 
                                                  (abst_inductive_second_term 
                                                     (abst_inductive x_1 y)))) 
                                            v_Vuc v_Vmc) v_Vuc) v_Vuc) 
                                   (v_Vmc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_inductive_second_term 
                                                   (abst_inductive x_1 y)) 
                                                (abst_inductive_second_term 
                                                   (abst_inductive x_1 y)))))) =>
                                    zen.Rnoteq abst_T 
                                      (abst_inductive_second_term 
                                         (abst_inductive x_1 y)) v_Vmc)) 
                                v_Vtc) 
                             (v_Vxc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_inductive_second_term 
                                                   (abst_inductive x_1 y)) 
                                                (abst_inductive_second_term 
                                                   (abst_inductive x_1 y)))))))) =>
                              zen.Rnotnot 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_inductive_second_term 
                                            (abst_inductive x_1 y)) 
                                         (abst_inductive_second_term 
                                            (abst_inductive x_1 y))))) 
                                (v_Vyc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_inductive_second_term 
                                                (abst_inductive x_1 y)) 
                                             (abst_inductive_second_term 
                                                (abst_inductive x_1 y)))))) =>
                                 zen.Rall abst_T 
                                   (v_Vzc:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Vad:(zen.term abst_T) =>
                                       zen.forall abst_T 
                                         (v_Vbd:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vzc v_Vad))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vad v_Vbd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vzc v_Vbd))))))) 
                                   (abst_inductive_second_term 
                                      (abst_inductive x_1 y)) 
                                   (v_Vcd:
                                    (zen.proof 
                                       (zen.forall abst_T 
                                          (v_Vad:(zen.term abst_T) =>
                                           zen.forall abst_T 
                                             (v_Vbd:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x_1 y)) v_Vad))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal v_Vad 
                                                            v_Vbd))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x_1 y)) 
                                                            v_Vbd)))))))) =>
                                    zen.Rall abst_T 
                                      (v_Vad:(zen.term abst_T) =>
                                       zen.forall abst_T 
                                         (v_Vbd:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x_1 y)) 
                                                     v_Vad))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vad v_Vbd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive 
                                                              x_1 y)) v_Vbd)))))) 
                                      (abst_inductive_second_term 
                                         (abst_inductive x_1 y)) 
                                      (v_Vdd:
                                       (zen.proof 
                                          (zen.forall abst_T 
                                             (v_Vbd:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x_1 y)) 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x_1 y))))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x_1 y)) 
                                                            v_Vbd))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x_1 y)) 
                                                            v_Vbd))))))) =>
                                       zen.Rall abst_T 
                                         (v_Vbd:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x_1 y)) 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x_1 y))))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive 
                                                              x_1 y)) v_Vbd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive 
                                                              x_1 y)) v_Vbd))))) 
                                         y 
                                         (v_Ved:
                                          (zen.proof 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x_1 y)) 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x_1 y))))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x_1 y)) y))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x_1 y)) y)))))) =>
                                          zen.Rimply 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x_1 y)) 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x_1 y))))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive 
                                                              x_1 y)) y))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive 
                                                              x_1 y)) y)))) 
                                            (v_Vnc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x_1 y)) 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x_1 y))))))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive 
                                                              x_1 y)) 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive 
                                                              x_1 y))))) 
                                               v_Vyc v_Vnc) 
                                            (v_Vfd:
                                             (zen.proof 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x_1 y)) y))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x_1 y)) y))))) =>
                                             zen.Rimply 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive 
                                                              x_1 y)) y))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive 
                                                              x_1 y)) y))) 
                                               (v_Vgd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x_1 y)) y))))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x_1 y)) y))) 
                                                  __G_1_3_1_LEMMA v_Vgd) 
                                               (__G_1_3_1_LEMMA:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x_1 y)) y)))) =>
                                                zen.Rsubst basics.bool__t 
                                                  (v_Vqc:
                                                   (zen.term basics.bool__t) =>
                                                   zen.triangle 
                                                     (focal.is_true v_Vqc)) 
                                                  (abst_equal 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x_1 y)) 
                                                     y) 
                                                  (abst_equal 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x_1 y)) 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x_2 y))) 
                                                  (v_Vrc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (abst_equal 
                                                                  (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) y) 
                                                               (abst_equal 
                                                                  (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                  (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))))) =>
                                                   zen.Rsubst abst_T 
                                                     (v_Vsc:
                                                      (zen.term abst_T) =>
                                                      zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 v_Vsc y) 
                                                              (abst_equal 
                                                                 (abst_inductive_second_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x_1 y)) 
                                                                 (abst_inductive_second_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x_2 y)))))) 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x_1 y)) 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x_1 y)) 
                                                     (v_Vmc:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T 
                                                                  (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                  (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)))))) =>
                                                      zen.Rnoteq abst_T 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive 
                                                              x_1 y)) v_Vmc) 
                                                     (v_Vrc:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) y) 
                                                                  (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))))) =>
                                                      zen.Rsubst abst_T 
                                                        (v_Vhd:
                                                         (zen.term abst_T) =>
                                                         zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    v_Vhd) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (
                                                                    abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_2 y)))))) 
                                                        y 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive 
                                                              x_2 y)) 
                                                        (v_Vid:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    abst_T y 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_2 y)))))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T y 
                                                                 (abst_inductive_second_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x_2 y)))) 
                                                           v_Vpc v_Vid) 
                                                        (v_Vjd:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_2 y))) 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))))) =>
                                                         zen.Rnoteq 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_inductive_second_term 
                                                                 (abst_inductive 
                                                                    x_1 y)) 
                                                              (abst_inductive_second_term 
                                                                 (abst_inductive 
                                                                    x_2 y))) 
                                                           v_Vjd) v_Vrc) 
                                                     v_Vrc) 
                                                  (v_Vkd:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x_1 y)) 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x_2 y)))))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_inductive_second_term 
                                                                 (abst_inductive 
                                                                    x_1 y)) 
                                                              (abst_inductive_second_term 
                                                                 (abst_inductive 
                                                                    x_2 y))))) 
                                                     v_Vkd v_Vkc) 
                                                  __G_1_3_1_LEMMA) v_Vfd) 
                                            v_Ved) v_Vdd) v_Vcd) 
                                   abst_equal_transitive) v_Vxc) v_Voc) 
                          (v_Vrc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal basics.bool__t 
                                       (abst_equal 
                                          (abst_inductive_second_term 
                                             (abst_inductive x_1 y)) y) 
                                       (abst_equal 
                                          (abst_inductive_second_term 
                                             (abst_inductive x_1 y)) 
                                          (abst_inductive_second_term 
                                             (abst_inductive x_2 y))))))) =>
                           zen.Rsubst abst_T 
                             (v_Vhd:(zen.term abst_T) =>
                              zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_equal 
                                         (abst_inductive_second_term 
                                            (abst_inductive x_1 y)) v_Vhd) 
                                      (abst_equal 
                                         (abst_inductive_second_term 
                                            (abst_inductive x_1 y)) 
                                         (abst_inductive_second_term 
                                            (abst_inductive x_2 y)))))) y 
                             (abst_inductive_second_term 
                                (abst_inductive x_2 y)) 
                             (v_Vid:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal abst_T y 
                                          (abst_inductive_second_term 
                                             (abst_inductive x_2 y)))))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (zen.equal abst_T y 
                                      (abst_inductive_second_term 
                                         (abst_inductive x_2 y)))) v_Vpc 
                                v_Vid) 
                             (v_Vjd:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal basics.bool__t 
                                          (abst_equal 
                                             (abst_inductive_second_term 
                                                (abst_inductive x_1 y)) 
                                             (abst_inductive_second_term 
                                                (abst_inductive x_2 y))) 
                                          (abst_equal 
                                             (abst_inductive_second_term 
                                                (abst_inductive x_1 y)) 
                                             (abst_inductive_second_term 
                                                (abst_inductive x_2 y))))))) =>
                              zen.Rnoteq basics.bool__t 
                                (abst_equal 
                                   (abst_inductive_second_term 
                                      (abst_inductive x_1 y)) 
                                   (abst_inductive_second_term 
                                      (abst_inductive x_2 y))) v_Vjd) v_Vrc) 
                          v_Vrc) 
                       (v_Vkd:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_inductive_second_term 
                                       (abst_inductive x_1 y)) 
                                    (abst_inductive_second_term 
                                       (abst_inductive x_2 y)))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_inductive_second_term 
                                      (abst_inductive x_1 y)) 
                                   (abst_inductive_second_term 
                                      (abst_inductive x_2 y))))) v_Vkd v_Vkc) 
                       __G_1_3_1_LEMMA) 
                    (v_Vid:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal abst_T y 
                                 (abst_inductive_second_term 
                                    (abst_inductive x_2 y)))))) =>
                     zen.Rcut 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal y 
                                (abst_inductive_second_term 
                                   (abst_inductive x_2 y))))) 
                       (v_Vld:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal y 
                                    (abst_inductive_second_term 
                                       (abst_inductive x_2 y)))))) =>
                        zen.Rall abst_T 
                          (v_Vzc:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vad:(zen.term abst_T) =>
                              zen.forall abst_T 
                                (v_Vbd:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vzc v_Vad))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vad v_Vbd))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vzc v_Vbd))))))) 
                          (abst_inductive_second_term (abst_inductive x_1 y)) 
                          (v_Vcd:
                           (zen.proof 
                              (zen.forall abst_T 
                                 (v_Vad:(zen.term abst_T) =>
                                  zen.forall abst_T 
                                    (v_Vbd:(zen.term abst_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_inductive_second_term 
                                                   (abst_inductive x_1 y)) 
                                                v_Vad))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal v_Vad v_Vbd))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x_1 y)) 
                                                   v_Vbd)))))))) =>
                           zen.Rall abst_T 
                             (v_Vad:(zen.term abst_T) =>
                              zen.forall abst_T 
                                (v_Vbd:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_inductive_second_term 
                                               (abst_inductive x_1 y)) v_Vad))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vad v_Vbd))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x_1 y)) 
                                               v_Vbd)))))) y 
                             (v_Vmd:
                              (zen.proof 
                                 (zen.forall abst_T 
                                    (v_Vbd:(zen.term abst_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_inductive_second_term 
                                                   (abst_inductive x_1 y)) y))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal y v_Vbd))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x_1 y)) 
                                                   v_Vbd))))))) =>
                              zen.Rall abst_T 
                                (v_Vbd:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_inductive_second_term 
                                               (abst_inductive x_1 y)) y))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true (abst_equal y v_Vbd))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x_1 y)) 
                                               v_Vbd))))) 
                                (abst_inductive_second_term 
                                   (abst_inductive x_2 y)) 
                                (v_Vnd:
                                 (zen.proof 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_inductive_second_term 
                                                   (abst_inductive x_1 y)) y))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal y 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x_2 y))))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x_1 y)) 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x_2 y)))))))) =>
                                 zen.Rimply 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_inductive_second_term 
                                               (abst_inductive x_1 y)) y))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal y 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x_2 y))))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x_1 y)) 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x_2 y)))))) 
                                   (v_Vgd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x_1 y)) 
                                                   y))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x_1 y)) y))) 
                                      __G_1_3_1_LEMMA v_Vgd) 
                                   (v_Vod:
                                    (zen.proof 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal y 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x_2 y))))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x_1 y)) 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x_2 y))))))) =>
                                    zen.Rimply 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal y 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x_2 y))))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x_1 y)) 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x_2 y))))) 
                                      (v_Vpd:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal y 
                                                      (abst_inductive_second_term 
                                                         (abst_inductive x_2 
                                                            y))))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal y 
                                                  (abst_inductive_second_term 
                                                     (abst_inductive x_2 y))))) 
                                         v_Vld v_Vpd) 
                                      (v_Vkd:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x_1 y)) 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x_2 y)))))) =>
                                       zen.Rsubst basics.bool__t 
                                         (v_Vqd:(zen.term basics.bool__t) =>
                                          zen.triangle (focal.is_true v_Vqd)) 
                                         (abst_equal 
                                            (abst_inductive_second_term 
                                               (abst_inductive x_1 y)) 
                                            (abst_inductive_second_term 
                                               (abst_inductive x_2 y))) 
                                         (abst_equal 
                                            (abst_inductive_second_term 
                                               (abst_inductive x_1 y)) 
                                            (abst_inductive_second_term 
                                               (abst_inductive x_2 y))) 
                                         (v_Vjd:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (abst_equal 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x_1 y)) 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x_2 y))) 
                                                      (abst_equal 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x_1 y)) 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x_2 y))))))) =>
                                          zen.Rsubst abst_T 
                                            (v_Vrd:(zen.term abst_T) =>
                                             zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal v_Vrd 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive 
                                                              x_2 y))) 
                                                     (abst_equal 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive 
                                                              x_1 y)) 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive 
                                                              x_2 y)))))) 
                                            (abst_inductive_second_term 
                                               (abst_inductive x_1 y)) 
                                            (abst_inductive_second_term 
                                               (abst_inductive x_1 y)) 
                                            (v_Vmc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x_1 y)) 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x_1 y)))))) =>
                                             zen.Rnotand 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive 
                                                              x_1 y)) 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive 
                                                              x_1 y))))) 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x_1 y)) 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x_1 y)))))) 
                                               (v_Vtc:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x_1 y)) 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x_1 y))))))) =>
                                                zen.Rnotnot 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive 
                                                              x_1 y)) 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive 
                                                              x_1 y)))) 
                                                  (v_Vuc:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x_1 y)) 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x_1 y))))) =>
                                                   zen.Reqsym abst_T 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x_1 y)) 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x_1 y)) 
                                                     v_Vuc v_Vmc) v_Vtc) 
                                               (v_Vxc:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                  (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)))))))) =>
                                                zen.Rnotnot 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x_1 y)) 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x_1 y))))) 
                                                  (v_Vyc:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x_1 y)) 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x_1 y)))))) =>
                                                   zen.Rall abst_T 
                                                     (v_Vzc:
                                                      (zen.term abst_T) =>
                                                      zen.forall abst_T 
                                                        (v_Vad:
                                                         (zen.term abst_T) =>
                                                         zen.forall abst_T 
                                                           (v_Vbd:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vbd))))))) 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x_1 y)) 
                                                     (v_Vcd:
                                                      (zen.proof 
                                                         (zen.forall abst_T 
                                                            (v_Vad:
                                                             (zen.term abst_T) =>
                                                             zen.forall 
                                                               abst_T 
                                                               (v_Vbd:
                                                                (zen.term 
                                                                   abst_T) =>
                                                                zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    v_Vad))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    v_Vbd)))))))) =>
                                                      zen.Rall abst_T 
                                                        (v_Vad:
                                                         (zen.term abst_T) =>
                                                         zen.forall abst_T 
                                                           (v_Vbd:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    v_Vad))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    v_Vbd)))))) 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive 
                                                              x_1 y)) 
                                                        (v_Vdd:
                                                         (zen.proof 
                                                            (zen.forall 
                                                               abst_T 
                                                               (v_Vbd:
                                                                (zen.term 
                                                                   abst_T) =>
                                                                zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y))))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    v_Vbd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    v_Vbd))))))) =>
                                                         zen.Rall abst_T 
                                                           (v_Vbd:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y))))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    v_Vbd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    v_Vbd))))) 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x_2 y)) 
                                                           (v_Vsd:
                                                            (zen.proof 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y))))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_2 y)))))))) =>
                                                            zen.Rimply 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y))))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_2 y)))))) 
                                                              (v_Vnc:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y))))))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y))))) 
                                                                 v_Vyc v_Vnc) 
                                                              (v_Vtd:
                                                               (zen.proof 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))))) =>
                                                               zen.Rimply 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) 
                                                                 (v_Vkc:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) 
                                                                    v_Vkd 
                                                                    v_Vkc) 
                                                                 (v_Vkd:
                                                                  (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_2 y)))))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) 
                                                                    v_Vkd 
                                                                    v_Vkc) 
                                                                 v_Vtd) v_Vsd) 
                                                           v_Vdd) v_Vcd) 
                                                     abst_equal_transitive) 
                                                  v_Vxc) v_Voc) 
                                            (v_Vjd:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         basics.bool__t 
                                                         (abst_equal 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x_1 y)) 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x_2 y))) 
                                                         (abst_equal 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x_1 y)) 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x_2 y))))))) =>
                                             zen.Rsubst abst_T 
                                               (v_Vud:(zen.term abst_T) =>
                                                zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x_1 y)) 
                                                           v_Vud) 
                                                        (abst_equal 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x_1 y)) 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x_2 y)))))) 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x_2 y)) 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x_2 y)) 
                                               (v_Vvd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x_2 y)) 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x_2 y)))))) =>
                                                zen.Rnoteq abst_T 
                                                  (abst_inductive_second_term 
                                                     (abst_inductive x_2 y)) 
                                                  v_Vvd) 
                                               (v_Vjd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (abst_equal 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x_1 y)) 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x_2 y))) 
                                                            (abst_equal 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x_1 y)) 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x_2 y))))))) =>
                                                zen.Rnoteq basics.bool__t 
                                                  (abst_equal 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x_1 y)) 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x_2 y))) 
                                                  v_Vjd) v_Vjd) v_Vjd) 
                                         (v_Vkd:
                                          (zen.proof 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_inductive_second_term 
                                                         (abst_inductive x_1 
                                                            y)) 
                                                      (abst_inductive_second_term 
                                                         (abst_inductive x_2 
                                                            y)))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x_1 y)) 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x_2 y))))) 
                                            v_Vkd v_Vkc) v_Vkd) v_Vod) v_Vnd) 
                                v_Vmd) v_Vcd) abst_equal_transitive) 
                       (v_Vpd:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal y 
                                       (abst_inductive_second_term 
                                          (abst_inductive x_2 y))))))) =>
                        zen.Rall abst_T 
                          (v_Vzc:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vad:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vzc v_Vad))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vad v_Vzc))))) 
                          (abst_inductive_second_term (abst_inductive x_2 y)) 
                          (v_Vwd:
                           (zen.proof 
                              (zen.forall abst_T 
                                 (v_Vad:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_inductive_second_term 
                                                (abst_inductive x_2 y)) v_Vad))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vad 
                                             (abst_inductive_second_term 
                                                (abst_inductive x_2 y)))))))) =>
                           zen.Rall abst_T 
                             (v_Vad:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_inductive_second_term 
                                            (abst_inductive x_2 y)) v_Vad))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal v_Vad 
                                         (abst_inductive_second_term 
                                            (abst_inductive x_2 y)))))) y 
                             (v_Vxd:
                              (zen.proof 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_inductive_second_term 
                                                (abst_inductive x_2 y)) y))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal y 
                                             (abst_inductive_second_term 
                                                (abst_inductive x_2 y))))))) =>
                              zen.Rimply 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_inductive_second_term 
                                            (abst_inductive x_2 y)) y))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal y 
                                         (abst_inductive_second_term 
                                            (abst_inductive x_2 y))))) 
                                (v_Vyd:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_inductive_second_term 
                                                   (abst_inductive x_2 y)) y))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_inductive_second_term 
                                               (abst_inductive x_2 y)) y))) 
                                   __G_1_3_2_LEMMA v_Vyd) 
                                (v_Vld:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal y 
                                             (abst_inductive_second_term 
                                                (abst_inductive x_2 y)))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal y 
                                            (abst_inductive_second_term 
                                               (abst_inductive x_2 y))))) 
                                   v_Vld v_Vpd) v_Vxd) v_Vwd) 
                          abst_equal_symmetric))))) 
             (zen.nnpp 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal 
                         (abst_inductive_second_term (abst_inductive x_2 y)) 
                         y))) 
                (v_Vzb:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_inductive_second_term 
                                   (abst_inductive x_2 y)) y))))) =>
                 zen.Rall _p_B_T 
                   (v_Vac:(zen.term _p_B_T) =>
                    zen.forall abst_T 
                      (v_Vbc:(zen.term abst_T) =>
                       zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_inductive_second_term 
                                  (abst_inductive v_Vac v_Vbc)) v_Vbc)))) 
                   x_2 
                   (v_Vcc:
                    (zen.proof 
                       (zen.forall abst_T 
                          (v_Vbc:(zen.term abst_T) =>
                           zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_inductive_second_term 
                                      (abst_inductive x_2 v_Vbc)) v_Vbc))))) =>
                    zen.Rall abst_T 
                      (v_Vbc:(zen.term abst_T) =>
                       zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_inductive_second_term 
                                  (abst_inductive x_2 v_Vbc)) v_Vbc))) y 
                      (v_Vdc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_inductive_second_term 
                                      (abst_inductive x_2 y)) y)))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_inductive_second_term 
                                     (abst_inductive x_2 y)) y))) v_Vdc v_Vzb) 
                      v_Vcc) abst_inductive_reverse_second))) 
            (zen.nnpp 
               (zen.triangle 
                  (focal.is_true 
                     (abst_equal 
                        (abst_inductive_second_term (abst_inductive x_1 y)) y))) 
               (v_Vzb:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_inductive_second_term 
                                  (abst_inductive x_1 y)) y))))) =>
                zen.Rall _p_B_T 
                  (v_Vac:(zen.term _p_B_T) =>
                   zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.triangle 
                        (focal.is_true 
                           (abst_equal 
                              (abst_inductive_second_term 
                                 (abst_inductive v_Vac v_Vbc)) v_Vbc)))) x_1 
                  (v_Vcc:
                   (zen.proof 
                      (zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_inductive_second_term 
                                     (abst_inductive x_1 v_Vbc)) v_Vbc))))) =>
                   zen.Rall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.triangle 
                        (focal.is_true 
                           (abst_equal 
                              (abst_inductive_second_term 
                                 (abst_inductive x_1 v_Vbc)) v_Vbc))) y 
                     (v_Vdc:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_inductive_second_term 
                                     (abst_inductive x_1 y)) y)))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_inductive_second_term 
                                    (abst_inductive x_1 y)) y))) v_Vdc v_Vzb) 
                     v_Vcc) abst_inductive_reverse_second)))) 
        ((__G_1_2_1_LEMMA:
          (dk_logic.eP 
             (dk_logic.ebP 
                (_p_B_equal 
                   (abst_inductive_first_term (abst_inductive x_1 y)) x_1))) =>
          (__G_1_2_2_LEMMA:
           (dk_logic.eP 
              (dk_logic.ebP 
                 (_p_B_equal 
                    (abst_inductive_first_term (abst_inductive x_2 y)) x_2))) =>
           zen.nnpp 
             (zen.triangle 
                (focal.is_true 
                   (_p_B_equal 
                      (abst_inductive_first_term (abst_inductive x_1 y)) 
                      (abst_inductive_first_term (abst_inductive x_2 y))))) 
             (v_Vvc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_B_equal 
                             (abst_inductive_first_term 
                                (abst_inductive x_1 y)) 
                             (abst_inductive_first_term 
                                (abst_inductive x_2 y))))))) =>
              zen.Rcut 
                (zen.and 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal _p_B_T 
                            (abst_inductive_first_term (abst_inductive x_1 y)) 
                            (abst_inductive_first_term (abst_inductive x_1 y))))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal 
                               (abst_inductive_first_term 
                                  (abst_inductive x_1 y)) 
                               (abst_inductive_first_term 
                                  (abst_inductive x_1 y))))))) 
                (v_Vwc:
                 (zen.proof 
                    (zen.and 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal _p_B_T 
                                (abst_inductive_first_term 
                                   (abst_inductive x_1 y)) 
                                (abst_inductive_first_term 
                                   (abst_inductive x_1 y))))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal 
                                   (abst_inductive_first_term 
                                      (abst_inductive x_1 y)) 
                                   (abst_inductive_first_term 
                                      (abst_inductive x_1 y)))))))) =>
                 zen.Rand 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal _p_B_T 
                            (abst_inductive_first_term (abst_inductive x_1 y)) 
                            (abst_inductive_first_term (abst_inductive x_1 y))))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal 
                               (abst_inductive_first_term 
                                  (abst_inductive x_1 y)) 
                               (abst_inductive_first_term 
                                  (abst_inductive x_1 y)))))) 
                   (v_Vxc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal _p_B_T 
                                (abst_inductive_first_term 
                                   (abst_inductive x_1 y)) 
                                (abst_inductive_first_term 
                                   (abst_inductive x_1 y)))))) =>
                    v_Vyc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal 
                                   (abst_inductive_first_term 
                                      (abst_inductive x_1 y)) 
                                   (abst_inductive_first_term 
                                      (abst_inductive x_1 y))))))) =>
                    zen.Rnoteq _p_B_T 
                      (abst_inductive_first_term (abst_inductive x_1 y)) 
                      v_Vxc) v_Vwc) 
                (v_Vzc:
                 (zen.proof 
                    (zen.not 
                       (zen.and 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal _p_B_T 
                                   (abst_inductive_first_term 
                                      (abst_inductive x_1 y)) 
                                   (abst_inductive_first_term 
                                      (abst_inductive x_1 y))))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal 
                                      (abst_inductive_first_term 
                                         (abst_inductive x_1 y)) 
                                      (abst_inductive_first_term 
                                         (abst_inductive x_1 y))))))))) =>
                 zen.Rcut 
                   (zen.triangle 
                      (zen.equal _p_B_T x_1 
                         (abst_inductive_first_term (abst_inductive x_2 y)))) 
                   (v_Vad:
                    (zen.proof 
                       (zen.triangle 
                          (zen.equal _p_B_T x_1 
                             (abst_inductive_first_term 
                                (abst_inductive x_2 y))))) =>
                    zen.Rsubst basics.bool__t 
                      (v_Vbd:(zen.term basics.bool__t) =>
                       zen.triangle (focal.is_true v_Vbd)) 
                      (_p_B_equal 
                         (abst_inductive_first_term (abst_inductive x_1 y)) 
                         x_1) 
                      (_p_B_equal 
                         (abst_inductive_first_term (abst_inductive x_1 y)) 
                         (abst_inductive_first_term (abst_inductive x_2 y))) 
                      (v_Vcd:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (_p_B_equal 
                                      (abst_inductive_first_term 
                                         (abst_inductive x_1 y)) x_1) 
                                   (_p_B_equal 
                                      (abst_inductive_first_term 
                                         (abst_inductive x_1 y)) 
                                      (abst_inductive_first_term 
                                         (abst_inductive x_2 y))))))) =>
                       zen.Rsubst _p_B_T 
                         (v_Vdd:(zen.term _p_B_T) =>
                          zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (_p_B_equal v_Vdd x_1) 
                                  (_p_B_equal 
                                     (abst_inductive_first_term 
                                        (abst_inductive x_1 y)) 
                                     (abst_inductive_first_term 
                                        (abst_inductive x_2 y)))))) 
                         (abst_inductive_first_term (abst_inductive x_1 y)) 
                         (abst_inductive_first_term (abst_inductive x_1 y)) 
                         (v_Vxc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal _p_B_T 
                                      (abst_inductive_first_term 
                                         (abst_inductive x_1 y)) 
                                      (abst_inductive_first_term 
                                         (abst_inductive x_1 y)))))) =>
                          zen.Rnotand 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal _p_B_T 
                                     (abst_inductive_first_term 
                                        (abst_inductive x_1 y)) 
                                     (abst_inductive_first_term 
                                        (abst_inductive x_1 y))))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_inductive_first_term 
                                           (abst_inductive x_1 y)) 
                                        (abst_inductive_first_term 
                                           (abst_inductive x_1 y)))))) 
                            (v_Ved:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal _p_B_T 
                                            (abst_inductive_first_term 
                                               (abst_inductive x_1 y)) 
                                            (abst_inductive_first_term 
                                               (abst_inductive x_1 y))))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (zen.equal _p_B_T 
                                     (abst_inductive_first_term 
                                        (abst_inductive x_1 y)) 
                                     (abst_inductive_first_term 
                                        (abst_inductive x_1 y)))) 
                               (v_Vfd:
                                (zen.proof 
                                   (zen.triangle 
                                      (zen.equal _p_B_T 
                                         (abst_inductive_first_term 
                                            (abst_inductive x_1 y)) 
                                         (abst_inductive_first_term 
                                            (abst_inductive x_1 y))))) =>
                                zen.Rcut 
                                  (zen.triangle 
                                     (zen.equal _p_B_T 
                                        (abst_inductive_first_term 
                                           (abst_inductive x_1 y)) 
                                        (abst_inductive_first_term 
                                           (abst_inductive x_1 y)))) 
                                  (v_Vfd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (zen.equal _p_B_T 
                                            (abst_inductive_first_term 
                                               (abst_inductive x_1 y)) 
                                            (abst_inductive_first_term 
                                               (abst_inductive x_1 y))))) =>
                                   zen.Rsubst _p_B_T 
                                     (v_Vgd:(zen.term _p_B_T) =>
                                      zen.triangle 
                                        (zen.equal _p_B_T v_Vgd 
                                           (abst_inductive_first_term 
                                              (abst_inductive x_1 y)))) 
                                     (abst_inductive_first_term 
                                        (abst_inductive x_1 y)) 
                                     (abst_inductive_first_term 
                                        (abst_inductive x_1 y)) 
                                     (v_Vxc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_B_T 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x_1 y)) 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x_1 y)))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (zen.equal _p_B_T 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x_1 y)) 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x_1 y)))) 
                                        v_Vfd v_Vxc) 
                                     (v_Vfd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal _p_B_T 
                                               (abst_inductive_first_term 
                                                  (abst_inductive x_1 y)) 
                                               (abst_inductive_first_term 
                                                  (abst_inductive x_1 y))))) =>
                                      zen.Rsubst _p_B_T 
                                        (v_Vhd:(zen.term _p_B_T) =>
                                         zen.triangle 
                                           (zen.equal _p_B_T 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x_1 y)) 
                                              v_Vhd)) 
                                        (abst_inductive_first_term 
                                           (abst_inductive x_1 y)) 
                                        (abst_inductive_first_term 
                                           (abst_inductive x_1 y)) 
                                        (v_Vxc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_B_T 
                                                     (abst_inductive_first_term 
                                                        (abst_inductive x_1 y)) 
                                                     (abst_inductive_first_term 
                                                        (abst_inductive x_1 y)))))) =>
                                         zen.Rnoteq _p_B_T 
                                           (abst_inductive_first_term 
                                              (abst_inductive x_1 y)) v_Vxc) 
                                        (v_Vfd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal _p_B_T 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x_1 y)) 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x_1 y))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal _p_B_T 
                                                 (abst_inductive_first_term 
                                                    (abst_inductive x_1 y)) 
                                                 (abst_inductive_first_term 
                                                    (abst_inductive x_1 y)))) 
                                           v_Vfd v_Vxc) v_Vfd) v_Vfd) 
                                  (v_Vxc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal _p_B_T 
                                               (abst_inductive_first_term 
                                                  (abst_inductive x_1 y)) 
                                               (abst_inductive_first_term 
                                                  (abst_inductive x_1 y)))))) =>
                                   zen.Rnoteq _p_B_T 
                                     (abst_inductive_first_term 
                                        (abst_inductive x_1 y)) v_Vxc)) v_Ved) 
                            (v_Vid:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_inductive_first_term 
                                                  (abst_inductive x_1 y)) 
                                               (abst_inductive_first_term 
                                                  (abst_inductive x_1 y)))))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_inductive_first_term 
                                           (abst_inductive x_1 y)) 
                                        (abst_inductive_first_term 
                                           (abst_inductive x_1 y))))) 
                               (v_Vjd:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_inductive_first_term 
                                               (abst_inductive x_1 y)) 
                                            (abst_inductive_first_term 
                                               (abst_inductive x_1 y)))))) =>
                                zen.Rall _p_B_T 
                                  (v_Vkd:(zen.term _p_B_T) =>
                                   zen.forall _p_B_T 
                                     (v_Vld:(zen.term _p_B_T) =>
                                      zen.forall _p_B_T 
                                        (v_Vmd:(zen.term _p_B_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal v_Vkd v_Vld))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal v_Vld v_Vmd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal v_Vkd v_Vmd))))))) 
                                  (abst_inductive_first_term 
                                     (abst_inductive x_1 y)) 
                                  (v_Vnd:
                                   (zen.proof 
                                      (zen.forall _p_B_T 
                                         (v_Vld:(zen.term _p_B_T) =>
                                          zen.forall _p_B_T 
                                            (v_Vmd:(zen.term _p_B_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive 
                                                              x_1 y)) v_Vld))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal v_Vld 
                                                           v_Vmd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x_1 y)) 
                                                           v_Vmd)))))))) =>
                                   zen.Rall _p_B_T 
                                     (v_Vld:(zen.term _p_B_T) =>
                                      zen.forall _p_B_T 
                                        (v_Vmd:(zen.term _p_B_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x_1 y)) 
                                                    v_Vld))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal v_Vld v_Vmd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_1 y)) v_Vmd)))))) 
                                     (abst_inductive_first_term 
                                        (abst_inductive x_1 y)) 
                                     (v_Vod:
                                      (zen.proof 
                                         (zen.forall _p_B_T 
                                            (v_Vmd:(zen.term _p_B_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive 
                                                              x_1 y)) 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive 
                                                              x_1 y))))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x_1 y)) 
                                                           v_Vmd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x_1 y)) 
                                                           v_Vmd))))))) =>
                                      zen.Rall _p_B_T 
                                        (v_Vmd:(zen.term _p_B_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x_1 y)) 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x_1 y))))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_1 y)) v_Vmd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_1 y)) v_Vmd))))) 
                                        x_1 
                                        (v_Vpd:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive 
                                                              x_1 y)) 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive 
                                                              x_1 y))))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x_1 y)) x_1))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x_1 y)) x_1)))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x_1 y)) 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x_1 y))))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_1 y)) x_1))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_1 y)) x_1)))) 
                                           (v_Vyc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x_1 y)) 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x_1 y))))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_1 y)) 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_1 y))))) 
                                              v_Vjd v_Vyc) 
                                           (v_Vqd:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x_1 y)) x_1))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x_1 y)) x_1))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_1 y)) x_1))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_1 y)) x_1))) 
                                              (v_Vrd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x_1 y)) 
                                                              x_1))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x_1 y)) x_1))) 
                                                 __G_1_2_1_LEMMA v_Vrd) 
                                              (__G_1_2_1_LEMMA:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x_1 y)) x_1)))) =>
                                               zen.Rsubst basics.bool__t 
                                                 (v_Vbd:
                                                  (zen.term basics.bool__t) =>
                                                  zen.triangle 
                                                    (focal.is_true v_Vbd)) 
                                                 (_p_B_equal 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x_1 y)) 
                                                    x_1) 
                                                 (_p_B_equal 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x_1 y)) 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x_2 y))) 
                                                 (v_Vcd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_B_equal 
                                                                 (abst_inductive_first_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x_1 y)) 
                                                                 x_1) 
                                                              (_p_B_equal 
                                                                 (abst_inductive_first_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x_1 y)) 
                                                                 (abst_inductive_first_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x_2 y))))))) =>
                                                  zen.Rsubst _p_B_T 
                                                    (v_Vdd:
                                                     (zen.term _p_B_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (_p_B_equal 
                                                                v_Vdd x_1) 
                                                             (_p_B_equal 
                                                                (abst_inductive_first_term 
                                                                   (abst_inductive 
                                                                    x_1 y)) 
                                                                (abst_inductive_first_term 
                                                                   (abst_inductive 
                                                                    x_2 y)))))) 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x_1 y)) 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x_1 y)) 
                                                    (v_Vxc:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_B_T 
                                                                 (abst_inductive_first_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x_1 y)) 
                                                                 (abst_inductive_first_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x_1 y)))))) =>
                                                     zen.Rnoteq _p_B_T 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_1 y)) v_Vxc) 
                                                    (v_Vcd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    x_1) 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (
                                                                    abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))))) =>
                                                     zen.Rsubst _p_B_T 
                                                       (v_Vsd:
                                                        (zen.term _p_B_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (_p_B_equal 
                                                                   (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                   v_Vsd) 
                                                                (_p_B_equal 
                                                                   (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                   (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)))))) 
                                                       x_1 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_2 y)) 
                                                       (v_Vtd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_B_T 
                                                                    x_1 
                                                                    (
                                                                    abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_B_T x_1 
                                                                (abst_inductive_first_term 
                                                                   (abst_inductive 
                                                                    x_2 y)))) 
                                                          v_Vad v_Vtd) 
                                                       (v_Vud:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    _p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))) 
                                                                    (
                                                                    _p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))))) =>
                                                        zen.Rnoteq 
                                                          basics.bool__t 
                                                          (_p_B_equal 
                                                             (abst_inductive_first_term 
                                                                (abst_inductive 
                                                                   x_1 y)) 
                                                             (abst_inductive_first_term 
                                                                (abst_inductive 
                                                                   x_2 y))) 
                                                          v_Vud) v_Vcd) v_Vcd) 
                                                 (v_Vvd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x_1 y)) 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x_2 y)))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_inductive_first_term 
                                                                (abst_inductive 
                                                                   x_1 y)) 
                                                             (abst_inductive_first_term 
                                                                (abst_inductive 
                                                                   x_2 y))))) 
                                                    v_Vvd v_Vvc) 
                                                 __G_1_2_1_LEMMA) v_Vqd) 
                                           v_Vpd) v_Vod) v_Vnd) 
                                  _p_B_equal_transitive) v_Vid) v_Vzc) 
                         (v_Vcd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (_p_B_equal 
                                         (abst_inductive_first_term 
                                            (abst_inductive x_1 y)) x_1) 
                                      (_p_B_equal 
                                         (abst_inductive_first_term 
                                            (abst_inductive x_1 y)) 
                                         (abst_inductive_first_term 
                                            (abst_inductive x_2 y))))))) =>
                          zen.Rsubst _p_B_T 
                            (v_Vsd:(zen.term _p_B_T) =>
                             zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (_p_B_equal 
                                        (abst_inductive_first_term 
                                           (abst_inductive x_1 y)) v_Vsd) 
                                     (_p_B_equal 
                                        (abst_inductive_first_term 
                                           (abst_inductive x_1 y)) 
                                        (abst_inductive_first_term 
                                           (abst_inductive x_2 y)))))) x_1 
                            (abst_inductive_first_term (abst_inductive x_2 y)) 
                            (v_Vtd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal _p_B_T x_1 
                                         (abst_inductive_first_term 
                                            (abst_inductive x_2 y)))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (zen.equal _p_B_T x_1 
                                     (abst_inductive_first_term 
                                        (abst_inductive x_2 y)))) v_Vad v_Vtd) 
                            (v_Vud:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (_p_B_equal 
                                            (abst_inductive_first_term 
                                               (abst_inductive x_1 y)) 
                                            (abst_inductive_first_term 
                                               (abst_inductive x_2 y))) 
                                         (_p_B_equal 
                                            (abst_inductive_first_term 
                                               (abst_inductive x_1 y)) 
                                            (abst_inductive_first_term 
                                               (abst_inductive x_2 y))))))) =>
                             zen.Rnoteq basics.bool__t 
                               (_p_B_equal 
                                  (abst_inductive_first_term 
                                     (abst_inductive x_1 y)) 
                                  (abst_inductive_first_term 
                                     (abst_inductive x_2 y))) v_Vud) v_Vcd) 
                         v_Vcd) 
                      (v_Vvd:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal 
                                   (abst_inductive_first_term 
                                      (abst_inductive x_1 y)) 
                                   (abst_inductive_first_term 
                                      (abst_inductive x_2 y)))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal 
                                  (abst_inductive_first_term 
                                     (abst_inductive x_1 y)) 
                                  (abst_inductive_first_term 
                                     (abst_inductive x_2 y))))) v_Vvd v_Vvc) 
                      __G_1_2_1_LEMMA) 
                   (v_Vtd:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal _p_B_T x_1 
                                (abst_inductive_first_term 
                                   (abst_inductive x_2 y)))))) =>
                    zen.Rcut 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal x_1 
                               (abst_inductive_first_term 
                                  (abst_inductive x_2 y))))) 
                      (v_Vwd:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal x_1 
                                   (abst_inductive_first_term 
                                      (abst_inductive x_2 y)))))) =>
                       zen.Rall _p_B_T 
                         (v_Vkd:(zen.term _p_B_T) =>
                          zen.forall _p_B_T 
                            (v_Vld:(zen.term _p_B_T) =>
                             zen.forall _p_B_T 
                               (v_Vmd:(zen.term _p_B_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (_p_B_equal v_Vkd v_Vld))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal v_Vld v_Vmd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal v_Vkd v_Vmd))))))) 
                         (abst_inductive_first_term (abst_inductive x_1 y)) 
                         (v_Vnd:
                          (zen.proof 
                             (zen.forall _p_B_T 
                                (v_Vld:(zen.term _p_B_T) =>
                                 zen.forall _p_B_T 
                                   (v_Vmd:(zen.term _p_B_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_inductive_first_term 
                                                  (abst_inductive x_1 y)) 
                                               v_Vld))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal v_Vld v_Vmd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x_1 y)) 
                                                  v_Vmd)))))))) =>
                          zen.Rall _p_B_T 
                            (v_Vld:(zen.term _p_B_T) =>
                             zen.forall _p_B_T 
                               (v_Vmd:(zen.term _p_B_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_inductive_first_term 
                                              (abst_inductive x_1 y)) v_Vld))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal v_Vld v_Vmd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x_1 y)) 
                                              v_Vmd)))))) x_1 
                            (v_Vxd:
                             (zen.proof 
                                (zen.forall _p_B_T 
                                   (v_Vmd:(zen.term _p_B_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_inductive_first_term 
                                                  (abst_inductive x_1 y)) x_1))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal x_1 v_Vmd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x_1 y)) 
                                                  v_Vmd))))))) =>
                             zen.Rall _p_B_T 
                               (v_Vmd:(zen.term _p_B_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_inductive_first_term 
                                              (abst_inductive x_1 y)) x_1))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (_p_B_equal x_1 v_Vmd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x_1 y)) 
                                              v_Vmd))))) 
                               (abst_inductive_first_term 
                                  (abst_inductive x_2 y)) 
                               (v_Vyd:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_inductive_first_term 
                                                  (abst_inductive x_1 y)) x_1))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal x_1 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x_2 y))))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x_1 y)) 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x_2 y)))))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_inductive_first_term 
                                              (abst_inductive x_1 y)) x_1))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal x_1 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x_2 y))))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x_1 y)) 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x_2 y)))))) 
                                  (v_Vrd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x_1 y)) 
                                                  x_1))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x_1 y)) x_1))) 
                                     __G_1_2_1_LEMMA v_Vrd) 
                                  (v_Vzd:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal x_1 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x_2 y))))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x_1 y)) 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x_2 y))))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal x_1 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x_2 y))))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x_1 y)) 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x_2 y))))) 
                                     (v_Vae:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal x_1 
                                                     (abst_inductive_first_term 
                                                        (abst_inductive x_2 y))))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_B_equal x_1 
                                                 (abst_inductive_first_term 
                                                    (abst_inductive x_2 y))))) 
                                        v_Vwd v_Vae) 
                                     (v_Vvd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x_1 y)) 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x_2 y)))))) =>
                                      zen.Rsubst basics.bool__t 
                                        (v_Vbd:(zen.term basics.bool__t) =>
                                         zen.triangle (focal.is_true v_Vbd)) 
                                        (_p_B_equal 
                                           (abst_inductive_first_term 
                                              (abst_inductive x_1 y)) 
                                           (abst_inductive_first_term 
                                              (abst_inductive x_2 y))) 
                                        (_p_B_equal 
                                           (abst_inductive_first_term 
                                              (abst_inductive x_1 y)) 
                                           (abst_inductive_first_term 
                                              (abst_inductive x_2 y))) 
                                        (v_Vud:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (_p_B_equal 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive 
                                                              x_1 y)) 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive 
                                                              x_2 y))) 
                                                     (_p_B_equal 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive 
                                                              x_1 y)) 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive 
                                                              x_2 y))))))) =>
                                         zen.Rsubst _p_B_T 
                                           (v_Vbe:(zen.term _p_B_T) =>
                                            zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (_p_B_equal v_Vbe 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_2 y))) 
                                                    (_p_B_equal 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_1 y)) 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_2 y)))))) 
                                           (abst_inductive_first_term 
                                              (abst_inductive x_1 y)) 
                                           (abst_inductive_first_term 
                                              (abst_inductive x_1 y)) 
                                           (v_Vxc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_B_T 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive 
                                                              x_1 y)) 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive 
                                                              x_1 y)))))) =>
                                            zen.Rnotand 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal _p_B_T 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_1 y)) 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_1 y))))) 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x_1 y)) 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x_1 y)))))) 
                                              (v_Ved:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal _p_B_T 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x_1 y)) 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x_1 y))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (zen.equal _p_B_T 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_1 y)) 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_1 y)))) 
                                                 (v_Vfd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal _p_B_T 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x_1 y)) 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x_1 y))))) =>
                                                  zen.Reqsym _p_B_T 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x_1 y)) 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x_1 y)) 
                                                    v_Vfd v_Vxc) v_Ved) 
                                              (v_Vid:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_inductive_first_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x_1 y)) 
                                                                 (abst_inductive_first_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x_1 y)))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x_1 y)) 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x_1 y))))) 
                                                 (v_Vjd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x_1 y)) 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x_1 y)))))) =>
                                                  zen.Rall _p_B_T 
                                                    (v_Vkd:
                                                     (zen.term _p_B_T) =>
                                                     zen.forall _p_B_T 
                                                       (v_Vld:
                                                        (zen.term _p_B_T) =>
                                                        zen.forall _p_B_T 
                                                          (v_Vmd:
                                                           (zen.term _p_B_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x_1 y)) 
                                                    (v_Vnd:
                                                     (zen.proof 
                                                        (zen.forall _p_B_T 
                                                           (v_Vld:
                                                            (zen.term _p_B_T) =>
                                                            zen.forall 
                                                              _p_B_T 
                                                              (v_Vmd:
                                                               (zen.term 
                                                                  _p_B_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    v_Vld))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    v_Vmd)))))))) =>
                                                     zen.Rall _p_B_T 
                                                       (v_Vld:
                                                        (zen.term _p_B_T) =>
                                                        zen.forall _p_B_T 
                                                          (v_Vmd:
                                                           (zen.term _p_B_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    v_Vld))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    v_Vmd)))))) 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_1 y)) 
                                                       (v_Vod:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              _p_B_T 
                                                              (v_Vmd:
                                                               (zen.term 
                                                                  _p_B_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y))))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    v_Vmd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    v_Vmd))))))) =>
                                                        zen.Rall _p_B_T 
                                                          (v_Vmd:
                                                           (zen.term _p_B_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y))))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    v_Vmd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    v_Vmd))))) 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x_2 y)) 
                                                          (v_Vce:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y))))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)))))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y))))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)))))) 
                                                             (v_Vyc:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y))))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y))))) 
                                                                v_Vjd v_Vyc) 
                                                             (v_Vde:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) 
                                                                (v_Vvc:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) 
                                                                   v_Vvd 
                                                                   v_Vvc) 
                                                                (v_Vvd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_1 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) 
                                                                   v_Vvd 
                                                                   v_Vvc) 
                                                                v_Vde) v_Vce) 
                                                          v_Vod) v_Vnd) 
                                                    _p_B_equal_transitive) 
                                                 v_Vid) v_Vzc) 
                                           (v_Vud:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (_p_B_equal 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x_1 y)) 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x_2 y))) 
                                                        (_p_B_equal 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x_1 y)) 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x_2 y))))))) =>
                                            zen.Rsubst _p_B_T 
                                              (v_Vsd:(zen.term _p_B_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (_p_B_equal 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x_1 y)) v_Vsd) 
                                                       (_p_B_equal 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x_1 y)) 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x_2 y)))))) 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x_2 y)) 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x_2 y)) 
                                              (v_Vee:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_B_T 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x_2 y)) 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x_2 y)))))) =>
                                               zen.Rnoteq _p_B_T 
                                                 (abst_inductive_first_term 
                                                    (abst_inductive x_2 y)) 
                                                 v_Vee) 
                                              (v_Vud:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_B_equal 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x_1 y)) 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x_2 y))) 
                                                           (_p_B_equal 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x_1 y)) 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x_2 y))))))) =>
                                               zen.Rnoteq basics.bool__t 
                                                 (_p_B_equal 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x_1 y)) 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x_2 y))) 
                                                 v_Vud) v_Vud) v_Vud) 
                                        (v_Vvd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal 
                                                     (abst_inductive_first_term 
                                                        (abst_inductive x_1 y)) 
                                                     (abst_inductive_first_term 
                                                        (abst_inductive x_2 y)))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x_1 y)) 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x_2 y))))) 
                                           v_Vvd v_Vvc) v_Vvd) v_Vzd) v_Vyd) 
                               v_Vxd) v_Vnd) _p_B_equal_transitive) 
                      (v_Vae:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal x_1 
                                      (abst_inductive_first_term 
                                         (abst_inductive x_2 y))))))) =>
                       zen.Rall _p_B_T 
                         (v_Vkd:(zen.term _p_B_T) =>
                          zen.forall _p_B_T 
                            (v_Vld:(zen.term _p_B_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true (_p_B_equal v_Vkd v_Vld))) 
                               (zen.triangle 
                                  (focal.is_true (_p_B_equal v_Vld v_Vkd))))) 
                         (abst_inductive_first_term (abst_inductive x_2 y)) 
                         (v_Vfe:
                          (zen.proof 
                             (zen.forall _p_B_T 
                                (v_Vld:(zen.term _p_B_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_inductive_first_term 
                                               (abst_inductive x_2 y)) v_Vld))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal v_Vld 
                                            (abst_inductive_first_term 
                                               (abst_inductive x_2 y)))))))) =>
                          zen.Rall _p_B_T 
                            (v_Vld:(zen.term _p_B_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_inductive_first_term 
                                           (abst_inductive x_2 y)) v_Vld))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal v_Vld 
                                        (abst_inductive_first_term 
                                           (abst_inductive x_2 y)))))) x_1 
                            (v_Vge:
                             (zen.proof 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_inductive_first_term 
                                               (abst_inductive x_2 y)) x_1))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal x_1 
                                            (abst_inductive_first_term 
                                               (abst_inductive x_2 y))))))) =>
                             zen.Rimply 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_inductive_first_term 
                                           (abst_inductive x_2 y)) x_1))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal x_1 
                                        (abst_inductive_first_term 
                                           (abst_inductive x_2 y))))) 
                               (v_Vhe:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_inductive_first_term 
                                                  (abst_inductive x_2 y)) x_1))))) =>
                                zen.Rcut 
                                  (zen.and 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal _p_B_T 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x_2 y)) 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x_2 y))))) 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_B_equal 
                                                 (abst_inductive_first_term 
                                                    (abst_inductive x_2 y)) 
                                                 (abst_inductive_first_term 
                                                    (abst_inductive x_2 y))))))) 
                                  (v_Vie:
                                   (zen.proof 
                                      (zen.and 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_B_T 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x_2 y)) 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x_2 y))))) 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal 
                                                     (abst_inductive_first_term 
                                                        (abst_inductive x_2 y)) 
                                                     (abst_inductive_first_term 
                                                        (abst_inductive x_2 y)))))))) =>
                                   zen.Rand 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal _p_B_T 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x_2 y)) 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x_2 y))))) 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_B_equal 
                                                 (abst_inductive_first_term 
                                                    (abst_inductive x_2 y)) 
                                                 (abst_inductive_first_term 
                                                    (abst_inductive x_2 y)))))) 
                                     (v_Vee:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_B_T 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x_2 y)) 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x_2 y)))))) =>
                                      v_Vje:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal 
                                                     (abst_inductive_first_term 
                                                        (abst_inductive x_2 y)) 
                                                     (abst_inductive_first_term 
                                                        (abst_inductive x_2 y))))))) =>
                                      zen.Rnoteq _p_B_T 
                                        (abst_inductive_first_term 
                                           (abst_inductive x_2 y)) v_Vee) 
                                     v_Vie) 
                                  (v_Vke:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.and 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_B_T 
                                                     (abst_inductive_first_term 
                                                        (abst_inductive x_2 y)) 
                                                     (abst_inductive_first_term 
                                                        (abst_inductive x_2 y))))) 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive 
                                                              x_2 y)) 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive 
                                                              x_2 y))))))))) =>
                                   zen.Rcut 
                                     (zen.triangle (zen.equal _p_B_T x_2 x_1)) 
                                     (v_Vle:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal _p_B_T x_2 x_1))) =>
                                      zen.Rsubst basics.bool__t 
                                        (v_Vbd:(zen.term basics.bool__t) =>
                                         zen.triangle (focal.is_true v_Vbd)) 
                                        (_p_B_equal 
                                           (abst_inductive_first_term 
                                              (abst_inductive x_2 y)) x_2) 
                                        (_p_B_equal 
                                           (abst_inductive_first_term 
                                              (abst_inductive x_2 y)) x_1) 
                                        (v_Vme:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (_p_B_equal 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive 
                                                              x_2 y)) x_2) 
                                                     (_p_B_equal 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive 
                                                              x_2 y)) x_1))))) =>
                                         zen.Rsubst _p_B_T 
                                           (v_Vne:(zen.term _p_B_T) =>
                                            zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (_p_B_equal v_Vne x_2) 
                                                    (_p_B_equal 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_2 y)) x_1)))) 
                                           (abst_inductive_first_term 
                                              (abst_inductive x_2 y)) 
                                           (abst_inductive_first_term 
                                              (abst_inductive x_2 y)) 
                                           (v_Vee:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_B_T 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive 
                                                              x_2 y)) 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive 
                                                              x_2 y)))))) =>
                                            zen.Rnotand 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal _p_B_T 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_2 y)) 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_2 y))))) 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x_2 y)) 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x_2 y)))))) 
                                              (v_Voe:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal _p_B_T 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x_2 y)) 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x_2 y))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (zen.equal _p_B_T 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_2 y)) 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_2 y)))) 
                                                 (v_Vpe:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal _p_B_T 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x_2 y)) 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x_2 y))))) =>
                                                  zen.Rcut 
                                                    (zen.triangle 
                                                       (zen.equal _p_B_T 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x_2 y)) 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x_2 y)))) 
                                                    (v_Vpe:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (zen.equal _p_B_T 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x_2 y)) 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x_2 y))))) =>
                                                     zen.Rsubst _p_B_T 
                                                       (v_Vqe:
                                                        (zen.term _p_B_T) =>
                                                        zen.triangle 
                                                          (zen.equal _p_B_T 
                                                             v_Vqe 
                                                             (abst_inductive_first_term 
                                                                (abst_inductive 
                                                                   x_2 y)))) 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_2 y)) 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_2 y)) 
                                                       (v_Vee:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_B_T 
                                                                    (
                                                                    abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (
                                                                    abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_B_T 
                                                                (abst_inductive_first_term 
                                                                   (abst_inductive 
                                                                    x_2 y)) 
                                                                (abst_inductive_first_term 
                                                                   (abst_inductive 
                                                                    x_2 y)))) 
                                                          v_Vpe v_Vee) 
                                                       (v_Vpe:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_B_T 
                                                                 (abst_inductive_first_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x_2 y)) 
                                                                 (abst_inductive_first_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x_2 y))))) =>
                                                        zen.Rsubst _p_B_T 
                                                          (v_Vre:
                                                           (zen.term _p_B_T) =>
                                                           zen.triangle 
                                                             (zen.equal 
                                                                _p_B_T 
                                                                (abst_inductive_first_term 
                                                                   (abst_inductive 
                                                                    x_2 y)) 
                                                                v_Vre)) 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x_2 y)) 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x_2 y)) 
                                                          (v_Vee:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_B_T 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)))))) =>
                                                           zen.Rnoteq _p_B_T 
                                                             (abst_inductive_first_term 
                                                                (abst_inductive 
                                                                   x_2 y)) 
                                                             v_Vee) 
                                                          (v_Vpe:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_B_T 
                                                                    (
                                                                    abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (
                                                                    abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   _p_B_T 
                                                                   (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                   (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)))) 
                                                             v_Vpe v_Vee) 
                                                          v_Vpe) v_Vpe) 
                                                    (v_Vee:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_B_T 
                                                                 (abst_inductive_first_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x_2 y)) 
                                                                 (abst_inductive_first_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x_2 y)))))) =>
                                                     zen.Rnoteq _p_B_T 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_2 y)) v_Vee)) 
                                                 v_Voe) 
                                              (v_Vse:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_inductive_first_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x_2 y)) 
                                                                 (abst_inductive_first_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x_2 y)))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x_2 y)) 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x_2 y))))) 
                                                 (v_Vte:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x_2 y)) 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x_2 y)))))) =>
                                                  zen.Rall _p_B_T 
                                                    (v_Vkd:
                                                     (zen.term _p_B_T) =>
                                                     zen.forall _p_B_T 
                                                       (v_Vld:
                                                        (zen.term _p_B_T) =>
                                                        zen.forall _p_B_T 
                                                          (v_Vmd:
                                                           (zen.term _p_B_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x_2 y)) 
                                                    (v_Vue:
                                                     (zen.proof 
                                                        (zen.forall _p_B_T 
                                                           (v_Vld:
                                                            (zen.term _p_B_T) =>
                                                            zen.forall 
                                                              _p_B_T 
                                                              (v_Vmd:
                                                               (zen.term 
                                                                  _p_B_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    v_Vld))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    v_Vmd)))))))) =>
                                                     zen.Rall _p_B_T 
                                                       (v_Vld:
                                                        (zen.term _p_B_T) =>
                                                        zen.forall _p_B_T 
                                                          (v_Vmd:
                                                           (zen.term _p_B_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    v_Vld))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    v_Vmd)))))) 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive 
                                                             x_2 y)) 
                                                       (v_Vve:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              _p_B_T 
                                                              (v_Vmd:
                                                               (zen.term 
                                                                  _p_B_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    v_Vmd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    v_Vmd))))))) =>
                                                        zen.Rall _p_B_T 
                                                          (v_Vmd:
                                                           (zen.term _p_B_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    v_Vmd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    v_Vmd))))) 
                                                          x_2 
                                                          (v_Vwe:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_2))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_2)))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_2))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_2)))) 
                                                             (v_Vje:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) 
                                                                v_Vte v_Vje) 
                                                             (v_Vxe:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_2))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_2))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_2))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_2))) 
                                                                (v_Vye:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_2))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_2))) 
                                                                   __G_1_2_2_LEMMA 
                                                                   v_Vye) 
                                                                (__G_1_2_2_LEMMA:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_2)))) =>
                                                                 zen.Rsubst 
                                                                   basics.bool__t 
                                                                   (v_Vbd:
                                                                    (
                                                                    zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vbd)) 
                                                                   (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_2) 
                                                                   (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1) 
                                                                   (v_Vme:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_2) 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vne:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    v_Vne x_2) 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1)))) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (v_Vee:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_B_T 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    v_Vee) 
                                                                    (v_Vme:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_2) 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vze:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    v_Vze) 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1)))) 
                                                                    x_2 x_1 
                                                                    (v_Vaf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    x_2 x_1)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    x_2 x_1)) 
                                                                    v_Vle 
                                                                    v_Vaf) 
                                                                    (v_Vbf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1) 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1) 
                                                                    v_Vbf) 
                                                                    v_Vme) 
                                                                    v_Vme) 
                                                                   (v_Vcf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1))) 
                                                                    v_Vcf 
                                                                    v_Vhe) 
                                                                   __G_1_2_2_LEMMA) 
                                                                v_Vxe) v_Vwe) 
                                                          v_Vve) v_Vue) 
                                                    _p_B_equal_transitive) 
                                                 v_Vse) v_Vke) 
                                           (v_Vme:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (_p_B_equal 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x_2 y)) x_2) 
                                                        (_p_B_equal 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x_2 y)) x_1))))) =>
                                            zen.Rsubst _p_B_T 
                                              (v_Vze:(zen.term _p_B_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (_p_B_equal 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x_2 y)) v_Vze) 
                                                       (_p_B_equal 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x_2 y)) x_1)))) 
                                              x_2 x_1 
                                              (v_Vaf:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_B_T 
                                                           x_2 x_1)))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (zen.equal _p_B_T x_2 x_1)) 
                                                 v_Vle v_Vaf) 
                                              (v_Vbf:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_B_equal 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x_2 y)) 
                                                              x_1) 
                                                           (_p_B_equal 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x_2 y)) 
                                                              x_1))))) =>
                                               zen.Rnoteq basics.bool__t 
                                                 (_p_B_equal 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x_2 y)) 
                                                    x_1) v_Vbf) v_Vme) v_Vme) 
                                        (v_Vcf:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal 
                                                     (abst_inductive_first_term 
                                                        (abst_inductive x_2 y)) 
                                                     x_1)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x_2 y)) 
                                                    x_1))) v_Vcf v_Vhe) 
                                        __G_1_2_2_LEMMA) 
                                     (v_Vaf:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_B_T x_2 x_1)))) =>
                                      zen.Rcut 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_B_equal x_2 x_1))) 
                                        (v_Vdf:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal x_2 x_1)))) =>
                                         zen.Rall _p_B_T 
                                           (v_Vkd:(zen.term _p_B_T) =>
                                            zen.forall _p_B_T 
                                              (v_Vld:(zen.term _p_B_T) =>
                                               zen.forall _p_B_T 
                                                 (v_Vmd:(zen.term _p_B_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal v_Vkd 
                                                             v_Vld))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                v_Vld v_Vmd))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                v_Vkd v_Vmd))))))) 
                                           (abst_inductive_first_term 
                                              (abst_inductive x_2 y)) 
                                           (v_Vue:
                                            (zen.proof 
                                               (zen.forall _p_B_T 
                                                  (v_Vld:(zen.term _p_B_T) =>
                                                   zen.forall _p_B_T 
                                                     (v_Vmd:
                                                      (zen.term _p_B_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_inductive_first_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x_2 y)) 
                                                                 v_Vld))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    v_Vmd)))))))) =>
                                            zen.Rall _p_B_T 
                                              (v_Vld:(zen.term _p_B_T) =>
                                               zen.forall _p_B_T 
                                                 (v_Vmd:(zen.term _p_B_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_inductive_first_term 
                                                                (abst_inductive 
                                                                   x_2 y)) 
                                                             v_Vld))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                v_Vld v_Vmd))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_inductive_first_term 
                                                                   (abst_inductive 
                                                                    x_2 y)) 
                                                                v_Vmd)))))) 
                                              x_2 
                                              (v_Vef:
                                               (zen.proof 
                                                  (zen.forall _p_B_T 
                                                     (v_Vmd:
                                                      (zen.term _p_B_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_inductive_first_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x_2 y)) 
                                                                 x_2))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    x_2 v_Vmd))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    v_Vmd))))))) =>
                                               zen.Rall _p_B_T 
                                                 (v_Vmd:(zen.term _p_B_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_inductive_first_term 
                                                                (abst_inductive 
                                                                   x_2 y)) 
                                                             x_2))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal x_2 
                                                                v_Vmd))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_inductive_first_term 
                                                                   (abst_inductive 
                                                                    x_2 y)) 
                                                                v_Vmd))))) 
                                                 x_1 
                                                 (v_Vff:
                                                  (zen.proof 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_inductive_first_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x_2 y)) 
                                                                 x_2))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    x_2 x_1))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1)))))) =>
                                                  zen.Rimply 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_inductive_first_term 
                                                                (abst_inductive 
                                                                   x_2 y)) 
                                                             x_2))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal x_2 
                                                                x_1))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_inductive_first_term 
                                                                   (abst_inductive 
                                                                    x_2 y)) 
                                                                x_1)))) 
                                                    (v_Vye:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_2))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_inductive_first_term 
                                                                   (abst_inductive 
                                                                    x_2 y)) 
                                                                x_2))) 
                                                       __G_1_2_2_LEMMA v_Vye) 
                                                    (v_Vgf:
                                                     (zen.proof 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    x_2 x_1))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1))))) =>
                                                     zen.Rimply 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal x_2 
                                                                x_1))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_inductive_first_term 
                                                                   (abst_inductive 
                                                                    x_2 y)) 
                                                                x_1))) 
                                                       (v_Vhf:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    x_2 x_1))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   x_2 x_1))) 
                                                          v_Vdf v_Vhf) 
                                                       (v_Vcf:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1)))) =>
                                                        zen.Rsubst 
                                                          basics.bool__t 
                                                          (v_Vbd:
                                                           (zen.term 
                                                              basics.bool__t) =>
                                                           zen.triangle 
                                                             (focal.is_true 
                                                                v_Vbd)) 
                                                          (_p_B_equal 
                                                             (abst_inductive_first_term 
                                                                (abst_inductive 
                                                                   x_2 y)) 
                                                             x_1) 
                                                          (_p_B_equal 
                                                             (abst_inductive_first_term 
                                                                (abst_inductive 
                                                                   x_2 y)) 
                                                             x_1) 
                                                          (v_Vbf:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1) 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1))))) =>
                                                           zen.Rsubst _p_B_T 
                                                             (v_Vdd:
                                                              (zen.term 
                                                                 _p_B_T) =>
                                                              zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    v_Vdd x_1) 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1)))) 
                                                             (abst_inductive_first_term 
                                                                (abst_inductive 
                                                                   x_2 y)) 
                                                             (abst_inductive_first_term 
                                                                (abst_inductive 
                                                                   x_2 y)) 
                                                             (v_Vee:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)))))) =>
                                                              zen.Rnotand 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)))))) 
                                                                (v_Voe:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))))) =>
                                                                 zen.Rnotnot 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)))) 
                                                                   (v_Vpe:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) =>
                                                                    zen.Reqsym 
                                                                    _p_B_T 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    v_Vpe 
                                                                    v_Vee) 
                                                                   v_Voe) 
                                                                (v_Vse:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)))))))) =>
                                                                 zen.Rnotnot 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) 
                                                                   (v_Vte:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vkd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vld:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (v_Vue:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vld:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    v_Vmd)))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vld:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    v_Vmd)))))) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (v_Vve:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    v_Vmd))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    v_Vmd))))) 
                                                                    x_1 
                                                                    (v_Vif:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1)))) 
                                                                    (v_Vje:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y))))) 
                                                                    v_Vte 
                                                                    v_Vje) 
                                                                    (v_Vjf:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1))) 
                                                                    (v_Vhe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1))) 
                                                                    v_Vcf 
                                                                    v_Vhe) 
                                                                    (v_Vcf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1))) 
                                                                    v_Vcf 
                                                                    v_Vhe) 
                                                                    v_Vjf) 
                                                                    v_Vif) 
                                                                    v_Vve) 
                                                                    v_Vue) 
                                                                    _p_B_equal_transitive) 
                                                                   v_Vse) 
                                                                v_Vke) 
                                                             (v_Vbf:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1) 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1))))) =>
                                                              zen.Rsubst 
                                                                _p_B_T 
                                                                (v_Vze:
                                                                 (zen.term 
                                                                    _p_B_T) =>
                                                                 zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    v_Vze) 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1)))) 
                                                                x_1 x_1 
                                                                (v_Vkf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    x_1 x_1)))) =>
                                                                 zen.Rnoteq 
                                                                   _p_B_T 
                                                                   x_1 v_Vkf) 
                                                                (v_Vbf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1) 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1))))) =>
                                                                 zen.Rnoteq 
                                                                   basics.bool__t 
                                                                   (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1) 
                                                                   v_Vbf) 
                                                                v_Vbf) v_Vbf) 
                                                          (v_Vcf:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1)))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x_2 y)) 
                                                                    x_1))) 
                                                             v_Vcf v_Vhe) 
                                                          v_Vcf) v_Vgf) v_Vff) 
                                                 v_Vef) v_Vue) 
                                           _p_B_equal_transitive) 
                                        (v_Vhf:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal x_2 x_1))))) =>
                                         zen.Rall _p_B_T 
                                           (v_Vkd:(zen.term _p_B_T) =>
                                            zen.forall _p_B_T 
                                              (v_Vld:(zen.term _p_B_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal v_Vkd 
                                                          v_Vld))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal v_Vld 
                                                          v_Vkd))))) x_1 
                                           (v_Vlf:
                                            (zen.proof 
                                               (zen.forall _p_B_T 
                                                  (v_Vld:(zen.term _p_B_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal x_1 
                                                              v_Vld))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal v_Vld 
                                                              x_1)))))) =>
                                            zen.Rall _p_B_T 
                                              (v_Vld:(zen.term _p_B_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal x_1 v_Vld))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal v_Vld x_1)))) 
                                              x_2 
                                              (v_Vmf:
                                               (zen.proof 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal x_1 
                                                              x_2))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal x_2 
                                                              x_1))))) =>
                                               zen.Rimply 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal x_1 x_2))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal x_2 x_1))) 
                                                 (v_Vnf:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 x_1 x_2))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal x_1 x_2))) 
                                                    H v_Vnf) 
                                                 (v_Vdf:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal x_2 
                                                              x_1)))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal x_2 x_1))) 
                                                    v_Vdf v_Vhf) v_Vmf) v_Vlf) 
                                           _p_B_equal_symmetric)))) 
                               (v_Vwd:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal x_1 
                                            (abst_inductive_first_term 
                                               (abst_inductive x_2 y)))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal x_1 
                                           (abst_inductive_first_term 
                                              (abst_inductive x_2 y))))) 
                                  v_Vwd v_Vae) v_Vge) v_Vfe) 
                         _p_B_equal_symmetric))))) 
            (zen.nnpp 
               (zen.triangle 
                  (focal.is_true 
                     (_p_B_equal 
                        (abst_inductive_first_term (abst_inductive x_2 y)) 
                        x_2))) 
               (v_Vzb:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal 
                               (abst_inductive_first_term 
                                  (abst_inductive x_2 y)) x_2))))) =>
                zen.Rall _p_B_T 
                  (v_Vac:(zen.term _p_B_T) =>
                   zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.triangle 
                        (focal.is_true 
                           (_p_B_equal 
                              (abst_inductive_first_term 
                                 (abst_inductive v_Vac v_Vbc)) v_Vac)))) x_2 
                  (v_Vcc:
                   (zen.proof 
                      (zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (_p_B_equal 
                                  (abst_inductive_first_term 
                                     (abst_inductive x_2 v_Vbc)) x_2))))) =>
                   zen.Rall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.triangle 
                        (focal.is_true 
                           (_p_B_equal 
                              (abst_inductive_first_term 
                                 (abst_inductive x_2 v_Vbc)) x_2))) y 
                     (v_Vdc:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal 
                                  (abst_inductive_first_term 
                                     (abst_inductive x_2 y)) x_2)))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_B_equal 
                                 (abst_inductive_first_term 
                                    (abst_inductive x_2 y)) x_2))) v_Vdc 
                        v_Vzb) v_Vcc) abst_inductive_reverse_first))) 
           (zen.nnpp 
              (zen.triangle 
                 (focal.is_true 
                    (_p_B_equal 
                       (abst_inductive_first_term (abst_inductive x_1 y)) x_1))) 
              (v_Vzb:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_B_equal 
                              (abst_inductive_first_term 
                                 (abst_inductive x_1 y)) x_1))))) =>
               zen.Rall _p_B_T 
                 (v_Vac:(zen.term _p_B_T) =>
                  zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (_p_B_equal 
                             (abst_inductive_first_term 
                                (abst_inductive v_Vac v_Vbc)) v_Vac)))) x_1 
                 (v_Vcc:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vbc:(zen.term abst_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (_p_B_equal 
                                 (abst_inductive_first_term 
                                    (abst_inductive x_1 v_Vbc)) x_1))))) =>
                  zen.Rall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (_p_B_equal 
                             (abst_inductive_first_term 
                                (abst_inductive x_1 v_Vbc)) x_1))) y 
                    (v_Vdc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_B_equal 
                                 (abst_inductive_first_term 
                                    (abst_inductive x_1 y)) x_1)))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_B_equal 
                                (abst_inductive_first_term 
                                   (abst_inductive x_1 y)) x_1))) v_Vdc v_Vzb) 
                    v_Vcc) abst_inductive_reverse_first)))) 
       (zen.nnpp 
          (zen.and 
             (zen.triangle 
                (focal.is_true (abst_inductive_case (abst_inductive x_1 y)))) 
             (zen.triangle 
                (focal.is_true (abst_inductive_case (abst_inductive x_2 y))))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.and 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_inductive_case (abst_inductive x_1 y)))) 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_inductive_case (abst_inductive x_2 y))))))) =>
           zen.Rnotand 
             (zen.triangle 
                (focal.is_true (abst_inductive_case (abst_inductive x_1 y)))) 
             (zen.triangle 
                (focal.is_true (abst_inductive_case (abst_inductive x_2 y)))) 
             (v_Vac:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_inductive_case (abst_inductive x_1 y)))))) =>
              zen.Rall _p_B_T 
                (v_Vbc:(zen.term _p_B_T) =>
                 zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.triangle 
                      (focal.is_true 
                         (abst_inductive_case (abst_inductive v_Vbc v_Vcc))))) 
                x_1 
                (v_Vdc:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.triangle 
                          (focal.is_true 
                             (abst_inductive_case (abst_inductive x_1 v_Vcc)))))) =>
                 zen.Rall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.triangle 
                      (focal.is_true 
                         (abst_inductive_case (abst_inductive x_1 v_Vcc)))) 
                   y 
                   (v_Vec:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_inductive_case (abst_inductive x_1 y))))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_inductive_case (abst_inductive x_1 y)))) 
                      v_Vec v_Vac) v_Vdc) abst_inductive_has_case) 
             (v_Vfc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_inductive_case (abst_inductive x_2 y)))))) =>
              zen.Rall _p_B_T 
                (v_Vbc:(zen.term _p_B_T) =>
                 zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.triangle 
                      (focal.is_true 
                         (abst_inductive_case (abst_inductive v_Vbc v_Vcc))))) 
                x_2 
                (v_Vgc:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.triangle 
                          (focal.is_true 
                             (abst_inductive_case (abst_inductive x_2 v_Vcc)))))) =>
                 zen.Rall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.triangle 
                      (focal.is_true 
                         (abst_inductive_case (abst_inductive x_2 v_Vcc)))) 
                   y 
                   (v_Vhc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_inductive_case (abst_inductive x_2 y))))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_inductive_case (abst_inductive x_2 y)))) 
                      v_Vhc v_Vfc) v_Vgc) abst_inductive_has_case) v_Vzb))).

def Linear_fixed_set__inductive_right_substitution_rule :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  _p_B_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall _p_B_T 
                             (x:(cc.eT _p_B_T) =>
                              dk_logic.ebP (_p_B_equal x x)))) ->
  _p_B_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall _p_B_T 
                             (x:(cc.eT _p_B_T) =>
                              dk_logic.forall _p_B_T 
                                (y:(cc.eT _p_B_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (_p_B_equal x y)) 
                                   (dk_logic.ebP (_p_B_equal y x)))))) ->
  _p_B_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall _p_B_T 
                              (x:(cc.eT _p_B_T) =>
                               dk_logic.forall _p_B_T 
                                 (y:(cc.eT _p_B_T) =>
                                  dk_logic.forall _p_B_T 
                                    (z:(cc.eT _p_B_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_B_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (_p_B_equal y z)) 
                                          (dk_logic.ebP (_p_B_equal x z)))))))) ->
  abst_T:cc.uT ->
  abst_inductive:((cc.eT _p_B_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_inductive_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_inductive_first_term:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  abst_inductive_second_term:((cc.eT abst_T) -> cc.eT abst_T) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_inductive_has_case:(dk_logic.eP 
                             (dk_logic.forall _p_B_T 
                                (x:(cc.eT _p_B_T) =>
                                 dk_logic.forall abst_T 
                                   (y:(cc.eT abst_T) =>
                                    dk_logic.ebP 
                                      (abst_inductive_case 
                                         (abst_inductive x y)))))) ->
  abst_inductive_reverse_first:(dk_logic.eP 
                                  (dk_logic.forall _p_B_T 
                                     (x:(cc.eT _p_B_T) =>
                                      dk_logic.forall abst_T 
                                        (y:(cc.eT abst_T) =>
                                         dk_logic.ebP 
                                           (_p_B_equal 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x y)) x))))) ->
  abst_inductive_reverse_second:(dk_logic.eP 
                                   (dk_logic.forall _p_B_T 
                                      (x:(cc.eT _p_B_T) =>
                                       dk_logic.forall abst_T 
                                         (y:(cc.eT abst_T) =>
                                          dk_logic.ebP 
                                            (abst_equal 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x y)) y))))) ->
  abst_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (abst_equal x y)) 
                                   (dk_logic.ebP (abst_equal y x)))))) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_B_T 
       (x:(cc.eT _p_B_T) =>
        dk_logic.forall abst_T 
          (y_1:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (y_2:(cc.eT abst_T) =>
              dk_logic.imp (dk_logic.ebP (abst_equal y_1 y_2)) 
                (dk_logic.ebP 
                   (abst_equal (abst_inductive x y_1) (abst_inductive x y_2)))))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  _p_B_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) => dk_logic.ebP (_p_B_equal x x)))) =>
  _p_B_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.imp (dk_logic.ebP (_p_B_equal x y)) 
              (dk_logic.ebP (_p_B_equal y x)))))) =>
  _p_B_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.forall _p_B_T 
              (z:(cc.eT _p_B_T) =>
               dk_logic.imp (dk_logic.ebP (_p_B_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_B_equal y z)) 
                    (dk_logic.ebP (_p_B_equal x z)))))))) =>
  abst_T:cc.uT =>
  abst_inductive:((cc.eT _p_B_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_inductive_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_inductive_first_term:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  abst_inductive_second_term:((cc.eT abst_T) -> cc.eT abst_T) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_inductive_has_case:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.ebP (abst_inductive_case (abst_inductive x y)))))) =>
  abst_inductive_reverse_first:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.ebP 
              (_p_B_equal (abst_inductive_first_term (abst_inductive x y)) x))))) =>
  abst_inductive_reverse_second:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.ebP 
              (abst_equal (abst_inductive_second_term (abst_inductive x y)) y))))) =>
  abst_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal y x)))))) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  (__H_1_LEMMA:
   (x:(cc.eT _p_B_T) ->
    y_1:(cc.eT abst_T) ->
    y_2:(cc.eT abst_T) ->
    H:(dk_logic.eP (dk_logic.ebP (abst_equal y_1 y_2))) ->
    dk_logic.eP 
      (dk_logic.ebP 
         (abst_equal (abst_inductive x y_1) (abst_inductive x y_2)))) =>
   zen.nnpp 
     (zen.forall _p_B_T 
        (v_Vzb:(zen.term _p_B_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_inductive v_Vzb v_Vac) 
                          (abst_inductive v_Vzb v_Vbc)))))))) 
     (v_Vcc:
      (zen.proof 
         (zen.not 
            (zen.forall _p_B_T 
               (v_Vzb:(zen.term _p_B_T) =>
                zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Vac v_Vbc))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_inductive v_Vzb v_Vac) 
                                 (abst_inductive v_Vzb v_Vbc)))))))))) =>
      zen.Raxiom 
        (zen.forall _p_B_T 
           (v_Vzb:(zen.term _p_B_T) =>
            zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_inductive v_Vzb v_Vac) 
                             (abst_inductive v_Vzb v_Vbc)))))))) __H_1_LEMMA 
        v_Vcc)) 
    (x:(cc.eT _p_B_T) =>
     y_1:(cc.eT abst_T) =>
     y_2:(cc.eT abst_T) =>
     H:(dk_logic.eP (dk_logic.ebP (abst_equal y_1 y_2))) =>
     (__H_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.and 
            (dk_logic.ebP (abst_inductive_case (abst_inductive x y_1))) 
            (dk_logic.ebP (abst_inductive_case (abst_inductive x y_2))))) =>
      (__H_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP 
             (_p_B_equal (abst_inductive_first_term (abst_inductive x y_1)) 
                (abst_inductive_first_term (abst_inductive x y_2))))) =>
       (__H_1_3_LEMMA:
        (dk_logic.eP 
           (dk_logic.ebP 
              (abst_equal 
                 (abst_inductive_second_term (abst_inductive x y_1)) 
                 (abst_inductive_second_term (abst_inductive x y_2))))) =>
        dk_builtins.magic_prove 
          (dk_logic.ebP 
             (abst_equal (abst_inductive x y_1) (abst_inductive x y_2)))) 
         ((__H_1_3_1_LEMMA:
           (dk_logic.eP 
              (dk_logic.ebP 
                 (abst_equal 
                    (abst_inductive_second_term (abst_inductive x y_1)) y_1))) =>
           (__H_1_3_2_LEMMA:
            (dk_logic.eP 
               (dk_logic.ebP 
                  (abst_equal 
                     (abst_inductive_second_term (abst_inductive x y_2)) y_2))) =>
            zen.nnpp 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal 
                       (abst_inductive_second_term (abst_inductive x y_1)) 
                       (abst_inductive_second_term (abst_inductive x y_2))))) 
              (v_Vvc:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal 
                              (abst_inductive_second_term 
                                 (abst_inductive x y_1)) 
                              (abst_inductive_second_term 
                                 (abst_inductive x y_2))))))) =>
               zen.Rcut 
                 (zen.and 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal abst_T 
                             (abst_inductive_second_term 
                                (abst_inductive x y_1)) 
                             (abst_inductive_second_term 
                                (abst_inductive x y_1))))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_inductive_second_term 
                                   (abst_inductive x y_1)) 
                                (abst_inductive_second_term 
                                   (abst_inductive x y_1))))))) 
                 (v_Vwc:
                  (zen.proof 
                     (zen.and 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal abst_T 
                                 (abst_inductive_second_term 
                                    (abst_inductive x y_1)) 
                                 (abst_inductive_second_term 
                                    (abst_inductive x y_1))))) 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_inductive_second_term 
                                       (abst_inductive x y_1)) 
                                    (abst_inductive_second_term 
                                       (abst_inductive x y_1)))))))) =>
                  zen.Rand 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal abst_T 
                             (abst_inductive_second_term 
                                (abst_inductive x y_1)) 
                             (abst_inductive_second_term 
                                (abst_inductive x y_1))))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_inductive_second_term 
                                   (abst_inductive x y_1)) 
                                (abst_inductive_second_term 
                                   (abst_inductive x y_1)))))) 
                    (v_Vxc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal abst_T 
                                 (abst_inductive_second_term 
                                    (abst_inductive x y_1)) 
                                 (abst_inductive_second_term 
                                    (abst_inductive x y_1)))))) =>
                     v_Vyc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_inductive_second_term 
                                       (abst_inductive x y_1)) 
                                    (abst_inductive_second_term 
                                       (abst_inductive x y_1))))))) =>
                     zen.Rnoteq abst_T 
                       (abst_inductive_second_term (abst_inductive x y_1)) 
                       v_Vxc) v_Vwc) 
                 (v_Vzc:
                  (zen.proof 
                     (zen.not 
                        (zen.and 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal abst_T 
                                    (abst_inductive_second_term 
                                       (abst_inductive x y_1)) 
                                    (abst_inductive_second_term 
                                       (abst_inductive x y_1))))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_inductive_second_term 
                                          (abst_inductive x y_1)) 
                                       (abst_inductive_second_term 
                                          (abst_inductive x y_1))))))))) =>
                  zen.Rcut 
                    (zen.triangle 
                       (zen.equal abst_T y_1 
                          (abst_inductive_second_term (abst_inductive x y_2)))) 
                    (v_Vad:
                     (zen.proof 
                        (zen.triangle 
                           (zen.equal abst_T y_1 
                              (abst_inductive_second_term 
                                 (abst_inductive x y_2))))) =>
                     zen.Rsubst basics.bool__t 
                       (v_Vbd:(zen.term basics.bool__t) =>
                        zen.triangle (focal.is_true v_Vbd)) 
                       (abst_equal 
                          (abst_inductive_second_term (abst_inductive x y_1)) 
                          y_1) 
                       (abst_equal 
                          (abst_inductive_second_term (abst_inductive x y_1)) 
                          (abst_inductive_second_term (abst_inductive x y_2))) 
                       (v_Vcd:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (abst_equal 
                                       (abst_inductive_second_term 
                                          (abst_inductive x y_1)) y_1) 
                                    (abst_equal 
                                       (abst_inductive_second_term 
                                          (abst_inductive x y_1)) 
                                       (abst_inductive_second_term 
                                          (abst_inductive x y_2))))))) =>
                        zen.Rsubst abst_T 
                          (v_Vdd:(zen.term abst_T) =>
                           zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (abst_equal v_Vdd y_1) 
                                   (abst_equal 
                                      (abst_inductive_second_term 
                                         (abst_inductive x y_1)) 
                                      (abst_inductive_second_term 
                                         (abst_inductive x y_2)))))) 
                          (abst_inductive_second_term (abst_inductive x y_1)) 
                          (abst_inductive_second_term (abst_inductive x y_1)) 
                          (v_Vxc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal abst_T 
                                       (abst_inductive_second_term 
                                          (abst_inductive x y_1)) 
                                       (abst_inductive_second_term 
                                          (abst_inductive x y_1)))))) =>
                           zen.Rnotand 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_inductive_second_term 
                                         (abst_inductive x y_1)) 
                                      (abst_inductive_second_term 
                                         (abst_inductive x y_1))))) 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_inductive_second_term 
                                            (abst_inductive x y_1)) 
                                         (abst_inductive_second_term 
                                            (abst_inductive x y_1)))))) 
                             (v_Ved:
                              (zen.proof 
                                 (zen.not 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_inductive_second_term 
                                                (abst_inductive x y_1)) 
                                             (abst_inductive_second_term 
                                                (abst_inductive x y_1))))))) =>
                              zen.Rnotnot 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_inductive_second_term 
                                         (abst_inductive x y_1)) 
                                      (abst_inductive_second_term 
                                         (abst_inductive x y_1)))) 
                                (v_Vfd:
                                 (zen.proof 
                                    (zen.triangle 
                                       (zen.equal abst_T 
                                          (abst_inductive_second_term 
                                             (abst_inductive x y_1)) 
                                          (abst_inductive_second_term 
                                             (abst_inductive x y_1))))) =>
                                 zen.Rcut 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_inductive_second_term 
                                            (abst_inductive x y_1)) 
                                         (abst_inductive_second_term 
                                            (abst_inductive x y_1)))) 
                                   (v_Vfd:
                                    (zen.proof 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_inductive_second_term 
                                                (abst_inductive x y_1)) 
                                             (abst_inductive_second_term 
                                                (abst_inductive x y_1))))) =>
                                    zen.Rsubst abst_T 
                                      (v_Vgd:(zen.term abst_T) =>
                                       zen.triangle 
                                         (zen.equal abst_T v_Vgd 
                                            (abst_inductive_second_term 
                                               (abst_inductive x y_1)))) 
                                      (abst_inductive_second_term 
                                         (abst_inductive x y_1)) 
                                      (abst_inductive_second_term 
                                         (abst_inductive x y_1)) 
                                      (v_Vxc:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal abst_T 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x y_1)) 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x y_1)))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x y_1)) 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x y_1)))) 
                                         v_Vfd v_Vxc) 
                                      (v_Vfd:
                                       (zen.proof 
                                          (zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_inductive_second_term 
                                                   (abst_inductive x y_1)) 
                                                (abst_inductive_second_term 
                                                   (abst_inductive x y_1))))) =>
                                       zen.Rsubst abst_T 
                                         (v_Vhd:(zen.term abst_T) =>
                                          zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x y_1)) 
                                               v_Vhd)) 
                                         (abst_inductive_second_term 
                                            (abst_inductive x y_1)) 
                                         (abst_inductive_second_term 
                                            (abst_inductive x y_1)) 
                                         (v_Vxc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_inductive_second_term 
                                                         (abst_inductive x 
                                                            y_1)) 
                                                      (abst_inductive_second_term 
                                                         (abst_inductive x 
                                                            y_1)))))) =>
                                          zen.Rnoteq abst_T 
                                            (abst_inductive_second_term 
                                               (abst_inductive x y_1)) v_Vxc) 
                                         (v_Vfd:
                                          (zen.proof 
                                             (zen.triangle 
                                                (zen.equal abst_T 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x y_1)) 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x y_1))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_inductive_second_term 
                                                     (abst_inductive x y_1)) 
                                                  (abst_inductive_second_term 
                                                     (abst_inductive x y_1)))) 
                                            v_Vfd v_Vxc) v_Vfd) v_Vfd) 
                                   (v_Vxc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_inductive_second_term 
                                                   (abst_inductive x y_1)) 
                                                (abst_inductive_second_term 
                                                   (abst_inductive x y_1)))))) =>
                                    zen.Rnoteq abst_T 
                                      (abst_inductive_second_term 
                                         (abst_inductive x y_1)) v_Vxc)) 
                                v_Ved) 
                             (v_Vid:
                              (zen.proof 
                                 (zen.not 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_inductive_second_term 
                                                   (abst_inductive x y_1)) 
                                                (abst_inductive_second_term 
                                                   (abst_inductive x y_1)))))))) =>
                              zen.Rnotnot 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_inductive_second_term 
                                            (abst_inductive x y_1)) 
                                         (abst_inductive_second_term 
                                            (abst_inductive x y_1))))) 
                                (v_Vjd:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_inductive_second_term 
                                                (abst_inductive x y_1)) 
                                             (abst_inductive_second_term 
                                                (abst_inductive x y_1)))))) =>
                                 zen.Rall abst_T 
                                   (v_Vkd:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Vld:(zen.term abst_T) =>
                                       zen.forall abst_T 
                                         (v_Vmd:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vkd v_Vld))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vld v_Vmd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vkd v_Vmd))))))) 
                                   (abst_inductive_second_term 
                                      (abst_inductive x y_1)) 
                                   (v_Vnd:
                                    (zen.proof 
                                       (zen.forall abst_T 
                                          (v_Vld:(zen.term abst_T) =>
                                           zen.forall abst_T 
                                             (v_Vmd:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x y_1)) v_Vld))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal v_Vld 
                                                            v_Vmd))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x y_1)) 
                                                            v_Vmd)))))))) =>
                                    zen.Rall abst_T 
                                      (v_Vld:(zen.term abst_T) =>
                                       zen.forall abst_T 
                                         (v_Vmd:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x y_1)) 
                                                     v_Vld))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vld v_Vmd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_1)) v_Vmd)))))) 
                                      (abst_inductive_second_term 
                                         (abst_inductive x y_1)) 
                                      (v_Vod:
                                       (zen.proof 
                                          (zen.forall abst_T 
                                             (v_Vmd:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x y_1)) 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x y_1))))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x y_1)) 
                                                            v_Vmd))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x y_1)) 
                                                            v_Vmd))))))) =>
                                       zen.Rall abst_T 
                                         (v_Vmd:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x y_1)) 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x y_1))))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_1)) v_Vmd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_1)) v_Vmd))))) 
                                         y_1 
                                         (v_Vpd:
                                          (zen.proof 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x y_1)) 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x y_1))))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x y_1)) y_1))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x y_1)) y_1)))))) =>
                                          zen.Rimply 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x y_1)) 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x y_1))))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_1)) y_1))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_1)) y_1)))) 
                                            (v_Vyc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x y_1)) 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x y_1))))))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_1)) 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_1))))) v_Vjd 
                                               v_Vyc) 
                                            (v_Vqd:
                                             (zen.proof 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x y_1)) y_1))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x y_1)) y_1))))) =>
                                             zen.Rimply 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_1)) y_1))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_1)) y_1))) 
                                               (v_Vrd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x y_1)) 
                                                               y_1))))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x y_1)) y_1))) 
                                                  __H_1_3_1_LEMMA v_Vrd) 
                                               (__H_1_3_1_LEMMA:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x y_1)) y_1)))) =>
                                                zen.Rsubst basics.bool__t 
                                                  (v_Vbd:
                                                   (zen.term basics.bool__t) =>
                                                   zen.triangle 
                                                     (focal.is_true v_Vbd)) 
                                                  (abst_equal 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x y_1)) 
                                                     y_1) 
                                                  (abst_equal 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x y_1)) 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x y_2))) 
                                                  (v_Vcd:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (abst_equal 
                                                                  (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                  y_1) 
                                                               (abst_equal 
                                                                  (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                  (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))))) =>
                                                   zen.Rsubst abst_T 
                                                     (v_Vdd:
                                                      (zen.term abst_T) =>
                                                      zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 v_Vdd y_1) 
                                                              (abst_equal 
                                                                 (abst_inductive_second_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x y_1)) 
                                                                 (abst_inductive_second_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x y_2)))))) 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x y_1)) 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x y_1)) 
                                                     (v_Vxc:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T 
                                                                  (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                  (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)))))) =>
                                                      zen.Rnoteq abst_T 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_1)) v_Vxc) 
                                                     (v_Vcd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    y_1) 
                                                                  (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))))) =>
                                                      zen.Rsubst abst_T 
                                                        (v_Vsd:
                                                         (zen.term abst_T) =>
                                                         zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    v_Vsd) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (
                                                                    abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)))))) 
                                                        y_1 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_2)) 
                                                        (v_Vtd:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    abst_T 
                                                                    y_1 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)))))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T y_1 
                                                                 (abst_inductive_second_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x y_2)))) 
                                                           v_Vad v_Vtd) 
                                                        (v_Vud:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))) 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))))) =>
                                                         zen.Rnoteq 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_inductive_second_term 
                                                                 (abst_inductive 
                                                                    x y_1)) 
                                                              (abst_inductive_second_term 
                                                                 (abst_inductive 
                                                                    x y_2))) 
                                                           v_Vud) v_Vcd) 
                                                     v_Vcd) 
                                                  (v_Vvd:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x y_1)) 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x y_2)))))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_inductive_second_term 
                                                                 (abst_inductive 
                                                                    x y_1)) 
                                                              (abst_inductive_second_term 
                                                                 (abst_inductive 
                                                                    x y_2))))) 
                                                     v_Vvd v_Vvc) 
                                                  __H_1_3_1_LEMMA) v_Vqd) 
                                            v_Vpd) v_Vod) v_Vnd) 
                                   abst_equal_transitive) v_Vid) v_Vzc) 
                          (v_Vcd:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal basics.bool__t 
                                       (abst_equal 
                                          (abst_inductive_second_term 
                                             (abst_inductive x y_1)) y_1) 
                                       (abst_equal 
                                          (abst_inductive_second_term 
                                             (abst_inductive x y_1)) 
                                          (abst_inductive_second_term 
                                             (abst_inductive x y_2))))))) =>
                           zen.Rsubst abst_T 
                             (v_Vsd:(zen.term abst_T) =>
                              zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_equal 
                                         (abst_inductive_second_term 
                                            (abst_inductive x y_1)) v_Vsd) 
                                      (abst_equal 
                                         (abst_inductive_second_term 
                                            (abst_inductive x y_1)) 
                                         (abst_inductive_second_term 
                                            (abst_inductive x y_2)))))) y_1 
                             (abst_inductive_second_term 
                                (abst_inductive x y_2)) 
                             (v_Vtd:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal abst_T y_1 
                                          (abst_inductive_second_term 
                                             (abst_inductive x y_2)))))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (zen.equal abst_T y_1 
                                      (abst_inductive_second_term 
                                         (abst_inductive x y_2)))) v_Vad 
                                v_Vtd) 
                             (v_Vud:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal basics.bool__t 
                                          (abst_equal 
                                             (abst_inductive_second_term 
                                                (abst_inductive x y_1)) 
                                             (abst_inductive_second_term 
                                                (abst_inductive x y_2))) 
                                          (abst_equal 
                                             (abst_inductive_second_term 
                                                (abst_inductive x y_1)) 
                                             (abst_inductive_second_term 
                                                (abst_inductive x y_2))))))) =>
                              zen.Rnoteq basics.bool__t 
                                (abst_equal 
                                   (abst_inductive_second_term 
                                      (abst_inductive x y_1)) 
                                   (abst_inductive_second_term 
                                      (abst_inductive x y_2))) v_Vud) v_Vcd) 
                          v_Vcd) 
                       (v_Vvd:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_inductive_second_term 
                                       (abst_inductive x y_1)) 
                                    (abst_inductive_second_term 
                                       (abst_inductive x y_2)))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_inductive_second_term 
                                      (abst_inductive x y_1)) 
                                   (abst_inductive_second_term 
                                      (abst_inductive x y_2))))) v_Vvd v_Vvc) 
                       __H_1_3_1_LEMMA) 
                    (v_Vtd:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal abst_T y_1 
                                 (abst_inductive_second_term 
                                    (abst_inductive x y_2)))))) =>
                     zen.Rcut 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal y_1 
                                (abst_inductive_second_term 
                                   (abst_inductive x y_2))))) 
                       (v_Vwd:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal y_1 
                                    (abst_inductive_second_term 
                                       (abst_inductive x y_2)))))) =>
                        zen.Rall abst_T 
                          (v_Vkd:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vld:(zen.term abst_T) =>
                              zen.forall abst_T 
                                (v_Vmd:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vkd v_Vld))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vld v_Vmd))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vkd v_Vmd))))))) 
                          (abst_inductive_second_term (abst_inductive x y_1)) 
                          (v_Vnd:
                           (zen.proof 
                              (zen.forall abst_T 
                                 (v_Vld:(zen.term abst_T) =>
                                  zen.forall abst_T 
                                    (v_Vmd:(zen.term abst_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_inductive_second_term 
                                                   (abst_inductive x y_1)) 
                                                v_Vld))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal v_Vld v_Vmd))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x y_1)) 
                                                   v_Vmd)))))))) =>
                           zen.Rall abst_T 
                             (v_Vld:(zen.term abst_T) =>
                              zen.forall abst_T 
                                (v_Vmd:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_inductive_second_term 
                                               (abst_inductive x y_1)) v_Vld))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vld v_Vmd))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x y_1)) 
                                               v_Vmd)))))) y_1 
                             (v_Vxd:
                              (zen.proof 
                                 (zen.forall abst_T 
                                    (v_Vmd:(zen.term abst_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_inductive_second_term 
                                                   (abst_inductive x y_1)) 
                                                y_1))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal y_1 v_Vmd))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x y_1)) 
                                                   v_Vmd))))))) =>
                              zen.Rall abst_T 
                                (v_Vmd:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_inductive_second_term 
                                               (abst_inductive x y_1)) y_1))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal y_1 v_Vmd))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x y_1)) 
                                               v_Vmd))))) 
                                (abst_inductive_second_term 
                                   (abst_inductive x y_2)) 
                                (v_Vyd:
                                 (zen.proof 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_inductive_second_term 
                                                   (abst_inductive x y_1)) 
                                                y_1))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal y_1 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x y_2))))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x y_1)) 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x y_2)))))))) =>
                                 zen.Rimply 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_inductive_second_term 
                                               (abst_inductive x y_1)) y_1))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal y_1 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x y_2))))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x y_1)) 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x y_2)))))) 
                                   (v_Vrd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x y_1)) 
                                                   y_1))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x y_1)) y_1))) 
                                      __H_1_3_1_LEMMA v_Vrd) 
                                   (v_Vzd:
                                    (zen.proof 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal y_1 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x y_2))))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x y_1)) 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x y_2))))))) =>
                                    zen.Rimply 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal y_1 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x y_2))))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x y_1)) 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x y_2))))) 
                                      (v_Vae:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal y_1 
                                                      (abst_inductive_second_term 
                                                         (abst_inductive x 
                                                            y_2))))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal y_1 
                                                  (abst_inductive_second_term 
                                                     (abst_inductive x y_2))))) 
                                         v_Vwd v_Vae) 
                                      (v_Vvd:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x y_1)) 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x y_2)))))) =>
                                       zen.Rsubst basics.bool__t 
                                         (v_Vbd:(zen.term basics.bool__t) =>
                                          zen.triangle (focal.is_true v_Vbd)) 
                                         (abst_equal 
                                            (abst_inductive_second_term 
                                               (abst_inductive x y_1)) 
                                            (abst_inductive_second_term 
                                               (abst_inductive x y_2))) 
                                         (abst_equal 
                                            (abst_inductive_second_term 
                                               (abst_inductive x y_1)) 
                                            (abst_inductive_second_term 
                                               (abst_inductive x y_2))) 
                                         (v_Vud:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (abst_equal 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x y_1)) 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x y_2))) 
                                                      (abst_equal 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x y_1)) 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x y_2))))))) =>
                                          zen.Rsubst abst_T 
                                            (v_Vbe:(zen.term abst_T) =>
                                             zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal v_Vbe 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_2))) 
                                                     (abst_equal 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_1)) 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_2)))))) 
                                            (abst_inductive_second_term 
                                               (abst_inductive x y_1)) 
                                            (abst_inductive_second_term 
                                               (abst_inductive x y_1)) 
                                            (v_Vxc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x y_1)) 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x y_1)))))) =>
                                             zen.Rnotand 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_1)) 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_1))))) 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x y_1)) 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x y_1)))))) 
                                               (v_Ved:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x y_1)) 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x y_1))))))) =>
                                                zen.Rnotnot 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_1)) 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_1)))) 
                                                  (v_Vfd:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x y_1)) 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x y_1))))) =>
                                                   zen.Reqsym abst_T 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x y_1)) 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x y_1)) 
                                                     v_Vfd v_Vxc) v_Ved) 
                                               (v_Vid:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                  (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)))))))) =>
                                                zen.Rnotnot 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x y_1)) 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x y_1))))) 
                                                  (v_Vjd:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x y_1)) 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x y_1)))))) =>
                                                   zen.Rall abst_T 
                                                     (v_Vkd:
                                                      (zen.term abst_T) =>
                                                      zen.forall abst_T 
                                                        (v_Vld:
                                                         (zen.term abst_T) =>
                                                         zen.forall abst_T 
                                                           (v_Vmd:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x y_1)) 
                                                     (v_Vnd:
                                                      (zen.proof 
                                                         (zen.forall abst_T 
                                                            (v_Vld:
                                                             (zen.term abst_T) =>
                                                             zen.forall 
                                                               abst_T 
                                                               (v_Vmd:
                                                                (zen.term 
                                                                   abst_T) =>
                                                                zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    v_Vld))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    v_Vmd)))))))) =>
                                                      zen.Rall abst_T 
                                                        (v_Vld:
                                                         (zen.term abst_T) =>
                                                         zen.forall abst_T 
                                                           (v_Vmd:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    v_Vld))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    v_Vmd)))))) 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_1)) 
                                                        (v_Vod:
                                                         (zen.proof 
                                                            (zen.forall 
                                                               abst_T 
                                                               (v_Vmd:
                                                                (zen.term 
                                                                   abst_T) =>
                                                                zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1))))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    v_Vmd))))))) =>
                                                         zen.Rall abst_T 
                                                           (v_Vmd:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1))))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    v_Vmd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    v_Vmd))))) 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x y_2)) 
                                                           (v_Vce:
                                                            (zen.proof 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1))))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)))))))) =>
                                                            zen.Rimply 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1))))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)))))) 
                                                              (v_Vyc:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1))))))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1))))) 
                                                                 v_Vjd v_Vyc) 
                                                              (v_Vde:
                                                               (zen.proof 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))))) =>
                                                               zen.Rimply 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) 
                                                                 (v_Vvc:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) 
                                                                    v_Vvd 
                                                                    v_Vvc) 
                                                                 (v_Vvd:
                                                                  (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)))))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) 
                                                                    v_Vvd 
                                                                    v_Vvc) 
                                                                 v_Vde) v_Vce) 
                                                           v_Vod) v_Vnd) 
                                                     abst_equal_transitive) 
                                                  v_Vid) v_Vzc) 
                                            (v_Vud:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         basics.bool__t 
                                                         (abst_equal 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x y_1)) 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x y_2))) 
                                                         (abst_equal 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x y_1)) 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x y_2))))))) =>
                                             zen.Rsubst abst_T 
                                               (v_Vsd:(zen.term abst_T) =>
                                                zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x y_1)) 
                                                           v_Vsd) 
                                                        (abst_equal 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x y_1)) 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x y_2)))))) 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x y_2)) 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x y_2)) 
                                               (v_Vee:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x y_2)) 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x y_2)))))) =>
                                                zen.Rnoteq abst_T 
                                                  (abst_inductive_second_term 
                                                     (abst_inductive x y_2)) 
                                                  v_Vee) 
                                               (v_Vud:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (abst_equal 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x y_1)) 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x y_2))) 
                                                            (abst_equal 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x y_1)) 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x y_2))))))) =>
                                                zen.Rnoteq basics.bool__t 
                                                  (abst_equal 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x y_1)) 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x y_2))) 
                                                  v_Vud) v_Vud) v_Vud) 
                                         (v_Vvd:
                                          (zen.proof 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_inductive_second_term 
                                                         (abst_inductive x 
                                                            y_1)) 
                                                      (abst_inductive_second_term 
                                                         (abst_inductive x 
                                                            y_2)))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x y_1)) 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x y_2))))) 
                                            v_Vvd v_Vvc) v_Vvd) v_Vzd) v_Vyd) 
                                v_Vxd) v_Vnd) abst_equal_transitive) 
                       (v_Vae:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal y_1 
                                       (abst_inductive_second_term 
                                          (abst_inductive x y_2))))))) =>
                        zen.Rall abst_T 
                          (v_Vkd:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vld:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vkd v_Vld))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vld v_Vkd))))) 
                          (abst_inductive_second_term (abst_inductive x y_2)) 
                          (v_Vfe:
                           (zen.proof 
                              (zen.forall abst_T 
                                 (v_Vld:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_inductive_second_term 
                                                (abst_inductive x y_2)) v_Vld))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vld 
                                             (abst_inductive_second_term 
                                                (abst_inductive x y_2)))))))) =>
                           zen.Rall abst_T 
                             (v_Vld:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_inductive_second_term 
                                            (abst_inductive x y_2)) v_Vld))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal v_Vld 
                                         (abst_inductive_second_term 
                                            (abst_inductive x y_2)))))) y_1 
                             (v_Vge:
                              (zen.proof 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_inductive_second_term 
                                                (abst_inductive x y_2)) y_1))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal y_1 
                                             (abst_inductive_second_term 
                                                (abst_inductive x y_2))))))) =>
                              zen.Rimply 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_inductive_second_term 
                                            (abst_inductive x y_2)) y_1))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal y_1 
                                         (abst_inductive_second_term 
                                            (abst_inductive x y_2))))) 
                                (v_Vhe:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_inductive_second_term 
                                                   (abst_inductive x y_2)) 
                                                y_1))))) =>
                                 zen.Rcut 
                                   (zen.and 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x y_2)) 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x y_2))))) 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_inductive_second_term 
                                                     (abst_inductive x y_2)) 
                                                  (abst_inductive_second_term 
                                                     (abst_inductive x y_2))))))) 
                                   (v_Vie:
                                    (zen.proof 
                                       (zen.and 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal abst_T 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x y_2)) 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x y_2))))) 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_inductive_second_term 
                                                         (abst_inductive x 
                                                            y_2)) 
                                                      (abst_inductive_second_term 
                                                         (abst_inductive x 
                                                            y_2)))))))) =>
                                    zen.Rand 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x y_2)) 
                                               (abst_inductive_second_term 
                                                  (abst_inductive x y_2))))) 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_inductive_second_term 
                                                     (abst_inductive x y_2)) 
                                                  (abst_inductive_second_term 
                                                     (abst_inductive x y_2)))))) 
                                      (v_Vee:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal abst_T 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x y_2)) 
                                                   (abst_inductive_second_term 
                                                      (abst_inductive x y_2)))))) =>
                                       v_Vje:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_inductive_second_term 
                                                         (abst_inductive x 
                                                            y_2)) 
                                                      (abst_inductive_second_term 
                                                         (abst_inductive x 
                                                            y_2))))))) =>
                                       zen.Rnoteq abst_T 
                                         (abst_inductive_second_term 
                                            (abst_inductive x y_2)) v_Vee) 
                                      v_Vie) 
                                   (v_Vke:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.and 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_inductive_second_term 
                                                         (abst_inductive x 
                                                            y_2)) 
                                                      (abst_inductive_second_term 
                                                         (abst_inductive x 
                                                            y_2))))) 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x y_2)) 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x y_2))))))))) =>
                                    zen.Rcut 
                                      (zen.triangle 
                                         (zen.equal abst_T y_2 y_1)) 
                                      (v_Vle:
                                       (zen.proof 
                                          (zen.triangle 
                                             (zen.equal abst_T y_2 y_1))) =>
                                       zen.Rsubst basics.bool__t 
                                         (v_Vbd:(zen.term basics.bool__t) =>
                                          zen.triangle (focal.is_true v_Vbd)) 
                                         (abst_equal 
                                            (abst_inductive_second_term 
                                               (abst_inductive x y_2)) y_2) 
                                         (abst_equal 
                                            (abst_inductive_second_term 
                                               (abst_inductive x y_2)) y_1) 
                                         (v_Vme:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (abst_equal 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x y_2)) y_2) 
                                                      (abst_equal 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x y_2)) y_1))))) =>
                                          zen.Rsubst abst_T 
                                            (v_Vne:(zen.term abst_T) =>
                                             zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal v_Vne y_2) 
                                                     (abst_equal 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_2)) y_1)))) 
                                            (abst_inductive_second_term 
                                               (abst_inductive x y_2)) 
                                            (abst_inductive_second_term 
                                               (abst_inductive x y_2)) 
                                            (v_Vee:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x y_2)) 
                                                         (abst_inductive_second_term 
                                                            (abst_inductive 
                                                               x y_2)))))) =>
                                             zen.Rnotand 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_2)) 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_2))))) 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x y_2)) 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x y_2)))))) 
                                               (v_Voe:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x y_2)) 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x y_2))))))) =>
                                                zen.Rnotnot 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_2)) 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_2)))) 
                                                  (v_Vpe:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x y_2)) 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x y_2))))) =>
                                                   zen.Rcut 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x y_2)) 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x y_2)))) 
                                                     (v_Vpe:
                                                      (zen.proof 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x y_2)) 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x y_2))))) =>
                                                      zen.Rsubst abst_T 
                                                        (v_Vqe:
                                                         (zen.term abst_T) =>
                                                         zen.triangle 
                                                           (zen.equal abst_T 
                                                              v_Vqe 
                                                              (abst_inductive_second_term 
                                                                 (abst_inductive 
                                                                    x y_2)))) 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_2)) 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_2)) 
                                                        (v_Vee:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    abst_T 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)))))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_inductive_second_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x y_2)) 
                                                                 (abst_inductive_second_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x y_2)))) 
                                                           v_Vpe v_Vee) 
                                                        (v_Vpe:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T 
                                                                  (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                  (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) =>
                                                         zen.Rsubst abst_T 
                                                           (v_Vre:
                                                            (zen.term abst_T) =>
                                                            zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_inductive_second_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x y_2)) 
                                                                 v_Vre)) 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x y_2)) 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x y_2)) 
                                                           (v_Vee:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)))))) =>
                                                            zen.Rnoteq 
                                                              abst_T 
                                                              (abst_inductive_second_term 
                                                                 (abst_inductive 
                                                                    x y_2)) 
                                                              v_Vee) 
                                                           (v_Vpe:
                                                            (zen.proof 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    abst_T 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) =>
                                                            zen.Raxiom 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (
                                                                    abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)))) 
                                                              v_Vpe v_Vee) 
                                                           v_Vpe) v_Vpe) 
                                                     (v_Vee:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T 
                                                                  (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                  (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)))))) =>
                                                      zen.Rnoteq abst_T 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_2)) v_Vee)) 
                                                  v_Voe) 
                                               (v_Vse:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                  (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)))))))) =>
                                                zen.Rnotnot 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x y_2)) 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x y_2))))) 
                                                  (v_Vte:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x y_2)) 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x y_2)))))) =>
                                                   zen.Rall abst_T 
                                                     (v_Vkd:
                                                      (zen.term abst_T) =>
                                                      zen.forall abst_T 
                                                        (v_Vld:
                                                         (zen.term abst_T) =>
                                                         zen.forall abst_T 
                                                           (v_Vmd:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x y_2)) 
                                                     (v_Vue:
                                                      (zen.proof 
                                                         (zen.forall abst_T 
                                                            (v_Vld:
                                                             (zen.term abst_T) =>
                                                             zen.forall 
                                                               abst_T 
                                                               (v_Vmd:
                                                                (zen.term 
                                                                   abst_T) =>
                                                                zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    v_Vld))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    v_Vmd)))))))) =>
                                                      zen.Rall abst_T 
                                                        (v_Vld:
                                                         (zen.term abst_T) =>
                                                         zen.forall abst_T 
                                                           (v_Vmd:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    v_Vld))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    v_Vmd)))))) 
                                                        (abst_inductive_second_term 
                                                           (abst_inductive x 
                                                              y_2)) 
                                                        (v_Vve:
                                                         (zen.proof 
                                                            (zen.forall 
                                                               abst_T 
                                                               (v_Vmd:
                                                                (zen.term 
                                                                   abst_T) =>
                                                                zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    v_Vmd))))))) =>
                                                         zen.Rall abst_T 
                                                           (v_Vmd:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    v_Vmd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    v_Vmd))))) 
                                                           y_2 
                                                           (v_Vwe:
                                                            (zen.proof 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_2))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_2)))))) =>
                                                            zen.Rimply 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_2))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_2)))) 
                                                              (v_Vje:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) 
                                                                 v_Vte v_Vje) 
                                                              (v_Vxe:
                                                               (zen.proof 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_2))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_2))))) =>
                                                               zen.Rimply 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_2))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_2))) 
                                                                 (v_Vye:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_2))))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_2))) 
                                                                    __H_1_3_2_LEMMA 
                                                                    v_Vye) 
                                                                 (__H_1_3_2_LEMMA:
                                                                  (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_2)))) =>
                                                                  zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (
                                                                    v_Vbd:
                                                                    (
                                                                    zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vbd)) 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_2) 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1) 
                                                                    (
                                                                    v_Vme:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_2) 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vne:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vne y_2) 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1)))) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (v_Vee:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)))))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    v_Vee) 
                                                                    (v_Vme:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_2) 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vze:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    v_Vze) 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1)))) 
                                                                    y_2 y_1 
                                                                    (v_Vaf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    y_2 y_1)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    y_2 y_1)) 
                                                                    v_Vle 
                                                                    v_Vaf) 
                                                                    (v_Vbf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1) 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1) 
                                                                    v_Vbf) 
                                                                    v_Vme) 
                                                                    v_Vme) 
                                                                    (
                                                                    v_Vcf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1))) 
                                                                    v_Vcf 
                                                                    v_Vhe) 
                                                                    __H_1_3_2_LEMMA) 
                                                                 v_Vxe) v_Vwe) 
                                                           v_Vve) v_Vue) 
                                                     abst_equal_transitive) 
                                                  v_Vse) v_Vke) 
                                            (v_Vme:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         basics.bool__t 
                                                         (abst_equal 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x y_2)) y_2) 
                                                         (abst_equal 
                                                            (abst_inductive_second_term 
                                                               (abst_inductive 
                                                                  x y_2)) y_1))))) =>
                                             zen.Rsubst abst_T 
                                               (v_Vze:(zen.term abst_T) =>
                                                zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x y_2)) 
                                                           v_Vze) 
                                                        (abst_equal 
                                                           (abst_inductive_second_term 
                                                              (abst_inductive 
                                                                 x y_2)) y_1)))) 
                                               y_2 y_1 
                                               (v_Vaf:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            y_2 y_1)))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (zen.equal abst_T y_2 
                                                        y_1)) v_Vle v_Vaf) 
                                               (v_Vbf:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (abst_equal 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x y_2)) 
                                                               y_1) 
                                                            (abst_equal 
                                                               (abst_inductive_second_term 
                                                                  (abst_inductive 
                                                                    x y_2)) 
                                                               y_1))))) =>
                                                zen.Rnoteq basics.bool__t 
                                                  (abst_equal 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x y_2)) 
                                                     y_1) v_Vbf) v_Vme) v_Vme) 
                                         (v_Vcf:
                                          (zen.proof 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_inductive_second_term 
                                                         (abst_inductive x 
                                                            y_2)) y_1)))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_inductive_second_term 
                                                        (abst_inductive x y_2)) 
                                                     y_1))) v_Vcf v_Vhe) 
                                         __H_1_3_2_LEMMA) 
                                      (v_Vaf:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal abst_T y_2 y_1)))) =>
                                       zen.Rcut 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal y_2 y_1))) 
                                         (v_Vdf:
                                          (zen.proof 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal y_2 y_1)))) =>
                                          zen.Rall abst_T 
                                            (v_Vkd:(zen.term abst_T) =>
                                             zen.forall abst_T 
                                               (v_Vld:(zen.term abst_T) =>
                                                zen.forall abst_T 
                                                  (v_Vmd:(zen.term abst_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Vkd 
                                                              v_Vld))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Vld v_Vmd))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Vkd v_Vmd))))))) 
                                            (abst_inductive_second_term 
                                               (abst_inductive x y_2)) 
                                            (v_Vue:
                                             (zen.proof 
                                                (zen.forall abst_T 
                                                   (v_Vld:
                                                    (zen.term abst_T) =>
                                                    zen.forall abst_T 
                                                      (v_Vmd:
                                                       (zen.term abst_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                  v_Vld))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    v_Vmd)))))))) =>
                                             zen.Rall abst_T 
                                               (v_Vld:(zen.term abst_T) =>
                                                zen.forall abst_T 
                                                  (v_Vmd:(zen.term abst_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_inductive_second_term 
                                                                 (abst_inductive 
                                                                    x y_2)) 
                                                              v_Vld))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Vld v_Vmd))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_inductive_second_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x y_2)) 
                                                                 v_Vmd)))))) 
                                               y_2 
                                               (v_Vef:
                                                (zen.proof 
                                                   (zen.forall abst_T 
                                                      (v_Vmd:
                                                       (zen.term abst_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                  y_2))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    y_2 v_Vmd))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    v_Vmd))))))) =>
                                                zen.Rall abst_T 
                                                  (v_Vmd:(zen.term abst_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_inductive_second_term 
                                                                 (abst_inductive 
                                                                    x y_2)) 
                                                              y_2))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 y_2 v_Vmd))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_inductive_second_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x y_2)) 
                                                                 v_Vmd))))) 
                                                  y_1 
                                                  (v_Vff:
                                                   (zen.proof 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                  y_2))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    y_2 y_1))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1)))))) =>
                                                   zen.Rimply 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_inductive_second_term 
                                                                 (abst_inductive 
                                                                    x y_2)) 
                                                              y_2))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 y_2 y_1))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_inductive_second_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x y_2)) 
                                                                 y_1)))) 
                                                     (v_Vye:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_2))))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_inductive_second_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x y_2)) 
                                                                 y_2))) 
                                                        __H_1_3_2_LEMMA v_Vye) 
                                                     (v_Vgf:
                                                      (zen.proof 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    y_2 y_1))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1))))) =>
                                                      zen.Rimply 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 y_2 y_1))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_inductive_second_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x y_2)) 
                                                                 y_1))) 
                                                        (v_Vhf:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    y_2 y_1))))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    y_2 y_1))) 
                                                           v_Vdf v_Vhf) 
                                                        (v_Vcf:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1)))) =>
                                                         zen.Rsubst 
                                                           basics.bool__t 
                                                           (v_Vbd:
                                                            (zen.term 
                                                               basics.bool__t) =>
                                                            zen.triangle 
                                                              (focal.is_true 
                                                                 v_Vbd)) 
                                                           (abst_equal 
                                                              (abst_inductive_second_term 
                                                                 (abst_inductive 
                                                                    x y_2)) 
                                                              y_1) 
                                                           (abst_equal 
                                                              (abst_inductive_second_term 
                                                                 (abst_inductive 
                                                                    x y_2)) 
                                                              y_1) 
                                                           (v_Vbf:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1) 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1))))) =>
                                                            zen.Rsubst 
                                                              abst_T 
                                                              (v_Vdd:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vdd y_1) 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1)))) 
                                                              (abst_inductive_second_term 
                                                                 (abst_inductive 
                                                                    x y_2)) 
                                                              (abst_inductive_second_term 
                                                                 (abst_inductive 
                                                                    x y_2)) 
                                                              (v_Vee:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)))))) =>
                                                               zen.Rnotand 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)))))) 
                                                                 (v_Voe:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))))) =>
                                                                  zen.Rnotnot 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)))) 
                                                                    (
                                                                    v_Vpe:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) =>
                                                                    zen.Reqsym 
                                                                    abst_T 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    v_Vpe 
                                                                    v_Vee) 
                                                                    v_Voe) 
                                                                 (v_Vse:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)))))))) =>
                                                                  zen.Rnotnot 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) 
                                                                    (
                                                                    v_Vte:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vkd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vld:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (v_Vue:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vld:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    v_Vmd)))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vld:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    v_Vmd)))))) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (v_Vve:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    v_Vmd))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    v_Vmd))))) 
                                                                    y_1 
                                                                    (v_Vif:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1)))) 
                                                                    (v_Vje:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) 
                                                                    v_Vte 
                                                                    v_Vje) 
                                                                    (v_Vjf:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1))) 
                                                                    (v_Vhe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1))) 
                                                                    v_Vcf 
                                                                    v_Vhe) 
                                                                    (v_Vcf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1))) 
                                                                    v_Vcf 
                                                                    v_Vhe) 
                                                                    v_Vjf) 
                                                                    v_Vif) 
                                                                    v_Vve) 
                                                                    v_Vue) 
                                                                    abst_equal_transitive) 
                                                                    v_Vse) 
                                                                 v_Vke) 
                                                              (v_Vbf:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1) 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1))))) =>
                                                               zen.Rsubst 
                                                                 abst_T 
                                                                 (v_Vze:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    v_Vze) 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1)))) 
                                                                 y_1 y_1 
                                                                 (v_Vkf:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    y_1 y_1)))) =>
                                                                  zen.Rnoteq 
                                                                    abst_T 
                                                                    y_1 v_Vkf) 
                                                                 (v_Vbf:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1) 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1))))) =>
                                                                  zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1) 
                                                                    v_Vbf) 
                                                                 v_Vbf) v_Vbf) 
                                                           (v_Vcf:
                                                            (zen.proof 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1)))) =>
                                                            zen.Raxiom 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_inductive_second_term 
                                                                    (abst_inductive 
                                                                    x y_2)) 
                                                                    y_1))) 
                                                              v_Vcf v_Vhe) 
                                                           v_Vcf) v_Vgf) 
                                                     v_Vff) v_Vef) v_Vue) 
                                            abst_equal_transitive) 
                                         (v_Vhf:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal y_2 y_1))))) =>
                                          zen.Rall abst_T 
                                            (v_Vkd:(zen.term abst_T) =>
                                             zen.forall abst_T 
                                               (v_Vld:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vkd 
                                                           v_Vld))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vld 
                                                           v_Vkd))))) y_1 
                                            (v_Vlf:
                                             (zen.proof 
                                                (zen.forall abst_T 
                                                   (v_Vld:
                                                    (zen.term abst_T) =>
                                                    zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal y_1 
                                                               v_Vld))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               v_Vld y_1)))))) =>
                                             zen.Rall abst_T 
                                               (v_Vld:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal y_1 v_Vld))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vld y_1)))) 
                                               y_2 
                                               (v_Vmf:
                                                (zen.proof 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal y_1 
                                                               y_2))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal y_2 
                                                               y_1))))) =>
                                                zen.Rimply 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal y_1 y_2))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal y_2 y_1))) 
                                                  (v_Vnf:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  y_1 y_2))))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal y_1 
                                                              y_2))) H v_Vnf) 
                                                  (v_Vdf:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal y_2 
                                                               y_1)))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal y_2 
                                                              y_1))) v_Vdf 
                                                     v_Vhf) v_Vmf) v_Vlf) 
                                            abst_equal_symmetric)))) 
                                (v_Vwd:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal y_1 
                                             (abst_inductive_second_term 
                                                (abst_inductive x y_2)))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal y_1 
                                            (abst_inductive_second_term 
                                               (abst_inductive x y_2))))) 
                                   v_Vwd v_Vae) v_Vge) v_Vfe) 
                          abst_equal_symmetric))))) 
             (zen.nnpp 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal 
                         (abst_inductive_second_term (abst_inductive x y_2)) 
                         y_2))) 
                (v_Vzb:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_inductive_second_term 
                                   (abst_inductive x y_2)) y_2))))) =>
                 zen.Rall _p_B_T 
                   (v_Vac:(zen.term _p_B_T) =>
                    zen.forall abst_T 
                      (v_Vbc:(zen.term abst_T) =>
                       zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_inductive_second_term 
                                  (abst_inductive v_Vac v_Vbc)) v_Vbc)))) x 
                   (v_Vcc:
                    (zen.proof 
                       (zen.forall abst_T 
                          (v_Vbc:(zen.term abst_T) =>
                           zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_inductive_second_term 
                                      (abst_inductive x v_Vbc)) v_Vbc))))) =>
                    zen.Rall abst_T 
                      (v_Vbc:(zen.term abst_T) =>
                       zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_inductive_second_term 
                                  (abst_inductive x v_Vbc)) v_Vbc))) y_2 
                      (v_Vdc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_inductive_second_term 
                                      (abst_inductive x y_2)) y_2)))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_inductive_second_term 
                                     (abst_inductive x y_2)) y_2))) v_Vdc 
                         v_Vzb) v_Vcc) abst_inductive_reverse_second))) 
            (zen.nnpp 
               (zen.triangle 
                  (focal.is_true 
                     (abst_equal 
                        (abst_inductive_second_term (abst_inductive x y_1)) 
                        y_1))) 
               (v_Vzb:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_inductive_second_term 
                                  (abst_inductive x y_1)) y_1))))) =>
                zen.Rall _p_B_T 
                  (v_Vac:(zen.term _p_B_T) =>
                   zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.triangle 
                        (focal.is_true 
                           (abst_equal 
                              (abst_inductive_second_term 
                                 (abst_inductive v_Vac v_Vbc)) v_Vbc)))) x 
                  (v_Vcc:
                   (zen.proof 
                      (zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_inductive_second_term 
                                     (abst_inductive x v_Vbc)) v_Vbc))))) =>
                   zen.Rall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.triangle 
                        (focal.is_true 
                           (abst_equal 
                              (abst_inductive_second_term 
                                 (abst_inductive x v_Vbc)) v_Vbc))) y_1 
                     (v_Vdc:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_inductive_second_term 
                                     (abst_inductive x y_1)) y_1)))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_inductive_second_term 
                                    (abst_inductive x y_1)) y_1))) v_Vdc 
                        v_Vzb) v_Vcc) abst_inductive_reverse_second)))) 
        ((__H_1_2_1_LEMMA:
          (dk_logic.eP 
             (dk_logic.ebP 
                (_p_B_equal 
                   (abst_inductive_first_term (abst_inductive x y_1)) x))) =>
          (__H_1_2_2_LEMMA:
           (dk_logic.eP 
              (dk_logic.ebP 
                 (_p_B_equal 
                    (abst_inductive_first_term (abst_inductive x y_2)) x))) =>
           zen.nnpp 
             (zen.triangle 
                (focal.is_true 
                   (_p_B_equal 
                      (abst_inductive_first_term (abst_inductive x y_1)) 
                      (abst_inductive_first_term (abst_inductive x y_2))))) 
             (v_Vkc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_B_equal 
                             (abst_inductive_first_term 
                                (abst_inductive x y_1)) 
                             (abst_inductive_first_term 
                                (abst_inductive x y_2))))))) =>
              zen.Rcut 
                (zen.and 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal _p_B_T 
                            (abst_inductive_first_term (abst_inductive x y_1)) 
                            (abst_inductive_first_term (abst_inductive x y_1))))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal 
                               (abst_inductive_first_term 
                                  (abst_inductive x y_1)) 
                               (abst_inductive_first_term 
                                  (abst_inductive x y_1))))))) 
                (v_Vlc:
                 (zen.proof 
                    (zen.and 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal _p_B_T 
                                (abst_inductive_first_term 
                                   (abst_inductive x y_1)) 
                                (abst_inductive_first_term 
                                   (abst_inductive x y_1))))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal 
                                   (abst_inductive_first_term 
                                      (abst_inductive x y_1)) 
                                   (abst_inductive_first_term 
                                      (abst_inductive x y_1)))))))) =>
                 zen.Rand 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal _p_B_T 
                            (abst_inductive_first_term (abst_inductive x y_1)) 
                            (abst_inductive_first_term (abst_inductive x y_1))))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal 
                               (abst_inductive_first_term 
                                  (abst_inductive x y_1)) 
                               (abst_inductive_first_term 
                                  (abst_inductive x y_1)))))) 
                   (v_Vmc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal _p_B_T 
                                (abst_inductive_first_term 
                                   (abst_inductive x y_1)) 
                                (abst_inductive_first_term 
                                   (abst_inductive x y_1)))))) =>
                    v_Vnc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal 
                                   (abst_inductive_first_term 
                                      (abst_inductive x y_1)) 
                                   (abst_inductive_first_term 
                                      (abst_inductive x y_1))))))) =>
                    zen.Rnoteq _p_B_T 
                      (abst_inductive_first_term (abst_inductive x y_1)) 
                      v_Vmc) v_Vlc) 
                (v_Voc:
                 (zen.proof 
                    (zen.not 
                       (zen.and 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal _p_B_T 
                                   (abst_inductive_first_term 
                                      (abst_inductive x y_1)) 
                                   (abst_inductive_first_term 
                                      (abst_inductive x y_1))))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal 
                                      (abst_inductive_first_term 
                                         (abst_inductive x y_1)) 
                                      (abst_inductive_first_term 
                                         (abst_inductive x y_1))))))))) =>
                 zen.Rcut 
                   (zen.triangle 
                      (zen.equal _p_B_T x 
                         (abst_inductive_first_term (abst_inductive x y_2)))) 
                   (v_Vpc:
                    (zen.proof 
                       (zen.triangle 
                          (zen.equal _p_B_T x 
                             (abst_inductive_first_term 
                                (abst_inductive x y_2))))) =>
                    zen.Rsubst basics.bool__t 
                      (v_Vqc:(zen.term basics.bool__t) =>
                       zen.triangle (focal.is_true v_Vqc)) 
                      (_p_B_equal 
                         (abst_inductive_first_term (abst_inductive x y_1)) x) 
                      (_p_B_equal 
                         (abst_inductive_first_term (abst_inductive x y_1)) 
                         (abst_inductive_first_term (abst_inductive x y_2))) 
                      (v_Vrc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (_p_B_equal 
                                      (abst_inductive_first_term 
                                         (abst_inductive x y_1)) x) 
                                   (_p_B_equal 
                                      (abst_inductive_first_term 
                                         (abst_inductive x y_1)) 
                                      (abst_inductive_first_term 
                                         (abst_inductive x y_2))))))) =>
                       zen.Rsubst _p_B_T 
                         (v_Vsc:(zen.term _p_B_T) =>
                          zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (_p_B_equal v_Vsc x) 
                                  (_p_B_equal 
                                     (abst_inductive_first_term 
                                        (abst_inductive x y_1)) 
                                     (abst_inductive_first_term 
                                        (abst_inductive x y_2)))))) 
                         (abst_inductive_first_term (abst_inductive x y_1)) 
                         (abst_inductive_first_term (abst_inductive x y_1)) 
                         (v_Vmc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal _p_B_T 
                                      (abst_inductive_first_term 
                                         (abst_inductive x y_1)) 
                                      (abst_inductive_first_term 
                                         (abst_inductive x y_1)))))) =>
                          zen.Rnotand 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal _p_B_T 
                                     (abst_inductive_first_term 
                                        (abst_inductive x y_1)) 
                                     (abst_inductive_first_term 
                                        (abst_inductive x y_1))))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_inductive_first_term 
                                           (abst_inductive x y_1)) 
                                        (abst_inductive_first_term 
                                           (abst_inductive x y_1)))))) 
                            (v_Vtc:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal _p_B_T 
                                            (abst_inductive_first_term 
                                               (abst_inductive x y_1)) 
                                            (abst_inductive_first_term 
                                               (abst_inductive x y_1))))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (zen.equal _p_B_T 
                                     (abst_inductive_first_term 
                                        (abst_inductive x y_1)) 
                                     (abst_inductive_first_term 
                                        (abst_inductive x y_1)))) 
                               (v_Vuc:
                                (zen.proof 
                                   (zen.triangle 
                                      (zen.equal _p_B_T 
                                         (abst_inductive_first_term 
                                            (abst_inductive x y_1)) 
                                         (abst_inductive_first_term 
                                            (abst_inductive x y_1))))) =>
                                zen.Rcut 
                                  (zen.triangle 
                                     (zen.equal _p_B_T 
                                        (abst_inductive_first_term 
                                           (abst_inductive x y_1)) 
                                        (abst_inductive_first_term 
                                           (abst_inductive x y_1)))) 
                                  (v_Vuc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (zen.equal _p_B_T 
                                            (abst_inductive_first_term 
                                               (abst_inductive x y_1)) 
                                            (abst_inductive_first_term 
                                               (abst_inductive x y_1))))) =>
                                   zen.Rsubst _p_B_T 
                                     (v_Vvc:(zen.term _p_B_T) =>
                                      zen.triangle 
                                        (zen.equal _p_B_T v_Vvc 
                                           (abst_inductive_first_term 
                                              (abst_inductive x y_1)))) 
                                     (abst_inductive_first_term 
                                        (abst_inductive x y_1)) 
                                     (abst_inductive_first_term 
                                        (abst_inductive x y_1)) 
                                     (v_Vmc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_B_T 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x y_1)) 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x y_1)))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (zen.equal _p_B_T 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x y_1)) 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x y_1)))) 
                                        v_Vuc v_Vmc) 
                                     (v_Vuc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal _p_B_T 
                                               (abst_inductive_first_term 
                                                  (abst_inductive x y_1)) 
                                               (abst_inductive_first_term 
                                                  (abst_inductive x y_1))))) =>
                                      zen.Rsubst _p_B_T 
                                        (v_Vwc:(zen.term _p_B_T) =>
                                         zen.triangle 
                                           (zen.equal _p_B_T 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x y_1)) 
                                              v_Vwc)) 
                                        (abst_inductive_first_term 
                                           (abst_inductive x y_1)) 
                                        (abst_inductive_first_term 
                                           (abst_inductive x y_1)) 
                                        (v_Vmc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_B_T 
                                                     (abst_inductive_first_term 
                                                        (abst_inductive x y_1)) 
                                                     (abst_inductive_first_term 
                                                        (abst_inductive x y_1)))))) =>
                                         zen.Rnoteq _p_B_T 
                                           (abst_inductive_first_term 
                                              (abst_inductive x y_1)) v_Vmc) 
                                        (v_Vuc:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal _p_B_T 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x y_1)) 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x y_1))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal _p_B_T 
                                                 (abst_inductive_first_term 
                                                    (abst_inductive x y_1)) 
                                                 (abst_inductive_first_term 
                                                    (abst_inductive x y_1)))) 
                                           v_Vuc v_Vmc) v_Vuc) v_Vuc) 
                                  (v_Vmc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal _p_B_T 
                                               (abst_inductive_first_term 
                                                  (abst_inductive x y_1)) 
                                               (abst_inductive_first_term 
                                                  (abst_inductive x y_1)))))) =>
                                   zen.Rnoteq _p_B_T 
                                     (abst_inductive_first_term 
                                        (abst_inductive x y_1)) v_Vmc)) v_Vtc) 
                            (v_Vxc:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_inductive_first_term 
                                                  (abst_inductive x y_1)) 
                                               (abst_inductive_first_term 
                                                  (abst_inductive x y_1)))))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_inductive_first_term 
                                           (abst_inductive x y_1)) 
                                        (abst_inductive_first_term 
                                           (abst_inductive x y_1))))) 
                               (v_Vyc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_inductive_first_term 
                                               (abst_inductive x y_1)) 
                                            (abst_inductive_first_term 
                                               (abst_inductive x y_1)))))) =>
                                zen.Rall _p_B_T 
                                  (v_Vzc:(zen.term _p_B_T) =>
                                   zen.forall _p_B_T 
                                     (v_Vad:(zen.term _p_B_T) =>
                                      zen.forall _p_B_T 
                                        (v_Vbd:(zen.term _p_B_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal v_Vzc v_Vad))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal v_Vad v_Vbd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal v_Vzc v_Vbd))))))) 
                                  (abst_inductive_first_term 
                                     (abst_inductive x y_1)) 
                                  (v_Vcd:
                                   (zen.proof 
                                      (zen.forall _p_B_T 
                                         (v_Vad:(zen.term _p_B_T) =>
                                          zen.forall _p_B_T 
                                            (v_Vbd:(zen.term _p_B_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive x 
                                                              y_1)) v_Vad))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal v_Vad 
                                                           v_Vbd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x y_1)) 
                                                           v_Vbd)))))))) =>
                                   zen.Rall _p_B_T 
                                     (v_Vad:(zen.term _p_B_T) =>
                                      zen.forall _p_B_T 
                                        (v_Vbd:(zen.term _p_B_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x y_1)) 
                                                    v_Vad))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal v_Vad v_Vbd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive x 
                                                             y_1)) v_Vbd)))))) 
                                     (abst_inductive_first_term 
                                        (abst_inductive x y_1)) 
                                     (v_Vdd:
                                      (zen.proof 
                                         (zen.forall _p_B_T 
                                            (v_Vbd:(zen.term _p_B_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive x 
                                                              y_1)) 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive x 
                                                              y_1))))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x y_1)) 
                                                           v_Vbd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x y_1)) 
                                                           v_Vbd))))))) =>
                                      zen.Rall _p_B_T 
                                        (v_Vbd:(zen.term _p_B_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x y_1)) 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x y_1))))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive x 
                                                             y_1)) v_Vbd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive x 
                                                             y_1)) v_Vbd))))) 
                                        x 
                                        (v_Ved:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive x 
                                                              y_1)) 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive x 
                                                              y_1))))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x y_1)) x))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x y_1)) x)))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x y_1)) 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x y_1))))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive x 
                                                             y_1)) x))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive x 
                                                             y_1)) x)))) 
                                           (v_Vnc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x y_1)) 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x y_1))))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive x 
                                                             y_1)) 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive x 
                                                             y_1))))) v_Vyc 
                                              v_Vnc) 
                                           (v_Vfd:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x y_1)) x))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x y_1)) x))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive x 
                                                             y_1)) x))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive x 
                                                             y_1)) x))) 
                                              (v_Vgd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x y_1)) x))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x y_1)) x))) 
                                                 __H_1_2_1_LEMMA v_Vgd) 
                                              (__H_1_2_1_LEMMA:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x y_1)) x)))) =>
                                               zen.Rsubst basics.bool__t 
                                                 (v_Vqc:
                                                  (zen.term basics.bool__t) =>
                                                  zen.triangle 
                                                    (focal.is_true v_Vqc)) 
                                                 (_p_B_equal 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x y_1)) 
                                                    x) 
                                                 (_p_B_equal 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x y_1)) 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x y_2))) 
                                                 (v_Vrc:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_B_equal 
                                                                 (abst_inductive_first_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x y_1)) x) 
                                                              (_p_B_equal 
                                                                 (abst_inductive_first_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x y_1)) 
                                                                 (abst_inductive_first_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x y_2))))))) =>
                                                  zen.Rsubst _p_B_T 
                                                    (v_Vsc:
                                                     (zen.term _p_B_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (_p_B_equal 
                                                                v_Vsc x) 
                                                             (_p_B_equal 
                                                                (abst_inductive_first_term 
                                                                   (abst_inductive 
                                                                    x y_1)) 
                                                                (abst_inductive_first_term 
                                                                   (abst_inductive 
                                                                    x y_2)))))) 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x y_1)) 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x y_1)) 
                                                    (v_Vmc:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_B_T 
                                                                 (abst_inductive_first_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x y_1)) 
                                                                 (abst_inductive_first_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x y_1)))))) =>
                                                     zen.Rnoteq _p_B_T 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive x 
                                                             y_1)) v_Vmc) 
                                                    (v_Vrc:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) x) 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (
                                                                    abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_2))))))) =>
                                                     zen.Rsubst _p_B_T 
                                                       (v_Vhd:
                                                        (zen.term _p_B_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (_p_B_equal 
                                                                   (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                   v_Vhd) 
                                                                (_p_B_equal 
                                                                   (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                   (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_2)))))) 
                                                       x 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive x 
                                                             y_2)) 
                                                       (v_Vid:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_B_T x 
                                                                    (
                                                                    abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_2)))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_B_T x 
                                                                (abst_inductive_first_term 
                                                                   (abst_inductive 
                                                                    x y_2)))) 
                                                          v_Vpc v_Vid) 
                                                       (v_Vjd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    _p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_2))) 
                                                                    (
                                                                    _p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_2))))))) =>
                                                        zen.Rnoteq 
                                                          basics.bool__t 
                                                          (_p_B_equal 
                                                             (abst_inductive_first_term 
                                                                (abst_inductive 
                                                                   x y_1)) 
                                                             (abst_inductive_first_term 
                                                                (abst_inductive 
                                                                   x y_2))) 
                                                          v_Vjd) v_Vrc) v_Vrc) 
                                                 (v_Vkd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x y_1)) 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x y_2)))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_inductive_first_term 
                                                                (abst_inductive 
                                                                   x y_1)) 
                                                             (abst_inductive_first_term 
                                                                (abst_inductive 
                                                                   x y_2))))) 
                                                    v_Vkd v_Vkc) 
                                                 __H_1_2_1_LEMMA) v_Vfd) 
                                           v_Ved) v_Vdd) v_Vcd) 
                                  _p_B_equal_transitive) v_Vxc) v_Voc) 
                         (v_Vrc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (_p_B_equal 
                                         (abst_inductive_first_term 
                                            (abst_inductive x y_1)) x) 
                                      (_p_B_equal 
                                         (abst_inductive_first_term 
                                            (abst_inductive x y_1)) 
                                         (abst_inductive_first_term 
                                            (abst_inductive x y_2))))))) =>
                          zen.Rsubst _p_B_T 
                            (v_Vhd:(zen.term _p_B_T) =>
                             zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (_p_B_equal 
                                        (abst_inductive_first_term 
                                           (abst_inductive x y_1)) v_Vhd) 
                                     (_p_B_equal 
                                        (abst_inductive_first_term 
                                           (abst_inductive x y_1)) 
                                        (abst_inductive_first_term 
                                           (abst_inductive x y_2)))))) x 
                            (abst_inductive_first_term (abst_inductive x y_2)) 
                            (v_Vid:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal _p_B_T x 
                                         (abst_inductive_first_term 
                                            (abst_inductive x y_2)))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (zen.equal _p_B_T x 
                                     (abst_inductive_first_term 
                                        (abst_inductive x y_2)))) v_Vpc v_Vid) 
                            (v_Vjd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (_p_B_equal 
                                            (abst_inductive_first_term 
                                               (abst_inductive x y_1)) 
                                            (abst_inductive_first_term 
                                               (abst_inductive x y_2))) 
                                         (_p_B_equal 
                                            (abst_inductive_first_term 
                                               (abst_inductive x y_1)) 
                                            (abst_inductive_first_term 
                                               (abst_inductive x y_2))))))) =>
                             zen.Rnoteq basics.bool__t 
                               (_p_B_equal 
                                  (abst_inductive_first_term 
                                     (abst_inductive x y_1)) 
                                  (abst_inductive_first_term 
                                     (abst_inductive x y_2))) v_Vjd) v_Vrc) 
                         v_Vrc) 
                      (v_Vkd:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal 
                                   (abst_inductive_first_term 
                                      (abst_inductive x y_1)) 
                                   (abst_inductive_first_term 
                                      (abst_inductive x y_2)))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal 
                                  (abst_inductive_first_term 
                                     (abst_inductive x y_1)) 
                                  (abst_inductive_first_term 
                                     (abst_inductive x y_2))))) v_Vkd v_Vkc) 
                      __H_1_2_1_LEMMA) 
                   (v_Vid:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal _p_B_T x 
                                (abst_inductive_first_term 
                                   (abst_inductive x y_2)))))) =>
                    zen.Rcut 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal x 
                               (abst_inductive_first_term 
                                  (abst_inductive x y_2))))) 
                      (v_Vld:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal x 
                                   (abst_inductive_first_term 
                                      (abst_inductive x y_2)))))) =>
                       zen.Rall _p_B_T 
                         (v_Vzc:(zen.term _p_B_T) =>
                          zen.forall _p_B_T 
                            (v_Vad:(zen.term _p_B_T) =>
                             zen.forall _p_B_T 
                               (v_Vbd:(zen.term _p_B_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (_p_B_equal v_Vzc v_Vad))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal v_Vad v_Vbd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal v_Vzc v_Vbd))))))) 
                         (abst_inductive_first_term (abst_inductive x y_1)) 
                         (v_Vcd:
                          (zen.proof 
                             (zen.forall _p_B_T 
                                (v_Vad:(zen.term _p_B_T) =>
                                 zen.forall _p_B_T 
                                   (v_Vbd:(zen.term _p_B_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_inductive_first_term 
                                                  (abst_inductive x y_1)) 
                                               v_Vad))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal v_Vad v_Vbd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x y_1)) 
                                                  v_Vbd)))))))) =>
                          zen.Rall _p_B_T 
                            (v_Vad:(zen.term _p_B_T) =>
                             zen.forall _p_B_T 
                               (v_Vbd:(zen.term _p_B_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_inductive_first_term 
                                              (abst_inductive x y_1)) v_Vad))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal v_Vad v_Vbd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x y_1)) 
                                              v_Vbd)))))) x 
                            (v_Vmd:
                             (zen.proof 
                                (zen.forall _p_B_T 
                                   (v_Vbd:(zen.term _p_B_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_inductive_first_term 
                                                  (abst_inductive x y_1)) x))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal x v_Vbd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x y_1)) 
                                                  v_Vbd))))))) =>
                             zen.Rall _p_B_T 
                               (v_Vbd:(zen.term _p_B_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_inductive_first_term 
                                              (abst_inductive x y_1)) x))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (_p_B_equal x v_Vbd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x y_1)) 
                                              v_Vbd))))) 
                               (abst_inductive_first_term 
                                  (abst_inductive x y_2)) 
                               (v_Vnd:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_inductive_first_term 
                                                  (abst_inductive x y_1)) x))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal x 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x y_2))))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x y_1)) 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x y_2)))))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_inductive_first_term 
                                              (abst_inductive x y_1)) x))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal x 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x y_2))))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x y_1)) 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x y_2)))))) 
                                  (v_Vgd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x y_1)) 
                                                  x))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x y_1)) x))) 
                                     __H_1_2_1_LEMMA v_Vgd) 
                                  (v_Vod:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal x 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x y_2))))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x y_1)) 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x y_2))))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal x 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x y_2))))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x y_1)) 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x y_2))))) 
                                     (v_Vpd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal x 
                                                     (abst_inductive_first_term 
                                                        (abst_inductive x y_2))))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_B_equal x 
                                                 (abst_inductive_first_term 
                                                    (abst_inductive x y_2))))) 
                                        v_Vld v_Vpd) 
                                     (v_Vkd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x y_1)) 
                                                  (abst_inductive_first_term 
                                                     (abst_inductive x y_2)))))) =>
                                      zen.Rsubst basics.bool__t 
                                        (v_Vqc:(zen.term basics.bool__t) =>
                                         zen.triangle (focal.is_true v_Vqc)) 
                                        (_p_B_equal 
                                           (abst_inductive_first_term 
                                              (abst_inductive x y_1)) 
                                           (abst_inductive_first_term 
                                              (abst_inductive x y_2))) 
                                        (_p_B_equal 
                                           (abst_inductive_first_term 
                                              (abst_inductive x y_1)) 
                                           (abst_inductive_first_term 
                                              (abst_inductive x y_2))) 
                                        (v_Vjd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (_p_B_equal 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive x 
                                                              y_1)) 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive x 
                                                              y_2))) 
                                                     (_p_B_equal 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive x 
                                                              y_1)) 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive x 
                                                              y_2))))))) =>
                                         zen.Rsubst _p_B_T 
                                           (v_Vqd:(zen.term _p_B_T) =>
                                            zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (_p_B_equal v_Vqd 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive x 
                                                             y_2))) 
                                                    (_p_B_equal 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive x 
                                                             y_1)) 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive x 
                                                             y_2)))))) 
                                           (abst_inductive_first_term 
                                              (abst_inductive x y_1)) 
                                           (abst_inductive_first_term 
                                              (abst_inductive x y_1)) 
                                           (v_Vmc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_B_T 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive x 
                                                              y_1)) 
                                                        (abst_inductive_first_term 
                                                           (abst_inductive x 
                                                              y_1)))))) =>
                                            zen.Rnotand 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal _p_B_T 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive x 
                                                             y_1)) 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive x 
                                                             y_1))))) 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x y_1)) 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x y_1)))))) 
                                              (v_Vtc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal _p_B_T 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x y_1)) 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x y_1))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (zen.equal _p_B_T 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive x 
                                                             y_1)) 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive x 
                                                             y_1)))) 
                                                 (v_Vuc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal _p_B_T 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x y_1)) 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x y_1))))) =>
                                                  zen.Reqsym _p_B_T 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x y_1)) 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x y_1)) 
                                                    v_Vuc v_Vmc) v_Vtc) 
                                              (v_Vxc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_inductive_first_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x y_1)) 
                                                                 (abst_inductive_first_term 
                                                                    (
                                                                    abst_inductive 
                                                                    x y_1)))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x y_1)) 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x y_1))))) 
                                                 (v_Vyc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x y_1)) 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x y_1)))))) =>
                                                  zen.Rall _p_B_T 
                                                    (v_Vzc:
                                                     (zen.term _p_B_T) =>
                                                     zen.forall _p_B_T 
                                                       (v_Vad:
                                                        (zen.term _p_B_T) =>
                                                        zen.forall _p_B_T 
                                                          (v_Vbd:
                                                           (zen.term _p_B_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vzc 
                                                                    v_Vbd))))))) 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x y_1)) 
                                                    (v_Vcd:
                                                     (zen.proof 
                                                        (zen.forall _p_B_T 
                                                           (v_Vad:
                                                            (zen.term _p_B_T) =>
                                                            zen.forall 
                                                              _p_B_T 
                                                              (v_Vbd:
                                                               (zen.term 
                                                                  _p_B_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    v_Vad))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    v_Vbd)))))))) =>
                                                     zen.Rall _p_B_T 
                                                       (v_Vad:
                                                        (zen.term _p_B_T) =>
                                                        zen.forall _p_B_T 
                                                          (v_Vbd:
                                                           (zen.term _p_B_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    v_Vad))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    v_Vbd)))))) 
                                                       (abst_inductive_first_term 
                                                          (abst_inductive x 
                                                             y_1)) 
                                                       (v_Vdd:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              _p_B_T 
                                                              (v_Vbd:
                                                               (zen.term 
                                                                  _p_B_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1))))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    v_Vbd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    v_Vbd))))))) =>
                                                        zen.Rall _p_B_T 
                                                          (v_Vbd:
                                                           (zen.term _p_B_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1))))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    v_Vbd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    v_Vbd))))) 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x y_2)) 
                                                          (v_Vrd:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1))))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_2)))))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1))))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_2)))))) 
                                                             (v_Vnc:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1))))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1))))) 
                                                                v_Vyc v_Vnc) 
                                                             (v_Vsd:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_2))))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) 
                                                                (v_Vkc:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_2))))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) 
                                                                   v_Vkd 
                                                                   v_Vkc) 
                                                                (v_Vkd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_2)))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_1)) 
                                                                    (abst_inductive_first_term 
                                                                    (abst_inductive 
                                                                    x y_2))))) 
                                                                   v_Vkd 
                                                                   v_Vkc) 
                                                                v_Vsd) v_Vrd) 
                                                          v_Vdd) v_Vcd) 
                                                    _p_B_equal_transitive) 
                                                 v_Vxc) v_Voc) 
                                           (v_Vjd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (_p_B_equal 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x y_1)) 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x y_2))) 
                                                        (_p_B_equal 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x y_1)) 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x y_2))))))) =>
                                            zen.Rsubst _p_B_T 
                                              (v_Vtd:(zen.term _p_B_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (_p_B_equal 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x y_1)) v_Vtd) 
                                                       (_p_B_equal 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x y_1)) 
                                                          (abst_inductive_first_term 
                                                             (abst_inductive 
                                                                x y_2)))))) 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x y_2)) 
                                              (abst_inductive_first_term 
                                                 (abst_inductive x y_2)) 
                                              (v_Vud:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_B_T 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x y_2)) 
                                                           (abst_inductive_first_term 
                                                              (abst_inductive 
                                                                 x y_2)))))) =>
                                               zen.Rnoteq _p_B_T 
                                                 (abst_inductive_first_term 
                                                    (abst_inductive x y_2)) 
                                                 v_Vud) 
                                              (v_Vjd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_B_equal 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x y_1)) 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x y_2))) 
                                                           (_p_B_equal 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x y_1)) 
                                                              (abst_inductive_first_term 
                                                                 (abst_inductive 
                                                                    x y_2))))))) =>
                                               zen.Rnoteq basics.bool__t 
                                                 (_p_B_equal 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x y_1)) 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x y_2))) 
                                                 v_Vjd) v_Vjd) v_Vjd) 
                                        (v_Vkd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal 
                                                     (abst_inductive_first_term 
                                                        (abst_inductive x y_1)) 
                                                     (abst_inductive_first_term 
                                                        (abst_inductive x y_2)))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x y_1)) 
                                                    (abst_inductive_first_term 
                                                       (abst_inductive x y_2))))) 
                                           v_Vkd v_Vkc) v_Vkd) v_Vod) v_Vnd) 
                               v_Vmd) v_Vcd) _p_B_equal_transitive) 
                      (v_Vpd:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal x 
                                      (abst_inductive_first_term 
                                         (abst_inductive x y_2))))))) =>
                       zen.Rall _p_B_T 
                         (v_Vzc:(zen.term _p_B_T) =>
                          zen.forall _p_B_T 
                            (v_Vad:(zen.term _p_B_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true (_p_B_equal v_Vzc v_Vad))) 
                               (zen.triangle 
                                  (focal.is_true (_p_B_equal v_Vad v_Vzc))))) 
                         (abst_inductive_first_term (abst_inductive x y_2)) 
                         (v_Vvd:
                          (zen.proof 
                             (zen.forall _p_B_T 
                                (v_Vad:(zen.term _p_B_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_inductive_first_term 
                                               (abst_inductive x y_2)) v_Vad))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal v_Vad 
                                            (abst_inductive_first_term 
                                               (abst_inductive x y_2)))))))) =>
                          zen.Rall _p_B_T 
                            (v_Vad:(zen.term _p_B_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_inductive_first_term 
                                           (abst_inductive x y_2)) v_Vad))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal v_Vad 
                                        (abst_inductive_first_term 
                                           (abst_inductive x y_2)))))) x 
                            (v_Vwd:
                             (zen.proof 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_inductive_first_term 
                                               (abst_inductive x y_2)) x))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal x 
                                            (abst_inductive_first_term 
                                               (abst_inductive x y_2))))))) =>
                             zen.Rimply 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_inductive_first_term 
                                           (abst_inductive x y_2)) x))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal x 
                                        (abst_inductive_first_term 
                                           (abst_inductive x y_2))))) 
                               (v_Vxd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_inductive_first_term 
                                                  (abst_inductive x y_2)) x))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_inductive_first_term 
                                              (abst_inductive x y_2)) x))) 
                                  __H_1_2_2_LEMMA v_Vxd) 
                               (v_Vld:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal x 
                                            (abst_inductive_first_term 
                                               (abst_inductive x y_2)))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal x 
                                           (abst_inductive_first_term 
                                              (abst_inductive x y_2))))) 
                                  v_Vld v_Vpd) v_Vwd) v_Vvd) 
                         _p_B_equal_symmetric))))) 
            (zen.nnpp 
               (zen.triangle 
                  (focal.is_true 
                     (_p_B_equal 
                        (abst_inductive_first_term (abst_inductive x y_2)) x))) 
               (v_Vzb:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal 
                               (abst_inductive_first_term 
                                  (abst_inductive x y_2)) x))))) =>
                zen.Rall _p_B_T 
                  (v_Vac:(zen.term _p_B_T) =>
                   zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.triangle 
                        (focal.is_true 
                           (_p_B_equal 
                              (abst_inductive_first_term 
                                 (abst_inductive v_Vac v_Vbc)) v_Vac)))) x 
                  (v_Vcc:
                   (zen.proof 
                      (zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (_p_B_equal 
                                  (abst_inductive_first_term 
                                     (abst_inductive x v_Vbc)) x))))) =>
                   zen.Rall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.triangle 
                        (focal.is_true 
                           (_p_B_equal 
                              (abst_inductive_first_term 
                                 (abst_inductive x v_Vbc)) x))) y_2 
                     (v_Vdc:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal 
                                  (abst_inductive_first_term 
                                     (abst_inductive x y_2)) x)))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_B_equal 
                                 (abst_inductive_first_term 
                                    (abst_inductive x y_2)) x))) v_Vdc v_Vzb) 
                     v_Vcc) abst_inductive_reverse_first))) 
           (zen.nnpp 
              (zen.triangle 
                 (focal.is_true 
                    (_p_B_equal 
                       (abst_inductive_first_term (abst_inductive x y_1)) x))) 
              (v_Vzb:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_B_equal 
                              (abst_inductive_first_term 
                                 (abst_inductive x y_1)) x))))) =>
               zen.Rall _p_B_T 
                 (v_Vac:(zen.term _p_B_T) =>
                  zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (_p_B_equal 
                             (abst_inductive_first_term 
                                (abst_inductive v_Vac v_Vbc)) v_Vac)))) x 
                 (v_Vcc:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vbc:(zen.term abst_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (_p_B_equal 
                                 (abst_inductive_first_term 
                                    (abst_inductive x v_Vbc)) x))))) =>
                  zen.Rall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (_p_B_equal 
                             (abst_inductive_first_term 
                                (abst_inductive x v_Vbc)) x))) y_1 
                    (v_Vdc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_B_equal 
                                 (abst_inductive_first_term 
                                    (abst_inductive x y_1)) x)))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_B_equal 
                                (abst_inductive_first_term 
                                   (abst_inductive x y_1)) x))) v_Vdc v_Vzb) 
                    v_Vcc) abst_inductive_reverse_first)))) 
       (zen.nnpp 
          (zen.and 
             (zen.triangle 
                (focal.is_true (abst_inductive_case (abst_inductive x y_1)))) 
             (zen.triangle 
                (focal.is_true (abst_inductive_case (abst_inductive x y_2))))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.and 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_inductive_case (abst_inductive x y_1)))) 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_inductive_case (abst_inductive x y_2))))))) =>
           zen.Rnotand 
             (zen.triangle 
                (focal.is_true (abst_inductive_case (abst_inductive x y_1)))) 
             (zen.triangle 
                (focal.is_true (abst_inductive_case (abst_inductive x y_2)))) 
             (v_Vac:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_inductive_case (abst_inductive x y_1)))))) =>
              zen.Rall _p_B_T 
                (v_Vbc:(zen.term _p_B_T) =>
                 zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.triangle 
                      (focal.is_true 
                         (abst_inductive_case (abst_inductive v_Vbc v_Vcc))))) 
                x 
                (v_Vdc:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.triangle 
                          (focal.is_true 
                             (abst_inductive_case (abst_inductive x v_Vcc)))))) =>
                 zen.Rall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.triangle 
                      (focal.is_true 
                         (abst_inductive_case (abst_inductive x v_Vcc)))) 
                   y_1 
                   (v_Vec:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_inductive_case (abst_inductive x y_1))))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_inductive_case (abst_inductive x y_1)))) 
                      v_Vec v_Vac) v_Vdc) abst_inductive_has_case) 
             (v_Vfc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_inductive_case (abst_inductive x y_2)))))) =>
              zen.Rall _p_B_T 
                (v_Vbc:(zen.term _p_B_T) =>
                 zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.triangle 
                      (focal.is_true 
                         (abst_inductive_case (abst_inductive v_Vbc v_Vcc))))) 
                x 
                (v_Vdc:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.triangle 
                          (focal.is_true 
                             (abst_inductive_case (abst_inductive x v_Vcc)))))) =>
                 zen.Rall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.triangle 
                      (focal.is_true 
                         (abst_inductive_case (abst_inductive x v_Vcc)))) 
                   y_2 
                   (v_Vgc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_inductive_case (abst_inductive x y_2))))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_inductive_case (abst_inductive x y_2)))) 
                      v_Vgc v_Vfc) v_Vdc) abst_inductive_has_case) v_Vzb))).

def Linear_fixed_set__inductive_substitution_rule :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_inductive:((cc.eT _p_B_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_inductive_left_substitution_rule:(dk_logic.eP 
                                           (dk_logic.forall _p_B_T 
                                              (x_1:(cc.eT _p_B_T) =>
                                               dk_logic.forall _p_B_T 
                                                 (x_2:(cc.eT _p_B_T) =>
                                                  dk_logic.forall abst_T 
                                                    (y:(cc.eT abst_T) =>
                                                     dk_logic.imp 
                                                       (dk_logic.ebP 
                                                          (_p_B_equal x_1 x_2)) 
                                                       (dk_logic.ebP 
                                                          (abst_equal 
                                                             (abst_inductive 
                                                                x_1 y) 
                                                             (abst_inductive 
                                                                x_2 y)))))))) ->
  abst_inductive_right_substitution_rule:(dk_logic.eP 
                                            (dk_logic.forall _p_B_T 
                                               (x:(cc.eT _p_B_T) =>
                                                dk_logic.forall abst_T 
                                                  (y_1:(cc.eT abst_T) =>
                                                   dk_logic.forall abst_T 
                                                     (y_2:(cc.eT abst_T) =>
                                                      dk_logic.imp 
                                                        (dk_logic.ebP 
                                                           (abst_equal y_1 
                                                              y_2)) 
                                                        (dk_logic.ebP 
                                                           (abst_equal 
                                                              (abst_inductive 
                                                                 x y_1) 
                                                              (abst_inductive 
                                                                 x y_2)))))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_B_T 
       (x_1:(cc.eT _p_B_T) =>
        dk_logic.forall _p_B_T 
          (x_2:(cc.eT _p_B_T) =>
           dk_logic.forall abst_T 
             (y_1:(cc.eT abst_T) =>
              dk_logic.forall abst_T 
                (y_2:(cc.eT abst_T) =>
                 dk_logic.imp (dk_logic.ebP (_p_B_equal x_1 x_2)) 
                   (dk_logic.imp (dk_logic.ebP (abst_equal y_1 y_2)) 
                      (dk_logic.ebP 
                         (abst_equal (abst_inductive x_1 y_1) 
                            (abst_inductive x_2 y_2)))))))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_inductive:((cc.eT _p_B_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_inductive_left_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x_1:(cc.eT _p_B_T) =>
         dk_logic.forall _p_B_T 
           (x_2:(cc.eT _p_B_T) =>
            dk_logic.forall abst_T 
              (y:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (_p_B_equal x_1 x_2)) 
                 (dk_logic.ebP 
                    (abst_equal (abst_inductive x_1 y) (abst_inductive x_2 y)))))))) =>
  abst_inductive_right_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall abst_T 
           (y_1:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (y_2:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal y_1 y_2)) 
                 (dk_logic.ebP 
                    (abst_equal (abst_inductive x y_1) (abst_inductive x y_2)))))))) =>
  zen.nnpp 
    (zen.forall _p_B_T 
       (v_Vkc:(zen.term _p_B_T) =>
        zen.forall _p_B_T 
          (v_Vlc:(zen.term _p_B_T) =>
           zen.forall abst_T 
             (v_Vmc:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vnc:(zen.term abst_T) =>
                 zen.imp 
                   (zen.triangle (focal.is_true (_p_B_equal v_Vkc v_Vlc))) 
                   (zen.imp 
                      (zen.triangle (focal.is_true (abst_equal v_Vmc v_Vnc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_inductive v_Vkc v_Vmc) 
                               (abst_inductive v_Vlc v_Vnc)))))))))) 
    (v_Voc:
     (zen.proof 
        (zen.not 
           (zen.forall _p_B_T 
              (v_Vkc:(zen.term _p_B_T) =>
               zen.forall _p_B_T 
                 (v_Vlc:(zen.term _p_B_T) =>
                  zen.forall abst_T 
                    (v_Vmc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vnc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (_p_B_equal v_Vkc v_Vlc))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vmc v_Vnc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_inductive v_Vkc v_Vmc) 
                                      (abst_inductive v_Vlc v_Vnc)))))))))))) =>
     zen.Rnotall _p_B_T 
       (v_Vkc:(zen.term _p_B_T) =>
        zen.forall _p_B_T 
          (v_Vlc:(zen.term _p_B_T) =>
           zen.forall abst_T 
             (v_Vmc:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vnc:(zen.term abst_T) =>
                 zen.imp 
                   (zen.triangle (focal.is_true (_p_B_equal v_Vkc v_Vlc))) 
                   (zen.imp 
                      (zen.triangle (focal.is_true (abst_equal v_Vmc v_Vnc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_inductive v_Vkc v_Vmc) 
                               (abst_inductive v_Vlc v_Vnc))))))))) 
       (v_Vpc:(zen.term _p_B_T) =>
        v_Vqc:
        (zen.proof 
           (zen.not 
              (zen.forall _p_B_T 
                 (v_Vlc:(zen.term _p_B_T) =>
                  zen.forall abst_T 
                    (v_Vmc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vnc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (_p_B_equal v_Vpc v_Vlc))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vmc v_Vnc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_inductive v_Vpc v_Vmc) 
                                      (abst_inductive v_Vlc v_Vnc))))))))))) =>
        zen.Rnotall _p_B_T 
          (v_Vlc:(zen.term _p_B_T) =>
           zen.forall abst_T 
             (v_Vmc:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vnc:(zen.term abst_T) =>
                 zen.imp 
                   (zen.triangle (focal.is_true (_p_B_equal v_Vpc v_Vlc))) 
                   (zen.imp 
                      (zen.triangle (focal.is_true (abst_equal v_Vmc v_Vnc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_inductive v_Vpc v_Vmc) 
                               (abst_inductive v_Vlc v_Vnc)))))))) 
          (v_Vrc:(zen.term _p_B_T) =>
           v_Vsc:
           (zen.proof 
              (zen.not 
                 (zen.forall abst_T 
                    (v_Vmc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vnc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (_p_B_equal v_Vpc v_Vrc))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vmc v_Vnc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_inductive v_Vpc v_Vmc) 
                                      (abst_inductive v_Vrc v_Vnc)))))))))) =>
           zen.Rnotall abst_T 
             (v_Vmc:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vnc:(zen.term abst_T) =>
                 zen.imp 
                   (zen.triangle (focal.is_true (_p_B_equal v_Vpc v_Vrc))) 
                   (zen.imp 
                      (zen.triangle (focal.is_true (abst_equal v_Vmc v_Vnc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_inductive v_Vpc v_Vmc) 
                               (abst_inductive v_Vrc v_Vnc))))))) 
             (v_Vtc:(zen.term abst_T) =>
              v_Vuc:
              (zen.proof 
                 (zen.not 
                    (zen.forall abst_T 
                       (v_Vnc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (_p_B_equal v_Vpc v_Vrc))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vtc v_Vnc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_inductive v_Vpc v_Vtc) 
                                      (abst_inductive v_Vrc v_Vnc))))))))) =>
              zen.Rnotall abst_T 
                (v_Vnc:(zen.term abst_T) =>
                 zen.imp 
                   (zen.triangle (focal.is_true (_p_B_equal v_Vpc v_Vrc))) 
                   (zen.imp 
                      (zen.triangle (focal.is_true (abst_equal v_Vtc v_Vnc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_inductive v_Vpc v_Vtc) 
                               (abst_inductive v_Vrc v_Vnc)))))) 
                (v_Vvc:(zen.term abst_T) =>
                 v_Vwc:
                 (zen.proof 
                    (zen.not 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (_p_B_equal v_Vpc v_Vrc))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vtc v_Vvc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_inductive v_Vpc v_Vtc) 
                                      (abst_inductive v_Vrc v_Vvc)))))))) =>
                 zen.Rnotimply 
                   (zen.triangle (focal.is_true (_p_B_equal v_Vpc v_Vrc))) 
                   (zen.imp 
                      (zen.triangle (focal.is_true (abst_equal v_Vtc v_Vvc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_inductive v_Vpc v_Vtc) 
                               (abst_inductive v_Vrc v_Vvc))))) 
                   (v_Vxc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (_p_B_equal v_Vpc v_Vrc)))) =>
                    v_Vyc:
                    (zen.proof 
                       (zen.not 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vtc v_Vvc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_inductive v_Vpc v_Vtc) 
                                      (abst_inductive v_Vrc v_Vvc))))))) =>
                    zen.Rnotimply 
                      (zen.triangle (focal.is_true (abst_equal v_Vtc v_Vvc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_inductive v_Vpc v_Vtc) 
                               (abst_inductive v_Vrc v_Vvc)))) 
                      (v_Vzc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vtc v_Vvc)))) =>
                       v_Vad:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_inductive v_Vpc v_Vtc) 
                                      (abst_inductive v_Vrc v_Vvc)))))) =>
                       zen.Rall _p_B_T 
                         (v_Vbd:(zen.term _p_B_T) =>
                          zen.forall abst_T 
                            (v_Vmc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vnc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vmc v_Vnc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_inductive v_Vbd v_Vmc) 
                                           (abst_inductive v_Vbd v_Vnc))))))) 
                         v_Vrc 
                         (v_Vcd:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vmc:(zen.term abst_T) =>
                                 zen.forall abst_T 
                                   (v_Vnc:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vmc v_Vnc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_inductive v_Vrc v_Vmc) 
                                               (abst_inductive v_Vrc v_Vnc)))))))) =>
                          zen.Rall abst_T 
                            (v_Vmc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vnc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vmc v_Vnc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_inductive v_Vrc v_Vmc) 
                                           (abst_inductive v_Vrc v_Vnc)))))) 
                            v_Vtc 
                            (v_Vdd:
                             (zen.proof 
                                (zen.forall abst_T 
                                   (v_Vnc:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vtc v_Vnc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_inductive v_Vrc v_Vtc) 
                                               (abst_inductive v_Vrc v_Vnc))))))) =>
                             zen.Rall abst_T 
                               (v_Vnc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vtc v_Vnc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_inductive v_Vrc v_Vtc) 
                                           (abst_inductive v_Vrc v_Vnc))))) 
                               v_Vvc 
                               (v_Ved:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vtc v_Vvc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_inductive v_Vrc v_Vtc) 
                                               (abst_inductive v_Vrc v_Vvc)))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vtc v_Vvc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_inductive v_Vrc v_Vtc) 
                                           (abst_inductive v_Vrc v_Vvc)))) 
                                  (v_Vfd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vtc v_Vvc))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vtc v_Vvc))) v_Vzc 
                                     v_Vfd) 
                                  (v_Vgd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_inductive v_Vrc v_Vtc) 
                                               (abst_inductive v_Vrc v_Vvc))))) =>
                                   zen.Rcut 
                                     (zen.and 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_inductive v_Vpc v_Vtc) 
                                                 (abst_inductive v_Vrc v_Vtc)))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_inductive v_Vpc 
                                                       v_Vtc) 
                                                    (abst_inductive v_Vrc 
                                                       v_Vtc)))))) 
                                     (v_Vhd:
                                      (zen.proof 
                                         (zen.and 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_inductive v_Vpc 
                                                        v_Vtc) 
                                                     (abst_inductive v_Vrc 
                                                        v_Vtc)))) 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_inductive 
                                                           v_Vpc v_Vtc) 
                                                        (abst_inductive 
                                                           v_Vrc v_Vtc))))))) =>
                                      zen.Rand 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_inductive v_Vpc v_Vtc) 
                                                 (abst_inductive v_Vrc v_Vtc)))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_inductive v_Vpc 
                                                       v_Vtc) 
                                                    (abst_inductive v_Vrc 
                                                       v_Vtc))))) 
                                        (v_Vid:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_inductive v_Vpc 
                                                        v_Vtc) 
                                                     (abst_inductive v_Vrc 
                                                        v_Vtc))))) =>
                                         v_Vjd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_inductive 
                                                           v_Vpc v_Vtc) 
                                                        (abst_inductive 
                                                           v_Vrc v_Vtc)))))) =>
                                         zen.Rall _p_B_T 
                                           (v_Vkc:(zen.term _p_B_T) =>
                                            zen.forall _p_B_T 
                                              (v_Vlc:(zen.term _p_B_T) =>
                                               zen.forall abst_T 
                                                 (v_Vkd:(zen.term abst_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal v_Vkc 
                                                             v_Vlc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_inductive 
                                                                v_Vkc v_Vkd) 
                                                             (abst_inductive 
                                                                v_Vlc v_Vkd))))))) 
                                           v_Vpc 
                                           (v_Vld:
                                            (zen.proof 
                                               (zen.forall _p_B_T 
                                                  (v_Vlc:(zen.term _p_B_T) =>
                                                   zen.forall abst_T 
                                                     (v_Vkd:
                                                      (zen.term abst_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 v_Vpc v_Vlc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vkd) 
                                                                 (abst_inductive 
                                                                    v_Vlc 
                                                                    v_Vkd)))))))) =>
                                            zen.Rall _p_B_T 
                                              (v_Vlc:(zen.term _p_B_T) =>
                                               zen.forall abst_T 
                                                 (v_Vkd:(zen.term abst_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal v_Vpc 
                                                             v_Vlc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_inductive 
                                                                v_Vpc v_Vkd) 
                                                             (abst_inductive 
                                                                v_Vlc v_Vkd)))))) 
                                              v_Vrc 
                                              (v_Vmd:
                                               (zen.proof 
                                                  (zen.forall abst_T 
                                                     (v_Vkd:
                                                      (zen.term abst_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 v_Vpc v_Vrc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vkd) 
                                                                 (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vkd))))))) =>
                                               zen.Rall abst_T 
                                                 (v_Vkd:(zen.term abst_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal v_Vpc 
                                                             v_Vrc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_inductive 
                                                                v_Vpc v_Vkd) 
                                                             (abst_inductive 
                                                                v_Vrc v_Vkd))))) 
                                                 v_Vtc 
                                                 (v_Vnd:
                                                  (zen.proof 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 v_Vpc v_Vrc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc)))))) =>
                                                  zen.Rimply 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal v_Vpc 
                                                             v_Vrc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_inductive 
                                                                v_Vpc v_Vtc) 
                                                             (abst_inductive 
                                                                v_Vrc v_Vtc)))) 
                                                    (v_Vod:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    v_Vpc 
                                                                    v_Vrc))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                v_Vpc v_Vrc))) 
                                                       v_Vxc v_Vod) 
                                                    (v_Vpd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_inductive 
                                                                   v_Vpc 
                                                                   v_Vtc) 
                                                                (abst_inductive 
                                                                   v_Vrc 
                                                                   v_Vtc)))) 
                                                       v_Vpd v_Vjd) v_Vnd) 
                                                 v_Vmd) v_Vld) 
                                           abst_inductive_left_substitution_rule) 
                                        v_Vhd) 
                                     (v_Vqd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.and 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_inductive 
                                                           v_Vpc v_Vtc) 
                                                        (abst_inductive 
                                                           v_Vrc v_Vtc)))) 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_inductive 
                                                              v_Vpc v_Vtc) 
                                                           (abst_inductive 
                                                              v_Vrc v_Vtc)))))))) =>
                                      zen.Rcut 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_inductive v_Vrc v_Vvc) 
                                              (abst_inductive v_Vrc v_Vvc))) 
                                        (v_Vrd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_inductive v_Vrc v_Vvc) 
                                                  (abst_inductive v_Vrc v_Vvc)))) =>
                                         zen.Rsubst basics.bool__t 
                                           (v_Vsd:
                                            (zen.term basics.bool__t) =>
                                            zen.triangle 
                                              (focal.is_true v_Vsd)) 
                                           (abst_equal 
                                              (abst_inductive v_Vrc v_Vtc) 
                                              (abst_inductive v_Vrc v_Vvc)) 
                                           (abst_equal 
                                              (abst_inductive v_Vpc v_Vtc) 
                                              (abst_inductive v_Vrc v_Vvc)) 
                                           (v_Vtd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_inductive 
                                                              v_Vrc v_Vtc) 
                                                           (abst_inductive 
                                                              v_Vrc v_Vvc)) 
                                                        (abst_equal 
                                                           (abst_inductive 
                                                              v_Vpc v_Vtc) 
                                                           (abst_inductive 
                                                              v_Vrc v_Vvc)))))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vud:(zen.term abst_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal v_Vud 
                                                          (abst_inductive 
                                                             v_Vrc v_Vvc)) 
                                                       (abst_equal 
                                                          (abst_inductive 
                                                             v_Vpc v_Vtc) 
                                                          (abst_inductive 
                                                             v_Vrc v_Vvc))))) 
                                              (abst_inductive v_Vrc v_Vtc) 
                                              (abst_inductive v_Vpc v_Vtc) 
                                              (v_Vvd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_inductive 
                                                              v_Vrc v_Vtc) 
                                                           (abst_inductive 
                                                              v_Vpc v_Vtc))))) =>
                                               zen.Rnotand 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_inductive 
                                                             v_Vpc v_Vtc) 
                                                          (abst_inductive 
                                                             v_Vrc v_Vtc)))) 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_inductive 
                                                                v_Vpc v_Vtc) 
                                                             (abst_inductive 
                                                                v_Vrc v_Vtc))))) 
                                                 (v_Vwd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc)))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_inductive 
                                                             v_Vpc v_Vtc) 
                                                          (abst_inductive 
                                                             v_Vrc v_Vtc))) 
                                                    (v_Vxd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_inductive 
                                                                 v_Vpc v_Vtc) 
                                                              (abst_inductive 
                                                                 v_Vrc v_Vtc)))) =>
                                                     zen.Rcut 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_inductive 
                                                                v_Vpc v_Vtc) 
                                                             (abst_inductive 
                                                                v_Vpc v_Vtc))) 
                                                       (v_Vyd:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc)))) =>
                                                        zen.Rsubst abst_T 
                                                          (v_Vzd:
                                                           (zen.term abst_T) =>
                                                           zen.triangle 
                                                             (zen.equal 
                                                                abst_T v_Vzd 
                                                                (abst_inductive 
                                                                   v_Vpc 
                                                                   v_Vtc))) 
                                                          (abst_inductive 
                                                             v_Vpc v_Vtc) 
                                                          (abst_inductive 
                                                             v_Vrc v_Vtc) 
                                                          (v_Vid:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                   (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc))) 
                                                             v_Vxd v_Vid) 
                                                          (v_Vae:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (
                                                                    abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc)))) =>
                                                           zen.Rsubst abst_T 
                                                             (v_Vbe:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                   v_Vbe)) 
                                                             (abst_inductive 
                                                                v_Vpc v_Vtc) 
                                                             (abst_inductive 
                                                                v_Vpc v_Vtc) 
                                                             (v_Vce:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc))))) =>
                                                              zen.Rnoteq 
                                                                abst_T 
                                                                (abst_inductive 
                                                                   v_Vpc 
                                                                   v_Vtc) 
                                                                v_Vce) 
                                                             (v_Vae:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc))) 
                                                                v_Vae v_Vvd) 
                                                             v_Vae) v_Vyd) 
                                                       (v_Vce:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (
                                                                    abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc))))) =>
                                                        zen.Rnoteq abst_T 
                                                          (abst_inductive 
                                                             v_Vpc v_Vtc) 
                                                          v_Vce)) v_Vwd) 
                                                 (v_Vde:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (
                                                                    abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc))))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_inductive 
                                                                v_Vpc v_Vtc) 
                                                             (abst_inductive 
                                                                v_Vrc v_Vtc)))) 
                                                    (v_Vpd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vee:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vkd:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vfe:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vee 
                                                                    v_Vkd))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vfe))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vee 
                                                                    v_Vfe))))))) 
                                                       (abst_inductive v_Vpc 
                                                          v_Vtc) 
                                                       (v_Vge:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              abst_T 
                                                              (v_Vkd:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.forall 
                                                                 abst_T 
                                                                 (v_Vfe:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vkd))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vfe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vfe)))))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vkd:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vfe:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vkd))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vfe))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vfe)))))) 
                                                          (abst_inductive 
                                                             v_Vrc v_Vtc) 
                                                          (v_Vhe:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 abst_T 
                                                                 (v_Vfe:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vfe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vfe))))))) =>
                                                           zen.Rall abst_T 
                                                             (v_Vfe:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vfe))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vfe))))) 
                                                             (abst_inductive 
                                                                v_Vrc v_Vvc) 
                                                             (v_Vie:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc))))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                                (v_Vjd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc)))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                   v_Vpd 
                                                                   v_Vjd) 
                                                                (v_Vje:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                   (v_Vke:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    v_Vgd 
                                                                    v_Vke) 
                                                                   (v_Vle:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vsd:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vsd)) 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (v_Vme:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vud:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vud 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (v_Vce:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc))))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vce) 
                                                                    (v_Vme:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vne:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vne) 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (v_Voe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc))) 
                                                                    v_Vrd 
                                                                    v_Voe) 
                                                                    (v_Vme:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    v_Vme) 
                                                                    v_Vme) 
                                                                    v_Vme) 
                                                                    (v_Vle:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    v_Vle 
                                                                    v_Vad) 
                                                                    v_Vle) 
                                                                   v_Vje) 
                                                                v_Vie) v_Vhe) 
                                                          v_Vge) 
                                                       abst_equal_transitive) 
                                                    v_Vde) v_Vqd) 
                                              (v_Vme:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_inductive 
                                                                 v_Vpc v_Vtc) 
                                                              (abst_inductive 
                                                                 v_Vrc v_Vvc)) 
                                                           (abst_equal 
                                                              (abst_inductive 
                                                                 v_Vpc v_Vtc) 
                                                              (abst_inductive 
                                                                 v_Vrc v_Vvc)))))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Vne:(zen.term abst_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_inductive 
                                                                v_Vpc v_Vtc) 
                                                             v_Vne) 
                                                          (abst_equal 
                                                             (abst_inductive 
                                                                v_Vpc v_Vtc) 
                                                             (abst_inductive 
                                                                v_Vrc v_Vvc))))) 
                                                 (abst_inductive v_Vrc v_Vvc) 
                                                 (abst_inductive v_Vrc v_Vvc) 
                                                 (v_Voe:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_inductive 
                                                                 v_Vrc v_Vvc) 
                                                              (abst_inductive 
                                                                 v_Vrc v_Vvc))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_inductive 
                                                             v_Vrc v_Vvc) 
                                                          (abst_inductive 
                                                             v_Vrc v_Vvc))) 
                                                    v_Vrd v_Voe) 
                                                 (v_Vme:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                              (abst_equal 
                                                                 (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                  zen.Rnoteq basics.bool__t 
                                                    (abst_equal 
                                                       (abst_inductive v_Vpc 
                                                          v_Vtc) 
                                                       (abst_inductive v_Vrc 
                                                          v_Vvc)) v_Vme) 
                                                 v_Vme) v_Vtd) 
                                           (v_Vle:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_inductive 
                                                           v_Vpc v_Vtc) 
                                                        (abst_inductive 
                                                           v_Vrc v_Vvc))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_inductive v_Vpc 
                                                          v_Vtc) 
                                                       (abst_inductive v_Vrc 
                                                          v_Vvc)))) v_Vle 
                                              v_Vad) v_Vgd) 
                                        (v_Voe:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_inductive v_Vrc 
                                                        v_Vvc) 
                                                     (abst_inductive v_Vrc 
                                                        v_Vvc))))) =>
                                         zen.Rcut 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_inductive v_Vrc 
                                                       v_Vvc) 
                                                    (abst_inductive v_Vrc 
                                                       v_Vvc)))) 
                                           (v_Vpe:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_inductive 
                                                           v_Vrc v_Vvc) 
                                                        (abst_inductive 
                                                           v_Vrc v_Vvc))))) =>
                                            zen.Rall abst_T 
                                              (v_Vee:(zen.term abst_T) =>
                                               zen.forall abst_T 
                                                 (v_Vkd:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vfe:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                v_Vee v_Vkd))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vkd 
                                                                   v_Vfe))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vee 
                                                                   v_Vfe))))))) 
                                              (abst_inductive v_Vrc v_Vtc) 
                                              (v_Vqe:
                                               (zen.proof 
                                                  (zen.forall abst_T 
                                                     (v_Vkd:
                                                      (zen.term abst_T) =>
                                                      zen.forall abst_T 
                                                        (v_Vfe:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vkd))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Vkd 
                                                                    v_Vfe))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vfe)))))))) =>
                                               zen.Rall abst_T 
                                                 (v_Vkd:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vfe:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_inductive 
                                                                   v_Vrc 
                                                                   v_Vtc) 
                                                                v_Vkd))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vkd 
                                                                   v_Vfe))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                   v_Vfe)))))) 
                                                 (abst_inductive v_Vrc v_Vvc) 
                                                 (v_Vre:
                                                  (zen.proof 
                                                     (zen.forall abst_T 
                                                        (v_Vfe:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (
                                                                    abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    v_Vfe))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vfe))))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vfe:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_inductive 
                                                                   v_Vrc 
                                                                   v_Vtc) 
                                                                (abst_inductive 
                                                                   v_Vrc 
                                                                   v_Vvc)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                   v_Vfe))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                   v_Vfe))))) 
                                                    (abst_inductive v_Vrc 
                                                       v_Vvc) 
                                                    (v_Vse:
                                                     (zen.proof 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (
                                                                    abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc))))))) =>
                                                     zen.Rimply 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_inductive 
                                                                   v_Vrc 
                                                                   v_Vtc) 
                                                                (abst_inductive 
                                                                   v_Vrc 
                                                                   v_Vvc)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                   (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                   (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                       (v_Vke:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                   (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                          v_Vgd v_Vke) 
                                                       (v_Vte:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                   (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                   (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                          (v_Vue:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                             v_Vpe v_Vue) 
                                                          (v_Vgd:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                           zen.Rsubst 
                                                             basics.bool__t 
                                                             (v_Vsd:
                                                              (zen.term 
                                                                 basics.bool__t) =>
                                                              zen.triangle 
                                                                (focal.is_true 
                                                                   v_Vsd)) 
                                                             (abst_equal 
                                                                (abst_inductive 
                                                                   v_Vrc 
                                                                   v_Vtc) 
                                                                (abst_inductive 
                                                                   v_Vrc 
                                                                   v_Vvc)) 
                                                             (abst_equal 
                                                                (abst_inductive 
                                                                   v_Vpc 
                                                                   v_Vtc) 
                                                                (abst_inductive 
                                                                   v_Vrc 
                                                                   v_Vvc)) 
                                                             (v_Vtd:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                              zen.Rsubst 
                                                                abst_T 
                                                                (v_Vud:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vud 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                                (abst_inductive 
                                                                   v_Vrc 
                                                                   v_Vtc) 
                                                                (abst_inductive 
                                                                   v_Vpc 
                                                                   v_Vtc) 
                                                                (v_Vvd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc))))) =>
                                                                 zen.Rnotand 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc))))) 
                                                                   (v_Vwd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc))) 
                                                                    (v_Vxd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc)))) =>
                                                                    zen.Reqsym 
                                                                    abst_T 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vxd 
                                                                    v_Vvd) 
                                                                    v_Vwd) 
                                                                   (v_Vde:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (v_Vpd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vee:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vkd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vfe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vee 
                                                                    v_Vkd))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vfe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vee 
                                                                    v_Vfe))))))) 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (v_Vge:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vkd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vfe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vkd))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vfe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vfe)))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vkd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vfe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vkd))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vfe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vfe)))))) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (v_Vhe:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vfe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vfe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vfe))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vfe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vfe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vfe))))) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (v_Vie:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                                    (v_Vjd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    v_Vpd 
                                                                    v_Vjd) 
                                                                    (v_Vje:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (v_Vke:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    v_Vgd 
                                                                    v_Vke) 
                                                                    (v_Vle:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    v_Vle 
                                                                    v_Vad) 
                                                                    v_Vje) 
                                                                    v_Vie) 
                                                                    v_Vhe) 
                                                                    v_Vge) 
                                                                    abst_equal_transitive) 
                                                                    v_Vde) 
                                                                   v_Vqd) 
                                                                (v_Vme:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                 zen.Rsubst 
                                                                   abst_T 
                                                                   (v_Vne:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vne) 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                                   (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                   (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                   (v_Voe:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    v_Voe) 
                                                                   (v_Vme:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    v_Vme) 
                                                                   v_Vme) 
                                                                v_Vtd) 
                                                             (v_Vle:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inductive 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_inductive 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                v_Vle v_Vad) 
                                                             v_Vgd) v_Vte) 
                                                       v_Vse) v_Vre) v_Vqe) 
                                              abst_equal_transitive) 
                                           (v_Vue:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_inductive 
                                                              v_Vrc v_Vvc) 
                                                           (abst_inductive 
                                                              v_Vrc v_Vvc)))))) =>
                                            zen.Rnoteq abst_T 
                                              (abst_inductive v_Vrc v_Vvc) 
                                              v_Voe)))) v_Ved) v_Vdd) v_Vcd) 
                         abst_inductive_right_substitution_rule) v_Vyc) v_Vwc) 
                v_Vuc) v_Vsc) v_Vqc) v_Voc).

__variant_fix_point__t : __var_a:cc.uT -> __var_b:cc.uT -> Type.

def variant_fix_point__t : __var_a:cc.uT -> __var_b:cc.uT -> cc.uT.

[__var_b, __var_a]
  cc.eT (variant_fix_point__t __var_a __var_b)
  -->
  __variant_fix_point__t __var_a __var_b.

VBase :
  __var_a:cc.uT ->
  __var_b:cc.uT ->
  (cc.eT __var_a) -> cc.eT (variant_fix_point__t __var_a __var_b).

VInductive :
  __var_a:cc.uT ->
  __var_b:cc.uT ->
  (cc.eT __var_b) ->
  (cc.eT (variant_fix_point__t __var_a __var_b)) ->
  cc.eT (variant_fix_point__t __var_a __var_b).

def match__VBase :
  __var_a:cc.uT ->
  __var_b:cc.uT ->
  Ret_type:cc.uT ->
  (cc.eT (variant_fix_point__t __var_a __var_b)) ->
  ((cc.eT __var_a) -> cc.eT Ret_type) -> (cc.eT Ret_type) -> cc.eT Ret_type.

[default, pattern, x_0_, Ret_type, __var_b, __var_a]
  match__VBase __var_a __var_b Ret_type (VBase __var_a __var_b x_0_) pattern 
    default
  -->
  pattern x_0_.

[default, pattern, x_1_, x_0_, Ret_type, __var_b, __var_a]
  match__VBase __var_a __var_b Ret_type (VInductive __var_a __var_b x_0_ 
    x_1_) pattern default
  -->
  default.

def match__VInductive :
  __var_a:cc.uT ->
  __var_b:cc.uT ->
  Ret_type:cc.uT ->
  (cc.eT (variant_fix_point__t __var_a __var_b)) ->
  ((cc.eT __var_b) ->
   (cc.eT (variant_fix_point__t __var_a __var_b)) -> cc.eT Ret_type) ->
  (cc.eT Ret_type) -> cc.eT Ret_type.

[default, pattern, x_0_, Ret_type, __var_b, __var_a]
  match__VInductive __var_a __var_b Ret_type (VBase __var_a __var_b x_0_) 
    pattern default
  -->
  default.

[default, pattern, x_1_, x_0_, Ret_type, __var_b, __var_a]
  match__VInductive __var_a __var_b Ret_type (VInductive __var_a __var_b 
    x_0_ x_1_) pattern default
  -->
  pattern x_0_ x_1_.

def call_by_value_variant_fix_point__t :
  __var_a:cc.uT ->
  __var_b:cc.uT ->
  R:cc.uT ->
  ((cc.eT (variant_fix_point__t __var_a __var_b)) -> cc.eT R) ->
  (cc.eT (variant_fix_point__t __var_a __var_b)) -> cc.eT R.

[x_0_, f, R, __var_b, __var_a]
  dk_builtins.call_by_value (variant_fix_point__t __var_a __var_b) R f 
    (VBase _ _ x_0_)
  -->
  f (VBase __var_a __var_b x_0_).

[x_1_, x_0_, f, R, __var_b, __var_a]
  dk_builtins.call_by_value (variant_fix_point__t __var_a __var_b) R f 
    (VInductive _ _ x_0_ x_1_)
  -->
  f (VInductive __var_a __var_b x_0_ x_1_).

Linear_fix_point_by_variants__me_as_species : A_T:cc.uT -> B_T:cc.uT -> Type.

Linear_fix_point_by_variants__mk_record :
  A_T:cc.uT ->
  B_T:cc.uT ->
  Linear_fix_point_by_variants__rf_T:cc.uT ->
  Linear_fix_point_by_variants__rf_base:((cc.eT A_T) ->
                                         cc.eT 
                                           Linear_fix_point_by_variants__rf_T) ->
  Linear_fix_point_by_variants__rf_base_case:((cc.eT 
                                                 Linear_fix_point_by_variants__rf_T) ->
                                              cc.eT basics.bool__t) ->
  Linear_fix_point_by_variants__rf_inductive:((cc.eT B_T) ->
                                              (cc.eT 
                                                 Linear_fix_point_by_variants__rf_T) ->
                                              cc.eT 
                                                Linear_fix_point_by_variants__rf_T) ->
  Linear_fix_point_by_variants__rf_inductive_case:((cc.eT 
                                                      Linear_fix_point_by_variants__rf_T) ->
                                                   cc.eT basics.bool__t) ->
  Linear_fix_point_by_variants__rf_parse:((cc.eT basics.string__t) ->
                                          cc.eT 
                                            Linear_fix_point_by_variants__rf_T) ->
  Linear_fix_point_by_variants__rf_print:((cc.eT 
                                             Linear_fix_point_by_variants__rf_T) ->
                                          cc.eT basics.string__t) ->
  Linear_fix_point_by_variants__rf_base_has_case:(dk_logic.eP 
                                                    (dk_logic.forall A_T 
                                                       (x:(cc.eT A_T) =>
                                                        dk_logic.ebP 
                                                          (Linear_fix_point_by_variants__rf_base_case 
                                                             (Linear_fix_point_by_variants__rf_base 
                                                                x))))) ->
  Linear_fix_point_by_variants__rf_case_complete:(dk_logic.eP 
                                                    (dk_logic.forall 
                                                       Linear_fix_point_by_variants__rf_T 
                                                       (x:
                                                        (cc.eT 
                                                           Linear_fix_point_by_variants__rf_T) =>
                                                        dk_logic.or 
                                                          (dk_logic.ebP 
                                                             (Linear_fix_point_by_variants__rf_base_case 
                                                                x)) 
                                                          (dk_logic.ebP 
                                                             (Linear_fix_point_by_variants__rf_inductive_case 
                                                                x))))) ->
  Linear_fix_point_by_variants__rf_case_exclusive:(dk_logic.eP 
                                                     (dk_logic.forall 
                                                        Linear_fix_point_by_variants__rf_T 
                                                        (x:
                                                         (cc.eT 
                                                            Linear_fix_point_by_variants__rf_T) =>
                                                         dk_logic.not 
                                                           (dk_logic.and 
                                                              (dk_logic.ebP 
                                                                 (Linear_fix_point_by_variants__rf_base_case 
                                                                    x)) 
                                                              (dk_logic.ebP 
                                                                 (Linear_fix_point_by_variants__rf_inductive_case 
                                                                    x)))))) ->
  Linear_fix_point_by_variants__rf_inductive_has_case:(dk_logic.eP 
                                                         (dk_logic.forall 
                                                            B_T 
                                                            (x:(cc.eT B_T) =>
                                                             dk_logic.forall 
                                                               Linear_fix_point_by_variants__rf_T 
                                                               (y:
                                                                (cc.eT 
                                                                   Linear_fix_point_by_variants__rf_T) =>
                                                                dk_logic.ebP 
                                                                  (Linear_fix_point_by_variants__rf_inductive_case 
                                                                    (Linear_fix_point_by_variants__rf_inductive 
                                                                    x y)))))) ->
  Linear_fix_point_by_variants__rf_case_equiv:(dk_logic.eP 
                                                 (dk_logic.forall 
                                                    Linear_fix_point_by_variants__rf_T 
                                                    (x:
                                                     (cc.eT 
                                                        Linear_fix_point_by_variants__rf_T) =>
                                                     dk_logic.eqv 
                                                       (dk_logic.ebP 
                                                          (Linear_fix_point_by_variants__rf_base_case 
                                                             x)) 
                                                       (dk_logic.not 
                                                          (dk_logic.ebP 
                                                             (Linear_fix_point_by_variants__rf_inductive_case 
                                                                x)))))) ->
  Linear_fix_point_by_variants__me_as_species A_T B_T.

def proj_Linear_fix_point_by_variants__rf_T :
  A_T:cc.uT ->
  B_T:cc.uT ->
  record:(Linear_fix_point_by_variants__me_as_species A_T B_T) -> cc.uT.

[Linear_fix_point_by_variants__rf_T]
  proj_Linear_fix_point_by_variants__rf_T _ _ 
    (Linear_fix_point_by_variants__mk_record _ _ 
    Linear_fix_point_by_variants__rf_T _ _ _ _ _ _ _ _ _ _ _)
  -->
  Linear_fix_point_by_variants__rf_T.

def proj_Linear_fix_point_by_variants__rf_base :
  A_T:cc.uT ->
  B_T:cc.uT ->
  record:(Linear_fix_point_by_variants__me_as_species A_T B_T) ->
  (cc.eT A_T) ->
  cc.eT (proj_Linear_fix_point_by_variants__rf_T A_T B_T record).

[Linear_fix_point_by_variants__rf_base]
  proj_Linear_fix_point_by_variants__rf_base _ _ 
    (Linear_fix_point_by_variants__mk_record _ _ _ 
    Linear_fix_point_by_variants__rf_base _ _ _ _ _ _ _ _ _ _)
  -->
  Linear_fix_point_by_variants__rf_base.

def proj_Linear_fix_point_by_variants__rf_base_case :
  A_T:cc.uT ->
  B_T:cc.uT ->
  record:(Linear_fix_point_by_variants__me_as_species A_T B_T) ->
  (cc.eT (proj_Linear_fix_point_by_variants__rf_T A_T B_T record)) ->
  cc.eT basics.bool__t.

[Linear_fix_point_by_variants__rf_base_case]
  proj_Linear_fix_point_by_variants__rf_base_case _ _ 
    (Linear_fix_point_by_variants__mk_record _ _ _ _ 
    Linear_fix_point_by_variants__rf_base_case _ _ _ _ _ _ _ _ _)
  -->
  Linear_fix_point_by_variants__rf_base_case.

def proj_Linear_fix_point_by_variants__rf_inductive :
  A_T:cc.uT ->
  B_T:cc.uT ->
  record:(Linear_fix_point_by_variants__me_as_species A_T B_T) ->
  (cc.eT B_T) ->
  (cc.eT (proj_Linear_fix_point_by_variants__rf_T A_T B_T record)) ->
  cc.eT (proj_Linear_fix_point_by_variants__rf_T A_T B_T record).

[Linear_fix_point_by_variants__rf_inductive]
  proj_Linear_fix_point_by_variants__rf_inductive _ _ 
    (Linear_fix_point_by_variants__mk_record _ _ _ _ _ 
    Linear_fix_point_by_variants__rf_inductive _ _ _ _ _ _ _ _)
  -->
  Linear_fix_point_by_variants__rf_inductive.

def proj_Linear_fix_point_by_variants__rf_inductive_case :
  A_T:cc.uT ->
  B_T:cc.uT ->
  record:(Linear_fix_point_by_variants__me_as_species A_T B_T) ->
  (cc.eT (proj_Linear_fix_point_by_variants__rf_T A_T B_T record)) ->
  cc.eT basics.bool__t.

[Linear_fix_point_by_variants__rf_inductive_case]
  proj_Linear_fix_point_by_variants__rf_inductive_case _ _ 
    (Linear_fix_point_by_variants__mk_record _ _ _ _ _ _ 
    Linear_fix_point_by_variants__rf_inductive_case _ _ _ _ _ _ _)
  -->
  Linear_fix_point_by_variants__rf_inductive_case.

def proj_Linear_fix_point_by_variants__rf_parse :
  A_T:cc.uT ->
  B_T:cc.uT ->
  record:(Linear_fix_point_by_variants__me_as_species A_T B_T) ->
  (cc.eT basics.string__t) ->
  cc.eT (proj_Linear_fix_point_by_variants__rf_T A_T B_T record).

[Linear_fix_point_by_variants__rf_parse]
  proj_Linear_fix_point_by_variants__rf_parse _ _ 
    (Linear_fix_point_by_variants__mk_record _ _ _ _ _ _ _ 
    Linear_fix_point_by_variants__rf_parse _ _ _ _ _ _)
  -->
  Linear_fix_point_by_variants__rf_parse.

def proj_Linear_fix_point_by_variants__rf_print :
  A_T:cc.uT ->
  B_T:cc.uT ->
  record:(Linear_fix_point_by_variants__me_as_species A_T B_T) ->
  (cc.eT (proj_Linear_fix_point_by_variants__rf_T A_T B_T record)) ->
  cc.eT basics.string__t.

[Linear_fix_point_by_variants__rf_print]
  proj_Linear_fix_point_by_variants__rf_print _ _ 
    (Linear_fix_point_by_variants__mk_record _ _ _ _ _ _ _ _ 
    Linear_fix_point_by_variants__rf_print _ _ _ _ _)
  -->
  Linear_fix_point_by_variants__rf_print.

def proj_Linear_fix_point_by_variants__rf_base_has_case :
  A_T:cc.uT ->
  B_T:cc.uT ->
  record:(Linear_fix_point_by_variants__me_as_species A_T B_T) ->
  dk_logic.eP 
    (dk_logic.forall A_T 
       (x:(cc.eT A_T) =>
        dk_logic.ebP 
          (proj_Linear_fix_point_by_variants__rf_base_case A_T B_T record 
             (proj_Linear_fix_point_by_variants__rf_base A_T B_T record x)))).

[Linear_fix_point_by_variants__rf_base_has_case]
  proj_Linear_fix_point_by_variants__rf_base_has_case _ _ 
    (Linear_fix_point_by_variants__mk_record _ _ _ _ _ _ _ _ _ 
    Linear_fix_point_by_variants__rf_base_has_case _ _ _ _)
  -->
  Linear_fix_point_by_variants__rf_base_has_case.

def proj_Linear_fix_point_by_variants__rf_case_complete :
  A_T:cc.uT ->
  B_T:cc.uT ->
  record:(Linear_fix_point_by_variants__me_as_species A_T B_T) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Linear_fix_point_by_variants__rf_T A_T B_T record) 
       (x:(cc.eT (proj_Linear_fix_point_by_variants__rf_T A_T B_T record)) =>
        dk_logic.or 
          (dk_logic.ebP 
             (proj_Linear_fix_point_by_variants__rf_base_case A_T B_T record 
                x)) 
          (dk_logic.ebP 
             (proj_Linear_fix_point_by_variants__rf_inductive_case A_T B_T 
                record x)))).

[Linear_fix_point_by_variants__rf_case_complete]
  proj_Linear_fix_point_by_variants__rf_case_complete _ _ 
    (Linear_fix_point_by_variants__mk_record _ _ _ _ _ _ _ _ _ _ 
    Linear_fix_point_by_variants__rf_case_complete _ _ _)
  -->
  Linear_fix_point_by_variants__rf_case_complete.

def proj_Linear_fix_point_by_variants__rf_case_exclusive :
  A_T:cc.uT ->
  B_T:cc.uT ->
  record:(Linear_fix_point_by_variants__me_as_species A_T B_T) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Linear_fix_point_by_variants__rf_T A_T B_T record) 
       (x:(cc.eT (proj_Linear_fix_point_by_variants__rf_T A_T B_T record)) =>
        dk_logic.not 
          (dk_logic.and 
             (dk_logic.ebP 
                (proj_Linear_fix_point_by_variants__rf_base_case A_T B_T 
                   record x)) 
             (dk_logic.ebP 
                (proj_Linear_fix_point_by_variants__rf_inductive_case A_T 
                   B_T record x))))).

[Linear_fix_point_by_variants__rf_case_exclusive]
  proj_Linear_fix_point_by_variants__rf_case_exclusive _ _ 
    (Linear_fix_point_by_variants__mk_record _ _ _ _ _ _ _ _ _ _ _ 
    Linear_fix_point_by_variants__rf_case_exclusive _ _)
  -->
  Linear_fix_point_by_variants__rf_case_exclusive.

def proj_Linear_fix_point_by_variants__rf_inductive_has_case :
  A_T:cc.uT ->
  B_T:cc.uT ->
  record:(Linear_fix_point_by_variants__me_as_species A_T B_T) ->
  dk_logic.eP 
    (dk_logic.forall B_T 
       (x:(cc.eT B_T) =>
        dk_logic.forall 
          (proj_Linear_fix_point_by_variants__rf_T A_T B_T record) 
          (y:
           (cc.eT (proj_Linear_fix_point_by_variants__rf_T A_T B_T record)) =>
           dk_logic.ebP 
             (proj_Linear_fix_point_by_variants__rf_inductive_case A_T B_T 
                record 
                (proj_Linear_fix_point_by_variants__rf_inductive A_T B_T 
                   record x y))))).

[Linear_fix_point_by_variants__rf_inductive_has_case]
  proj_Linear_fix_point_by_variants__rf_inductive_has_case _ _ 
    (Linear_fix_point_by_variants__mk_record _ _ _ _ _ _ _ _ _ _ _ _ 
    Linear_fix_point_by_variants__rf_inductive_has_case _)
  -->
  Linear_fix_point_by_variants__rf_inductive_has_case.

def proj_Linear_fix_point_by_variants__rf_case_equiv :
  A_T:cc.uT ->
  B_T:cc.uT ->
  record:(Linear_fix_point_by_variants__me_as_species A_T B_T) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Linear_fix_point_by_variants__rf_T A_T B_T record) 
       (x:(cc.eT (proj_Linear_fix_point_by_variants__rf_T A_T B_T record)) =>
        dk_logic.eqv 
          (dk_logic.ebP 
             (proj_Linear_fix_point_by_variants__rf_base_case A_T B_T record 
                x)) 
          (dk_logic.not 
             (dk_logic.ebP 
                (proj_Linear_fix_point_by_variants__rf_inductive_case A_T 
                   B_T record x))))).

[Linear_fix_point_by_variants__rf_case_equiv]
  proj_Linear_fix_point_by_variants__rf_case_equiv _ _ 
    (Linear_fix_point_by_variants__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Linear_fix_point_by_variants__rf_case_equiv)
  -->
  Linear_fix_point_by_variants__rf_case_equiv.

def Linear_fix_point_by_variants__base :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  t:(cc.eT _p_A_T) -> cc.eT (variant_fix_point__t _p_A_T _p_B_T)
  :=
  _p_A_T:cc.uT => _p_B_T:cc.uT => t:(cc.eT _p_A_T) => VBase _p_A_T _p_B_T t.

def Linear_fix_point_by_variants__base_case :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  t:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) -> cc.eT basics.bool__t
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  t:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) =>
  match__VBase _p_A_T _p_B_T basics.bool__t t 
    (pattern_var_0_:(cc.eT _p_A_T) =>
     (_t:(cc.eT _p_A_T) => dk_bool.true) pattern_var_0_) 
    (match__VInductive _p_A_T _p_B_T basics.bool__t t 
       (pattern_var_0_:(cc.eT _p_B_T) =>
        pattern_var_1_:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) =>
        (_t_1:(cc.eT _p_B_T) =>
         (_t_2:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) => dk_bool.false) 
           pattern_var_1_) pattern_var_0_) (dk_fail.fail basics.bool__t)).

def Linear_fix_point_by_variants__inductive :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  t_1:(cc.eT _p_B_T) ->
  t_2:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) ->
  cc.eT (variant_fix_point__t _p_A_T _p_B_T)
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  t_1:(cc.eT _p_B_T) =>
  t_2:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) =>
  VInductive _p_A_T _p_B_T t_1 t_2.

def Linear_fix_point_by_variants__inductive_case :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  t:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) -> cc.eT basics.bool__t
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  t:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) =>
  match__VBase _p_A_T _p_B_T basics.bool__t t 
    (pattern_var_0_:(cc.eT _p_A_T) =>
     (_t:(cc.eT _p_A_T) => dk_bool.false) pattern_var_0_) 
    (match__VInductive _p_A_T _p_B_T basics.bool__t t 
       (pattern_var_0_:(cc.eT _p_B_T) =>
        pattern_var_1_:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) =>
        (_t_1:(cc.eT _p_B_T) =>
         (_t_2:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) => dk_bool.true) 
           pattern_var_1_) pattern_var_0_) (dk_fail.fail basics.bool__t)).

def Linear_fix_point_by_variants__base_has_case :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  dk_logic.eP 
    (dk_logic.forall _p_A_T 
       (x:(cc.eT _p_A_T) =>
        dk_logic.ebP 
          (Linear_fix_point_by_variants__base_case _p_A_T _p_B_T 
             (Linear_fix_point_by_variants__base _p_A_T _p_B_T x))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  dk_builtins.magic_prove 
    (dk_logic.forall _p_A_T 
       (x:(cc.eT _p_A_T) =>
        dk_logic.ebP 
          (Linear_fix_point_by_variants__base_case _p_A_T _p_B_T 
             (Linear_fix_point_by_variants__base _p_A_T _p_B_T x)))).

def Linear_fix_point_by_variants__case_complete :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  dk_logic.eP 
    (dk_logic.forall (variant_fix_point__t _p_A_T _p_B_T) 
       (x:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) =>
        dk_logic.or 
          (dk_logic.ebP 
             (Linear_fix_point_by_variants__base_case _p_A_T _p_B_T x)) 
          (dk_logic.ebP 
             (Linear_fix_point_by_variants__inductive_case _p_A_T _p_B_T x))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  dk_builtins.magic_prove 
    (dk_logic.forall (variant_fix_point__t _p_A_T _p_B_T) 
       (x:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) =>
        dk_logic.or 
          (dk_logic.ebP 
             (Linear_fix_point_by_variants__base_case _p_A_T _p_B_T x)) 
          (dk_logic.ebP 
             (Linear_fix_point_by_variants__inductive_case _p_A_T _p_B_T x)))).

def Linear_fix_point_by_variants__case_exclusive :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  dk_logic.eP 
    (dk_logic.forall (variant_fix_point__t _p_A_T _p_B_T) 
       (x:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) =>
        dk_logic.not 
          (dk_logic.and 
             (dk_logic.ebP 
                (Linear_fix_point_by_variants__base_case _p_A_T _p_B_T x)) 
             (dk_logic.ebP 
                (Linear_fix_point_by_variants__inductive_case _p_A_T _p_B_T x)))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  dk_builtins.magic_prove 
    (dk_logic.forall (variant_fix_point__t _p_A_T _p_B_T) 
       (x:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) =>
        dk_logic.not 
          (dk_logic.and 
             (dk_logic.ebP 
                (Linear_fix_point_by_variants__base_case _p_A_T _p_B_T x)) 
             (dk_logic.ebP 
                (Linear_fix_point_by_variants__inductive_case _p_A_T _p_B_T x))))).

def Linear_fix_point_by_variants__inductive_has_case :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  dk_logic.eP 
    (dk_logic.forall _p_B_T 
       (x:(cc.eT _p_B_T) =>
        dk_logic.forall (variant_fix_point__t _p_A_T _p_B_T) 
          (y:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) =>
           dk_logic.ebP 
             (Linear_fix_point_by_variants__inductive_case _p_A_T _p_B_T 
                (Linear_fix_point_by_variants__inductive _p_A_T _p_B_T x y)))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  dk_builtins.magic_prove 
    (dk_logic.forall _p_B_T 
       (x:(cc.eT _p_B_T) =>
        dk_logic.forall (variant_fix_point__t _p_A_T _p_B_T) 
          (y:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) =>
           dk_logic.ebP 
             (Linear_fix_point_by_variants__inductive_case _p_A_T _p_B_T 
                (Linear_fix_point_by_variants__inductive _p_A_T _p_B_T x y))))).

def Linear_fix_point_by_variants__collection_create
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  Linear_fix_point_by_variants__mk_record _p_A_T _p_B_T 
    (variant_fix_point__t _p_A_T _p_B_T) 
    (Linear_fix_point_by_variants__base _p_A_T _p_B_T) 
    (Linear_fix_point_by_variants__base_case _p_A_T _p_B_T) 
    (Linear_fix_point_by_variants__inductive _p_A_T _p_B_T) 
    (Linear_fix_point_by_variants__inductive_case _p_A_T _p_B_T) 
    (basics.Basic_object__parse (variant_fix_point__t _p_A_T _p_B_T)) 
    (basics.Basic_object__print (variant_fix_point__t _p_A_T _p_B_T)) 
    (Linear_fix_point_by_variants__base_has_case _p_A_T _p_B_T) 
    (Linear_fix_point_by_variants__case_complete _p_A_T _p_B_T) 
    (Linear_fix_point_by_variants__case_exclusive _p_A_T _p_B_T) 
    (Linear_fix_point_by_variants__inductive_has_case _p_A_T _p_B_T) 
    (Linear_fix_point__case_equiv (variant_fix_point__t _p_A_T _p_B_T) 
       (Linear_fix_point_by_variants__base_case _p_A_T _p_B_T) 
       (Linear_fix_point_by_variants__inductive_case _p_A_T _p_B_T) 
       (Linear_fix_point_by_variants__case_complete _p_A_T _p_B_T) 
       (Linear_fix_point_by_variants__case_exclusive _p_A_T _p_B_T)).

def Linear_fix_set_by_variants__base_term :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_element:(cc.eT _p_A_T) ->
  t:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) -> cc.eT _p_A_T
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_element:(cc.eT _p_A_T) =>
  t:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) =>
  match__VBase _p_A_T _p_B_T _p_A_T t 
    (pattern_var_0_:(cc.eT _p_A_T) =>
     (t0:(cc.eT _p_A_T) => t0) pattern_var_0_) 
    (match__VInductive _p_A_T _p_B_T _p_A_T t 
       (pattern_var_0_:(cc.eT _p_B_T) =>
        pattern_var_1_:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) =>
        (_t_1:(cc.eT _p_B_T) =>
         (_t_2:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) => _p_A_element) 
           pattern_var_1_) pattern_var_0_) (dk_fail.fail _p_A_T)).

def Linear_fix_set_by_variants__inductive_first_term :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_B_element:(cc.eT _p_B_T) ->
  t:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) -> cc.eT _p_B_T
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_B_element:(cc.eT _p_B_T) =>
  t:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) =>
  match__VBase _p_A_T _p_B_T _p_B_T t 
    (pattern_var_0_:(cc.eT _p_A_T) =>
     (_t:(cc.eT _p_A_T) => _p_B_element) pattern_var_0_) 
    (match__VInductive _p_A_T _p_B_T _p_B_T t 
       (pattern_var_0_:(cc.eT _p_B_T) =>
        pattern_var_1_:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) =>
        (t0:(cc.eT _p_B_T) =>
         (_t_2:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) => t0) 
           pattern_var_1_) pattern_var_0_) (dk_fail.fail _p_B_T)).

def Linear_fix_set_by_variants__inductive_second_term :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  abst_element:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) ->
  t:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) ->
  cc.eT (variant_fix_point__t _p_A_T _p_B_T)
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  abst_element:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) =>
  t:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) =>
  match__VBase _p_A_T _p_B_T (variant_fix_point__t _p_A_T _p_B_T) t 
    (pattern_var_0_:(cc.eT _p_A_T) =>
     (_t:(cc.eT _p_A_T) => abst_element) pattern_var_0_) 
    (match__VInductive _p_A_T _p_B_T (variant_fix_point__t _p_A_T _p_B_T) t 
       (pattern_var_0_:(cc.eT _p_B_T) =>
        pattern_var_1_:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) =>
        (_t_1:(cc.eT _p_B_T) =>
         (t0:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) => t0) 
           pattern_var_1_) pattern_var_0_) 
       (dk_fail.fail (variant_fix_point__t _p_A_T _p_B_T))).

def Linear_fix_set_by_variants__inductive_scheme :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  abst_element:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) ->
  dk_logic.eP 
    (dk_logic.forall 
       (cc.Arrow (variant_fix_point__t _p_A_T _p_B_T) dk_builtins.prop) 
       (p:((cc.eT (variant_fix_point__t _p_A_T _p_B_T)) -> dk_logic.Prop) =>
        Linear_fixed_set__inductive_property 
          (variant_fix_point__t _p_A_T _p_B_T) 
          (Linear_fix_point_by_variants__base_case _p_A_T _p_B_T) 
          (Linear_fix_point_by_variants__inductive_case _p_A_T _p_B_T) 
          (Linear_fix_set_by_variants__inductive_second_term _p_A_T _p_B_T 
             abst_element) p))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  abst_element:(cc.eT (variant_fix_point__t _p_A_T _p_B_T)) =>
  dk_builtins.magic_prove 
    (dk_logic.forall 
       (cc.Arrow (variant_fix_point__t _p_A_T _p_B_T) dk_builtins.prop) 
       (p:((cc.eT (variant_fix_point__t _p_A_T _p_B_T)) -> dk_logic.Prop) =>
        Linear_fixed_set__inductive_property 
          (variant_fix_point__t _p_A_T _p_B_T) 
          (Linear_fix_point_by_variants__base_case _p_A_T _p_B_T) 
          (Linear_fix_point_by_variants__inductive_case _p_A_T _p_B_T) 
          (Linear_fix_set_by_variants__inductive_second_term _p_A_T _p_B_T 
             abst_element) p)).

def Linear_fix_set_by_variants__inductive_reflexivity :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  abst_T:cc.uT ->
  abst_base_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_inductive_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_inductive_second_term:((cc.eT abst_T) -> cc.eT abst_T) ->
  abst_reflexive_prop:((cc.eT abst_T) -> dk_logic.Prop) ->
  abst_inductive_scheme:(dk_logic.eP 
                           (dk_logic.forall 
                              (cc.Arrow abst_T dk_builtins.prop) 
                              (p:((cc.eT abst_T) -> dk_logic.Prop) =>
                               Linear_fixed_set__inductive_property abst_T 
                                 abst_base_case abst_inductive_case 
                                 abst_inductive_second_term p))) ->
  dk_logic.eP 
    (Linear_fixed_set__inductive_property abst_T abst_base_case 
       abst_inductive_case abst_inductive_second_term abst_reflexive_prop)
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  abst_T:cc.uT =>
  abst_base_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_inductive_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_inductive_second_term:((cc.eT abst_T) -> cc.eT abst_T) =>
  abst_reflexive_prop:((cc.eT abst_T) -> dk_logic.Prop) =>
  abst_inductive_scheme:
  (dk_logic.eP 
     (dk_logic.forall (cc.Arrow abst_T dk_builtins.prop) 
        (p:((cc.eT abst_T) -> dk_logic.Prop) =>
         Linear_fixed_set__inductive_property abst_T abst_base_case 
           abst_inductive_case abst_inductive_second_term p))) =>
  dk_builtins.magic_prove 
    (Linear_fixed_set__inductive_property abst_T abst_base_case 
       abst_inductive_case abst_inductive_second_term abst_reflexive_prop).

def Linear_fix_set_by_variants__inductive_symmetry :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  abst_T:cc.uT ->
  abst_base_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_inductive_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_inductive_second_term:((cc.eT abst_T) -> cc.eT abst_T) ->
  abst_symmetry_prop:((cc.eT abst_T) -> dk_logic.Prop) ->
  abst_inductive_scheme:(dk_logic.eP 
                           (dk_logic.forall 
                              (cc.Arrow abst_T dk_builtins.prop) 
                              (p:((cc.eT abst_T) -> dk_logic.Prop) =>
                               Linear_fixed_set__inductive_property abst_T 
                                 abst_base_case abst_inductive_case 
                                 abst_inductive_second_term p))) ->
  dk_logic.eP 
    (Linear_fixed_set__inductive_property abst_T abst_base_case 
       abst_inductive_case abst_inductive_second_term abst_symmetry_prop)
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  abst_T:cc.uT =>
  abst_base_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_inductive_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_inductive_second_term:((cc.eT abst_T) -> cc.eT abst_T) =>
  abst_symmetry_prop:((cc.eT abst_T) -> dk_logic.Prop) =>
  abst_inductive_scheme:
  (dk_logic.eP 
     (dk_logic.forall (cc.Arrow abst_T dk_builtins.prop) 
        (p:((cc.eT abst_T) -> dk_logic.Prop) =>
         Linear_fixed_set__inductive_property abst_T abst_base_case 
           abst_inductive_case abst_inductive_second_term p))) =>
  dk_builtins.magic_prove 
    (Linear_fixed_set__inductive_property abst_T abst_base_case 
       abst_inductive_case abst_inductive_second_term abst_symmetry_prop).

def Linear_fix_set_by_variants__inductive_transitivity :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  abst_T:cc.uT ->
  abst_base_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_inductive_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_inductive_second_term:((cc.eT abst_T) -> cc.eT abst_T) ->
  abst_transitivity_prop:((cc.eT abst_T) -> dk_logic.Prop) ->
  abst_inductive_scheme:(dk_logic.eP 
                           (dk_logic.forall 
                              (cc.Arrow abst_T dk_builtins.prop) 
                              (p:((cc.eT abst_T) -> dk_logic.Prop) =>
                               Linear_fixed_set__inductive_property abst_T 
                                 abst_base_case abst_inductive_case 
                                 abst_inductive_second_term p))) ->
  dk_logic.eP 
    (Linear_fixed_set__inductive_property abst_T abst_base_case 
       abst_inductive_case abst_inductive_second_term abst_transitivity_prop)
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  abst_T:cc.uT =>
  abst_base_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_inductive_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_inductive_second_term:((cc.eT abst_T) -> cc.eT abst_T) =>
  abst_transitivity_prop:((cc.eT abst_T) -> dk_logic.Prop) =>
  abst_inductive_scheme:
  (dk_logic.eP 
     (dk_logic.forall (cc.Arrow abst_T dk_builtins.prop) 
        (p:((cc.eT abst_T) -> dk_logic.Prop) =>
         Linear_fixed_set__inductive_property abst_T abst_base_case 
           abst_inductive_case abst_inductive_second_term p))) =>
  dk_builtins.magic_prove 
    (Linear_fixed_set__inductive_property abst_T abst_base_case 
       abst_inductive_case abst_inductive_second_term abst_transitivity_prop).

