#NAME diag.

Imp_diag_2oo3__me_as_species :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) -> Type.

Imp_diag_2oo3__mk_record :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  Imp_diag_2oo3__rf_T:cc.uT ->
  Imp_diag_2oo3__rf_constr:((cc.eT C_T) ->
                            (cc.eT E_T) -> cc.eT Imp_diag_2oo3__rf_T) ->
  Imp_diag_2oo3__rf_equal:((cc.eT Imp_diag_2oo3__rf_T) ->
                           (cc.eT Imp_diag_2oo3__rf_T) ->
                           cc.eT basics.bool__t) ->
  Imp_diag_2oo3__rf_parse:((cc.eT basics.string__t) ->
                           cc.eT Imp_diag_2oo3__rf_T) ->
  Imp_diag_2oo3__rf_print:((cc.eT Imp_diag_2oo3__rf_T) ->
                           cc.eT basics.string__t) ->
  Imp_diag_2oo3__rf_prj_a:((cc.eT Imp_diag_2oo3__rf_T) -> cc.eT C_T) ->
  Imp_diag_2oo3__rf_prj_b:((cc.eT Imp_diag_2oo3__rf_T) -> cc.eT E_T) ->
  Imp_diag_2oo3__rf_element:(cc.eT Imp_diag_2oo3__rf_T) ->
  Imp_diag_2oo3__rf_different:((cc.eT Imp_diag_2oo3__rf_T) ->
                               (cc.eT Imp_diag_2oo3__rf_T) ->
                               cc.eT basics.bool__t) ->
  Imp_diag_2oo3__rf_prj_a_is_first_of_pair:(dk_logic.eP 
                                              (dk_logic.forall C_T 
                                                 (n1:(cc.eT C_T) =>
                                                  dk_logic.forall E_T 
                                                    (n2:(cc.eT E_T) =>
                                                     dk_logic.ebP 
                                                       (_p_C_equal 
                                                          (Imp_diag_2oo3__rf_prj_a 
                                                             (Imp_diag_2oo3__rf_constr 
                                                                n1 n2)) n1))))) ->
  Imp_diag_2oo3__rf_def_equal:(dk_logic.eP 
                                 (dk_logic.forall Imp_diag_2oo3__rf_T 
                                    (p1:(cc.eT Imp_diag_2oo3__rf_T) =>
                                     dk_logic.forall Imp_diag_2oo3__rf_T 
                                       (p2:(cc.eT Imp_diag_2oo3__rf_T) =>
                                        dk_logic.eqv 
                                          (dk_logic.ebP 
                                             (Imp_diag_2oo3__rf_equal p1 p2)) 
                                          (dk_logic.and 
                                             (dk_logic.ebP 
                                                (_p_C_equal 
                                                   (Imp_diag_2oo3__rf_prj_a 
                                                      p1) 
                                                   (Imp_diag_2oo3__rf_prj_a 
                                                      p2))) 
                                             (dk_logic.ebP 
                                                (_p_E_equal 
                                                   (Imp_diag_2oo3__rf_prj_b 
                                                      p1) 
                                                   (Imp_diag_2oo3__rf_prj_b 
                                                      p2)))))))) ->
  Imp_diag_2oo3__rf_prj_b_is_snd_of_pair:(dk_logic.eP 
                                            (dk_logic.forall C_T 
                                               (n1:(cc.eT C_T) =>
                                                dk_logic.forall E_T 
                                                  (n2:(cc.eT E_T) =>
                                                   dk_logic.ebP 
                                                     (_p_E_equal 
                                                        (Imp_diag_2oo3__rf_prj_b 
                                                           (Imp_diag_2oo3__rf_constr 
                                                              n1 n2)) n2))))) ->
  Imp_diag_2oo3__rf_unicite_1:(dk_logic.eP 
                                 (dk_logic.forall Imp_diag_2oo3__rf_T 
                                    (a:(cc.eT Imp_diag_2oo3__rf_T) =>
                                     dk_logic.ebP 
                                       (Imp_diag_2oo3__rf_equal 
                                          (Imp_diag_2oo3__rf_constr 
                                             (Imp_diag_2oo3__rf_prj_a a) 
                                             (Imp_diag_2oo3__rf_prj_b a)) a)))) ->
  Imp_diag_2oo3__rf_unicite_2:(dk_logic.eP 
                                 (dk_logic.forall Imp_diag_2oo3__rf_T 
                                    (a:(cc.eT Imp_diag_2oo3__rf_T) =>
                                     dk_logic.ebP 
                                       (Imp_diag_2oo3__rf_equal a 
                                          (Imp_diag_2oo3__rf_constr 
                                             (Imp_diag_2oo3__rf_prj_a a) 
                                             (Imp_diag_2oo3__rf_prj_b a)))))) ->
  Imp_diag_2oo3__rf_valid:((cc.eT Imp_diag_2oo3__rf_T) ->
                           cc.eT basics.bool__t) ->
  Imp_diag_2oo3__rf_same_is_not_different:(dk_logic.eP 
                                             (dk_logic.forall 
                                                Imp_diag_2oo3__rf_T 
                                                (x:
                                                 (cc.eT Imp_diag_2oo3__rf_T) =>
                                                 dk_logic.forall 
                                                   Imp_diag_2oo3__rf_T 
                                                   (y:
                                                    (cc.eT 
                                                       Imp_diag_2oo3__rf_T) =>
                                                    dk_logic.eqv 
                                                      (dk_logic.ebP 
                                                         (Imp_diag_2oo3__rf_different 
                                                            x y)) 
                                                      (dk_logic.not 
                                                         (dk_logic.ebP 
                                                            (Imp_diag_2oo3__rf_equal 
                                                               x y))))))) ->
  Imp_diag_2oo3__rf_equal_transitive:(dk_logic.eP 
                                        (dk_logic.forall Imp_diag_2oo3__rf_T 
                                           (x:(cc.eT Imp_diag_2oo3__rf_T) =>
                                            dk_logic.forall 
                                              Imp_diag_2oo3__rf_T 
                                              (y:
                                               (cc.eT Imp_diag_2oo3__rf_T) =>
                                               dk_logic.forall 
                                                 Imp_diag_2oo3__rf_T 
                                                 (z:
                                                  (cc.eT Imp_diag_2oo3__rf_T) =>
                                                  dk_logic.imp 
                                                    (dk_logic.ebP 
                                                       (Imp_diag_2oo3__rf_equal 
                                                          x y)) 
                                                    (dk_logic.imp 
                                                       (dk_logic.ebP 
                                                          (Imp_diag_2oo3__rf_equal 
                                                             y z)) 
                                                       (dk_logic.ebP 
                                                          (Imp_diag_2oo3__rf_equal 
                                                             x z)))))))) ->
  Imp_diag_2oo3__rf_def_equal1:(dk_logic.eP 
                                  (dk_logic.forall C_T 
                                     (n1:(cc.eT C_T) =>
                                      dk_logic.forall C_T 
                                        (n3:(cc.eT C_T) =>
                                         dk_logic.forall E_T 
                                           (n2:(cc.eT E_T) =>
                                            dk_logic.forall E_T 
                                              (n4:(cc.eT E_T) =>
                                               dk_logic.eqv 
                                                 (dk_logic.ebP 
                                                    (Imp_diag_2oo3__rf_equal 
                                                       (Imp_diag_2oo3__rf_constr 
                                                          n1 n2) 
                                                       (Imp_diag_2oo3__rf_constr 
                                                          n3 n4))) 
                                                 (dk_logic.and 
                                                    (dk_logic.ebP 
                                                       (_p_C_equal n1 n3)) 
                                                    (dk_logic.ebP 
                                                       (_p_E_equal n2 n4))))))))) ->
  Imp_diag_2oo3__rf_no_match_is_invalid:(dk_logic.eP 
                                           (dk_logic.forall 
                                              Imp_diag_2oo3__rf_T 
                                              (x:
                                               (cc.eT Imp_diag_2oo3__rf_T) =>
                                               dk_logic.imp 
                                                 (dk_logic.ebP 
                                                    (_p_E_equal 
                                                       (Imp_diag_2oo3__rf_prj_b 
                                                          x) _p_E_no_match)) 
                                                 (dk_logic.not 
                                                    (dk_logic.ebP 
                                                       (Imp_diag_2oo3__rf_valid 
                                                          x)))))) ->
  Imp_diag_2oo3__rf_partial_match_is_valid:(dk_logic.eP 
                                              (dk_logic.forall 
                                                 Imp_diag_2oo3__rf_T 
                                                 (x:
                                                  (cc.eT Imp_diag_2oo3__rf_T) =>
                                                  dk_logic.imp 
                                                    (dk_logic.ebP 
                                                       (_p_E_equal 
                                                          (Imp_diag_2oo3__rf_prj_b 
                                                             x) 
                                                          _p_E_partial_match)) 
                                                    (dk_logic.ebP 
                                                       (Imp_diag_2oo3__rf_valid 
                                                          x))))) ->
  Imp_diag_2oo3__rf_perfect_match_is_valid:(dk_logic.eP 
                                              (dk_logic.forall 
                                                 Imp_diag_2oo3__rf_T 
                                                 (x:
                                                  (cc.eT Imp_diag_2oo3__rf_T) =>
                                                  dk_logic.imp 
                                                    (dk_logic.ebP 
                                                       (_p_E_equal 
                                                          (Imp_diag_2oo3__rf_prj_b 
                                                             x) 
                                                          _p_E_perfect_match)) 
                                                    (dk_logic.ebP 
                                                       (Imp_diag_2oo3__rf_valid 
                                                          x))))) ->
  Imp_diag_2oo3__rf_range_match_is_valid:(dk_logic.eP 
                                            (dk_logic.forall 
                                               Imp_diag_2oo3__rf_T 
                                               (x:
                                                (cc.eT Imp_diag_2oo3__rf_T) =>
                                                dk_logic.imp 
                                                  (dk_logic.ebP 
                                                     (_p_E_equal 
                                                        (Imp_diag_2oo3__rf_prj_b 
                                                           x) 
                                                        _p_E_range_match)) 
                                                  (dk_logic.ebP 
                                                     (Imp_diag_2oo3__rf_valid 
                                                        x))))) ->
  Imp_diag_2oo3__rf_equal_reflexive:(dk_logic.eP 
                                       (dk_logic.forall Imp_diag_2oo3__rf_T 
                                          (x:(cc.eT Imp_diag_2oo3__rf_T) =>
                                           dk_logic.ebP 
                                             (Imp_diag_2oo3__rf_equal x x)))) ->
  Imp_diag_2oo3__rf_equal_reflexive2:(dk_logic.eP 
                                        (dk_logic.forall C_T 
                                           (n1:(cc.eT C_T) =>
                                            dk_logic.forall E_T 
                                              (n2:(cc.eT E_T) =>
                                               dk_logic.ebP 
                                                 (Imp_diag_2oo3__rf_equal 
                                                    (Imp_diag_2oo3__rf_constr 
                                                       n1 n2) 
                                                    (Imp_diag_2oo3__rf_constr 
                                                       n1 n2)))))) ->
  Imp_diag_2oo3__rf_equal_symmetric2:(dk_logic.eP 
                                        (dk_logic.forall C_T 
                                           (n1:(cc.eT C_T) =>
                                            dk_logic.forall C_T 
                                              (n3:(cc.eT C_T) =>
                                               dk_logic.forall E_T 
                                                 (n2:(cc.eT E_T) =>
                                                  dk_logic.forall E_T 
                                                    (n4:(cc.eT E_T) =>
                                                     dk_logic.imp 
                                                       (dk_logic.ebP 
                                                          (Imp_diag_2oo3__rf_equal 
                                                             (Imp_diag_2oo3__rf_constr 
                                                                n1 n2) 
                                                             (Imp_diag_2oo3__rf_constr 
                                                                n3 n4))) 
                                                       (dk_logic.ebP 
                                                          (Imp_diag_2oo3__rf_equal 
                                                             (Imp_diag_2oo3__rf_constr 
                                                                n3 n4) 
                                                             (Imp_diag_2oo3__rf_constr 
                                                                n1 n2))))))))) ->
  Imp_diag_2oo3__rf_equal_transitive2:(dk_logic.eP 
                                         (dk_logic.forall C_T 
                                            (n1:(cc.eT C_T) =>
                                             dk_logic.forall C_T 
                                               (n3:(cc.eT C_T) =>
                                                dk_logic.forall C_T 
                                                  (n5:(cc.eT C_T) =>
                                                   dk_logic.forall E_T 
                                                     (n2:(cc.eT E_T) =>
                                                      dk_logic.forall E_T 
                                                        (n4:(cc.eT E_T) =>
                                                         dk_logic.forall E_T 
                                                           (n6:(cc.eT E_T) =>
                                                            dk_logic.imp 
                                                              (dk_logic.ebP 
                                                                 (Imp_diag_2oo3__rf_equal 
                                                                    (
                                                                    Imp_diag_2oo3__rf_constr 
                                                                    n1 n2) 
                                                                    (
                                                                    Imp_diag_2oo3__rf_constr 
                                                                    n3 n4))) 
                                                              (dk_logic.imp 
                                                                 (dk_logic.ebP 
                                                                    (
                                                                    Imp_diag_2oo3__rf_equal 
                                                                    (Imp_diag_2oo3__rf_constr 
                                                                    n3 n4) 
                                                                    (Imp_diag_2oo3__rf_constr 
                                                                    n5 n6))) 
                                                                 (dk_logic.ebP 
                                                                    (
                                                                    Imp_diag_2oo3__rf_equal 
                                                                    (Imp_diag_2oo3__rf_constr 
                                                                    n1 n2) 
                                                                    (Imp_diag_2oo3__rf_constr 
                                                                    n5 n6)))))))))))) ->
  Imp_diag_2oo3__rf_different_is_irreflexive:(dk_logic.eP 
                                                (dk_logic.forall 
                                                   Imp_diag_2oo3__rf_T 
                                                   (x:
                                                    (cc.eT 
                                                       Imp_diag_2oo3__rf_T) =>
                                                    dk_logic.not 
                                                      (dk_logic.ebP 
                                                         (Imp_diag_2oo3__rf_different 
                                                            x x))))) ->
  Imp_diag_2oo3__rf_equal_symmetric:(dk_logic.eP 
                                       (dk_logic.forall Imp_diag_2oo3__rf_T 
                                          (x:(cc.eT Imp_diag_2oo3__rf_T) =>
                                           dk_logic.forall 
                                             Imp_diag_2oo3__rf_T 
                                             (y:
                                              (cc.eT Imp_diag_2oo3__rf_T) =>
                                              dk_logic.imp 
                                                (dk_logic.ebP 
                                                   (Imp_diag_2oo3__rf_equal 
                                                      x y)) 
                                                (dk_logic.ebP 
                                                   (Imp_diag_2oo3__rf_equal 
                                                      y x)))))) ->
  Imp_diag_2oo3__rf_different_is_complete:(dk_logic.eP 
                                             (dk_logic.forall 
                                                Imp_diag_2oo3__rf_T 
                                                (x:
                                                 (cc.eT Imp_diag_2oo3__rf_T) =>
                                                 dk_logic.forall 
                                                   Imp_diag_2oo3__rf_T 
                                                   (y:
                                                    (cc.eT 
                                                       Imp_diag_2oo3__rf_T) =>
                                                    dk_logic.forall 
                                                      Imp_diag_2oo3__rf_T 
                                                      (z:
                                                       (cc.eT 
                                                          Imp_diag_2oo3__rf_T) =>
                                                       dk_logic.imp 
                                                         (dk_logic.ebP 
                                                            (Imp_diag_2oo3__rf_different 
                                                               x y)) 
                                                         (dk_logic.or 
                                                            (dk_logic.ebP 
                                                               (Imp_diag_2oo3__rf_different 
                                                                  x z)) 
                                                            (dk_logic.ebP 
                                                               (Imp_diag_2oo3__rf_different 
                                                                  y z)))))))) ->
  Imp_diag_2oo3__rf_different_is_symmetric:(dk_logic.eP 
                                              (dk_logic.forall 
                                                 Imp_diag_2oo3__rf_T 
                                                 (x:
                                                  (cc.eT Imp_diag_2oo3__rf_T) =>
                                                  dk_logic.forall 
                                                    Imp_diag_2oo3__rf_T 
                                                    (y:
                                                     (cc.eT 
                                                        Imp_diag_2oo3__rf_T) =>
                                                     dk_logic.imp 
                                                       (dk_logic.ebP 
                                                          (Imp_diag_2oo3__rf_different 
                                                             x y)) 
                                                       (dk_logic.ebP 
                                                          (Imp_diag_2oo3__rf_different 
                                                             y x)))))) ->
  Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
    _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal.

def proj_Imp_diag_2oo3__rf_T :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  cc.uT.

[Imp_diag_2oo3__rf_T]
  proj_Imp_diag_2oo3__rf_T _ _ _ _ _ _ _ _ (Imp_diag_2oo3__mk_record _ _ _ _ 
    _ _ _ _ Imp_diag_2oo3__rf_T _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _)
  -->
  Imp_diag_2oo3__rf_T.

def proj_Imp_diag_2oo3__rf_constr :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  (cc.eT C_T) ->
  (cc.eT E_T) ->
  cc.eT 
    (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
       _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal 
       record).

[Imp_diag_2oo3__rf_constr]
  proj_Imp_diag_2oo3__rf_constr _ _ _ _ _ _ _ _ (Imp_diag_2oo3__mk_record _ 
    _ _ _ _ _ _ _ _ Imp_diag_2oo3__rf_constr _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_diag_2oo3__rf_constr.

def proj_Imp_diag_2oo3__rf_equal :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  (cc.eT 
     (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
        _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal 
        record)) ->
  (cc.eT 
     (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
        _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal 
        record)) ->
  cc.eT basics.bool__t.

[Imp_diag_2oo3__rf_equal]
  proj_Imp_diag_2oo3__rf_equal _ _ _ _ _ _ _ _ (Imp_diag_2oo3__mk_record _ _ 
    _ _ _ _ _ _ _ _ Imp_diag_2oo3__rf_equal _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_diag_2oo3__rf_equal.

def proj_Imp_diag_2oo3__rf_parse :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  (cc.eT basics.string__t) ->
  cc.eT 
    (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
       _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal 
       record).

[Imp_diag_2oo3__rf_parse]
  proj_Imp_diag_2oo3__rf_parse _ _ _ _ _ _ _ _ (Imp_diag_2oo3__mk_record _ _ 
    _ _ _ _ _ _ _ _ _ Imp_diag_2oo3__rf_parse _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_diag_2oo3__rf_parse.

def proj_Imp_diag_2oo3__rf_print :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  (cc.eT 
     (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
        _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal 
        record)) ->
  cc.eT basics.string__t.

[Imp_diag_2oo3__rf_print]
  proj_Imp_diag_2oo3__rf_print _ _ _ _ _ _ _ _ (Imp_diag_2oo3__mk_record _ _ 
    _ _ _ _ _ _ _ _ _ _ Imp_diag_2oo3__rf_print _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_diag_2oo3__rf_print.

def proj_Imp_diag_2oo3__rf_prj_a :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  (cc.eT 
     (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
        _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal 
        record)) ->
  cc.eT C_T.

[Imp_diag_2oo3__rf_prj_a]
  proj_Imp_diag_2oo3__rf_prj_a _ _ _ _ _ _ _ _ (Imp_diag_2oo3__mk_record _ _ 
    _ _ _ _ _ _ _ _ _ _ _ Imp_diag_2oo3__rf_prj_a _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_diag_2oo3__rf_prj_a.

def proj_Imp_diag_2oo3__rf_prj_b :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  (cc.eT 
     (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
        _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal 
        record)) ->
  cc.eT E_T.

[Imp_diag_2oo3__rf_prj_b]
  proj_Imp_diag_2oo3__rf_prj_b _ _ _ _ _ _ _ _ (Imp_diag_2oo3__mk_record _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ Imp_diag_2oo3__rf_prj_b _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_diag_2oo3__rf_prj_b.

def proj_Imp_diag_2oo3__rf_element :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  cc.eT 
    (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
       _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal 
       record).

[Imp_diag_2oo3__rf_element]
  proj_Imp_diag_2oo3__rf_element _ _ _ _ _ _ _ _ (Imp_diag_2oo3__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ Imp_diag_2oo3__rf_element _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_diag_2oo3__rf_element.

def proj_Imp_diag_2oo3__rf_different :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  (cc.eT 
     (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
        _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal 
        record)) ->
  (cc.eT 
     (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
        _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal 
        record)) ->
  cc.eT basics.bool__t.

[Imp_diag_2oo3__rf_different]
  proj_Imp_diag_2oo3__rf_different _ _ _ _ _ _ _ _ 
    (Imp_diag_2oo3__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Imp_diag_2oo3__rf_different _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_diag_2oo3__rf_different.

def proj_Imp_diag_2oo3__rf_prj_a_is_first_of_pair :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  dk_logic.eP 
    (dk_logic.forall C_T 
       (n1:(cc.eT C_T) =>
        dk_logic.forall E_T 
          (n2:(cc.eT E_T) =>
           dk_logic.ebP 
             (_p_C_equal 
                (proj_Imp_diag_2oo3__rf_prj_a E_T C_T _p_E_equal 
                   _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                   _p_E_range_match _p_C_equal record 
                   (proj_Imp_diag_2oo3__rf_constr E_T C_T _p_E_equal 
                      _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                      _p_E_range_match _p_C_equal record n1 n2)) n1)))).

[Imp_diag_2oo3__rf_prj_a_is_first_of_pair]
  proj_Imp_diag_2oo3__rf_prj_a_is_first_of_pair _ _ _ _ _ _ _ _ 
    (Imp_diag_2oo3__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Imp_diag_2oo3__rf_prj_a_is_first_of_pair _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _)
  -->
  Imp_diag_2oo3__rf_prj_a_is_first_of_pair.

def proj_Imp_diag_2oo3__rf_def_equal :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
          _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal 
          record) 
       (p1:
        (cc.eT 
           (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
              _p_E_partial_match _p_E_perfect_match _p_E_range_match 
              _p_C_equal record)) =>
        dk_logic.forall 
          (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
             _p_E_partial_match _p_E_perfect_match _p_E_range_match 
             _p_C_equal record) 
          (p2:
           (cc.eT 
              (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
                 _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                 _p_C_equal record)) =>
           dk_logic.eqv 
             (dk_logic.ebP 
                (proj_Imp_diag_2oo3__rf_equal E_T C_T _p_E_equal 
                   _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                   _p_E_range_match _p_C_equal record p1 p2)) 
             (dk_logic.and 
                (dk_logic.ebP 
                   (_p_C_equal 
                      (proj_Imp_diag_2oo3__rf_prj_a E_T C_T _p_E_equal 
                         _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                         _p_E_range_match _p_C_equal record p1) 
                      (proj_Imp_diag_2oo3__rf_prj_a E_T C_T _p_E_equal 
                         _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                         _p_E_range_match _p_C_equal record p2))) 
                (dk_logic.ebP 
                   (_p_E_equal 
                      (proj_Imp_diag_2oo3__rf_prj_b E_T C_T _p_E_equal 
                         _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                         _p_E_range_match _p_C_equal record p1) 
                      (proj_Imp_diag_2oo3__rf_prj_b E_T C_T _p_E_equal 
                         _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                         _p_E_range_match _p_C_equal record p2))))))).

[Imp_diag_2oo3__rf_def_equal]
  proj_Imp_diag_2oo3__rf_def_equal _ _ _ _ _ _ _ _ 
    (Imp_diag_2oo3__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Imp_diag_2oo3__rf_def_equal _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_diag_2oo3__rf_def_equal.

def proj_Imp_diag_2oo3__rf_prj_b_is_snd_of_pair :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  dk_logic.eP 
    (dk_logic.forall C_T 
       (n1:(cc.eT C_T) =>
        dk_logic.forall E_T 
          (n2:(cc.eT E_T) =>
           dk_logic.ebP 
             (_p_E_equal 
                (proj_Imp_diag_2oo3__rf_prj_b E_T C_T _p_E_equal 
                   _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                   _p_E_range_match _p_C_equal record 
                   (proj_Imp_diag_2oo3__rf_constr E_T C_T _p_E_equal 
                      _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                      _p_E_range_match _p_C_equal record n1 n2)) n2)))).

[Imp_diag_2oo3__rf_prj_b_is_snd_of_pair]
  proj_Imp_diag_2oo3__rf_prj_b_is_snd_of_pair _ _ _ _ _ _ _ _ 
    (Imp_diag_2oo3__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Imp_diag_2oo3__rf_prj_b_is_snd_of_pair _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _)
  -->
  Imp_diag_2oo3__rf_prj_b_is_snd_of_pair.

def proj_Imp_diag_2oo3__rf_unicite_1 :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
          _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal 
          record) 
       (a:
        (cc.eT 
           (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
              _p_E_partial_match _p_E_perfect_match _p_E_range_match 
              _p_C_equal record)) =>
        dk_logic.ebP 
          (proj_Imp_diag_2oo3__rf_equal E_T C_T _p_E_equal _p_E_no_match 
             _p_E_partial_match _p_E_perfect_match _p_E_range_match 
             _p_C_equal record 
             (proj_Imp_diag_2oo3__rf_constr E_T C_T _p_E_equal _p_E_no_match 
                _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                _p_C_equal record 
                (proj_Imp_diag_2oo3__rf_prj_a E_T C_T _p_E_equal 
                   _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                   _p_E_range_match _p_C_equal record a) 
                (proj_Imp_diag_2oo3__rf_prj_b E_T C_T _p_E_equal 
                   _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                   _p_E_range_match _p_C_equal record a)) a))).

[Imp_diag_2oo3__rf_unicite_1]
  proj_Imp_diag_2oo3__rf_unicite_1 _ _ _ _ _ _ _ _ 
    (Imp_diag_2oo3__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Imp_diag_2oo3__rf_unicite_1 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_diag_2oo3__rf_unicite_1.

def proj_Imp_diag_2oo3__rf_unicite_2 :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
          _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal 
          record) 
       (a:
        (cc.eT 
           (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
              _p_E_partial_match _p_E_perfect_match _p_E_range_match 
              _p_C_equal record)) =>
        dk_logic.ebP 
          (proj_Imp_diag_2oo3__rf_equal E_T C_T _p_E_equal _p_E_no_match 
             _p_E_partial_match _p_E_perfect_match _p_E_range_match 
             _p_C_equal record a 
             (proj_Imp_diag_2oo3__rf_constr E_T C_T _p_E_equal _p_E_no_match 
                _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                _p_C_equal record 
                (proj_Imp_diag_2oo3__rf_prj_a E_T C_T _p_E_equal 
                   _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                   _p_E_range_match _p_C_equal record a) 
                (proj_Imp_diag_2oo3__rf_prj_b E_T C_T _p_E_equal 
                   _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                   _p_E_range_match _p_C_equal record a))))).

[Imp_diag_2oo3__rf_unicite_2]
  proj_Imp_diag_2oo3__rf_unicite_2 _ _ _ _ _ _ _ _ 
    (Imp_diag_2oo3__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Imp_diag_2oo3__rf_unicite_2 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_diag_2oo3__rf_unicite_2.

def proj_Imp_diag_2oo3__rf_valid :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  (cc.eT 
     (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
        _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal 
        record)) ->
  cc.eT basics.bool__t.

[Imp_diag_2oo3__rf_valid]
  proj_Imp_diag_2oo3__rf_valid _ _ _ _ _ _ _ _ (Imp_diag_2oo3__mk_record _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ Imp_diag_2oo3__rf_valid _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_diag_2oo3__rf_valid.

def proj_Imp_diag_2oo3__rf_same_is_not_different :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
          _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal 
          record) 
       (x:
        (cc.eT 
           (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
              _p_E_partial_match _p_E_perfect_match _p_E_range_match 
              _p_C_equal record)) =>
        dk_logic.forall 
          (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
             _p_E_partial_match _p_E_perfect_match _p_E_range_match 
             _p_C_equal record) 
          (y:
           (cc.eT 
              (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
                 _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                 _p_C_equal record)) =>
           dk_logic.eqv 
             (dk_logic.ebP 
                (proj_Imp_diag_2oo3__rf_different E_T C_T _p_E_equal 
                   _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                   _p_E_range_match _p_C_equal record x y)) 
             (dk_logic.not 
                (dk_logic.ebP 
                   (proj_Imp_diag_2oo3__rf_equal E_T C_T _p_E_equal 
                      _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                      _p_E_range_match _p_C_equal record x y)))))).

[Imp_diag_2oo3__rf_same_is_not_different]
  proj_Imp_diag_2oo3__rf_same_is_not_different _ _ _ _ _ _ _ _ 
    (Imp_diag_2oo3__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Imp_diag_2oo3__rf_same_is_not_different _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_diag_2oo3__rf_same_is_not_different.

def proj_Imp_diag_2oo3__rf_equal_transitive :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
          _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal 
          record) 
       (x:
        (cc.eT 
           (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
              _p_E_partial_match _p_E_perfect_match _p_E_range_match 
              _p_C_equal record)) =>
        dk_logic.forall 
          (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
             _p_E_partial_match _p_E_perfect_match _p_E_range_match 
             _p_C_equal record) 
          (y:
           (cc.eT 
              (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
                 _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                 _p_C_equal record)) =>
           dk_logic.forall 
             (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
                _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                _p_C_equal record) 
             (z:
              (cc.eT 
                 (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
                    _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                    _p_C_equal record)) =>
              dk_logic.imp 
                (dk_logic.ebP 
                   (proj_Imp_diag_2oo3__rf_equal E_T C_T _p_E_equal 
                      _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                      _p_E_range_match _p_C_equal record x y)) 
                (dk_logic.imp 
                   (dk_logic.ebP 
                      (proj_Imp_diag_2oo3__rf_equal E_T C_T _p_E_equal 
                         _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                         _p_E_range_match _p_C_equal record y z)) 
                   (dk_logic.ebP 
                      (proj_Imp_diag_2oo3__rf_equal E_T C_T _p_E_equal 
                         _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                         _p_E_range_match _p_C_equal record x z))))))).

[Imp_diag_2oo3__rf_equal_transitive]
  proj_Imp_diag_2oo3__rf_equal_transitive _ _ _ _ _ _ _ _ 
    (Imp_diag_2oo3__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ Imp_diag_2oo3__rf_equal_transitive _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_diag_2oo3__rf_equal_transitive.

def proj_Imp_diag_2oo3__rf_def_equal1 :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  dk_logic.eP 
    (dk_logic.forall C_T 
       (n1:(cc.eT C_T) =>
        dk_logic.forall C_T 
          (n3:(cc.eT C_T) =>
           dk_logic.forall E_T 
             (n2:(cc.eT E_T) =>
              dk_logic.forall E_T 
                (n4:(cc.eT E_T) =>
                 dk_logic.eqv 
                   (dk_logic.ebP 
                      (proj_Imp_diag_2oo3__rf_equal E_T C_T _p_E_equal 
                         _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                         _p_E_range_match _p_C_equal record 
                         (proj_Imp_diag_2oo3__rf_constr E_T C_T _p_E_equal 
                            _p_E_no_match _p_E_partial_match 
                            _p_E_perfect_match _p_E_range_match _p_C_equal 
                            record n1 n2) 
                         (proj_Imp_diag_2oo3__rf_constr E_T C_T _p_E_equal 
                            _p_E_no_match _p_E_partial_match 
                            _p_E_perfect_match _p_E_range_match _p_C_equal 
                            record n3 n4))) 
                   (dk_logic.and (dk_logic.ebP (_p_C_equal n1 n3)) 
                      (dk_logic.ebP (_p_E_equal n2 n4)))))))).

[Imp_diag_2oo3__rf_def_equal1]
  proj_Imp_diag_2oo3__rf_def_equal1 _ _ _ _ _ _ _ _ 
    (Imp_diag_2oo3__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ Imp_diag_2oo3__rf_def_equal1 _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_diag_2oo3__rf_def_equal1.

def proj_Imp_diag_2oo3__rf_no_match_is_invalid :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
          _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal 
          record) 
       (x:
        (cc.eT 
           (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
              _p_E_partial_match _p_E_perfect_match _p_E_range_match 
              _p_C_equal record)) =>
        dk_logic.imp 
          (dk_logic.ebP 
             (_p_E_equal 
                (proj_Imp_diag_2oo3__rf_prj_b E_T C_T _p_E_equal 
                   _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                   _p_E_range_match _p_C_equal record x) _p_E_no_match)) 
          (dk_logic.not 
             (dk_logic.ebP 
                (proj_Imp_diag_2oo3__rf_valid E_T C_T _p_E_equal 
                   _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                   _p_E_range_match _p_C_equal record x))))).

[Imp_diag_2oo3__rf_no_match_is_invalid]
  proj_Imp_diag_2oo3__rf_no_match_is_invalid _ _ _ _ _ _ _ _ 
    (Imp_diag_2oo3__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ Imp_diag_2oo3__rf_no_match_is_invalid _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_diag_2oo3__rf_no_match_is_invalid.

def proj_Imp_diag_2oo3__rf_partial_match_is_valid :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
          _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal 
          record) 
       (x:
        (cc.eT 
           (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
              _p_E_partial_match _p_E_perfect_match _p_E_range_match 
              _p_C_equal record)) =>
        dk_logic.imp 
          (dk_logic.ebP 
             (_p_E_equal 
                (proj_Imp_diag_2oo3__rf_prj_b E_T C_T _p_E_equal 
                   _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                   _p_E_range_match _p_C_equal record x) _p_E_partial_match)) 
          (dk_logic.ebP 
             (proj_Imp_diag_2oo3__rf_valid E_T C_T _p_E_equal _p_E_no_match 
                _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                _p_C_equal record x)))).

[Imp_diag_2oo3__rf_partial_match_is_valid]
  proj_Imp_diag_2oo3__rf_partial_match_is_valid _ _ _ _ _ _ _ _ 
    (Imp_diag_2oo3__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ Imp_diag_2oo3__rf_partial_match_is_valid _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_diag_2oo3__rf_partial_match_is_valid.

def proj_Imp_diag_2oo3__rf_perfect_match_is_valid :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
          _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal 
          record) 
       (x:
        (cc.eT 
           (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
              _p_E_partial_match _p_E_perfect_match _p_E_range_match 
              _p_C_equal record)) =>
        dk_logic.imp 
          (dk_logic.ebP 
             (_p_E_equal 
                (proj_Imp_diag_2oo3__rf_prj_b E_T C_T _p_E_equal 
                   _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                   _p_E_range_match _p_C_equal record x) _p_E_perfect_match)) 
          (dk_logic.ebP 
             (proj_Imp_diag_2oo3__rf_valid E_T C_T _p_E_equal _p_E_no_match 
                _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                _p_C_equal record x)))).

[Imp_diag_2oo3__rf_perfect_match_is_valid]
  proj_Imp_diag_2oo3__rf_perfect_match_is_valid _ _ _ _ _ _ _ _ 
    (Imp_diag_2oo3__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ Imp_diag_2oo3__rf_perfect_match_is_valid _ _ _ _ _ _ _ _ _)
  -->
  Imp_diag_2oo3__rf_perfect_match_is_valid.

def proj_Imp_diag_2oo3__rf_range_match_is_valid :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
          _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal 
          record) 
       (x:
        (cc.eT 
           (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
              _p_E_partial_match _p_E_perfect_match _p_E_range_match 
              _p_C_equal record)) =>
        dk_logic.imp 
          (dk_logic.ebP 
             (_p_E_equal 
                (proj_Imp_diag_2oo3__rf_prj_b E_T C_T _p_E_equal 
                   _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                   _p_E_range_match _p_C_equal record x) _p_E_range_match)) 
          (dk_logic.ebP 
             (proj_Imp_diag_2oo3__rf_valid E_T C_T _p_E_equal _p_E_no_match 
                _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                _p_C_equal record x)))).

[Imp_diag_2oo3__rf_range_match_is_valid]
  proj_Imp_diag_2oo3__rf_range_match_is_valid _ _ _ _ _ _ _ _ 
    (Imp_diag_2oo3__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ Imp_diag_2oo3__rf_range_match_is_valid _ _ _ _ _ _ _ _)
  -->
  Imp_diag_2oo3__rf_range_match_is_valid.

def proj_Imp_diag_2oo3__rf_equal_reflexive :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
          _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal 
          record) 
       (x:
        (cc.eT 
           (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
              _p_E_partial_match _p_E_perfect_match _p_E_range_match 
              _p_C_equal record)) =>
        dk_logic.ebP 
          (proj_Imp_diag_2oo3__rf_equal E_T C_T _p_E_equal _p_E_no_match 
             _p_E_partial_match _p_E_perfect_match _p_E_range_match 
             _p_C_equal record x x))).

[Imp_diag_2oo3__rf_equal_reflexive]
  proj_Imp_diag_2oo3__rf_equal_reflexive _ _ _ _ _ _ _ _ 
    (Imp_diag_2oo3__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ Imp_diag_2oo3__rf_equal_reflexive _ _ _ _ _ _ _)
  -->
  Imp_diag_2oo3__rf_equal_reflexive.

def proj_Imp_diag_2oo3__rf_equal_reflexive2 :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  dk_logic.eP 
    (dk_logic.forall C_T 
       (n1:(cc.eT C_T) =>
        dk_logic.forall E_T 
          (n2:(cc.eT E_T) =>
           dk_logic.ebP 
             (proj_Imp_diag_2oo3__rf_equal E_T C_T _p_E_equal _p_E_no_match 
                _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                _p_C_equal record 
                (proj_Imp_diag_2oo3__rf_constr E_T C_T _p_E_equal 
                   _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                   _p_E_range_match _p_C_equal record n1 n2) 
                (proj_Imp_diag_2oo3__rf_constr E_T C_T _p_E_equal 
                   _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                   _p_E_range_match _p_C_equal record n1 n2))))).

[Imp_diag_2oo3__rf_equal_reflexive2]
  proj_Imp_diag_2oo3__rf_equal_reflexive2 _ _ _ _ _ _ _ _ 
    (Imp_diag_2oo3__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ Imp_diag_2oo3__rf_equal_reflexive2 _ _ _ _ _ _)
  -->
  Imp_diag_2oo3__rf_equal_reflexive2.

def proj_Imp_diag_2oo3__rf_equal_symmetric2 :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  dk_logic.eP 
    (dk_logic.forall C_T 
       (n1:(cc.eT C_T) =>
        dk_logic.forall C_T 
          (n3:(cc.eT C_T) =>
           dk_logic.forall E_T 
             (n2:(cc.eT E_T) =>
              dk_logic.forall E_T 
                (n4:(cc.eT E_T) =>
                 dk_logic.imp 
                   (dk_logic.ebP 
                      (proj_Imp_diag_2oo3__rf_equal E_T C_T _p_E_equal 
                         _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                         _p_E_range_match _p_C_equal record 
                         (proj_Imp_diag_2oo3__rf_constr E_T C_T _p_E_equal 
                            _p_E_no_match _p_E_partial_match 
                            _p_E_perfect_match _p_E_range_match _p_C_equal 
                            record n1 n2) 
                         (proj_Imp_diag_2oo3__rf_constr E_T C_T _p_E_equal 
                            _p_E_no_match _p_E_partial_match 
                            _p_E_perfect_match _p_E_range_match _p_C_equal 
                            record n3 n4))) 
                   (dk_logic.ebP 
                      (proj_Imp_diag_2oo3__rf_equal E_T C_T _p_E_equal 
                         _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                         _p_E_range_match _p_C_equal record 
                         (proj_Imp_diag_2oo3__rf_constr E_T C_T _p_E_equal 
                            _p_E_no_match _p_E_partial_match 
                            _p_E_perfect_match _p_E_range_match _p_C_equal 
                            record n3 n4) 
                         (proj_Imp_diag_2oo3__rf_constr E_T C_T _p_E_equal 
                            _p_E_no_match _p_E_partial_match 
                            _p_E_perfect_match _p_E_range_match _p_C_equal 
                            record n1 n2)))))))).

[Imp_diag_2oo3__rf_equal_symmetric2]
  proj_Imp_diag_2oo3__rf_equal_symmetric2 _ _ _ _ _ _ _ _ 
    (Imp_diag_2oo3__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ Imp_diag_2oo3__rf_equal_symmetric2 _ _ _ _ _)
  -->
  Imp_diag_2oo3__rf_equal_symmetric2.

def proj_Imp_diag_2oo3__rf_equal_transitive2 :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  dk_logic.eP 
    (dk_logic.forall C_T 
       (n1:(cc.eT C_T) =>
        dk_logic.forall C_T 
          (n3:(cc.eT C_T) =>
           dk_logic.forall C_T 
             (n5:(cc.eT C_T) =>
              dk_logic.forall E_T 
                (n2:(cc.eT E_T) =>
                 dk_logic.forall E_T 
                   (n4:(cc.eT E_T) =>
                    dk_logic.forall E_T 
                      (n6:(cc.eT E_T) =>
                       dk_logic.imp 
                         (dk_logic.ebP 
                            (proj_Imp_diag_2oo3__rf_equal E_T C_T _p_E_equal 
                               _p_E_no_match _p_E_partial_match 
                               _p_E_perfect_match _p_E_range_match 
                               _p_C_equal record 
                               (proj_Imp_diag_2oo3__rf_constr E_T C_T 
                                  _p_E_equal _p_E_no_match 
                                  _p_E_partial_match _p_E_perfect_match 
                                  _p_E_range_match _p_C_equal record n1 n2) 
                               (proj_Imp_diag_2oo3__rf_constr E_T C_T 
                                  _p_E_equal _p_E_no_match 
                                  _p_E_partial_match _p_E_perfect_match 
                                  _p_E_range_match _p_C_equal record n3 n4))) 
                         (dk_logic.imp 
                            (dk_logic.ebP 
                               (proj_Imp_diag_2oo3__rf_equal E_T C_T 
                                  _p_E_equal _p_E_no_match 
                                  _p_E_partial_match _p_E_perfect_match 
                                  _p_E_range_match _p_C_equal record 
                                  (proj_Imp_diag_2oo3__rf_constr E_T C_T 
                                     _p_E_equal _p_E_no_match 
                                     _p_E_partial_match _p_E_perfect_match 
                                     _p_E_range_match _p_C_equal record n3 n4) 
                                  (proj_Imp_diag_2oo3__rf_constr E_T C_T 
                                     _p_E_equal _p_E_no_match 
                                     _p_E_partial_match _p_E_perfect_match 
                                     _p_E_range_match _p_C_equal record n5 n6))) 
                            (dk_logic.ebP 
                               (proj_Imp_diag_2oo3__rf_equal E_T C_T 
                                  _p_E_equal _p_E_no_match 
                                  _p_E_partial_match _p_E_perfect_match 
                                  _p_E_range_match _p_C_equal record 
                                  (proj_Imp_diag_2oo3__rf_constr E_T C_T 
                                     _p_E_equal _p_E_no_match 
                                     _p_E_partial_match _p_E_perfect_match 
                                     _p_E_range_match _p_C_equal record n1 n2) 
                                  (proj_Imp_diag_2oo3__rf_constr E_T C_T 
                                     _p_E_equal _p_E_no_match 
                                     _p_E_partial_match _p_E_perfect_match 
                                     _p_E_range_match _p_C_equal record n5 n6))))))))))).

[Imp_diag_2oo3__rf_equal_transitive2]
  proj_Imp_diag_2oo3__rf_equal_transitive2 _ _ _ _ _ _ _ _ 
    (Imp_diag_2oo3__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ Imp_diag_2oo3__rf_equal_transitive2 _ _ _ _)
  -->
  Imp_diag_2oo3__rf_equal_transitive2.

def proj_Imp_diag_2oo3__rf_different_is_irreflexive :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
          _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal 
          record) 
       (x:
        (cc.eT 
           (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
              _p_E_partial_match _p_E_perfect_match _p_E_range_match 
              _p_C_equal record)) =>
        dk_logic.not 
          (dk_logic.ebP 
             (proj_Imp_diag_2oo3__rf_different E_T C_T _p_E_equal 
                _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                _p_E_range_match _p_C_equal record x x)))).

[Imp_diag_2oo3__rf_different_is_irreflexive]
  proj_Imp_diag_2oo3__rf_different_is_irreflexive _ _ _ _ _ _ _ _ 
    (Imp_diag_2oo3__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ Imp_diag_2oo3__rf_different_is_irreflexive _ _ _)
  -->
  Imp_diag_2oo3__rf_different_is_irreflexive.

def proj_Imp_diag_2oo3__rf_equal_symmetric :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
          _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal 
          record) 
       (x:
        (cc.eT 
           (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
              _p_E_partial_match _p_E_perfect_match _p_E_range_match 
              _p_C_equal record)) =>
        dk_logic.forall 
          (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
             _p_E_partial_match _p_E_perfect_match _p_E_range_match 
             _p_C_equal record) 
          (y:
           (cc.eT 
              (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
                 _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                 _p_C_equal record)) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (proj_Imp_diag_2oo3__rf_equal E_T C_T _p_E_equal 
                   _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                   _p_E_range_match _p_C_equal record x y)) 
             (dk_logic.ebP 
                (proj_Imp_diag_2oo3__rf_equal E_T C_T _p_E_equal 
                   _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                   _p_E_range_match _p_C_equal record y x))))).

[Imp_diag_2oo3__rf_equal_symmetric]
  proj_Imp_diag_2oo3__rf_equal_symmetric _ _ _ _ _ _ _ _ 
    (Imp_diag_2oo3__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ Imp_diag_2oo3__rf_equal_symmetric _ _)
  -->
  Imp_diag_2oo3__rf_equal_symmetric.

def proj_Imp_diag_2oo3__rf_different_is_complete :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
          _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal 
          record) 
       (x:
        (cc.eT 
           (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
              _p_E_partial_match _p_E_perfect_match _p_E_range_match 
              _p_C_equal record)) =>
        dk_logic.forall 
          (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
             _p_E_partial_match _p_E_perfect_match _p_E_range_match 
             _p_C_equal record) 
          (y:
           (cc.eT 
              (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
                 _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                 _p_C_equal record)) =>
           dk_logic.forall 
             (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
                _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                _p_C_equal record) 
             (z:
              (cc.eT 
                 (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
                    _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                    _p_C_equal record)) =>
              dk_logic.imp 
                (dk_logic.ebP 
                   (proj_Imp_diag_2oo3__rf_different E_T C_T _p_E_equal 
                      _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                      _p_E_range_match _p_C_equal record x y)) 
                (dk_logic.or 
                   (dk_logic.ebP 
                      (proj_Imp_diag_2oo3__rf_different E_T C_T _p_E_equal 
                         _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                         _p_E_range_match _p_C_equal record x z)) 
                   (dk_logic.ebP 
                      (proj_Imp_diag_2oo3__rf_different E_T C_T _p_E_equal 
                         _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                         _p_E_range_match _p_C_equal record y z))))))).

[Imp_diag_2oo3__rf_different_is_complete]
  proj_Imp_diag_2oo3__rf_different_is_complete _ _ _ _ _ _ _ _ 
    (Imp_diag_2oo3__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ Imp_diag_2oo3__rf_different_is_complete _)
  -->
  Imp_diag_2oo3__rf_different_is_complete.

def proj_Imp_diag_2oo3__rf_different_is_symmetric :
  E_T:cc.uT ->
  C_T:cc.uT ->
  _p_E_equal:((cc.eT E_T) -> (cc.eT E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT E_T) ->
  _p_E_partial_match:(cc.eT E_T) ->
  _p_E_perfect_match:(cc.eT E_T) ->
  _p_E_range_match:(cc.eT E_T) ->
  _p_C_equal:((cc.eT C_T) -> (cc.eT C_T) -> cc.eT basics.bool__t) ->
  record:(Imp_diag_2oo3__me_as_species E_T C_T _p_E_equal _p_E_no_match 
            _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
          _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal 
          record) 
       (x:
        (cc.eT 
           (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
              _p_E_partial_match _p_E_perfect_match _p_E_range_match 
              _p_C_equal record)) =>
        dk_logic.forall 
          (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
             _p_E_partial_match _p_E_perfect_match _p_E_range_match 
             _p_C_equal record) 
          (y:
           (cc.eT 
              (proj_Imp_diag_2oo3__rf_T E_T C_T _p_E_equal _p_E_no_match 
                 _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                 _p_C_equal record)) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (proj_Imp_diag_2oo3__rf_different E_T C_T _p_E_equal 
                   _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                   _p_E_range_match _p_C_equal record x y)) 
             (dk_logic.ebP 
                (proj_Imp_diag_2oo3__rf_different E_T C_T _p_E_equal 
                   _p_E_no_match _p_E_partial_match _p_E_perfect_match 
                   _p_E_range_match _p_C_equal record y x))))).

[Imp_diag_2oo3__rf_different_is_symmetric]
  proj_Imp_diag_2oo3__rf_different_is_symmetric _ _ _ _ _ _ _ _ 
    (Imp_diag_2oo3__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ Imp_diag_2oo3__rf_different_is_symmetric)
  -->
  Imp_diag_2oo3__rf_different_is_symmetric.

def Imp_diag_2oo3__valid :
  _p_E_T:cc.uT ->
  _p_C_T:cc.uT ->
  _p_E_equal:((cc.eT _p_E_T) -> (cc.eT _p_E_T) -> cc.eT basics.bool__t) ->
  _p_E_partial_match:(cc.eT _p_E_T) ->
  _p_E_perfect_match:(cc.eT _p_E_T) ->
  _p_E_range_match:(cc.eT _p_E_T) ->
  abst_T:cc.uT ->
  abst_prj_b:((cc.eT abst_T) -> cc.eT _p_E_T) ->
  x:(cc.eT abst_T) -> cc.eT basics.bool__t
  :=
  _p_E_T:cc.uT =>
  _p_C_T:cc.uT =>
  _p_E_equal:((cc.eT _p_E_T) -> (cc.eT _p_E_T) -> cc.eT basics.bool__t) =>
  _p_E_partial_match:(cc.eT _p_E_T) =>
  _p_E_perfect_match:(cc.eT _p_E_T) =>
  _p_E_range_match:(cc.eT _p_E_T) =>
  abst_T:cc.uT =>
  abst_prj_b:((cc.eT abst_T) -> cc.eT _p_E_T) =>
  x:(cc.eT abst_T) =>
  basics._bar__bar_ (_p_E_equal (abst_prj_b x) _p_E_range_match) 
    (basics._bar__bar_ (_p_E_equal (abst_prj_b x) _p_E_partial_match) 
       (_p_E_equal (abst_prj_b x) _p_E_perfect_match)).

def Imp_diag_2oo3__no_match_is_invalid :
  _p_E_T:cc.uT ->
  _p_C_T:cc.uT ->
  _p_E_equal:((cc.eT _p_E_T) -> (cc.eT _p_E_T) -> cc.eT basics.bool__t) ->
  _p_E_no_match:(cc.eT _p_E_T) ->
  _p_E_partial_match:(cc.eT _p_E_T) ->
  _p_E_perfect_match:(cc.eT _p_E_T) ->
  _p_E_range_match:(cc.eT _p_E_T) ->
  _p_E_all_field_different_0_1:(dk_logic.eP 
                                  (dk_logic.not 
                                     (dk_logic.ebP 
                                        (_p_E_equal _p_E_no_match 
                                           _p_E_range_match)))) ->
  _p_E_all_field_different_0_2:(dk_logic.eP 
                                  (dk_logic.not 
                                     (dk_logic.ebP 
                                        (_p_E_equal _p_E_no_match 
                                           _p_E_partial_match)))) ->
  _p_E_all_field_different_0_3:(dk_logic.eP 
                                  (dk_logic.not 
                                     (dk_logic.ebP 
                                        (_p_E_equal _p_E_no_match 
                                           _p_E_perfect_match)))) ->
  _p_E_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall _p_E_T 
                             (x:(cc.eT _p_E_T) =>
                              dk_logic.forall _p_E_T 
                                (y:(cc.eT _p_E_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (_p_E_equal x y)) 
                                   (dk_logic.ebP (_p_E_equal y x)))))) ->
  _p_E_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall _p_E_T 
                              (x:(cc.eT _p_E_T) =>
                               dk_logic.forall _p_E_T 
                                 (y:(cc.eT _p_E_T) =>
                                  dk_logic.forall _p_E_T 
                                    (z:(cc.eT _p_E_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_E_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (_p_E_equal y z)) 
                                          (dk_logic.ebP (_p_E_equal x z)))))))) ->
  abst_T:cc.uT ->
  abst_prj_b:((cc.eT abst_T) -> cc.eT _p_E_T) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.imp 
          (dk_logic.ebP (_p_E_equal (abst_prj_b x) _p_E_no_match)) 
          (dk_logic.not 
             (dk_logic.ebP 
                (Imp_diag_2oo3__valid _p_E_T _p_C_T _p_E_equal 
                   _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                   abst_T abst_prj_b x)))))
  :=
  _p_E_T:cc.uT =>
  _p_C_T:cc.uT =>
  _p_E_equal:((cc.eT _p_E_T) -> (cc.eT _p_E_T) -> cc.eT basics.bool__t) =>
  _p_E_no_match:(cc.eT _p_E_T) =>
  _p_E_partial_match:(cc.eT _p_E_T) =>
  _p_E_perfect_match:(cc.eT _p_E_T) =>
  _p_E_range_match:(cc.eT _p_E_T) =>
  _p_E_all_field_different_0_1:
  (dk_logic.eP 
     (dk_logic.not (dk_logic.ebP (_p_E_equal _p_E_no_match _p_E_range_match)))) =>
  _p_E_all_field_different_0_2:
  (dk_logic.eP 
     (dk_logic.not 
        (dk_logic.ebP (_p_E_equal _p_E_no_match _p_E_partial_match)))) =>
  _p_E_all_field_different_0_3:
  (dk_logic.eP 
     (dk_logic.not 
        (dk_logic.ebP (_p_E_equal _p_E_no_match _p_E_perfect_match)))) =>
  _p_E_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_E_T 
        (x:(cc.eT _p_E_T) =>
         dk_logic.forall _p_E_T 
           (y:(cc.eT _p_E_T) =>
            dk_logic.imp (dk_logic.ebP (_p_E_equal x y)) 
              (dk_logic.ebP (_p_E_equal y x)))))) =>
  _p_E_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_E_T 
        (x:(cc.eT _p_E_T) =>
         dk_logic.forall _p_E_T 
           (y:(cc.eT _p_E_T) =>
            dk_logic.forall _p_E_T 
              (z:(cc.eT _p_E_T) =>
               dk_logic.imp (dk_logic.ebP (_p_E_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_E_equal y z)) 
                    (dk_logic.ebP (_p_E_equal x z)))))))) =>
  abst_T:cc.uT =>
  abst_prj_b:((cc.eT abst_T) -> cc.eT _p_E_T) =>
  (__A_1_LEMMA:
   (x:(cc.eT abst_T) ->
    H1:(dk_logic.eP (dk_logic.ebP (_p_E_equal (abst_prj_b x) _p_E_no_match))) ->
    dk_logic.eP 
      (dk_logic.not 
         (dk_logic.ebP 
            (Imp_diag_2oo3__valid _p_E_T _p_C_T _p_E_equal 
               _p_E_partial_match _p_E_perfect_match _p_E_range_match abst_T 
               abst_prj_b x)))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.imp 
           (zen.triangle 
              (focal.is_true (_p_E_equal (abst_prj_b v_Vzb) _p_E_no_match))) 
           (zen.not 
              (zen.triangle 
                 (focal.is_true 
                    (Imp_diag_2oo3__valid _p_E_T _p_C_T _p_E_equal 
                       _p_E_partial_match _p_E_perfect_match 
                       _p_E_range_match abst_T abst_prj_b v_Vzb)))))) 
     (v_Vac:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.imp 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_E_equal (abst_prj_b v_Vzb) _p_E_no_match))) 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (Imp_diag_2oo3__valid _p_E_T _p_C_T _p_E_equal 
                              _p_E_partial_match _p_E_perfect_match 
                              _p_E_range_match abst_T abst_prj_b v_Vzb)))))))) =>
      zen.Raxiom 
        (zen.forall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.imp 
              (zen.triangle 
                 (focal.is_true (_p_E_equal (abst_prj_b v_Vzb) _p_E_no_match))) 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (Imp_diag_2oo3__valid _p_E_T _p_C_T _p_E_equal 
                          _p_E_partial_match _p_E_perfect_match 
                          _p_E_range_match abst_T abst_prj_b v_Vzb)))))) 
        __A_1_LEMMA v_Vac)) 
    (x:(cc.eT abst_T) =>
     H1:
     (dk_logic.eP (dk_logic.ebP (_p_E_equal (abst_prj_b x) _p_E_no_match))) =>
     zen.nnpp 
       (zen.not 
          (zen.triangle 
             (focal.is_true 
                (Imp_diag_2oo3__valid _p_E_T _p_C_T _p_E_equal 
                   _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                   abst_T abst_prj_b x)))) 
       (v_Vgd:
        (zen.proof 
           (zen.not 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (Imp_diag_2oo3__valid _p_E_T _p_C_T _p_E_equal 
                          _p_E_partial_match _p_E_perfect_match 
                          _p_E_range_match abst_T abst_prj_b x)))))) =>
        zen.Rnotnot 
          (zen.triangle 
             (focal.is_true 
                (Imp_diag_2oo3__valid _p_E_T _p_C_T _p_E_equal 
                   _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                   abst_T abst_prj_b x))) 
          (v_Vhd:
           (zen.proof 
              (zen.triangle 
                 (focal.is_true 
                    (basics._bar__bar_ 
                       (_p_E_equal (abst_prj_b x) _p_E_range_match) 
                       (basics._bar__bar_ 
                          (_p_E_equal (abst_prj_b x) _p_E_partial_match) 
                          (_p_E_equal (abst_prj_b x) _p_E_perfect_match)))))) =>
           focal.zenon_focal_or (_p_E_equal (abst_prj_b x) _p_E_range_match) 
             (basics._bar__bar_ 
                (_p_E_equal (abst_prj_b x) _p_E_partial_match) 
                (_p_E_equal (abst_prj_b x) _p_E_perfect_match)) 
             (v_Vid:
              (zen.proof 
                 (zen.or 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_E_equal (abst_prj_b x) _p_E_range_match))) 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._bar__bar_ 
                             (_p_E_equal (abst_prj_b x) _p_E_partial_match) 
                             (_p_E_equal (abst_prj_b x) _p_E_perfect_match)))))) =>
              zen.Ror 
                (zen.triangle 
                   (focal.is_true 
                      (_p_E_equal (abst_prj_b x) _p_E_range_match))) 
                (zen.triangle 
                   (focal.is_true 
                      (basics._bar__bar_ 
                         (_p_E_equal (abst_prj_b x) _p_E_partial_match) 
                         (_p_E_equal (abst_prj_b x) _p_E_perfect_match)))) 
                (v_Vjd:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_E_equal (abst_prj_b x) _p_E_range_match)))) =>
                 zen.Rcut 
                   (zen.and 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal _p_E_T _p_E_no_match (abst_prj_b x)))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_E_equal _p_E_no_match (abst_prj_b x)))))) 
                   (v_Vkd:
                    (zen.proof 
                       (zen.and 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal _p_E_T _p_E_no_match 
                                   (abst_prj_b x)))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_E_equal _p_E_no_match (abst_prj_b x))))))) =>
                    zen.Rand 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal _p_E_T _p_E_no_match (abst_prj_b x)))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_E_equal _p_E_no_match (abst_prj_b x))))) 
                      (v_Vld:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal _p_E_T _p_E_no_match 
                                   (abst_prj_b x))))) =>
                       v_Vmd:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_E_equal _p_E_no_match (abst_prj_b x)))))) =>
                       zen.Rall _p_E_T 
                         (v_Vnd:(zen.term _p_E_T) =>
                          zen.forall _p_E_T 
                            (v_Vod:(zen.term _p_E_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true (_p_E_equal v_Vnd v_Vod))) 
                               (zen.triangle 
                                  (focal.is_true (_p_E_equal v_Vod v_Vnd))))) 
                         (abst_prj_b x) 
                         (v_Vpd:
                          (zen.proof 
                             (zen.forall _p_E_T 
                                (v_Vod:(zen.term _p_E_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_E_equal (abst_prj_b x) v_Vod))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_E_equal v_Vod (abst_prj_b x))))))) =>
                          zen.Rall _p_E_T 
                            (v_Vod:(zen.term _p_E_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_E_equal (abst_prj_b x) v_Vod))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_E_equal v_Vod (abst_prj_b x))))) 
                            _p_E_no_match 
                            (v_Vqd:
                             (zen.proof 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_E_equal (abst_prj_b x) 
                                            _p_E_no_match))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_E_equal _p_E_no_match 
                                            (abst_prj_b x)))))) =>
                             zen.Rimply 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_E_equal (abst_prj_b x) _p_E_no_match))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_E_equal _p_E_no_match (abst_prj_b x)))) 
                               (v_Vrd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_E_equal (abst_prj_b x) 
                                               _p_E_no_match))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_E_equal (abst_prj_b x) 
                                           _p_E_no_match))) H1 v_Vrd) 
                               (v_Vsd:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_E_equal _p_E_no_match 
                                            (abst_prj_b x))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_E_equal _p_E_no_match 
                                           (abst_prj_b x)))) v_Vsd v_Vmd) 
                               v_Vqd) v_Vpd) _p_E_equal_symmetric) v_Vkd) 
                   (v_Vtd:
                    (zen.proof 
                       (zen.not 
                          (zen.and 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal _p_E_T _p_E_no_match 
                                      (abst_prj_b x)))) 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_E_equal _p_E_no_match 
                                         (abst_prj_b x)))))))) =>
                    zen.Rcut 
                      (zen.triangle 
                         (zen.equal _p_E_T _p_E_range_match _p_E_range_match)) 
                      (v_Vud:
                       (zen.proof 
                          (zen.triangle 
                             (zen.equal _p_E_T _p_E_range_match 
                                _p_E_range_match))) =>
                       zen.Rsubst basics.bool__t 
                         (v_Vvd:(zen.term basics.bool__t) =>
                          zen.triangle (focal.is_true v_Vvd)) 
                         (_p_E_equal (abst_prj_b x) _p_E_range_match) 
                         (_p_E_equal _p_E_no_match _p_E_range_match) 
                         (v_Vwd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (_p_E_equal (abst_prj_b x) 
                                         _p_E_range_match) 
                                      (_p_E_equal _p_E_no_match 
                                         _p_E_range_match))))) =>
                          zen.Rsubst _p_E_T 
                            (v_Vxd:(zen.term _p_E_T) =>
                             zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (_p_E_equal v_Vxd _p_E_range_match) 
                                     (_p_E_equal _p_E_no_match 
                                        _p_E_range_match)))) (abst_prj_b x) 
                            _p_E_no_match 
                            (v_Vyd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal _p_E_T (abst_prj_b x) 
                                         _p_E_no_match)))) =>
                             zen.Rnotand 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal _p_E_T _p_E_no_match 
                                        (abst_prj_b x)))) 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_E_equal _p_E_no_match 
                                           (abst_prj_b x))))) 
                               (v_Vzd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal _p_E_T _p_E_no_match 
                                               (abst_prj_b x)))))) =>
                                zen.Rnotnot 
                                  (zen.triangle 
                                     (zen.equal _p_E_T _p_E_no_match 
                                        (abst_prj_b x))) 
                                  (v_Vae:
                                   (zen.proof 
                                      (zen.triangle 
                                         (zen.equal _p_E_T _p_E_no_match 
                                            (abst_prj_b x)))) =>
                                   zen.Rcut 
                                     (zen.triangle 
                                        (zen.equal _p_E_T _p_E_no_match 
                                           _p_E_no_match)) 
                                     (v_Vbe:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal _p_E_T _p_E_no_match 
                                               _p_E_no_match))) =>
                                      zen.Rsubst _p_E_T 
                                        (v_Vce:(zen.term _p_E_T) =>
                                         zen.triangle 
                                           (zen.equal _p_E_T v_Vce 
                                              _p_E_no_match)) _p_E_no_match 
                                        (abst_prj_b x) 
                                        (v_Vld:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_E_T 
                                                     _p_E_no_match 
                                                     (abst_prj_b x))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal _p_E_T 
                                                 _p_E_no_match (abst_prj_b x))) 
                                           v_Vae v_Vld) 
                                        (v_Vde:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal _p_E_T 
                                                  (abst_prj_b x) 
                                                  _p_E_no_match))) =>
                                         zen.Rsubst _p_E_T 
                                           (v_Vee:(zen.term _p_E_T) =>
                                            zen.triangle 
                                              (zen.equal _p_E_T 
                                                 (abst_prj_b x) v_Vee)) 
                                           _p_E_no_match _p_E_no_match 
                                           (v_Vfe:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_E_T 
                                                        _p_E_no_match 
                                                        _p_E_no_match)))) =>
                                            zen.Rnoteq _p_E_T _p_E_no_match 
                                              v_Vfe) 
                                           (v_Vde0:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal _p_E_T 
                                                     (abst_prj_b x) 
                                                     _p_E_no_match))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (zen.equal _p_E_T 
                                                    (abst_prj_b x) 
                                                    _p_E_no_match)) v_Vde0 
                                              v_Vyd) v_Vde) v_Vbe) 
                                     (v_Vfe:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_E_T 
                                                  _p_E_no_match _p_E_no_match)))) =>
                                      zen.Rnoteq _p_E_T _p_E_no_match v_Vfe)) 
                                  v_Vzd) 
                               (v_Vge:
                                (zen.proof 
                                   (zen.not 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_E_equal _p_E_no_match 
                                                  (abst_prj_b x))))))) =>
                                zen.Rnotnot 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_E_equal _p_E_no_match 
                                           (abst_prj_b x)))) 
                                  (v_Vsd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_E_equal _p_E_no_match 
                                               (abst_prj_b x))))) =>
                                   zen.Rall _p_E_T 
                                     (v_Vnd:(zen.term _p_E_T) =>
                                      zen.forall _p_E_T 
                                        (v_Vod:(zen.term _p_E_T) =>
                                         zen.forall _p_E_T 
                                           (v_Vhe:(zen.term _p_E_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_E_equal v_Vnd v_Vod))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_E_equal v_Vod 
                                                          v_Vhe))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_E_equal v_Vnd 
                                                          v_Vhe))))))) 
                                     _p_E_no_match 
                                     (v_Vie:
                                      (zen.proof 
                                         (zen.forall _p_E_T 
                                            (v_Vod:(zen.term _p_E_T) =>
                                             zen.forall _p_E_T 
                                               (v_Vhe:(zen.term _p_E_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_E_equal 
                                                           _p_E_no_match 
                                                           v_Vod))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_E_equal v_Vod 
                                                              v_Vhe))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_E_equal 
                                                              _p_E_no_match 
                                                              v_Vhe)))))))) =>
                                      zen.Rall _p_E_T 
                                        (v_Vod:(zen.term _p_E_T) =>
                                         zen.forall _p_E_T 
                                           (v_Vhe:(zen.term _p_E_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_E_equal 
                                                       _p_E_no_match v_Vod))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_E_equal v_Vod 
                                                          v_Vhe))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_E_equal 
                                                          _p_E_no_match v_Vhe)))))) 
                                        (abst_prj_b x) 
                                        (v_Vje:
                                         (zen.proof 
                                            (zen.forall _p_E_T 
                                               (v_Vhe:(zen.term _p_E_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_E_equal 
                                                           _p_E_no_match 
                                                           (abst_prj_b x)))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_E_equal 
                                                              (abst_prj_b x) 
                                                              v_Vhe))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_E_equal 
                                                              _p_E_no_match 
                                                              v_Vhe))))))) =>
                                         zen.Rall _p_E_T 
                                           (v_Vhe:(zen.term _p_E_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_E_equal 
                                                       _p_E_no_match 
                                                       (abst_prj_b x)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_E_equal 
                                                          (abst_prj_b x) 
                                                          v_Vhe))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_E_equal 
                                                          _p_E_no_match v_Vhe))))) 
                                           _p_E_range_match 
                                           (v_Vke:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_E_equal 
                                                           _p_E_no_match 
                                                           (abst_prj_b x)))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_E_equal 
                                                              (abst_prj_b x) 
                                                              _p_E_range_match))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_E_equal 
                                                              _p_E_no_match 
                                                              _p_E_range_match)))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_E_equal 
                                                       _p_E_no_match 
                                                       (abst_prj_b x)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_E_equal 
                                                          (abst_prj_b x) 
                                                          _p_E_range_match))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_E_equal 
                                                          _p_E_no_match 
                                                          _p_E_range_match)))) 
                                              (v_Vmd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_E_equal 
                                                              _p_E_no_match 
                                                              (abst_prj_b x)))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_E_equal 
                                                          _p_E_no_match 
                                                          (abst_prj_b x)))) 
                                                 v_Vsd v_Vmd) 
                                              (v_Vle:
                                               (zen.proof 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_E_equal 
                                                              (abst_prj_b x) 
                                                              _p_E_range_match))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_E_equal 
                                                              _p_E_no_match 
                                                              _p_E_range_match))))) =>
                                               zen.Rimply 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_E_equal 
                                                          (abst_prj_b x) 
                                                          _p_E_range_match))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_E_equal 
                                                          _p_E_no_match 
                                                          _p_E_range_match))) 
                                                 (v_Vme:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_E_equal 
                                                                 (abst_prj_b 
                                                                    x) 
                                                                 _p_E_range_match))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_E_equal 
                                                             (abst_prj_b x) 
                                                             _p_E_range_match))) 
                                                    v_Vjd v_Vme) 
                                                 (v_Vne:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_E_equal 
                                                              _p_E_no_match 
                                                              _p_E_range_match)))) =>
                                                  zen.Rsubst basics.bool__t 
                                                    (v_Vvd:
                                                     (zen.term basics.bool__t) =>
                                                     zen.triangle 
                                                       (focal.is_true v_Vvd)) 
                                                    (_p_E_equal 
                                                       _p_E_no_match 
                                                       _p_E_range_match) 
                                                    (_p_E_equal 
                                                       _p_E_no_match 
                                                       _p_E_range_match) 
                                                    (v_Voe:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_range_match) 
                                                                 (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_range_match))))) =>
                                                     zen.Rsubst _p_E_T 
                                                       (v_Vxd:
                                                        (zen.term _p_E_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (_p_E_equal 
                                                                   v_Vxd 
                                                                   _p_E_range_match) 
                                                                (_p_E_equal 
                                                                   _p_E_no_match 
                                                                   _p_E_range_match)))) 
                                                       _p_E_no_match 
                                                       _p_E_no_match 
                                                       (v_Vfe:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_E_T 
                                                                    _p_E_no_match 
                                                                    _p_E_no_match)))) =>
                                                        zen.Rnoteq _p_E_T 
                                                          _p_E_no_match v_Vfe) 
                                                       (v_Voe0:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    _p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_range_match) 
                                                                    (
                                                                    _p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_range_match))))) =>
                                                        zen.Rsubst _p_E_T 
                                                          (v_Vpe:
                                                           (zen.term _p_E_T) =>
                                                           zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    v_Vpe) 
                                                                   (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_range_match)))) 
                                                          _p_E_range_match 
                                                          _p_E_range_match 
                                                          (v_Vqe:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_E_T 
                                                                    _p_E_range_match 
                                                                    _p_E_range_match)))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   _p_E_T 
                                                                   _p_E_range_match 
                                                                   _p_E_range_match)) 
                                                             v_Vud v_Vqe) 
                                                          (v_Voe0:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_range_match) 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_range_match))))) =>
                                                           zen.Rnoteq 
                                                             basics.bool__t 
                                                             (_p_E_equal 
                                                                _p_E_no_match 
                                                                _p_E_range_match) 
                                                             v_Voe0) v_Voe0) 
                                                       v_Voe) 
                                                    (v_Vne0:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_E_equal 
                                                                 _p_E_no_match 
                                                                 _p_E_range_match)))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_E_equal 
                                                                _p_E_no_match 
                                                                _p_E_range_match))) 
                                                       v_Vne0 
                                                       _p_E_all_field_different_0_1) 
                                                    v_Vne) v_Vle) v_Vke) 
                                           v_Vje) v_Vie) 
                                     _p_E_equal_transitive) v_Vge) v_Vtd) 
                            (v_Voe:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (_p_E_equal _p_E_no_match 
                                            _p_E_range_match) 
                                         (_p_E_equal _p_E_no_match 
                                            _p_E_range_match))))) =>
                             zen.Rsubst _p_E_T 
                               (v_Vpe:(zen.term _p_E_T) =>
                                zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (_p_E_equal _p_E_no_match v_Vpe) 
                                        (_p_E_equal _p_E_no_match 
                                           _p_E_range_match)))) 
                               _p_E_range_match _p_E_range_match 
                               (v_Vqe:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal _p_E_T _p_E_range_match 
                                            _p_E_range_match)))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (zen.equal _p_E_T _p_E_range_match 
                                        _p_E_range_match)) v_Vud v_Vqe) 
                               (v_Voe0:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (_p_E_equal _p_E_no_match 
                                               _p_E_range_match) 
                                            (_p_E_equal _p_E_no_match 
                                               _p_E_range_match))))) =>
                                zen.Rnoteq basics.bool__t 
                                  (_p_E_equal _p_E_no_match _p_E_range_match) 
                                  v_Voe0) v_Voe) v_Vwd) 
                         (v_Vne:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_E_equal _p_E_no_match _p_E_range_match)))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_E_equal _p_E_no_match _p_E_range_match))) 
                            v_Vne _p_E_all_field_different_0_1) v_Vjd) 
                      (v_Vqe:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal _p_E_T _p_E_range_match 
                                   _p_E_range_match)))) =>
                       zen.Rcut 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_E_equal _p_E_range_match _p_E_range_match))) 
                         (v_Vre:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_E_equal _p_E_range_match 
                                      _p_E_range_match)))) =>
                          zen.Rall _p_E_T 
                            (v_Vnd:(zen.term _p_E_T) =>
                             zen.forall _p_E_T 
                               (v_Vod:(zen.term _p_E_T) =>
                                zen.forall _p_E_T 
                                  (v_Vhe:(zen.term _p_E_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_E_equal v_Vnd v_Vod))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_E_equal v_Vod v_Vhe))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_E_equal v_Vnd v_Vhe))))))) 
                            (abst_prj_b x) 
                            (v_Vse:
                             (zen.proof 
                                (zen.forall _p_E_T 
                                   (v_Vod:(zen.term _p_E_T) =>
                                    zen.forall _p_E_T 
                                      (v_Vhe:(zen.term _p_E_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_E_equal (abst_prj_b x) 
                                                  v_Vod))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_E_equal v_Vod v_Vhe))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_E_equal (abst_prj_b x) 
                                                     v_Vhe)))))))) =>
                             zen.Rall _p_E_T 
                               (v_Vod:(zen.term _p_E_T) =>
                                zen.forall _p_E_T 
                                  (v_Vhe:(zen.term _p_E_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_E_equal (abst_prj_b x) v_Vod))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_E_equal v_Vod v_Vhe))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_E_equal (abst_prj_b x) 
                                                 v_Vhe)))))) 
                               _p_E_range_match 
                               (v_Vte:
                                (zen.proof 
                                   (zen.forall _p_E_T 
                                      (v_Vhe:(zen.term _p_E_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_E_equal (abst_prj_b x) 
                                                  _p_E_range_match))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_E_equal 
                                                     _p_E_range_match v_Vhe))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_E_equal (abst_prj_b x) 
                                                     v_Vhe))))))) =>
                                zen.Rall _p_E_T 
                                  (v_Vhe:(zen.term _p_E_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_E_equal (abst_prj_b x) 
                                              _p_E_range_match))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_E_equal _p_E_range_match 
                                                 v_Vhe))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_E_equal (abst_prj_b x) 
                                                 v_Vhe))))) _p_E_range_match 
                                  (v_Vue:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_E_equal (abst_prj_b x) 
                                                  _p_E_range_match))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_E_equal 
                                                     _p_E_range_match 
                                                     _p_E_range_match))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_E_equal (abst_prj_b x) 
                                                     _p_E_range_match)))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_E_equal (abst_prj_b x) 
                                              _p_E_range_match))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_E_equal _p_E_range_match 
                                                 _p_E_range_match))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_E_equal (abst_prj_b x) 
                                                 _p_E_range_match)))) 
                                     (v_Vme:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_E_equal (abst_prj_b x) 
                                                     _p_E_range_match))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_E_equal (abst_prj_b x) 
                                                 _p_E_range_match))) v_Vjd 
                                        v_Vme) 
                                     (v_Vve:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_E_equal 
                                                     _p_E_range_match 
                                                     _p_E_range_match))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_E_equal (abst_prj_b x) 
                                                     _p_E_range_match))))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_E_equal _p_E_range_match 
                                                 _p_E_range_match))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_E_equal (abst_prj_b x) 
                                                 _p_E_range_match))) 
                                        (v_Vwe:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_E_equal 
                                                        _p_E_range_match 
                                                        _p_E_range_match))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_E_equal 
                                                    _p_E_range_match 
                                                    _p_E_range_match))) 
                                           v_Vre v_Vwe) 
                                        (v_Vjd0:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_E_equal (abst_prj_b x) 
                                                     _p_E_range_match)))) =>
                                         zen.Rsubst basics.bool__t 
                                           (v_Vvd:
                                            (zen.term basics.bool__t) =>
                                            zen.triangle 
                                              (focal.is_true v_Vvd)) 
                                           (_p_E_equal (abst_prj_b x) 
                                              _p_E_range_match) 
                                           (_p_E_equal _p_E_no_match 
                                              _p_E_range_match) 
                                           (v_Vwd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (_p_E_equal 
                                                           (abst_prj_b x) 
                                                           _p_E_range_match) 
                                                        (_p_E_equal 
                                                           _p_E_no_match 
                                                           _p_E_range_match))))) =>
                                            zen.Rsubst _p_E_T 
                                              (v_Vxd:(zen.term _p_E_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (_p_E_equal v_Vxd 
                                                          _p_E_range_match) 
                                                       (_p_E_equal 
                                                          _p_E_no_match 
                                                          _p_E_range_match)))) 
                                              (abst_prj_b x) _p_E_no_match 
                                              (v_Vyd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_E_T 
                                                           (abst_prj_b x) 
                                                           _p_E_no_match)))) =>
                                               zen.Rnotand 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal _p_E_T 
                                                          _p_E_no_match 
                                                          (abst_prj_b x)))) 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_E_equal 
                                                             _p_E_no_match 
                                                             (abst_prj_b x))))) 
                                                 (v_Vzd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_E_T 
                                                                 _p_E_no_match 
                                                                 (abst_prj_b 
                                                                    x)))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (zen.equal _p_E_T 
                                                          _p_E_no_match 
                                                          (abst_prj_b x))) 
                                                    (v_Vae:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (zen.equal _p_E_T 
                                                              _p_E_no_match 
                                                              (abst_prj_b x)))) =>
                                                     zen.Reqsym _p_E_T 
                                                       _p_E_no_match 
                                                       (abst_prj_b x) v_Vae 
                                                       v_Vyd) v_Vzd) 
                                                 (v_Vge:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    (
                                                                    abst_prj_b 
                                                                    x))))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_E_equal 
                                                             _p_E_no_match 
                                                             (abst_prj_b x)))) 
                                                    (v_Vsd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_E_equal 
                                                                 _p_E_no_match 
                                                                 (abst_prj_b 
                                                                    x))))) =>
                                                     zen.Rall _p_E_T 
                                                       (v_Vnd:
                                                        (zen.term _p_E_T) =>
                                                        zen.forall _p_E_T 
                                                          (v_Vod:
                                                           (zen.term _p_E_T) =>
                                                           zen.forall _p_E_T 
                                                             (v_Vhe:
                                                              (zen.term 
                                                                 _p_E_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_E_equal 
                                                                    v_Vnd 
                                                                    v_Vod))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    v_Vod 
                                                                    v_Vhe))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    v_Vnd 
                                                                    v_Vhe))))))) 
                                                       _p_E_no_match 
                                                       (v_Vie:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              _p_E_T 
                                                              (v_Vod:
                                                               (zen.term 
                                                                  _p_E_T) =>
                                                               zen.forall 
                                                                 _p_E_T 
                                                                 (v_Vhe:
                                                                  (zen.term 
                                                                    _p_E_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    v_Vod))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    v_Vod 
                                                                    v_Vhe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    v_Vhe)))))))) =>
                                                        zen.Rall _p_E_T 
                                                          (v_Vod:
                                                           (zen.term _p_E_T) =>
                                                           zen.forall _p_E_T 
                                                             (v_Vhe:
                                                              (zen.term 
                                                                 _p_E_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    v_Vod))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    v_Vod 
                                                                    v_Vhe))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    v_Vhe)))))) 
                                                          (abst_prj_b x) 
                                                          (v_Vje:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 _p_E_T 
                                                                 (v_Vhe:
                                                                  (zen.term 
                                                                    _p_E_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    (abst_prj_b 
                                                                    x)))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    (abst_prj_b 
                                                                    x) v_Vhe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    v_Vhe))))))) =>
                                                           zen.Rall _p_E_T 
                                                             (v_Vhe:
                                                              (zen.term 
                                                                 _p_E_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    (abst_prj_b 
                                                                    x)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    (abst_prj_b 
                                                                    x) v_Vhe))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    v_Vhe))))) 
                                                             _p_E_range_match 
                                                             (v_Vke:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    (abst_prj_b 
                                                                    x)))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    (abst_prj_b 
                                                                    x) 
                                                                    _p_E_range_match))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_range_match)))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    (abst_prj_b 
                                                                    x)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    (abst_prj_b 
                                                                    x) 
                                                                    _p_E_range_match))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_range_match)))) 
                                                                (v_Vmd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    (abst_prj_b 
                                                                    x)))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    (abst_prj_b 
                                                                    x)))) 
                                                                   v_Vsd 
                                                                   v_Vmd) 
                                                                (v_Vle:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    (abst_prj_b 
                                                                    x) 
                                                                    _p_E_range_match))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_range_match))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    (abst_prj_b 
                                                                    x) 
                                                                    _p_E_range_match))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_range_match))) 
                                                                   (v_Vme:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    (abst_prj_b 
                                                                    x) 
                                                                    _p_E_range_match))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    (abst_prj_b 
                                                                    x) 
                                                                    _p_E_range_match))) 
                                                                    v_Vjd0 
                                                                    v_Vme) 
                                                                   (v_Vne:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_range_match)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_range_match))) 
                                                                    v_Vne 
                                                                    _p_E_all_field_different_0_1) 
                                                                   v_Vle) 
                                                                v_Vke) v_Vje) 
                                                          v_Vie) 
                                                       _p_E_equal_transitive) 
                                                    v_Vge) v_Vtd) 
                                              (v_Voe:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_E_equal 
                                                              _p_E_no_match 
                                                              _p_E_range_match) 
                                                           (_p_E_equal 
                                                              _p_E_no_match 
                                                              _p_E_range_match))))) =>
                                               zen.Rsubst _p_E_T 
                                                 (v_Vpe:(zen.term _p_E_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (_p_E_equal 
                                                             _p_E_no_match 
                                                             v_Vpe) 
                                                          (_p_E_equal 
                                                             _p_E_no_match 
                                                             _p_E_range_match)))) 
                                                 _p_E_range_match 
                                                 _p_E_range_match 
                                                 (v_Vqe0:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal _p_E_T 
                                                              _p_E_range_match 
                                                              _p_E_range_match)))) =>
                                                  zen.Rnoteq _p_E_T 
                                                    _p_E_range_match v_Vqe0) 
                                                 (v_Voe0:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_E_equal 
                                                                 _p_E_no_match 
                                                                 _p_E_range_match) 
                                                              (_p_E_equal 
                                                                 _p_E_no_match 
                                                                 _p_E_range_match))))) =>
                                                  zen.Rnoteq basics.bool__t 
                                                    (_p_E_equal 
                                                       _p_E_no_match 
                                                       _p_E_range_match) 
                                                    v_Voe0) v_Voe) v_Vwd) 
                                           (v_Vne:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_E_equal 
                                                        _p_E_no_match 
                                                        _p_E_range_match)))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_E_equal 
                                                       _p_E_no_match 
                                                       _p_E_range_match))) 
                                              v_Vne 
                                              _p_E_all_field_different_0_1) 
                                           v_Vjd0) v_Vve) v_Vue) v_Vte) v_Vse) 
                            _p_E_equal_transitive) 
                         (v_Vwe:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_E_equal _p_E_range_match 
                                         _p_E_range_match))))) =>
                          zen.Rnoteq _p_E_T _p_E_range_match v_Vqe)))) 
                (v_Vxe:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._bar__bar_ 
                             (_p_E_equal (abst_prj_b x) _p_E_partial_match) 
                             (_p_E_equal (abst_prj_b x) _p_E_perfect_match))))) =>
                 focal.zenon_focal_or 
                   (_p_E_equal (abst_prj_b x) _p_E_partial_match) 
                   (_p_E_equal (abst_prj_b x) _p_E_perfect_match) 
                   (v_Vye:
                    (zen.proof 
                       (zen.or 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_E_equal (abst_prj_b x) _p_E_partial_match))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_E_equal (abst_prj_b x) _p_E_perfect_match))))) =>
                    zen.Ror 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_E_equal (abst_prj_b x) _p_E_partial_match))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_E_equal (abst_prj_b x) _p_E_perfect_match))) 
                      (v_Vze:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_E_equal (abst_prj_b x) _p_E_partial_match)))) =>
                       zen.Rcut 
                         (zen.and 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal _p_E_T _p_E_no_match 
                                     (abst_prj_b x)))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_E_equal _p_E_no_match (abst_prj_b x)))))) 
                         (v_Vkd:
                          (zen.proof 
                             (zen.and 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal _p_E_T _p_E_no_match 
                                         (abst_prj_b x)))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_E_equal _p_E_no_match 
                                            (abst_prj_b x))))))) =>
                          zen.Rand 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal _p_E_T _p_E_no_match 
                                     (abst_prj_b x)))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_E_equal _p_E_no_match (abst_prj_b x))))) 
                            (v_Vld:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal _p_E_T _p_E_no_match 
                                         (abst_prj_b x))))) =>
                             v_Vmd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_E_equal _p_E_no_match 
                                            (abst_prj_b x)))))) =>
                             zen.Rall _p_E_T 
                               (v_Vnd:(zen.term _p_E_T) =>
                                zen.forall _p_E_T 
                                  (v_Vod:(zen.term _p_E_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_E_equal v_Vnd v_Vod))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_E_equal v_Vod v_Vnd))))) 
                               (abst_prj_b x) 
                               (v_Vpd:
                                (zen.proof 
                                   (zen.forall _p_E_T 
                                      (v_Vod:(zen.term _p_E_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_E_equal (abst_prj_b x) 
                                                  v_Vod))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_E_equal v_Vod 
                                                  (abst_prj_b x))))))) =>
                                zen.Rall _p_E_T 
                                  (v_Vod:(zen.term _p_E_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_E_equal (abst_prj_b x) v_Vod))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_E_equal v_Vod (abst_prj_b x))))) 
                                  _p_E_no_match 
                                  (v_Vqd:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_E_equal (abst_prj_b x) 
                                                  _p_E_no_match))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_E_equal _p_E_no_match 
                                                  (abst_prj_b x)))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_E_equal (abst_prj_b x) 
                                              _p_E_no_match))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_E_equal _p_E_no_match 
                                              (abst_prj_b x)))) 
                                     (v_Vrd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_E_equal (abst_prj_b x) 
                                                     _p_E_no_match))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_E_equal (abst_prj_b x) 
                                                 _p_E_no_match))) H1 v_Vrd) 
                                     (v_Vsd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_E_equal _p_E_no_match 
                                                  (abst_prj_b x))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_E_equal _p_E_no_match 
                                                 (abst_prj_b x)))) v_Vsd 
                                        v_Vmd) v_Vqd) v_Vpd) 
                               _p_E_equal_symmetric) v_Vkd) 
                         (v_Vtd:
                          (zen.proof 
                             (zen.not 
                                (zen.and 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal _p_E_T _p_E_no_match 
                                            (abst_prj_b x)))) 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_E_equal _p_E_no_match 
                                               (abst_prj_b x)))))))) =>
                          zen.Rcut 
                            (zen.triangle 
                               (zen.equal _p_E_T _p_E_partial_match 
                                  _p_E_partial_match)) 
                            (v_Vaf:
                             (zen.proof 
                                (zen.triangle 
                                   (zen.equal _p_E_T _p_E_partial_match 
                                      _p_E_partial_match))) =>
                             zen.Rsubst basics.bool__t 
                               (v_Vvd:(zen.term basics.bool__t) =>
                                zen.triangle (focal.is_true v_Vvd)) 
                               (_p_E_equal (abst_prj_b x) _p_E_partial_match) 
                               (_p_E_equal _p_E_no_match _p_E_partial_match) 
                               (v_Vbf:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (_p_E_equal (abst_prj_b x) 
                                               _p_E_partial_match) 
                                            (_p_E_equal _p_E_no_match 
                                               _p_E_partial_match))))) =>
                                zen.Rsubst _p_E_T 
                                  (v_Vcf:(zen.term _p_E_T) =>
                                   zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (_p_E_equal v_Vcf 
                                              _p_E_partial_match) 
                                           (_p_E_equal _p_E_no_match 
                                              _p_E_partial_match)))) 
                                  (abst_prj_b x) _p_E_no_match 
                                  (v_Vyd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal _p_E_T (abst_prj_b x) 
                                               _p_E_no_match)))) =>
                                   zen.Rnotand 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal _p_E_T _p_E_no_match 
                                              (abst_prj_b x)))) 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_E_equal _p_E_no_match 
                                                 (abst_prj_b x))))) 
                                     (v_Vzd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_E_T 
                                                     _p_E_no_match 
                                                     (abst_prj_b x)))))) =>
                                      zen.Rnotnot 
                                        (zen.triangle 
                                           (zen.equal _p_E_T _p_E_no_match 
                                              (abst_prj_b x))) 
                                        (v_Vae:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal _p_E_T 
                                                  _p_E_no_match 
                                                  (abst_prj_b x)))) =>
                                         zen.Rcut 
                                           (zen.triangle 
                                              (zen.equal _p_E_T 
                                                 _p_E_no_match _p_E_no_match)) 
                                           (v_Vbe:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal _p_E_T 
                                                     _p_E_no_match 
                                                     _p_E_no_match))) =>
                                            zen.Rsubst _p_E_T 
                                              (v_Vce:(zen.term _p_E_T) =>
                                               zen.triangle 
                                                 (zen.equal _p_E_T v_Vce 
                                                    _p_E_no_match)) 
                                              _p_E_no_match (abst_prj_b x) 
                                              (v_Vld:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_E_T 
                                                           _p_E_no_match 
                                                           (abst_prj_b x))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (zen.equal _p_E_T 
                                                       _p_E_no_match 
                                                       (abst_prj_b x))) 
                                                 v_Vae v_Vld) 
                                              (v_Vde:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal _p_E_T 
                                                        (abst_prj_b x) 
                                                        _p_E_no_match))) =>
                                               zen.Rsubst _p_E_T 
                                                 (v_Vee:(zen.term _p_E_T) =>
                                                  zen.triangle 
                                                    (zen.equal _p_E_T 
                                                       (abst_prj_b x) v_Vee)) 
                                                 _p_E_no_match _p_E_no_match 
                                                 (v_Vfe:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal _p_E_T 
                                                              _p_E_no_match 
                                                              _p_E_no_match)))) =>
                                                  zen.Rnoteq _p_E_T 
                                                    _p_E_no_match v_Vfe) 
                                                 (v_Vde0:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal _p_E_T 
                                                           (abst_prj_b x) 
                                                           _p_E_no_match))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (zen.equal _p_E_T 
                                                          (abst_prj_b x) 
                                                          _p_E_no_match)) 
                                                    v_Vde0 v_Vyd) v_Vde) 
                                              v_Vbe) 
                                           (v_Vfe:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_E_T 
                                                        _p_E_no_match 
                                                        _p_E_no_match)))) =>
                                            zen.Rnoteq _p_E_T _p_E_no_match 
                                              v_Vfe)) v_Vzd) 
                                     (v_Vge:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_E_equal 
                                                        _p_E_no_match 
                                                        (abst_prj_b x))))))) =>
                                      zen.Rnotnot 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_E_equal _p_E_no_match 
                                                 (abst_prj_b x)))) 
                                        (v_Vsd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_E_equal _p_E_no_match 
                                                     (abst_prj_b x))))) =>
                                         zen.Rall _p_E_T 
                                           (v_Vnd:(zen.term _p_E_T) =>
                                            zen.forall _p_E_T 
                                              (v_Vod:(zen.term _p_E_T) =>
                                               zen.forall _p_E_T 
                                                 (v_Vhe:(zen.term _p_E_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_E_equal v_Vnd 
                                                             v_Vod))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_E_equal 
                                                                v_Vod v_Vhe))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_E_equal 
                                                                v_Vnd v_Vhe))))))) 
                                           _p_E_no_match 
                                           (v_Vie:
                                            (zen.proof 
                                               (zen.forall _p_E_T 
                                                  (v_Vod:(zen.term _p_E_T) =>
                                                   zen.forall _p_E_T 
                                                     (v_Vhe:
                                                      (zen.term _p_E_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_E_equal 
                                                                 _p_E_no_match 
                                                                 v_Vod))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_E_equal 
                                                                    v_Vod 
                                                                    v_Vhe))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    v_Vhe)))))))) =>
                                            zen.Rall _p_E_T 
                                              (v_Vod:(zen.term _p_E_T) =>
                                               zen.forall _p_E_T 
                                                 (v_Vhe:(zen.term _p_E_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_E_equal 
                                                             _p_E_no_match 
                                                             v_Vod))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_E_equal 
                                                                v_Vod v_Vhe))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_E_equal 
                                                                _p_E_no_match 
                                                                v_Vhe)))))) 
                                              (abst_prj_b x) 
                                              (v_Vje:
                                               (zen.proof 
                                                  (zen.forall _p_E_T 
                                                     (v_Vhe:
                                                      (zen.term _p_E_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_E_equal 
                                                                 _p_E_no_match 
                                                                 (abst_prj_b 
                                                                    x)))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_E_equal 
                                                                    (
                                                                    abst_prj_b 
                                                                    x) v_Vhe))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    v_Vhe))))))) =>
                                               zen.Rall _p_E_T 
                                                 (v_Vhe:(zen.term _p_E_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_E_equal 
                                                             _p_E_no_match 
                                                             (abst_prj_b x)))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_E_equal 
                                                                (abst_prj_b x) 
                                                                v_Vhe))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_E_equal 
                                                                _p_E_no_match 
                                                                v_Vhe))))) 
                                                 _p_E_partial_match 
                                                 (v_Vdf:
                                                  (zen.proof 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_E_equal 
                                                                 _p_E_no_match 
                                                                 (abst_prj_b 
                                                                    x)))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_E_equal 
                                                                    (
                                                                    abst_prj_b 
                                                                    x) 
                                                                    _p_E_partial_match))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_partial_match)))))) =>
                                                  zen.Rimply 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_E_equal 
                                                             _p_E_no_match 
                                                             (abst_prj_b x)))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_E_equal 
                                                                (abst_prj_b x) 
                                                                _p_E_partial_match))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_E_equal 
                                                                _p_E_no_match 
                                                                _p_E_partial_match)))) 
                                                    (v_Vmd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    (
                                                                    abst_prj_b 
                                                                    x)))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_E_equal 
                                                                _p_E_no_match 
                                                                (abst_prj_b x)))) 
                                                       v_Vsd v_Vmd) 
                                                    (v_Vef:
                                                     (zen.proof 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_E_equal 
                                                                    (
                                                                    abst_prj_b 
                                                                    x) 
                                                                    _p_E_partial_match))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_partial_match))))) =>
                                                     zen.Rimply 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_E_equal 
                                                                (abst_prj_b x) 
                                                                _p_E_partial_match))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_E_equal 
                                                                _p_E_no_match 
                                                                _p_E_partial_match))) 
                                                       (v_Vff:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_E_equal 
                                                                    (abst_prj_b 
                                                                    x) 
                                                                    _p_E_partial_match))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_E_equal 
                                                                   (abst_prj_b 
                                                                    x) 
                                                                   _p_E_partial_match))) 
                                                          v_Vze v_Vff) 
                                                       (v_Vgf:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_partial_match)))) =>
                                                        zen.Rsubst 
                                                          basics.bool__t 
                                                          (v_Vvd:
                                                           (zen.term 
                                                              basics.bool__t) =>
                                                           zen.triangle 
                                                             (focal.is_true 
                                                                v_Vvd)) 
                                                          (_p_E_equal 
                                                             _p_E_no_match 
                                                             _p_E_partial_match) 
                                                          (_p_E_equal 
                                                             _p_E_no_match 
                                                             _p_E_partial_match) 
                                                          (v_Vhf:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_partial_match) 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_partial_match))))) =>
                                                           zen.Rsubst _p_E_T 
                                                             (v_Vcf:
                                                              (zen.term 
                                                                 _p_E_T) =>
                                                              zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_E_equal 
                                                                    v_Vcf 
                                                                    _p_E_partial_match) 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_partial_match)))) 
                                                             _p_E_no_match 
                                                             _p_E_no_match 
                                                             (v_Vfe:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_E_T 
                                                                    _p_E_no_match 
                                                                    _p_E_no_match)))) =>
                                                              zen.Rnoteq 
                                                                _p_E_T 
                                                                _p_E_no_match 
                                                                v_Vfe) 
                                                             (v_Vhf0:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_partial_match) 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_partial_match))))) =>
                                                              zen.Rsubst 
                                                                _p_E_T 
                                                                (v_Vpe:
                                                                 (zen.term 
                                                                    _p_E_T) =>
                                                                 zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    v_Vpe) 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_partial_match)))) 
                                                                _p_E_partial_match 
                                                                _p_E_partial_match 
                                                                (v_Vif:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_E_T 
                                                                    _p_E_partial_match 
                                                                    _p_E_partial_match)))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_E_T 
                                                                    _p_E_partial_match 
                                                                    _p_E_partial_match)) 
                                                                   v_Vaf 
                                                                   v_Vif) 
                                                                (v_Vhf0:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_partial_match) 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_partial_match))))) =>
                                                                 zen.Rnoteq 
                                                                   basics.bool__t 
                                                                   (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_partial_match) 
                                                                   v_Vhf0) 
                                                                v_Vhf0) v_Vhf) 
                                                          (v_Vgf0:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_partial_match)))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_partial_match))) 
                                                             v_Vgf0 
                                                             _p_E_all_field_different_0_2) 
                                                          v_Vgf) v_Vef) v_Vdf) 
                                                 v_Vje) v_Vie) 
                                           _p_E_equal_transitive) v_Vge) 
                                     v_Vtd) 
                                  (v_Vhf:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (_p_E_equal _p_E_no_match 
                                                  _p_E_partial_match) 
                                               (_p_E_equal _p_E_no_match 
                                                  _p_E_partial_match))))) =>
                                   zen.Rsubst _p_E_T 
                                     (v_Vpe:(zen.term _p_E_T) =>
                                      zen.not 
                                        (zen.triangle 
                                           (zen.equal basics.bool__t 
                                              (_p_E_equal _p_E_no_match v_Vpe) 
                                              (_p_E_equal _p_E_no_match 
                                                 _p_E_partial_match)))) 
                                     _p_E_partial_match _p_E_partial_match 
                                     (v_Vif:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_E_T 
                                                  _p_E_partial_match 
                                                  _p_E_partial_match)))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (zen.equal _p_E_T 
                                              _p_E_partial_match 
                                              _p_E_partial_match)) v_Vaf 
                                        v_Vif) 
                                     (v_Vhf0:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (_p_E_equal _p_E_no_match 
                                                     _p_E_partial_match) 
                                                  (_p_E_equal _p_E_no_match 
                                                     _p_E_partial_match))))) =>
                                      zen.Rnoteq basics.bool__t 
                                        (_p_E_equal _p_E_no_match 
                                           _p_E_partial_match) v_Vhf0) v_Vhf) 
                                  v_Vbf) 
                               (v_Vgf:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_E_equal _p_E_no_match 
                                            _p_E_partial_match)))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_E_equal _p_E_no_match 
                                           _p_E_partial_match))) v_Vgf 
                                  _p_E_all_field_different_0_2) v_Vze) 
                            (v_Vif:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal _p_E_T _p_E_partial_match 
                                         _p_E_partial_match)))) =>
                             zen.Rcut 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_E_equal _p_E_partial_match 
                                        _p_E_partial_match))) 
                               (v_Vjf:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_E_equal _p_E_partial_match 
                                            _p_E_partial_match)))) =>
                                zen.Rall _p_E_T 
                                  (v_Vnd:(zen.term _p_E_T) =>
                                   zen.forall _p_E_T 
                                     (v_Vod:(zen.term _p_E_T) =>
                                      zen.forall _p_E_T 
                                        (v_Vhe:(zen.term _p_E_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_E_equal v_Vnd v_Vod))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_E_equal v_Vod v_Vhe))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_E_equal v_Vnd v_Vhe))))))) 
                                  (abst_prj_b x) 
                                  (v_Vse:
                                   (zen.proof 
                                      (zen.forall _p_E_T 
                                         (v_Vod:(zen.term _p_E_T) =>
                                          zen.forall _p_E_T 
                                            (v_Vhe:(zen.term _p_E_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_E_equal 
                                                        (abst_prj_b x) v_Vod))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_E_equal v_Vod 
                                                           v_Vhe))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_E_equal 
                                                           (abst_prj_b x) 
                                                           v_Vhe)))))))) =>
                                   zen.Rall _p_E_T 
                                     (v_Vod:(zen.term _p_E_T) =>
                                      zen.forall _p_E_T 
                                        (v_Vhe:(zen.term _p_E_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_E_equal (abst_prj_b x) 
                                                    v_Vod))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_E_equal v_Vod v_Vhe))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_E_equal 
                                                       (abst_prj_b x) v_Vhe)))))) 
                                     _p_E_partial_match 
                                     (v_Vkf:
                                      (zen.proof 
                                         (zen.forall _p_E_T 
                                            (v_Vhe:(zen.term _p_E_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_E_equal 
                                                        (abst_prj_b x) 
                                                        _p_E_partial_match))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_E_equal 
                                                           _p_E_partial_match 
                                                           v_Vhe))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_E_equal 
                                                           (abst_prj_b x) 
                                                           v_Vhe))))))) =>
                                      zen.Rall _p_E_T 
                                        (v_Vhe:(zen.term _p_E_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_E_equal (abst_prj_b x) 
                                                    _p_E_partial_match))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_E_equal 
                                                       _p_E_partial_match 
                                                       v_Vhe))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_E_equal 
                                                       (abst_prj_b x) v_Vhe))))) 
                                        _p_E_partial_match 
                                        (v_Vlf:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_E_equal 
                                                        (abst_prj_b x) 
                                                        _p_E_partial_match))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_E_equal 
                                                           _p_E_partial_match 
                                                           _p_E_partial_match))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_E_equal 
                                                           (abst_prj_b x) 
                                                           _p_E_partial_match)))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_E_equal (abst_prj_b x) 
                                                    _p_E_partial_match))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_E_equal 
                                                       _p_E_partial_match 
                                                       _p_E_partial_match))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_E_equal 
                                                       (abst_prj_b x) 
                                                       _p_E_partial_match)))) 
                                           (v_Vff:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_E_equal 
                                                           (abst_prj_b x) 
                                                           _p_E_partial_match))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_E_equal 
                                                       (abst_prj_b x) 
                                                       _p_E_partial_match))) 
                                              v_Vze v_Vff) 
                                           (v_Vmf:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_E_equal 
                                                           _p_E_partial_match 
                                                           _p_E_partial_match))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_E_equal 
                                                           (abst_prj_b x) 
                                                           _p_E_partial_match))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_E_equal 
                                                       _p_E_partial_match 
                                                       _p_E_partial_match))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_E_equal 
                                                       (abst_prj_b x) 
                                                       _p_E_partial_match))) 
                                              (v_Vnf:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_E_equal 
                                                              _p_E_partial_match 
                                                              _p_E_partial_match))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_E_equal 
                                                          _p_E_partial_match 
                                                          _p_E_partial_match))) 
                                                 v_Vjf v_Vnf) 
                                              (v_Vze0:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_E_equal 
                                                           (abst_prj_b x) 
                                                           _p_E_partial_match)))) =>
                                               zen.Rsubst basics.bool__t 
                                                 (v_Vvd:
                                                  (zen.term basics.bool__t) =>
                                                  zen.triangle 
                                                    (focal.is_true v_Vvd)) 
                                                 (_p_E_equal (abst_prj_b x) 
                                                    _p_E_partial_match) 
                                                 (_p_E_equal _p_E_no_match 
                                                    _p_E_partial_match) 
                                                 (v_Vbf:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_E_equal 
                                                                 (abst_prj_b 
                                                                    x) 
                                                                 _p_E_partial_match) 
                                                              (_p_E_equal 
                                                                 _p_E_no_match 
                                                                 _p_E_partial_match))))) =>
                                                  zen.Rsubst _p_E_T 
                                                    (v_Vcf:
                                                     (zen.term _p_E_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (_p_E_equal 
                                                                v_Vcf 
                                                                _p_E_partial_match) 
                                                             (_p_E_equal 
                                                                _p_E_no_match 
                                                                _p_E_partial_match)))) 
                                                    (abst_prj_b x) 
                                                    _p_E_no_match 
                                                    (v_Vyd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_E_T 
                                                                 (abst_prj_b 
                                                                    x) 
                                                                 _p_E_no_match)))) =>
                                                     zen.Rnotand 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_E_T 
                                                                _p_E_no_match 
                                                                (abst_prj_b x)))) 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_E_equal 
                                                                   _p_E_no_match 
                                                                   (abst_prj_b 
                                                                    x))))) 
                                                       (v_Vzd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_E_T 
                                                                    _p_E_no_match 
                                                                    (abst_prj_b 
                                                                    x)))))) =>
                                                        zen.Rnotnot 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_E_T 
                                                                _p_E_no_match 
                                                                (abst_prj_b x))) 
                                                          (v_Vae:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_E_T 
                                                                    _p_E_no_match 
                                                                    (
                                                                    abst_prj_b 
                                                                    x)))) =>
                                                           zen.Reqsym _p_E_T 
                                                             _p_E_no_match 
                                                             (abst_prj_b x) 
                                                             v_Vae v_Vyd) 
                                                          v_Vzd) 
                                                       (v_Vge:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    (abst_prj_b 
                                                                    x))))))) =>
                                                        zen.Rnotnot 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_E_equal 
                                                                   _p_E_no_match 
                                                                   (abst_prj_b 
                                                                    x)))) 
                                                          (v_Vsd:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_E_equal 
                                                                    _p_E_no_match 
                                                                    (abst_prj_b 
                                                                    x))))) =>
                                                           zen.Rall _p_E_T 
                                                             (v_Vnd:
                                                              (zen.term 
                                                                 _p_E_T) =>
                                                              zen.forall 
                                                                _p_E_T 
                                                                (v_Vod:
                                                                 (zen.term 
                                                                    _p_E_T) =>
                                                                 zen.forall 
                                                                   _p_E_T 
                                                                   (v_Vhe:
                                                                    (
                                                                    zen.term 
                                                                    _p_E_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    v_Vnd 
                                                                    v_Vod))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    v_Vod 
                                                                    v_Vhe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    v_Vnd 
                                                                    v_Vhe))))))) 
                                                             _p_E_no_match 
                                                             (v_Vie:
                                                              (zen.proof 
                                                                 (zen.forall 
                                                                    _p_E_T 
                                                                    (
                                                                    v_Vod:
                                                                    (
                                                                    zen.term 
                                                                    _p_E_T) =>
                                                                    zen.forall 
                                                                    _p_E_T 
                                                                    (v_Vhe:
                                                                    (zen.term 
                                                                    _p_E_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    v_Vod))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    v_Vod 
                                                                    v_Vhe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    v_Vhe)))))))) =>
                                                              zen.Rall 
                                                                _p_E_T 
                                                                (v_Vod:
                                                                 (zen.term 
                                                                    _p_E_T) =>
                                                                 zen.forall 
                                                                   _p_E_T 
                                                                   (v_Vhe:
                                                                    (
                                                                    zen.term 
                                                                    _p_E_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    v_Vod))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    v_Vod 
                                                                    v_Vhe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    v_Vhe)))))) 
                                                                (abst_prj_b x) 
                                                                (v_Vje:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.forall 
                                                                    _p_E_T 
                                                                    (v_Vhe:
                                                                    (zen.term 
                                                                    _p_E_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    (abst_prj_b 
                                                                    x)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    (abst_prj_b 
                                                                    x) v_Vhe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    v_Vhe))))))) =>
                                                                 zen.Rall 
                                                                   _p_E_T 
                                                                   (v_Vhe:
                                                                    (
                                                                    zen.term 
                                                                    _p_E_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    (abst_prj_b 
                                                                    x)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    (abst_prj_b 
                                                                    x) v_Vhe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    v_Vhe))))) 
                                                                   _p_E_partial_match 
                                                                   (v_Vdf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    (abst_prj_b 
                                                                    x)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    (abst_prj_b 
                                                                    x) 
                                                                    _p_E_partial_match))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_partial_match)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    (abst_prj_b 
                                                                    x)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    (abst_prj_b 
                                                                    x) 
                                                                    _p_E_partial_match))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_partial_match)))) 
                                                                    (v_Vmd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    (abst_prj_b 
                                                                    x)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    (abst_prj_b 
                                                                    x)))) 
                                                                    v_Vsd 
                                                                    v_Vmd) 
                                                                    (v_Vef:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    (abst_prj_b 
                                                                    x) 
                                                                    _p_E_partial_match))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_partial_match))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    (abst_prj_b 
                                                                    x) 
                                                                    _p_E_partial_match))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_partial_match))) 
                                                                    (v_Vff:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    (abst_prj_b 
                                                                    x) 
                                                                    _p_E_partial_match))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    (abst_prj_b 
                                                                    x) 
                                                                    _p_E_partial_match))) 
                                                                    v_Vze0 
                                                                    v_Vff) 
                                                                    (v_Vgf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_partial_match)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_partial_match))) 
                                                                    v_Vgf 
                                                                    _p_E_all_field_different_0_2) 
                                                                    v_Vef) 
                                                                    v_Vdf) 
                                                                   v_Vje) 
                                                                v_Vie) 
                                                             _p_E_equal_transitive) 
                                                          v_Vge) v_Vtd) 
                                                    (v_Vhf:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_partial_match) 
                                                                 (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_partial_match))))) =>
                                                     zen.Rsubst _p_E_T 
                                                       (v_Vpe:
                                                        (zen.term _p_E_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (_p_E_equal 
                                                                   _p_E_no_match 
                                                                   v_Vpe) 
                                                                (_p_E_equal 
                                                                   _p_E_no_match 
                                                                   _p_E_partial_match)))) 
                                                       _p_E_partial_match 
                                                       _p_E_partial_match 
                                                       (v_Vif0:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_E_T 
                                                                    _p_E_partial_match 
                                                                    _p_E_partial_match)))) =>
                                                        zen.Rnoteq _p_E_T 
                                                          _p_E_partial_match 
                                                          v_Vif0) 
                                                       (v_Vhf0:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    _p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_partial_match) 
                                                                    (
                                                                    _p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_partial_match))))) =>
                                                        zen.Rnoteq 
                                                          basics.bool__t 
                                                          (_p_E_equal 
                                                             _p_E_no_match 
                                                             _p_E_partial_match) 
                                                          v_Vhf0) v_Vhf) 
                                                    v_Vbf) 
                                                 (v_Vgf:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_E_equal 
                                                              _p_E_no_match 
                                                              _p_E_partial_match)))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_E_equal 
                                                             _p_E_no_match 
                                                             _p_E_partial_match))) 
                                                    v_Vgf 
                                                    _p_E_all_field_different_0_2) 
                                                 v_Vze0) v_Vmf) v_Vlf) v_Vkf) 
                                     v_Vse) _p_E_equal_transitive) 
                               (v_Vnf:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_E_equal _p_E_partial_match 
                                               _p_E_partial_match))))) =>
                                zen.Rnoteq _p_E_T _p_E_partial_match v_Vif)))) 
                      (v_Vof:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_E_equal (abst_prj_b x) _p_E_perfect_match)))) =>
                       zen.Rcut 
                         (zen.and 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal _p_E_T _p_E_no_match 
                                     (abst_prj_b x)))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_E_equal _p_E_no_match (abst_prj_b x)))))) 
                         (v_Vkd:
                          (zen.proof 
                             (zen.and 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal _p_E_T _p_E_no_match 
                                         (abst_prj_b x)))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_E_equal _p_E_no_match 
                                            (abst_prj_b x))))))) =>
                          zen.Rand 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal _p_E_T _p_E_no_match 
                                     (abst_prj_b x)))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_E_equal _p_E_no_match (abst_prj_b x))))) 
                            (v_Vld:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal _p_E_T _p_E_no_match 
                                         (abst_prj_b x))))) =>
                             v_Vmd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_E_equal _p_E_no_match 
                                            (abst_prj_b x)))))) =>
                             zen.Rall _p_E_T 
                               (v_Vnd:(zen.term _p_E_T) =>
                                zen.forall _p_E_T 
                                  (v_Vod:(zen.term _p_E_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_E_equal v_Vnd v_Vod))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_E_equal v_Vod v_Vnd))))) 
                               (abst_prj_b x) 
                               (v_Vpd:
                                (zen.proof 
                                   (zen.forall _p_E_T 
                                      (v_Vod:(zen.term _p_E_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_E_equal (abst_prj_b x) 
                                                  v_Vod))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_E_equal v_Vod 
                                                  (abst_prj_b x))))))) =>
                                zen.Rall _p_E_T 
                                  (v_Vod:(zen.term _p_E_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_E_equal (abst_prj_b x) v_Vod))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_E_equal v_Vod (abst_prj_b x))))) 
                                  _p_E_no_match 
                                  (v_Vqd:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_E_equal (abst_prj_b x) 
                                                  _p_E_no_match))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_E_equal _p_E_no_match 
                                                  (abst_prj_b x)))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_E_equal (abst_prj_b x) 
                                              _p_E_no_match))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_E_equal _p_E_no_match 
                                              (abst_prj_b x)))) 
                                     (v_Vrd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_E_equal (abst_prj_b x) 
                                                     _p_E_no_match))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_E_equal (abst_prj_b x) 
                                                 _p_E_no_match))) H1 v_Vrd) 
                                     (v_Vsd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_E_equal _p_E_no_match 
                                                  (abst_prj_b x))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_E_equal _p_E_no_match 
                                                 (abst_prj_b x)))) v_Vsd 
                                        v_Vmd) v_Vqd) v_Vpd) 
                               _p_E_equal_symmetric) v_Vkd) 
                         (v_Vtd:
                          (zen.proof 
                             (zen.not 
                                (zen.and 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal _p_E_T _p_E_no_match 
                                            (abst_prj_b x)))) 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_E_equal _p_E_no_match 
                                               (abst_prj_b x)))))))) =>
                          zen.Rcut 
                            (zen.triangle 
                               (zen.equal _p_E_T _p_E_perfect_match 
                                  _p_E_perfect_match)) 
                            (v_Vpf:
                             (zen.proof 
                                (zen.triangle 
                                   (zen.equal _p_E_T _p_E_perfect_match 
                                      _p_E_perfect_match))) =>
                             zen.Rsubst basics.bool__t 
                               (v_Vvd:(zen.term basics.bool__t) =>
                                zen.triangle (focal.is_true v_Vvd)) 
                               (_p_E_equal (abst_prj_b x) _p_E_perfect_match) 
                               (_p_E_equal _p_E_no_match _p_E_perfect_match) 
                               (v_Vqf:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (_p_E_equal (abst_prj_b x) 
                                               _p_E_perfect_match) 
                                            (_p_E_equal _p_E_no_match 
                                               _p_E_perfect_match))))) =>
                                zen.Rsubst _p_E_T 
                                  (v_Vrf:(zen.term _p_E_T) =>
                                   zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (_p_E_equal v_Vrf 
                                              _p_E_perfect_match) 
                                           (_p_E_equal _p_E_no_match 
                                              _p_E_perfect_match)))) 
                                  (abst_prj_b x) _p_E_no_match 
                                  (v_Vyd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal _p_E_T (abst_prj_b x) 
                                               _p_E_no_match)))) =>
                                   zen.Rnotand 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal _p_E_T _p_E_no_match 
                                              (abst_prj_b x)))) 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_E_equal _p_E_no_match 
                                                 (abst_prj_b x))))) 
                                     (v_Vzd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_E_T 
                                                     _p_E_no_match 
                                                     (abst_prj_b x)))))) =>
                                      zen.Rnotnot 
                                        (zen.triangle 
                                           (zen.equal _p_E_T _p_E_no_match 
                                              (abst_prj_b x))) 
                                        (v_Vae:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal _p_E_T 
                                                  _p_E_no_match 
                                                  (abst_prj_b x)))) =>
                                         zen.Rcut 
                                           (zen.triangle 
                                              (zen.equal _p_E_T 
                                                 _p_E_no_match _p_E_no_match)) 
                                           (v_Vbe:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal _p_E_T 
                                                     _p_E_no_match 
                                                     _p_E_no_match))) =>
                                            zen.Rsubst _p_E_T 
                                              (v_Vce:(zen.term _p_E_T) =>
                                               zen.triangle 
                                                 (zen.equal _p_E_T v_Vce 
                                                    _p_E_no_match)) 
                                              _p_E_no_match (abst_prj_b x) 
                                              (v_Vld:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_E_T 
                                                           _p_E_no_match 
                                                           (abst_prj_b x))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (zen.equal _p_E_T 
                                                       _p_E_no_match 
                                                       (abst_prj_b x))) 
                                                 v_Vae v_Vld) 
                                              (v_Vde:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal _p_E_T 
                                                        (abst_prj_b x) 
                                                        _p_E_no_match))) =>
                                               zen.Rsubst _p_E_T 
                                                 (v_Vee:(zen.term _p_E_T) =>
                                                  zen.triangle 
                                                    (zen.equal _p_E_T 
                                                       (abst_prj_b x) v_Vee)) 
                                                 _p_E_no_match _p_E_no_match 
                                                 (v_Vfe:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal _p_E_T 
                                                              _p_E_no_match 
                                                              _p_E_no_match)))) =>
                                                  zen.Rnoteq _p_E_T 
                                                    _p_E_no_match v_Vfe) 
                                                 (v_Vde0:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal _p_E_T 
                                                           (abst_prj_b x) 
                                                           _p_E_no_match))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (zen.equal _p_E_T 
                                                          (abst_prj_b x) 
                                                          _p_E_no_match)) 
                                                    v_Vde0 v_Vyd) v_Vde) 
                                              v_Vbe) 
                                           (v_Vfe:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_E_T 
                                                        _p_E_no_match 
                                                        _p_E_no_match)))) =>
                                            zen.Rnoteq _p_E_T _p_E_no_match 
                                              v_Vfe)) v_Vzd) 
                                     (v_Vge:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_E_equal 
                                                        _p_E_no_match 
                                                        (abst_prj_b x))))))) =>
                                      zen.Rnotnot 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_E_equal _p_E_no_match 
                                                 (abst_prj_b x)))) 
                                        (v_Vsd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_E_equal _p_E_no_match 
                                                     (abst_prj_b x))))) =>
                                         zen.Rall _p_E_T 
                                           (v_Vnd:(zen.term _p_E_T) =>
                                            zen.forall _p_E_T 
                                              (v_Vod:(zen.term _p_E_T) =>
                                               zen.forall _p_E_T 
                                                 (v_Vhe:(zen.term _p_E_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_E_equal v_Vnd 
                                                             v_Vod))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_E_equal 
                                                                v_Vod v_Vhe))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_E_equal 
                                                                v_Vnd v_Vhe))))))) 
                                           _p_E_no_match 
                                           (v_Vie:
                                            (zen.proof 
                                               (zen.forall _p_E_T 
                                                  (v_Vod:(zen.term _p_E_T) =>
                                                   zen.forall _p_E_T 
                                                     (v_Vhe:
                                                      (zen.term _p_E_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_E_equal 
                                                                 _p_E_no_match 
                                                                 v_Vod))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_E_equal 
                                                                    v_Vod 
                                                                    v_Vhe))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    v_Vhe)))))))) =>
                                            zen.Rall _p_E_T 
                                              (v_Vod:(zen.term _p_E_T) =>
                                               zen.forall _p_E_T 
                                                 (v_Vhe:(zen.term _p_E_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_E_equal 
                                                             _p_E_no_match 
                                                             v_Vod))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_E_equal 
                                                                v_Vod v_Vhe))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_E_equal 
                                                                _p_E_no_match 
                                                                v_Vhe)))))) 
                                              (abst_prj_b x) 
                                              (v_Vje:
                                               (zen.proof 
                                                  (zen.forall _p_E_T 
                                                     (v_Vhe:
                                                      (zen.term _p_E_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_E_equal 
                                                                 _p_E_no_match 
                                                                 (abst_prj_b 
                                                                    x)))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_E_equal 
                                                                    (
                                                                    abst_prj_b 
                                                                    x) v_Vhe))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    v_Vhe))))))) =>
                                               zen.Rall _p_E_T 
                                                 (v_Vhe:(zen.term _p_E_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_E_equal 
                                                             _p_E_no_match 
                                                             (abst_prj_b x)))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_E_equal 
                                                                (abst_prj_b x) 
                                                                v_Vhe))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_E_equal 
                                                                _p_E_no_match 
                                                                v_Vhe))))) 
                                                 _p_E_perfect_match 
                                                 (v_Vsf:
                                                  (zen.proof 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_E_equal 
                                                                 _p_E_no_match 
                                                                 (abst_prj_b 
                                                                    x)))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_E_equal 
                                                                    (
                                                                    abst_prj_b 
                                                                    x) 
                                                                    _p_E_perfect_match))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_perfect_match)))))) =>
                                                  zen.Rimply 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_E_equal 
                                                             _p_E_no_match 
                                                             (abst_prj_b x)))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_E_equal 
                                                                (abst_prj_b x) 
                                                                _p_E_perfect_match))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_E_equal 
                                                                _p_E_no_match 
                                                                _p_E_perfect_match)))) 
                                                    (v_Vmd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    (
                                                                    abst_prj_b 
                                                                    x)))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_E_equal 
                                                                _p_E_no_match 
                                                                (abst_prj_b x)))) 
                                                       v_Vsd v_Vmd) 
                                                    (v_Vtf:
                                                     (zen.proof 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_E_equal 
                                                                    (
                                                                    abst_prj_b 
                                                                    x) 
                                                                    _p_E_perfect_match))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_perfect_match))))) =>
                                                     zen.Rimply 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_E_equal 
                                                                (abst_prj_b x) 
                                                                _p_E_perfect_match))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_E_equal 
                                                                _p_E_no_match 
                                                                _p_E_perfect_match))) 
                                                       (v_Vuf:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_E_equal 
                                                                    (abst_prj_b 
                                                                    x) 
                                                                    _p_E_perfect_match))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_E_equal 
                                                                   (abst_prj_b 
                                                                    x) 
                                                                   _p_E_perfect_match))) 
                                                          v_Vof v_Vuf) 
                                                       (v_Vvf:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_perfect_match)))) =>
                                                        zen.Rsubst 
                                                          basics.bool__t 
                                                          (v_Vvd:
                                                           (zen.term 
                                                              basics.bool__t) =>
                                                           zen.triangle 
                                                             (focal.is_true 
                                                                v_Vvd)) 
                                                          (_p_E_equal 
                                                             _p_E_no_match 
                                                             _p_E_perfect_match) 
                                                          (_p_E_equal 
                                                             _p_E_no_match 
                                                             _p_E_perfect_match) 
                                                          (v_Vwf:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_perfect_match) 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_perfect_match))))) =>
                                                           zen.Rsubst _p_E_T 
                                                             (v_Vrf:
                                                              (zen.term 
                                                                 _p_E_T) =>
                                                              zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_E_equal 
                                                                    v_Vrf 
                                                                    _p_E_perfect_match) 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_perfect_match)))) 
                                                             _p_E_no_match 
                                                             _p_E_no_match 
                                                             (v_Vfe:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_E_T 
                                                                    _p_E_no_match 
                                                                    _p_E_no_match)))) =>
                                                              zen.Rnoteq 
                                                                _p_E_T 
                                                                _p_E_no_match 
                                                                v_Vfe) 
                                                             (v_Vwf0:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_perfect_match) 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_perfect_match))))) =>
                                                              zen.Rsubst 
                                                                _p_E_T 
                                                                (v_Vpe:
                                                                 (zen.term 
                                                                    _p_E_T) =>
                                                                 zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    v_Vpe) 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_perfect_match)))) 
                                                                _p_E_perfect_match 
                                                                _p_E_perfect_match 
                                                                (v_Vxf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_E_T 
                                                                    _p_E_perfect_match 
                                                                    _p_E_perfect_match)))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_E_T 
                                                                    _p_E_perfect_match 
                                                                    _p_E_perfect_match)) 
                                                                   v_Vpf 
                                                                   v_Vxf) 
                                                                (v_Vwf0:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_perfect_match) 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_perfect_match))))) =>
                                                                 zen.Rnoteq 
                                                                   basics.bool__t 
                                                                   (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_perfect_match) 
                                                                   v_Vwf0) 
                                                                v_Vwf0) v_Vwf) 
                                                          (v_Vvf0:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_perfect_match)))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_perfect_match))) 
                                                             v_Vvf0 
                                                             _p_E_all_field_different_0_3) 
                                                          v_Vvf) v_Vtf) v_Vsf) 
                                                 v_Vje) v_Vie) 
                                           _p_E_equal_transitive) v_Vge) 
                                     v_Vtd) 
                                  (v_Vwf:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (_p_E_equal _p_E_no_match 
                                                  _p_E_perfect_match) 
                                               (_p_E_equal _p_E_no_match 
                                                  _p_E_perfect_match))))) =>
                                   zen.Rsubst _p_E_T 
                                     (v_Vpe:(zen.term _p_E_T) =>
                                      zen.not 
                                        (zen.triangle 
                                           (zen.equal basics.bool__t 
                                              (_p_E_equal _p_E_no_match v_Vpe) 
                                              (_p_E_equal _p_E_no_match 
                                                 _p_E_perfect_match)))) 
                                     _p_E_perfect_match _p_E_perfect_match 
                                     (v_Vxf:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_E_T 
                                                  _p_E_perfect_match 
                                                  _p_E_perfect_match)))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (zen.equal _p_E_T 
                                              _p_E_perfect_match 
                                              _p_E_perfect_match)) v_Vpf 
                                        v_Vxf) 
                                     (v_Vwf0:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (_p_E_equal _p_E_no_match 
                                                     _p_E_perfect_match) 
                                                  (_p_E_equal _p_E_no_match 
                                                     _p_E_perfect_match))))) =>
                                      zen.Rnoteq basics.bool__t 
                                        (_p_E_equal _p_E_no_match 
                                           _p_E_perfect_match) v_Vwf0) v_Vwf) 
                                  v_Vqf) 
                               (v_Vvf:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_E_equal _p_E_no_match 
                                            _p_E_perfect_match)))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_E_equal _p_E_no_match 
                                           _p_E_perfect_match))) v_Vvf 
                                  _p_E_all_field_different_0_3) v_Vof) 
                            (v_Vxf:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal _p_E_T _p_E_perfect_match 
                                         _p_E_perfect_match)))) =>
                             zen.Rcut 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_E_equal _p_E_perfect_match 
                                        _p_E_perfect_match))) 
                               (v_Vyf:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_E_equal _p_E_perfect_match 
                                            _p_E_perfect_match)))) =>
                                zen.Rall _p_E_T 
                                  (v_Vnd:(zen.term _p_E_T) =>
                                   zen.forall _p_E_T 
                                     (v_Vod:(zen.term _p_E_T) =>
                                      zen.forall _p_E_T 
                                        (v_Vhe:(zen.term _p_E_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_E_equal v_Vnd v_Vod))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_E_equal v_Vod v_Vhe))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_E_equal v_Vnd v_Vhe))))))) 
                                  (abst_prj_b x) 
                                  (v_Vse:
                                   (zen.proof 
                                      (zen.forall _p_E_T 
                                         (v_Vod:(zen.term _p_E_T) =>
                                          zen.forall _p_E_T 
                                            (v_Vhe:(zen.term _p_E_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_E_equal 
                                                        (abst_prj_b x) v_Vod))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_E_equal v_Vod 
                                                           v_Vhe))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_E_equal 
                                                           (abst_prj_b x) 
                                                           v_Vhe)))))))) =>
                                   zen.Rall _p_E_T 
                                     (v_Vod:(zen.term _p_E_T) =>
                                      zen.forall _p_E_T 
                                        (v_Vhe:(zen.term _p_E_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_E_equal (abst_prj_b x) 
                                                    v_Vod))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_E_equal v_Vod v_Vhe))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_E_equal 
                                                       (abst_prj_b x) v_Vhe)))))) 
                                     _p_E_perfect_match 
                                     (v_Vzf:
                                      (zen.proof 
                                         (zen.forall _p_E_T 
                                            (v_Vhe:(zen.term _p_E_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_E_equal 
                                                        (abst_prj_b x) 
                                                        _p_E_perfect_match))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_E_equal 
                                                           _p_E_perfect_match 
                                                           v_Vhe))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_E_equal 
                                                           (abst_prj_b x) 
                                                           v_Vhe))))))) =>
                                      zen.Rall _p_E_T 
                                        (v_Vhe:(zen.term _p_E_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_E_equal (abst_prj_b x) 
                                                    _p_E_perfect_match))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_E_equal 
                                                       _p_E_perfect_match 
                                                       v_Vhe))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_E_equal 
                                                       (abst_prj_b x) v_Vhe))))) 
                                        _p_E_perfect_match 
                                        (v_Vag:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_E_equal 
                                                        (abst_prj_b x) 
                                                        _p_E_perfect_match))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_E_equal 
                                                           _p_E_perfect_match 
                                                           _p_E_perfect_match))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_E_equal 
                                                           (abst_prj_b x) 
                                                           _p_E_perfect_match)))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_E_equal (abst_prj_b x) 
                                                    _p_E_perfect_match))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_E_equal 
                                                       _p_E_perfect_match 
                                                       _p_E_perfect_match))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_E_equal 
                                                       (abst_prj_b x) 
                                                       _p_E_perfect_match)))) 
                                           (v_Vuf:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_E_equal 
                                                           (abst_prj_b x) 
                                                           _p_E_perfect_match))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_E_equal 
                                                       (abst_prj_b x) 
                                                       _p_E_perfect_match))) 
                                              v_Vof v_Vuf) 
                                           (v_Vbg:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_E_equal 
                                                           _p_E_perfect_match 
                                                           _p_E_perfect_match))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_E_equal 
                                                           (abst_prj_b x) 
                                                           _p_E_perfect_match))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_E_equal 
                                                       _p_E_perfect_match 
                                                       _p_E_perfect_match))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_E_equal 
                                                       (abst_prj_b x) 
                                                       _p_E_perfect_match))) 
                                              (v_Vcg:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_E_equal 
                                                              _p_E_perfect_match 
                                                              _p_E_perfect_match))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_E_equal 
                                                          _p_E_perfect_match 
                                                          _p_E_perfect_match))) 
                                                 v_Vyf v_Vcg) 
                                              (v_Vof0:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_E_equal 
                                                           (abst_prj_b x) 
                                                           _p_E_perfect_match)))) =>
                                               zen.Rsubst basics.bool__t 
                                                 (v_Vvd:
                                                  (zen.term basics.bool__t) =>
                                                  zen.triangle 
                                                    (focal.is_true v_Vvd)) 
                                                 (_p_E_equal (abst_prj_b x) 
                                                    _p_E_perfect_match) 
                                                 (_p_E_equal _p_E_no_match 
                                                    _p_E_perfect_match) 
                                                 (v_Vqf:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_E_equal 
                                                                 (abst_prj_b 
                                                                    x) 
                                                                 _p_E_perfect_match) 
                                                              (_p_E_equal 
                                                                 _p_E_no_match 
                                                                 _p_E_perfect_match))))) =>
                                                  zen.Rsubst _p_E_T 
                                                    (v_Vrf:
                                                     (zen.term _p_E_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (_p_E_equal 
                                                                v_Vrf 
                                                                _p_E_perfect_match) 
                                                             (_p_E_equal 
                                                                _p_E_no_match 
                                                                _p_E_perfect_match)))) 
                                                    (abst_prj_b x) 
                                                    _p_E_no_match 
                                                    (v_Vyd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_E_T 
                                                                 (abst_prj_b 
                                                                    x) 
                                                                 _p_E_no_match)))) =>
                                                     zen.Rnotand 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_E_T 
                                                                _p_E_no_match 
                                                                (abst_prj_b x)))) 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_E_equal 
                                                                   _p_E_no_match 
                                                                   (abst_prj_b 
                                                                    x))))) 
                                                       (v_Vzd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_E_T 
                                                                    _p_E_no_match 
                                                                    (abst_prj_b 
                                                                    x)))))) =>
                                                        zen.Rnotnot 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_E_T 
                                                                _p_E_no_match 
                                                                (abst_prj_b x))) 
                                                          (v_Vae:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_E_T 
                                                                    _p_E_no_match 
                                                                    (
                                                                    abst_prj_b 
                                                                    x)))) =>
                                                           zen.Reqsym _p_E_T 
                                                             _p_E_no_match 
                                                             (abst_prj_b x) 
                                                             v_Vae v_Vyd) 
                                                          v_Vzd) 
                                                       (v_Vge:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    (abst_prj_b 
                                                                    x))))))) =>
                                                        zen.Rnotnot 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_E_equal 
                                                                   _p_E_no_match 
                                                                   (abst_prj_b 
                                                                    x)))) 
                                                          (v_Vsd:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_E_equal 
                                                                    _p_E_no_match 
                                                                    (abst_prj_b 
                                                                    x))))) =>
                                                           zen.Rall _p_E_T 
                                                             (v_Vnd:
                                                              (zen.term 
                                                                 _p_E_T) =>
                                                              zen.forall 
                                                                _p_E_T 
                                                                (v_Vod:
                                                                 (zen.term 
                                                                    _p_E_T) =>
                                                                 zen.forall 
                                                                   _p_E_T 
                                                                   (v_Vhe:
                                                                    (
                                                                    zen.term 
                                                                    _p_E_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    v_Vnd 
                                                                    v_Vod))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    v_Vod 
                                                                    v_Vhe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    v_Vnd 
                                                                    v_Vhe))))))) 
                                                             _p_E_no_match 
                                                             (v_Vie:
                                                              (zen.proof 
                                                                 (zen.forall 
                                                                    _p_E_T 
                                                                    (
                                                                    v_Vod:
                                                                    (
                                                                    zen.term 
                                                                    _p_E_T) =>
                                                                    zen.forall 
                                                                    _p_E_T 
                                                                    (v_Vhe:
                                                                    (zen.term 
                                                                    _p_E_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    v_Vod))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    v_Vod 
                                                                    v_Vhe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    v_Vhe)))))))) =>
                                                              zen.Rall 
                                                                _p_E_T 
                                                                (v_Vod:
                                                                 (zen.term 
                                                                    _p_E_T) =>
                                                                 zen.forall 
                                                                   _p_E_T 
                                                                   (v_Vhe:
                                                                    (
                                                                    zen.term 
                                                                    _p_E_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    v_Vod))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    v_Vod 
                                                                    v_Vhe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    v_Vhe)))))) 
                                                                (abst_prj_b x) 
                                                                (v_Vje:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.forall 
                                                                    _p_E_T 
                                                                    (v_Vhe:
                                                                    (zen.term 
                                                                    _p_E_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    (abst_prj_b 
                                                                    x)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    (abst_prj_b 
                                                                    x) v_Vhe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    v_Vhe))))))) =>
                                                                 zen.Rall 
                                                                   _p_E_T 
                                                                   (v_Vhe:
                                                                    (
                                                                    zen.term 
                                                                    _p_E_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    (abst_prj_b 
                                                                    x)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    (abst_prj_b 
                                                                    x) v_Vhe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    v_Vhe))))) 
                                                                   _p_E_perfect_match 
                                                                   (v_Vsf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    (abst_prj_b 
                                                                    x)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    (abst_prj_b 
                                                                    x) 
                                                                    _p_E_perfect_match))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_perfect_match)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    (abst_prj_b 
                                                                    x)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    (abst_prj_b 
                                                                    x) 
                                                                    _p_E_perfect_match))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_perfect_match)))) 
                                                                    (v_Vmd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    (abst_prj_b 
                                                                    x)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    (abst_prj_b 
                                                                    x)))) 
                                                                    v_Vsd 
                                                                    v_Vmd) 
                                                                    (v_Vtf:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    (abst_prj_b 
                                                                    x) 
                                                                    _p_E_perfect_match))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_perfect_match))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    (abst_prj_b 
                                                                    x) 
                                                                    _p_E_perfect_match))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_perfect_match))) 
                                                                    (v_Vuf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    (abst_prj_b 
                                                                    x) 
                                                                    _p_E_perfect_match))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    (abst_prj_b 
                                                                    x) 
                                                                    _p_E_perfect_match))) 
                                                                    v_Vof0 
                                                                    v_Vuf) 
                                                                    (v_Vvf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_perfect_match)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_perfect_match))) 
                                                                    v_Vvf 
                                                                    _p_E_all_field_different_0_3) 
                                                                    v_Vtf) 
                                                                    v_Vsf) 
                                                                   v_Vje) 
                                                                v_Vie) 
                                                             _p_E_equal_transitive) 
                                                          v_Vge) v_Vtd) 
                                                    (v_Vwf:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_perfect_match) 
                                                                 (_p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_perfect_match))))) =>
                                                     zen.Rsubst _p_E_T 
                                                       (v_Vdg:
                                                        (zen.term _p_E_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (_p_E_equal 
                                                                   _p_E_no_match 
                                                                   v_Vdg) 
                                                                (_p_E_equal 
                                                                   _p_E_no_match 
                                                                   _p_E_perfect_match)))) 
                                                       _p_E_perfect_match 
                                                       _p_E_perfect_match 
                                                       (v_Vxf0:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_E_T 
                                                                    _p_E_perfect_match 
                                                                    _p_E_perfect_match)))) =>
                                                        zen.Rnoteq _p_E_T 
                                                          _p_E_perfect_match 
                                                          v_Vxf0) 
                                                       (v_Vwf0:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    _p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_perfect_match) 
                                                                    (
                                                                    _p_E_equal 
                                                                    _p_E_no_match 
                                                                    _p_E_perfect_match))))) =>
                                                        zen.Rnoteq 
                                                          basics.bool__t 
                                                          (_p_E_equal 
                                                             _p_E_no_match 
                                                             _p_E_perfect_match) 
                                                          v_Vwf0) v_Vwf) 
                                                    v_Vqf) 
                                                 (v_Vvf:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_E_equal 
                                                              _p_E_no_match 
                                                              _p_E_perfect_match)))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_E_equal 
                                                             _p_E_no_match 
                                                             _p_E_perfect_match))) 
                                                    v_Vvf 
                                                    _p_E_all_field_different_0_3) 
                                                 v_Vof0) v_Vbg) v_Vag) v_Vzf) 
                                     v_Vse) _p_E_equal_transitive) 
                               (v_Vcg:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_E_equal _p_E_perfect_match 
                                               _p_E_perfect_match))))) =>
                                zen.Rnoteq _p_E_T _p_E_perfect_match v_Vxf)))) 
                      v_Vye) v_Vxe) v_Vid) v_Vhd) v_Vgd)).

def Imp_diag_2oo3__partial_match_is_valid :
  _p_E_T:cc.uT ->
  _p_C_T:cc.uT ->
  _p_E_equal:((cc.eT _p_E_T) -> (cc.eT _p_E_T) -> cc.eT basics.bool__t) ->
  _p_E_partial_match:(cc.eT _p_E_T) ->
  _p_E_perfect_match:(cc.eT _p_E_T) ->
  _p_E_range_match:(cc.eT _p_E_T) ->
  abst_T:cc.uT ->
  abst_prj_b:((cc.eT abst_T) -> cc.eT _p_E_T) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.imp 
          (dk_logic.ebP (_p_E_equal (abst_prj_b x) _p_E_partial_match)) 
          (dk_logic.ebP 
             (Imp_diag_2oo3__valid _p_E_T _p_C_T _p_E_equal 
                _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                abst_T abst_prj_b x))))
  :=
  _p_E_T:cc.uT =>
  _p_C_T:cc.uT =>
  _p_E_equal:((cc.eT _p_E_T) -> (cc.eT _p_E_T) -> cc.eT basics.bool__t) =>
  _p_E_partial_match:(cc.eT _p_E_T) =>
  _p_E_perfect_match:(cc.eT _p_E_T) =>
  _p_E_range_match:(cc.eT _p_E_T) =>
  abst_T:cc.uT =>
  abst_prj_b:((cc.eT abst_T) -> cc.eT _p_E_T) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.imp 
          (zen.triangle 
             (focal.is_true 
                (_p_E_equal (abst_prj_b v_Vzb) _p_E_partial_match))) 
          (zen.triangle 
             (focal.is_true 
                (Imp_diag_2oo3__valid _p_E_T _p_C_T _p_E_equal 
                   _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                   abst_T abst_prj_b v_Vzb))))) 
    (v_Vac:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_E_equal (abst_prj_b v_Vzb) _p_E_partial_match))) 
                 (zen.triangle 
                    (focal.is_true 
                       (Imp_diag_2oo3__valid _p_E_T _p_C_T _p_E_equal 
                          _p_E_partial_match _p_E_perfect_match 
                          _p_E_range_match abst_T abst_prj_b v_Vzb))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.imp 
          (zen.triangle 
             (focal.is_true 
                (_p_E_equal (abst_prj_b v_Vzb) _p_E_partial_match))) 
          (zen.triangle 
             (focal.is_true 
                (Imp_diag_2oo3__valid _p_E_T _p_C_T _p_E_equal 
                   _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                   abst_T abst_prj_b v_Vzb)))) 
       (v_Vbc:(zen.term abst_T) =>
        v_Vcc:
        (zen.proof 
           (zen.not 
              (zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_E_equal (abst_prj_b v_Vbc) _p_E_partial_match))) 
                 (zen.triangle 
                    (focal.is_true 
                       (Imp_diag_2oo3__valid _p_E_T _p_C_T _p_E_equal 
                          _p_E_partial_match _p_E_perfect_match 
                          _p_E_range_match abst_T abst_prj_b v_Vbc)))))) =>
        zen.Rnotimply 
          (zen.triangle 
             (focal.is_true 
                (_p_E_equal (abst_prj_b v_Vbc) _p_E_partial_match))) 
          (zen.triangle 
             (focal.is_true 
                (Imp_diag_2oo3__valid _p_E_T _p_C_T _p_E_equal 
                   _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                   abst_T abst_prj_b v_Vbc))) 
          (v_Vdc:
           (zen.proof 
              (zen.triangle 
                 (focal.is_true 
                    (_p_E_equal (abst_prj_b v_Vbc) _p_E_partial_match)))) =>
           v_Vec:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._bar__bar_ 
                          (_p_E_equal (abst_prj_b v_Vbc) _p_E_range_match) 
                          (basics._bar__bar_ 
                             (_p_E_equal (abst_prj_b v_Vbc) 
                                _p_E_partial_match) 
                             (_p_E_equal (abst_prj_b v_Vbc) 
                                _p_E_perfect_match))))))) =>
           focal.zenon_focal_notor 
             (_p_E_equal (abst_prj_b v_Vbc) _p_E_range_match) 
             (basics._bar__bar_ 
                (_p_E_equal (abst_prj_b v_Vbc) _p_E_partial_match) 
                (_p_E_equal (abst_prj_b v_Vbc) _p_E_perfect_match)) 
             (v_Vfc:
              (zen.proof 
                 (zen.not 
                    (zen.or 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_E_equal (abst_prj_b v_Vbc) _p_E_range_match))) 
                       (zen.triangle 
                          (focal.is_true 
                             (basics._bar__bar_ 
                                (_p_E_equal (abst_prj_b v_Vbc) 
                                   _p_E_partial_match) 
                                (_p_E_equal (abst_prj_b v_Vbc) 
                                   _p_E_perfect_match))))))) =>
              zen.Rnotor 
                (zen.triangle 
                   (focal.is_true 
                      (_p_E_equal (abst_prj_b v_Vbc) _p_E_range_match))) 
                (zen.triangle 
                   (focal.is_true 
                      (basics._bar__bar_ 
                         (_p_E_equal (abst_prj_b v_Vbc) _p_E_partial_match) 
                         (_p_E_equal (abst_prj_b v_Vbc) _p_E_perfect_match)))) 
                (v_Vgc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_E_equal (abst_prj_b v_Vbc) _p_E_range_match))))) =>
                 v_Vhc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (basics._bar__bar_ 
                                (_p_E_equal (abst_prj_b v_Vbc) 
                                   _p_E_partial_match) 
                                (_p_E_equal (abst_prj_b v_Vbc) 
                                   _p_E_perfect_match)))))) =>
                 focal.zenon_focal_notor 
                   (_p_E_equal (abst_prj_b v_Vbc) _p_E_partial_match) 
                   (_p_E_equal (abst_prj_b v_Vbc) _p_E_perfect_match) 
                   (v_Vic:
                    (zen.proof 
                       (zen.not 
                          (zen.or 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_E_equal (abst_prj_b v_Vbc) 
                                      _p_E_partial_match))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_E_equal (abst_prj_b v_Vbc) 
                                      _p_E_perfect_match)))))) =>
                    zen.Rnotor 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_E_equal (abst_prj_b v_Vbc) _p_E_partial_match))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_E_equal (abst_prj_b v_Vbc) _p_E_perfect_match))) 
                      (v_Vjc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_E_equal (abst_prj_b v_Vbc) 
                                      _p_E_partial_match))))) =>
                       v_Vkc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_E_equal (abst_prj_b v_Vbc) 
                                      _p_E_perfect_match))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_E_equal (abst_prj_b v_Vbc) 
                                  _p_E_partial_match))) v_Vdc v_Vjc) v_Vic) 
                   v_Vhc) v_Vfc) v_Vec) v_Vcc) v_Vac).

def Imp_diag_2oo3__perfect_match_is_valid :
  _p_E_T:cc.uT ->
  _p_C_T:cc.uT ->
  _p_E_equal:((cc.eT _p_E_T) -> (cc.eT _p_E_T) -> cc.eT basics.bool__t) ->
  _p_E_partial_match:(cc.eT _p_E_T) ->
  _p_E_perfect_match:(cc.eT _p_E_T) ->
  _p_E_range_match:(cc.eT _p_E_T) ->
  abst_T:cc.uT ->
  abst_prj_b:((cc.eT abst_T) -> cc.eT _p_E_T) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.imp 
          (dk_logic.ebP (_p_E_equal (abst_prj_b x) _p_E_perfect_match)) 
          (dk_logic.ebP 
             (Imp_diag_2oo3__valid _p_E_T _p_C_T _p_E_equal 
                _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                abst_T abst_prj_b x))))
  :=
  _p_E_T:cc.uT =>
  _p_C_T:cc.uT =>
  _p_E_equal:((cc.eT _p_E_T) -> (cc.eT _p_E_T) -> cc.eT basics.bool__t) =>
  _p_E_partial_match:(cc.eT _p_E_T) =>
  _p_E_perfect_match:(cc.eT _p_E_T) =>
  _p_E_range_match:(cc.eT _p_E_T) =>
  abst_T:cc.uT =>
  abst_prj_b:((cc.eT abst_T) -> cc.eT _p_E_T) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.imp 
          (zen.triangle 
             (focal.is_true 
                (_p_E_equal (abst_prj_b v_Vzb) _p_E_perfect_match))) 
          (zen.triangle 
             (focal.is_true 
                (Imp_diag_2oo3__valid _p_E_T _p_C_T _p_E_equal 
                   _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                   abst_T abst_prj_b v_Vzb))))) 
    (v_Vac:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_E_equal (abst_prj_b v_Vzb) _p_E_perfect_match))) 
                 (zen.triangle 
                    (focal.is_true 
                       (Imp_diag_2oo3__valid _p_E_T _p_C_T _p_E_equal 
                          _p_E_partial_match _p_E_perfect_match 
                          _p_E_range_match abst_T abst_prj_b v_Vzb))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.imp 
          (zen.triangle 
             (focal.is_true 
                (_p_E_equal (abst_prj_b v_Vzb) _p_E_perfect_match))) 
          (zen.triangle 
             (focal.is_true 
                (Imp_diag_2oo3__valid _p_E_T _p_C_T _p_E_equal 
                   _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                   abst_T abst_prj_b v_Vzb)))) 
       (v_Vbc:(zen.term abst_T) =>
        v_Vcc:
        (zen.proof 
           (zen.not 
              (zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_E_equal (abst_prj_b v_Vbc) _p_E_perfect_match))) 
                 (zen.triangle 
                    (focal.is_true 
                       (Imp_diag_2oo3__valid _p_E_T _p_C_T _p_E_equal 
                          _p_E_partial_match _p_E_perfect_match 
                          _p_E_range_match abst_T abst_prj_b v_Vbc)))))) =>
        zen.Rnotimply 
          (zen.triangle 
             (focal.is_true 
                (_p_E_equal (abst_prj_b v_Vbc) _p_E_perfect_match))) 
          (zen.triangle 
             (focal.is_true 
                (Imp_diag_2oo3__valid _p_E_T _p_C_T _p_E_equal 
                   _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                   abst_T abst_prj_b v_Vbc))) 
          (v_Vdc:
           (zen.proof 
              (zen.triangle 
                 (focal.is_true 
                    (_p_E_equal (abst_prj_b v_Vbc) _p_E_perfect_match)))) =>
           v_Vec:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._bar__bar_ 
                          (_p_E_equal (abst_prj_b v_Vbc) _p_E_range_match) 
                          (basics._bar__bar_ 
                             (_p_E_equal (abst_prj_b v_Vbc) 
                                _p_E_partial_match) 
                             (_p_E_equal (abst_prj_b v_Vbc) 
                                _p_E_perfect_match))))))) =>
           focal.zenon_focal_notor 
             (_p_E_equal (abst_prj_b v_Vbc) _p_E_range_match) 
             (basics._bar__bar_ 
                (_p_E_equal (abst_prj_b v_Vbc) _p_E_partial_match) 
                (_p_E_equal (abst_prj_b v_Vbc) _p_E_perfect_match)) 
             (v_Vfc:
              (zen.proof 
                 (zen.not 
                    (zen.or 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_E_equal (abst_prj_b v_Vbc) _p_E_range_match))) 
                       (zen.triangle 
                          (focal.is_true 
                             (basics._bar__bar_ 
                                (_p_E_equal (abst_prj_b v_Vbc) 
                                   _p_E_partial_match) 
                                (_p_E_equal (abst_prj_b v_Vbc) 
                                   _p_E_perfect_match))))))) =>
              zen.Rnotor 
                (zen.triangle 
                   (focal.is_true 
                      (_p_E_equal (abst_prj_b v_Vbc) _p_E_range_match))) 
                (zen.triangle 
                   (focal.is_true 
                      (basics._bar__bar_ 
                         (_p_E_equal (abst_prj_b v_Vbc) _p_E_partial_match) 
                         (_p_E_equal (abst_prj_b v_Vbc) _p_E_perfect_match)))) 
                (v_Vgc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_E_equal (abst_prj_b v_Vbc) _p_E_range_match))))) =>
                 v_Vhc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (basics._bar__bar_ 
                                (_p_E_equal (abst_prj_b v_Vbc) 
                                   _p_E_partial_match) 
                                (_p_E_equal (abst_prj_b v_Vbc) 
                                   _p_E_perfect_match)))))) =>
                 focal.zenon_focal_notor 
                   (_p_E_equal (abst_prj_b v_Vbc) _p_E_partial_match) 
                   (_p_E_equal (abst_prj_b v_Vbc) _p_E_perfect_match) 
                   (v_Vic:
                    (zen.proof 
                       (zen.not 
                          (zen.or 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_E_equal (abst_prj_b v_Vbc) 
                                      _p_E_partial_match))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_E_equal (abst_prj_b v_Vbc) 
                                      _p_E_perfect_match)))))) =>
                    zen.Rnotor 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_E_equal (abst_prj_b v_Vbc) _p_E_partial_match))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_E_equal (abst_prj_b v_Vbc) _p_E_perfect_match))) 
                      (v_Vjc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_E_equal (abst_prj_b v_Vbc) 
                                      _p_E_partial_match))))) =>
                       v_Vkc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_E_equal (abst_prj_b v_Vbc) 
                                      _p_E_perfect_match))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_E_equal (abst_prj_b v_Vbc) 
                                  _p_E_perfect_match))) v_Vdc v_Vkc) v_Vic) 
                   v_Vhc) v_Vfc) v_Vec) v_Vcc) v_Vac).

def Imp_diag_2oo3__range_match_is_valid :
  _p_E_T:cc.uT ->
  _p_C_T:cc.uT ->
  _p_E_equal:((cc.eT _p_E_T) -> (cc.eT _p_E_T) -> cc.eT basics.bool__t) ->
  _p_E_partial_match:(cc.eT _p_E_T) ->
  _p_E_perfect_match:(cc.eT _p_E_T) ->
  _p_E_range_match:(cc.eT _p_E_T) ->
  abst_T:cc.uT ->
  abst_prj_b:((cc.eT abst_T) -> cc.eT _p_E_T) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.imp 
          (dk_logic.ebP (_p_E_equal (abst_prj_b x) _p_E_range_match)) 
          (dk_logic.ebP 
             (Imp_diag_2oo3__valid _p_E_T _p_C_T _p_E_equal 
                _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                abst_T abst_prj_b x))))
  :=
  _p_E_T:cc.uT =>
  _p_C_T:cc.uT =>
  _p_E_equal:((cc.eT _p_E_T) -> (cc.eT _p_E_T) -> cc.eT basics.bool__t) =>
  _p_E_partial_match:(cc.eT _p_E_T) =>
  _p_E_perfect_match:(cc.eT _p_E_T) =>
  _p_E_range_match:(cc.eT _p_E_T) =>
  abst_T:cc.uT =>
  abst_prj_b:((cc.eT abst_T) -> cc.eT _p_E_T) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.imp 
          (zen.triangle 
             (focal.is_true (_p_E_equal (abst_prj_b v_Vzb) _p_E_range_match))) 
          (zen.triangle 
             (focal.is_true 
                (Imp_diag_2oo3__valid _p_E_T _p_C_T _p_E_equal 
                   _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                   abst_T abst_prj_b v_Vzb))))) 
    (v_Vac:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_E_equal (abst_prj_b v_Vzb) _p_E_range_match))) 
                 (zen.triangle 
                    (focal.is_true 
                       (Imp_diag_2oo3__valid _p_E_T _p_C_T _p_E_equal 
                          _p_E_partial_match _p_E_perfect_match 
                          _p_E_range_match abst_T abst_prj_b v_Vzb))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.imp 
          (zen.triangle 
             (focal.is_true (_p_E_equal (abst_prj_b v_Vzb) _p_E_range_match))) 
          (zen.triangle 
             (focal.is_true 
                (Imp_diag_2oo3__valid _p_E_T _p_C_T _p_E_equal 
                   _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                   abst_T abst_prj_b v_Vzb)))) 
       (v_Vbc:(zen.term abst_T) =>
        v_Vcc:
        (zen.proof 
           (zen.not 
              (zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_E_equal (abst_prj_b v_Vbc) _p_E_range_match))) 
                 (zen.triangle 
                    (focal.is_true 
                       (Imp_diag_2oo3__valid _p_E_T _p_C_T _p_E_equal 
                          _p_E_partial_match _p_E_perfect_match 
                          _p_E_range_match abst_T abst_prj_b v_Vbc)))))) =>
        zen.Rnotimply 
          (zen.triangle 
             (focal.is_true (_p_E_equal (abst_prj_b v_Vbc) _p_E_range_match))) 
          (zen.triangle 
             (focal.is_true 
                (Imp_diag_2oo3__valid _p_E_T _p_C_T _p_E_equal 
                   _p_E_partial_match _p_E_perfect_match _p_E_range_match 
                   abst_T abst_prj_b v_Vbc))) 
          (v_Vdc:
           (zen.proof 
              (zen.triangle 
                 (focal.is_true 
                    (_p_E_equal (abst_prj_b v_Vbc) _p_E_range_match)))) =>
           v_Vec:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._bar__bar_ 
                          (_p_E_equal (abst_prj_b v_Vbc) _p_E_range_match) 
                          (basics._bar__bar_ 
                             (_p_E_equal (abst_prj_b v_Vbc) 
                                _p_E_partial_match) 
                             (_p_E_equal (abst_prj_b v_Vbc) 
                                _p_E_perfect_match))))))) =>
           focal.zenon_focal_notor 
             (_p_E_equal (abst_prj_b v_Vbc) _p_E_range_match) 
             (basics._bar__bar_ 
                (_p_E_equal (abst_prj_b v_Vbc) _p_E_partial_match) 
                (_p_E_equal (abst_prj_b v_Vbc) _p_E_perfect_match)) 
             (v_Vfc:
              (zen.proof 
                 (zen.not 
                    (zen.or 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_E_equal (abst_prj_b v_Vbc) _p_E_range_match))) 
                       (zen.triangle 
                          (focal.is_true 
                             (basics._bar__bar_ 
                                (_p_E_equal (abst_prj_b v_Vbc) 
                                   _p_E_partial_match) 
                                (_p_E_equal (abst_prj_b v_Vbc) 
                                   _p_E_perfect_match))))))) =>
              zen.Rnotor 
                (zen.triangle 
                   (focal.is_true 
                      (_p_E_equal (abst_prj_b v_Vbc) _p_E_range_match))) 
                (zen.triangle 
                   (focal.is_true 
                      (basics._bar__bar_ 
                         (_p_E_equal (abst_prj_b v_Vbc) _p_E_partial_match) 
                         (_p_E_equal (abst_prj_b v_Vbc) _p_E_perfect_match)))) 
                (v_Vgc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_E_equal (abst_prj_b v_Vbc) _p_E_range_match))))) =>
                 v_Vhc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (basics._bar__bar_ 
                                (_p_E_equal (abst_prj_b v_Vbc) 
                                   _p_E_partial_match) 
                                (_p_E_equal (abst_prj_b v_Vbc) 
                                   _p_E_perfect_match)))))) =>
                 zen.Raxiom 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_E_equal (abst_prj_b v_Vbc) _p_E_range_match))) 
                   v_Vdc v_Vgc) v_Vfc) v_Vec) v_Vcc) v_Vac).

def Imp_diag_2oo3__collection_create
  :=
  _p_E_T:cc.uT =>
  _p_C_T:cc.uT =>
  _p_E_element:(cc.eT _p_E_T) =>
  _p_E_equal:((cc.eT _p_E_T) -> (cc.eT _p_E_T) -> cc.eT basics.bool__t) =>
  _p_E_no_match:(cc.eT _p_E_T) =>
  _p_E_partial_match:(cc.eT _p_E_T) =>
  _p_E_perfect_match:(cc.eT _p_E_T) =>
  _p_E_range_match:(cc.eT _p_E_T) =>
  _p_E_all_field_different_0_1:
  (dk_logic.eP 
     (dk_logic.not (dk_logic.ebP (_p_E_equal _p_E_no_match _p_E_range_match)))) =>
  _p_E_all_field_different_0_2:
  (dk_logic.eP 
     (dk_logic.not 
        (dk_logic.ebP (_p_E_equal _p_E_no_match _p_E_partial_match)))) =>
  _p_E_all_field_different_0_3:
  (dk_logic.eP 
     (dk_logic.not 
        (dk_logic.ebP (_p_E_equal _p_E_no_match _p_E_perfect_match)))) =>
  _p_E_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_E_T 
        (x:(cc.eT _p_E_T) => dk_logic.ebP (_p_E_equal x x)))) =>
  _p_E_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_E_T 
        (x:(cc.eT _p_E_T) =>
         dk_logic.forall _p_E_T 
           (y:(cc.eT _p_E_T) =>
            dk_logic.imp (dk_logic.ebP (_p_E_equal x y)) 
              (dk_logic.ebP (_p_E_equal y x)))))) =>
  _p_E_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_E_T 
        (x:(cc.eT _p_E_T) =>
         dk_logic.forall _p_E_T 
           (y:(cc.eT _p_E_T) =>
            dk_logic.forall _p_E_T 
              (z:(cc.eT _p_E_T) =>
               dk_logic.imp (dk_logic.ebP (_p_E_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_E_equal y z)) 
                    (dk_logic.ebP (_p_E_equal x z)))))))) =>
  _p_C_element:(cc.eT _p_C_T) =>
  _p_C_equal:((cc.eT _p_C_T) -> (cc.eT _p_C_T) -> cc.eT basics.bool__t) =>
  _p_C_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_C_T 
        (x:(cc.eT _p_C_T) => dk_logic.ebP (_p_C_equal x x)))) =>
  _p_C_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_C_T 
        (x:(cc.eT _p_C_T) =>
         dk_logic.forall _p_C_T 
           (y:(cc.eT _p_C_T) =>
            dk_logic.imp (dk_logic.ebP (_p_C_equal x y)) 
              (dk_logic.ebP (_p_C_equal y x)))))) =>
  _p_C_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_C_T 
        (x:(cc.eT _p_C_T) =>
         dk_logic.forall _p_C_T 
           (y:(cc.eT _p_C_T) =>
            dk_logic.forall _p_C_T 
              (z:(cc.eT _p_C_T) =>
               dk_logic.imp (dk_logic.ebP (_p_C_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_C_equal y z)) 
                    (dk_logic.ebP (_p_C_equal x z)))))))) =>
  Imp_diag_2oo3__mk_record _p_E_T _p_C_T _p_E_equal _p_E_no_match 
    _p_E_partial_match _p_E_perfect_match _p_E_range_match _p_C_equal 
    (dk_tuple.prod _p_C_T _p_E_T) (pair.Imp_pair__constr _p_C_T _p_E_T) 
    (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
    (basics.Basic_object__parse (dk_tuple.prod _p_C_T _p_E_T)) 
    (basics.Basic_object__print (dk_tuple.prod _p_C_T _p_E_T)) 
    (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
    (pair.Imp_pair__prj_b _p_C_T _p_E_T) 
    (pair.Imp_pair__element _p_C_T _p_E_T _p_C_element _p_E_element 
       (dk_tuple.prod _p_C_T _p_E_T) (pair.Imp_pair__constr _p_C_T _p_E_T)) 
    (sets.Setoid__different (dk_tuple.prod _p_C_T _p_E_T) 
       (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal)) 
    (pair.Imp_pair__prj_a_is_first_of_pair _p_C_T _p_E_T _p_C_equal 
       (dk_tuple.prod _p_C_T _p_E_T) (pair.Imp_pair__constr _p_C_T _p_E_T) 
       (pair.Imp_pair__prj_a _p_C_T _p_E_T)) 
    (pair.Imp_pair__def_equal _p_C_T _p_E_T _p_C_equal _p_E_equal 
       (dk_tuple.prod _p_C_T _p_E_T) 
       (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
       (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
       (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
    (pair.Imp_pair__prj_b_is_snd_of_pair _p_C_T _p_E_T _p_E_equal 
       (dk_tuple.prod _p_C_T _p_E_T) (pair.Imp_pair__constr _p_C_T _p_E_T) 
       (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
    (pair.Imp_pair__unicite_1 _p_C_T _p_E_T (dk_tuple.prod _p_C_T _p_E_T) 
       (pair.Imp_pair__constr _p_C_T _p_E_T) 
       (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
       (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
       (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
    (pair.Imp_pair__unicite_2 _p_C_T _p_E_T (dk_tuple.prod _p_C_T _p_E_T) 
       (pair.Imp_pair__constr _p_C_T _p_E_T) 
       (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
       (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
       (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
    (Imp_diag_2oo3__valid _p_E_T _p_C_T _p_E_equal _p_E_partial_match 
       _p_E_perfect_match _p_E_range_match (dk_tuple.prod _p_C_T _p_E_T) 
       (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
    (sets.Setoid__same_is_not_different (dk_tuple.prod _p_C_T _p_E_T) 
       (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal)) 
    (pair.Imp_pair__equal_transitive _p_C_T _p_E_T _p_C_equal 
       _p_C_equal_transitive _p_E_equal _p_E_equal_transitive 
       (dk_tuple.prod _p_C_T _p_E_T) 
       (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
       (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
       (pair.Imp_pair__prj_b _p_C_T _p_E_T) 
       (pair.Imp_pair__def_equal _p_C_T _p_E_T _p_C_equal _p_E_equal 
          (dk_tuple.prod _p_C_T _p_E_T) 
          (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
          (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
          (pair.Imp_pair__prj_b _p_C_T _p_E_T))) 
    (pair.Imp_pair__def_equal1 _p_C_T _p_E_T _p_C_equal _p_C_equal_symmetric 
       _p_C_equal_transitive _p_E_equal _p_E_equal_symmetric 
       _p_E_equal_transitive (dk_tuple.prod _p_C_T _p_E_T) 
       (pair.Imp_pair__constr _p_C_T _p_E_T) 
       (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
       (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
       (pair.Imp_pair__prj_b _p_C_T _p_E_T) 
       (pair.Imp_pair__prj_a_is_first_of_pair _p_C_T _p_E_T _p_C_equal 
          (dk_tuple.prod _p_C_T _p_E_T) 
          (pair.Imp_pair__constr _p_C_T _p_E_T) 
          (pair.Imp_pair__prj_a _p_C_T _p_E_T)) 
       (pair.Imp_pair__def_equal _p_C_T _p_E_T _p_C_equal _p_E_equal 
          (dk_tuple.prod _p_C_T _p_E_T) 
          (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
          (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
          (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
       (pair.Imp_pair__prj_b_is_snd_of_pair _p_C_T _p_E_T _p_E_equal 
          (dk_tuple.prod _p_C_T _p_E_T) 
          (pair.Imp_pair__constr _p_C_T _p_E_T) 
          (pair.Imp_pair__prj_b _p_C_T _p_E_T))) 
    (Imp_diag_2oo3__no_match_is_invalid _p_E_T _p_C_T _p_E_equal 
       _p_E_no_match _p_E_partial_match _p_E_perfect_match _p_E_range_match 
       _p_E_all_field_different_0_1 _p_E_all_field_different_0_2 
       _p_E_all_field_different_0_3 _p_E_equal_symmetric 
       _p_E_equal_transitive (dk_tuple.prod _p_C_T _p_E_T) 
       (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
    (Imp_diag_2oo3__partial_match_is_valid _p_E_T _p_C_T _p_E_equal 
       _p_E_partial_match _p_E_perfect_match _p_E_range_match 
       (dk_tuple.prod _p_C_T _p_E_T) (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
    (Imp_diag_2oo3__perfect_match_is_valid _p_E_T _p_C_T _p_E_equal 
       _p_E_partial_match _p_E_perfect_match _p_E_range_match 
       (dk_tuple.prod _p_C_T _p_E_T) (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
    (Imp_diag_2oo3__range_match_is_valid _p_E_T _p_C_T _p_E_equal 
       _p_E_partial_match _p_E_perfect_match _p_E_range_match 
       (dk_tuple.prod _p_C_T _p_E_T) (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
    (pair.Imp_pair__equal_reflexive _p_C_T _p_E_T 
       (dk_tuple.prod _p_C_T _p_E_T) (pair.Imp_pair__constr _p_C_T _p_E_T) 
       (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
       (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
       (pair.Imp_pair__prj_b _p_C_T _p_E_T) 
       (pair.Imp_pair__unicite_1 _p_C_T _p_E_T (dk_tuple.prod _p_C_T _p_E_T) 
          (pair.Imp_pair__constr _p_C_T _p_E_T) 
          (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
          (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
          (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
       (pair.Imp_pair__unicite_2 _p_C_T _p_E_T (dk_tuple.prod _p_C_T _p_E_T) 
          (pair.Imp_pair__constr _p_C_T _p_E_T) 
          (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
          (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
          (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
       (pair.Imp_pair__equal_transitive _p_C_T _p_E_T _p_C_equal 
          _p_C_equal_transitive _p_E_equal _p_E_equal_transitive 
          (dk_tuple.prod _p_C_T _p_E_T) 
          (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
          (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
          (pair.Imp_pair__prj_b _p_C_T _p_E_T) 
          (pair.Imp_pair__def_equal _p_C_T _p_E_T _p_C_equal _p_E_equal 
             (dk_tuple.prod _p_C_T _p_E_T) 
             (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
             (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
             (pair.Imp_pair__prj_b _p_C_T _p_E_T)))) 
    (pair.Imp_pair__equal_reflexive2 _p_C_T _p_E_T _p_C_equal 
       _p_C_equal_reflexive _p_E_equal _p_E_equal_reflexive 
       (dk_tuple.prod _p_C_T _p_E_T) (pair.Imp_pair__constr _p_C_T _p_E_T) 
       (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
       (pair.Imp_pair__def_equal1 _p_C_T _p_E_T _p_C_equal 
          _p_C_equal_symmetric _p_C_equal_transitive _p_E_equal 
          _p_E_equal_symmetric _p_E_equal_transitive 
          (dk_tuple.prod _p_C_T _p_E_T) 
          (pair.Imp_pair__constr _p_C_T _p_E_T) 
          (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
          (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
          (pair.Imp_pair__prj_b _p_C_T _p_E_T) 
          (pair.Imp_pair__prj_a_is_first_of_pair _p_C_T _p_E_T _p_C_equal 
             (dk_tuple.prod _p_C_T _p_E_T) 
             (pair.Imp_pair__constr _p_C_T _p_E_T) 
             (pair.Imp_pair__prj_a _p_C_T _p_E_T)) 
          (pair.Imp_pair__def_equal _p_C_T _p_E_T _p_C_equal _p_E_equal 
             (dk_tuple.prod _p_C_T _p_E_T) 
             (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
             (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
             (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
          (pair.Imp_pair__prj_b_is_snd_of_pair _p_C_T _p_E_T _p_E_equal 
             (dk_tuple.prod _p_C_T _p_E_T) 
             (pair.Imp_pair__constr _p_C_T _p_E_T) 
             (pair.Imp_pair__prj_b _p_C_T _p_E_T)))) 
    (pair.Imp_pair__equal_symmetric2 _p_C_T _p_E_T _p_C_equal 
       _p_C_equal_symmetric _p_E_equal _p_E_equal_symmetric 
       (dk_tuple.prod _p_C_T _p_E_T) (pair.Imp_pair__constr _p_C_T _p_E_T) 
       (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
       (pair.Imp_pair__def_equal1 _p_C_T _p_E_T _p_C_equal 
          _p_C_equal_symmetric _p_C_equal_transitive _p_E_equal 
          _p_E_equal_symmetric _p_E_equal_transitive 
          (dk_tuple.prod _p_C_T _p_E_T) 
          (pair.Imp_pair__constr _p_C_T _p_E_T) 
          (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
          (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
          (pair.Imp_pair__prj_b _p_C_T _p_E_T) 
          (pair.Imp_pair__prj_a_is_first_of_pair _p_C_T _p_E_T _p_C_equal 
             (dk_tuple.prod _p_C_T _p_E_T) 
             (pair.Imp_pair__constr _p_C_T _p_E_T) 
             (pair.Imp_pair__prj_a _p_C_T _p_E_T)) 
          (pair.Imp_pair__def_equal _p_C_T _p_E_T _p_C_equal _p_E_equal 
             (dk_tuple.prod _p_C_T _p_E_T) 
             (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
             (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
             (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
          (pair.Imp_pair__prj_b_is_snd_of_pair _p_C_T _p_E_T _p_E_equal 
             (dk_tuple.prod _p_C_T _p_E_T) 
             (pair.Imp_pair__constr _p_C_T _p_E_T) 
             (pair.Imp_pair__prj_b _p_C_T _p_E_T)))) 
    (pair.Imp_pair__equal_transitive2 _p_C_T _p_E_T _p_C_equal 
       _p_C_equal_transitive _p_E_equal _p_E_equal_transitive 
       (dk_tuple.prod _p_C_T _p_E_T) (pair.Imp_pair__constr _p_C_T _p_E_T) 
       (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
       (pair.Imp_pair__def_equal1 _p_C_T _p_E_T _p_C_equal 
          _p_C_equal_symmetric _p_C_equal_transitive _p_E_equal 
          _p_E_equal_symmetric _p_E_equal_transitive 
          (dk_tuple.prod _p_C_T _p_E_T) 
          (pair.Imp_pair__constr _p_C_T _p_E_T) 
          (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
          (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
          (pair.Imp_pair__prj_b _p_C_T _p_E_T) 
          (pair.Imp_pair__prj_a_is_first_of_pair _p_C_T _p_E_T _p_C_equal 
             (dk_tuple.prod _p_C_T _p_E_T) 
             (pair.Imp_pair__constr _p_C_T _p_E_T) 
             (pair.Imp_pair__prj_a _p_C_T _p_E_T)) 
          (pair.Imp_pair__def_equal _p_C_T _p_E_T _p_C_equal _p_E_equal 
             (dk_tuple.prod _p_C_T _p_E_T) 
             (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
             (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
             (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
          (pair.Imp_pair__prj_b_is_snd_of_pair _p_C_T _p_E_T _p_E_equal 
             (dk_tuple.prod _p_C_T _p_E_T) 
             (pair.Imp_pair__constr _p_C_T _p_E_T) 
             (pair.Imp_pair__prj_b _p_C_T _p_E_T)))) 
    (sets.Setoid__different_is_irreflexive (dk_tuple.prod _p_C_T _p_E_T) 
       (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
       (sets.Setoid__different (dk_tuple.prod _p_C_T _p_E_T) 
          (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal)) 
       (pair.Imp_pair__equal_reflexive _p_C_T _p_E_T 
          (dk_tuple.prod _p_C_T _p_E_T) 
          (pair.Imp_pair__constr _p_C_T _p_E_T) 
          (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
          (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
          (pair.Imp_pair__prj_b _p_C_T _p_E_T) 
          (pair.Imp_pair__unicite_1 _p_C_T _p_E_T 
             (dk_tuple.prod _p_C_T _p_E_T) 
             (pair.Imp_pair__constr _p_C_T _p_E_T) 
             (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
             (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
             (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
          (pair.Imp_pair__unicite_2 _p_C_T _p_E_T 
             (dk_tuple.prod _p_C_T _p_E_T) 
             (pair.Imp_pair__constr _p_C_T _p_E_T) 
             (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
             (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
             (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
          (pair.Imp_pair__equal_transitive _p_C_T _p_E_T _p_C_equal 
             _p_C_equal_transitive _p_E_equal _p_E_equal_transitive 
             (dk_tuple.prod _p_C_T _p_E_T) 
             (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
             (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
             (pair.Imp_pair__prj_b _p_C_T _p_E_T) 
             (pair.Imp_pair__def_equal _p_C_T _p_E_T _p_C_equal _p_E_equal 
                (dk_tuple.prod _p_C_T _p_E_T) 
                (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
                (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
                (pair.Imp_pair__prj_b _p_C_T _p_E_T)))) 
       (sets.Setoid__same_is_not_different (dk_tuple.prod _p_C_T _p_E_T) 
          (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal))) 
    (pair.Imp_pair__equal_symmetric _p_C_T _p_E_T 
       (dk_tuple.prod _p_C_T _p_E_T) (pair.Imp_pair__constr _p_C_T _p_E_T) 
       (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
       (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
       (pair.Imp_pair__prj_b _p_C_T _p_E_T) 
       (pair.Imp_pair__unicite_1 _p_C_T _p_E_T (dk_tuple.prod _p_C_T _p_E_T) 
          (pair.Imp_pair__constr _p_C_T _p_E_T) 
          (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
          (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
          (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
       (pair.Imp_pair__unicite_2 _p_C_T _p_E_T (dk_tuple.prod _p_C_T _p_E_T) 
          (pair.Imp_pair__constr _p_C_T _p_E_T) 
          (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
          (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
          (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
       (pair.Imp_pair__equal_transitive _p_C_T _p_E_T _p_C_equal 
          _p_C_equal_transitive _p_E_equal _p_E_equal_transitive 
          (dk_tuple.prod _p_C_T _p_E_T) 
          (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
          (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
          (pair.Imp_pair__prj_b _p_C_T _p_E_T) 
          (pair.Imp_pair__def_equal _p_C_T _p_E_T _p_C_equal _p_E_equal 
             (dk_tuple.prod _p_C_T _p_E_T) 
             (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
             (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
             (pair.Imp_pair__prj_b _p_C_T _p_E_T))) 
       (pair.Imp_pair__equal_symmetric2 _p_C_T _p_E_T _p_C_equal 
          _p_C_equal_symmetric _p_E_equal _p_E_equal_symmetric 
          (dk_tuple.prod _p_C_T _p_E_T) 
          (pair.Imp_pair__constr _p_C_T _p_E_T) 
          (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
          (pair.Imp_pair__def_equal1 _p_C_T _p_E_T _p_C_equal 
             _p_C_equal_symmetric _p_C_equal_transitive _p_E_equal 
             _p_E_equal_symmetric _p_E_equal_transitive 
             (dk_tuple.prod _p_C_T _p_E_T) 
             (pair.Imp_pair__constr _p_C_T _p_E_T) 
             (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
             (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
             (pair.Imp_pair__prj_b _p_C_T _p_E_T) 
             (pair.Imp_pair__prj_a_is_first_of_pair _p_C_T _p_E_T _p_C_equal 
                (dk_tuple.prod _p_C_T _p_E_T) 
                (pair.Imp_pair__constr _p_C_T _p_E_T) 
                (pair.Imp_pair__prj_a _p_C_T _p_E_T)) 
             (pair.Imp_pair__def_equal _p_C_T _p_E_T _p_C_equal _p_E_equal 
                (dk_tuple.prod _p_C_T _p_E_T) 
                (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
                (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
                (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
             (pair.Imp_pair__prj_b_is_snd_of_pair _p_C_T _p_E_T _p_E_equal 
                (dk_tuple.prod _p_C_T _p_E_T) 
                (pair.Imp_pair__constr _p_C_T _p_E_T) 
                (pair.Imp_pair__prj_b _p_C_T _p_E_T))))) 
    (sets.Setoid__different_is_complete (dk_tuple.prod _p_C_T _p_E_T) 
       (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
       (sets.Setoid__different (dk_tuple.prod _p_C_T _p_E_T) 
          (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal)) 
       (pair.Imp_pair__equal_reflexive _p_C_T _p_E_T 
          (dk_tuple.prod _p_C_T _p_E_T) 
          (pair.Imp_pair__constr _p_C_T _p_E_T) 
          (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
          (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
          (pair.Imp_pair__prj_b _p_C_T _p_E_T) 
          (pair.Imp_pair__unicite_1 _p_C_T _p_E_T 
             (dk_tuple.prod _p_C_T _p_E_T) 
             (pair.Imp_pair__constr _p_C_T _p_E_T) 
             (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
             (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
             (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
          (pair.Imp_pair__unicite_2 _p_C_T _p_E_T 
             (dk_tuple.prod _p_C_T _p_E_T) 
             (pair.Imp_pair__constr _p_C_T _p_E_T) 
             (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
             (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
             (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
          (pair.Imp_pair__equal_transitive _p_C_T _p_E_T _p_C_equal 
             _p_C_equal_transitive _p_E_equal _p_E_equal_transitive 
             (dk_tuple.prod _p_C_T _p_E_T) 
             (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
             (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
             (pair.Imp_pair__prj_b _p_C_T _p_E_T) 
             (pair.Imp_pair__def_equal _p_C_T _p_E_T _p_C_equal _p_E_equal 
                (dk_tuple.prod _p_C_T _p_E_T) 
                (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
                (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
                (pair.Imp_pair__prj_b _p_C_T _p_E_T)))) 
       (pair.Imp_pair__equal_symmetric _p_C_T _p_E_T 
          (dk_tuple.prod _p_C_T _p_E_T) 
          (pair.Imp_pair__constr _p_C_T _p_E_T) 
          (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
          (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
          (pair.Imp_pair__prj_b _p_C_T _p_E_T) 
          (pair.Imp_pair__unicite_1 _p_C_T _p_E_T 
             (dk_tuple.prod _p_C_T _p_E_T) 
             (pair.Imp_pair__constr _p_C_T _p_E_T) 
             (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
             (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
             (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
          (pair.Imp_pair__unicite_2 _p_C_T _p_E_T 
             (dk_tuple.prod _p_C_T _p_E_T) 
             (pair.Imp_pair__constr _p_C_T _p_E_T) 
             (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
             (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
             (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
          (pair.Imp_pair__equal_transitive _p_C_T _p_E_T _p_C_equal 
             _p_C_equal_transitive _p_E_equal _p_E_equal_transitive 
             (dk_tuple.prod _p_C_T _p_E_T) 
             (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
             (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
             (pair.Imp_pair__prj_b _p_C_T _p_E_T) 
             (pair.Imp_pair__def_equal _p_C_T _p_E_T _p_C_equal _p_E_equal 
                (dk_tuple.prod _p_C_T _p_E_T) 
                (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
                (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
                (pair.Imp_pair__prj_b _p_C_T _p_E_T))) 
          (pair.Imp_pair__equal_symmetric2 _p_C_T _p_E_T _p_C_equal 
             _p_C_equal_symmetric _p_E_equal _p_E_equal_symmetric 
             (dk_tuple.prod _p_C_T _p_E_T) 
             (pair.Imp_pair__constr _p_C_T _p_E_T) 
             (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
             (pair.Imp_pair__def_equal1 _p_C_T _p_E_T _p_C_equal 
                _p_C_equal_symmetric _p_C_equal_transitive _p_E_equal 
                _p_E_equal_symmetric _p_E_equal_transitive 
                (dk_tuple.prod _p_C_T _p_E_T) 
                (pair.Imp_pair__constr _p_C_T _p_E_T) 
                (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
                (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
                (pair.Imp_pair__prj_b _p_C_T _p_E_T) 
                (pair.Imp_pair__prj_a_is_first_of_pair _p_C_T _p_E_T 
                   _p_C_equal (dk_tuple.prod _p_C_T _p_E_T) 
                   (pair.Imp_pair__constr _p_C_T _p_E_T) 
                   (pair.Imp_pair__prj_a _p_C_T _p_E_T)) 
                (pair.Imp_pair__def_equal _p_C_T _p_E_T _p_C_equal 
                   _p_E_equal (dk_tuple.prod _p_C_T _p_E_T) 
                   (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
                   (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
                   (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
                (pair.Imp_pair__prj_b_is_snd_of_pair _p_C_T _p_E_T 
                   _p_E_equal (dk_tuple.prod _p_C_T _p_E_T) 
                   (pair.Imp_pair__constr _p_C_T _p_E_T) 
                   (pair.Imp_pair__prj_b _p_C_T _p_E_T))))) 
       (pair.Imp_pair__equal_transitive _p_C_T _p_E_T _p_C_equal 
          _p_C_equal_transitive _p_E_equal _p_E_equal_transitive 
          (dk_tuple.prod _p_C_T _p_E_T) 
          (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
          (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
          (pair.Imp_pair__prj_b _p_C_T _p_E_T) 
          (pair.Imp_pair__def_equal _p_C_T _p_E_T _p_C_equal _p_E_equal 
             (dk_tuple.prod _p_C_T _p_E_T) 
             (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
             (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
             (pair.Imp_pair__prj_b _p_C_T _p_E_T))) 
       (sets.Setoid__same_is_not_different (dk_tuple.prod _p_C_T _p_E_T) 
          (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal))) 
    (sets.Setoid__different_is_symmetric (dk_tuple.prod _p_C_T _p_E_T) 
       (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
       (sets.Setoid__different (dk_tuple.prod _p_C_T _p_E_T) 
          (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal)) 
       (pair.Imp_pair__equal_symmetric _p_C_T _p_E_T 
          (dk_tuple.prod _p_C_T _p_E_T) 
          (pair.Imp_pair__constr _p_C_T _p_E_T) 
          (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
          (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
          (pair.Imp_pair__prj_b _p_C_T _p_E_T) 
          (pair.Imp_pair__unicite_1 _p_C_T _p_E_T 
             (dk_tuple.prod _p_C_T _p_E_T) 
             (pair.Imp_pair__constr _p_C_T _p_E_T) 
             (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
             (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
             (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
          (pair.Imp_pair__unicite_2 _p_C_T _p_E_T 
             (dk_tuple.prod _p_C_T _p_E_T) 
             (pair.Imp_pair__constr _p_C_T _p_E_T) 
             (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
             (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
             (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
          (pair.Imp_pair__equal_transitive _p_C_T _p_E_T _p_C_equal 
             _p_C_equal_transitive _p_E_equal _p_E_equal_transitive 
             (dk_tuple.prod _p_C_T _p_E_T) 
             (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
             (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
             (pair.Imp_pair__prj_b _p_C_T _p_E_T) 
             (pair.Imp_pair__def_equal _p_C_T _p_E_T _p_C_equal _p_E_equal 
                (dk_tuple.prod _p_C_T _p_E_T) 
                (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
                (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
                (pair.Imp_pair__prj_b _p_C_T _p_E_T))) 
          (pair.Imp_pair__equal_symmetric2 _p_C_T _p_E_T _p_C_equal 
             _p_C_equal_symmetric _p_E_equal _p_E_equal_symmetric 
             (dk_tuple.prod _p_C_T _p_E_T) 
             (pair.Imp_pair__constr _p_C_T _p_E_T) 
             (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
             (pair.Imp_pair__def_equal1 _p_C_T _p_E_T _p_C_equal 
                _p_C_equal_symmetric _p_C_equal_transitive _p_E_equal 
                _p_E_equal_symmetric _p_E_equal_transitive 
                (dk_tuple.prod _p_C_T _p_E_T) 
                (pair.Imp_pair__constr _p_C_T _p_E_T) 
                (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
                (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
                (pair.Imp_pair__prj_b _p_C_T _p_E_T) 
                (pair.Imp_pair__prj_a_is_first_of_pair _p_C_T _p_E_T 
                   _p_C_equal (dk_tuple.prod _p_C_T _p_E_T) 
                   (pair.Imp_pair__constr _p_C_T _p_E_T) 
                   (pair.Imp_pair__prj_a _p_C_T _p_E_T)) 
                (pair.Imp_pair__def_equal _p_C_T _p_E_T _p_C_equal 
                   _p_E_equal (dk_tuple.prod _p_C_T _p_E_T) 
                   (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal) 
                   (pair.Imp_pair__prj_a _p_C_T _p_E_T) 
                   (pair.Imp_pair__prj_b _p_C_T _p_E_T)) 
                (pair.Imp_pair__prj_b_is_snd_of_pair _p_C_T _p_E_T 
                   _p_E_equal (dk_tuple.prod _p_C_T _p_E_T) 
                   (pair.Imp_pair__constr _p_C_T _p_E_T) 
                   (pair.Imp_pair__prj_b _p_C_T _p_E_T))))) 
       (sets.Setoid__same_is_not_different (dk_tuple.prod _p_C_T _p_E_T) 
          (pair.Imp_pair__equal _p_C_T _p_E_T _p_C_equal _p_E_equal))).

