#NAME multiplicative_law.

def Semi_group__mult_substitution_rule :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_mult_left_substitution_rule:(dk_logic.eP 
                                      (dk_logic.forall abst_T 
                                         (x:(cc.eT abst_T) =>
                                          dk_logic.forall abst_T 
                                            (y:(cc.eT abst_T) =>
                                             dk_logic.forall abst_T 
                                               (z:(cc.eT abst_T) =>
                                                dk_logic.imp 
                                                  (dk_logic.ebP 
                                                     (abst_equal x y)) 
                                                  (dk_logic.ebP 
                                                     (abst_equal 
                                                        (abst_mult x z) 
                                                        (abst_mult y z)))))))) ->
  abst_mult_right_substitution_rule:(dk_logic.eP 
                                       (dk_logic.forall abst_T 
                                          (x:(cc.eT abst_T) =>
                                           dk_logic.forall abst_T 
                                             (y:(cc.eT abst_T) =>
                                              dk_logic.forall abst_T 
                                                (z:(cc.eT abst_T) =>
                                                 dk_logic.imp 
                                                   (dk_logic.ebP 
                                                      (abst_equal x y)) 
                                                   (dk_logic.ebP 
                                                      (abst_equal 
                                                         (abst_mult z x) 
                                                         (abst_mult z y)))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x_1:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (x_2:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (y_1:(cc.eT abst_T) =>
              dk_logic.forall abst_T 
                (y_2:(cc.eT abst_T) =>
                 dk_logic.imp (dk_logic.ebP (abst_equal x_1 x_2)) 
                   (dk_logic.imp (dk_logic.ebP (abst_equal y_1 y_2)) 
                      (dk_logic.ebP 
                         (abst_equal (abst_mult x_1 y_1) (abst_mult x_2 y_2)))))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_mult_left_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.ebP (abst_equal (abst_mult x z) (abst_mult y z)))))))) =>
  abst_mult_right_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.ebP (abst_equal (abst_mult z x) (abst_mult z y)))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vkc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vlc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vmc:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vnc:(zen.term abst_T) =>
                 zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vkc v_Vlc))) 
                   (zen.imp 
                      (zen.triangle (focal.is_true (abst_equal v_Vmc v_Vnc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult v_Vkc v_Vmc) 
                               (abst_mult v_Vlc v_Vnc)))))))))) 
    (v_Voc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vkc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vlc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vmc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vnc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vkc v_Vlc))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vmc v_Vnc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_mult v_Vkc v_Vmc) 
                                      (abst_mult v_Vlc v_Vnc)))))))))))) =>
     zen.Rnotall abst_T 
       (v_Vkc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vlc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vmc:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vnc:(zen.term abst_T) =>
                 zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vkc v_Vlc))) 
                   (zen.imp 
                      (zen.triangle (focal.is_true (abst_equal v_Vmc v_Vnc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult v_Vkc v_Vmc) 
                               (abst_mult v_Vlc v_Vnc))))))))) 
       (v_Vpc:(zen.term abst_T) =>
        v_Vqc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vlc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vmc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vnc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vpc v_Vlc))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vmc v_Vnc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_mult v_Vpc v_Vmc) 
                                      (abst_mult v_Vlc v_Vnc))))))))))) =>
        zen.Rnotall abst_T 
          (v_Vlc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vmc:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vnc:(zen.term abst_T) =>
                 zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vpc v_Vlc))) 
                   (zen.imp 
                      (zen.triangle (focal.is_true (abst_equal v_Vmc v_Vnc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult v_Vpc v_Vmc) 
                               (abst_mult v_Vlc v_Vnc)))))))) 
          (v_Vrc:(zen.term abst_T) =>
           v_Vsc:
           (zen.proof 
              (zen.not 
                 (zen.forall abst_T 
                    (v_Vmc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vnc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vpc v_Vrc))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vmc v_Vnc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_mult v_Vpc v_Vmc) 
                                      (abst_mult v_Vrc v_Vnc)))))))))) =>
           zen.Rnotall abst_T 
             (v_Vmc:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vnc:(zen.term abst_T) =>
                 zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vpc v_Vrc))) 
                   (zen.imp 
                      (zen.triangle (focal.is_true (abst_equal v_Vmc v_Vnc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult v_Vpc v_Vmc) 
                               (abst_mult v_Vrc v_Vnc))))))) 
             (v_Vtc:(zen.term abst_T) =>
              v_Vuc:
              (zen.proof 
                 (zen.not 
                    (zen.forall abst_T 
                       (v_Vnc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vpc v_Vrc))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vtc v_Vnc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_mult v_Vpc v_Vtc) 
                                      (abst_mult v_Vrc v_Vnc))))))))) =>
              zen.Rnotall abst_T 
                (v_Vnc:(zen.term abst_T) =>
                 zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vpc v_Vrc))) 
                   (zen.imp 
                      (zen.triangle (focal.is_true (abst_equal v_Vtc v_Vnc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult v_Vpc v_Vtc) 
                               (abst_mult v_Vrc v_Vnc)))))) 
                (v_Vvc:(zen.term abst_T) =>
                 v_Vwc:
                 (zen.proof 
                    (zen.not 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vpc v_Vrc))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vtc v_Vvc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_mult v_Vpc v_Vtc) 
                                      (abst_mult v_Vrc v_Vvc)))))))) =>
                 zen.Rnotimply 
                   (zen.triangle (focal.is_true (abst_equal v_Vpc v_Vrc))) 
                   (zen.imp 
                      (zen.triangle (focal.is_true (abst_equal v_Vtc v_Vvc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult v_Vpc v_Vtc) 
                               (abst_mult v_Vrc v_Vvc))))) 
                   (v_Vxc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_equal v_Vpc v_Vrc)))) =>
                    v_Vyc:
                    (zen.proof 
                       (zen.not 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vtc v_Vvc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_mult v_Vpc v_Vtc) 
                                      (abst_mult v_Vrc v_Vvc))))))) =>
                    zen.Rnotimply 
                      (zen.triangle (focal.is_true (abst_equal v_Vtc v_Vvc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult v_Vpc v_Vtc) 
                               (abst_mult v_Vrc v_Vvc)))) 
                      (v_Vzc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vtc v_Vvc)))) =>
                       v_Vad:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_mult v_Vpc v_Vtc) 
                                      (abst_mult v_Vrc v_Vvc)))))) =>
                       zen.Rall abst_T 
                         (v_Vbd:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vcd:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vdd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vbd v_Vcd))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_mult v_Vdd v_Vbd) 
                                           (abst_mult v_Vdd v_Vcd))))))) 
                         v_Vtc 
                         (v_Ved:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vcd:(zen.term abst_T) =>
                                 zen.forall abst_T 
                                   (v_Vdd:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vtc v_Vcd))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult v_Vdd v_Vtc) 
                                               (abst_mult v_Vdd v_Vcd)))))))) =>
                          zen.Rall abst_T 
                            (v_Vcd:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vdd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vtc v_Vcd))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_mult v_Vdd v_Vtc) 
                                           (abst_mult v_Vdd v_Vcd)))))) 
                            v_Vvc 
                            (v_Vfd:
                             (zen.proof 
                                (zen.forall abst_T 
                                   (v_Vdd:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vtc v_Vvc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult v_Vdd v_Vtc) 
                                               (abst_mult v_Vdd v_Vvc))))))) =>
                             zen.Rall abst_T 
                               (v_Vdd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vtc v_Vvc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_mult v_Vdd v_Vtc) 
                                           (abst_mult v_Vdd v_Vvc))))) v_Vrc 
                               (v_Vgd:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vtc v_Vvc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult v_Vrc v_Vtc) 
                                               (abst_mult v_Vrc v_Vvc)))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vtc v_Vvc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_mult v_Vrc v_Vtc) 
                                           (abst_mult v_Vrc v_Vvc)))) 
                                  (v_Vhd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vtc v_Vvc))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vtc v_Vvc))) v_Vzc 
                                     v_Vhd) 
                                  (v_Vid:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult v_Vrc v_Vtc) 
                                               (abst_mult v_Vrc v_Vvc))))) =>
                                   zen.Rcut 
                                     (zen.and 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_mult v_Vpc v_Vtc) 
                                                 (abst_mult v_Vrc v_Vtc)))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult v_Vpc v_Vtc) 
                                                    (abst_mult v_Vrc v_Vtc)))))) 
                                     (v_Vjd:
                                      (zen.proof 
                                         (zen.and 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_mult v_Vpc v_Vtc) 
                                                     (abst_mult v_Vrc v_Vtc)))) 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult v_Vpc 
                                                           v_Vtc) 
                                                        (abst_mult v_Vrc 
                                                           v_Vtc))))))) =>
                                      zen.Rand 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_mult v_Vpc v_Vtc) 
                                                 (abst_mult v_Vrc v_Vtc)))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult v_Vpc v_Vtc) 
                                                    (abst_mult v_Vrc v_Vtc))))) 
                                        (v_Vkd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_mult v_Vpc v_Vtc) 
                                                     (abst_mult v_Vrc v_Vtc))))) =>
                                         v_Vld:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult v_Vpc 
                                                           v_Vtc) 
                                                        (abst_mult v_Vrc 
                                                           v_Vtc)))))) =>
                                         zen.Rall abst_T 
                                           (v_Vbd:(zen.term abst_T) =>
                                            zen.forall abst_T 
                                              (v_Vcd:(zen.term abst_T) =>
                                               zen.forall abst_T 
                                                 (v_Vdd:(zen.term abst_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vbd 
                                                             v_Vcd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                v_Vbd v_Vdd) 
                                                             (abst_mult 
                                                                v_Vcd v_Vdd))))))) 
                                           v_Vpc 
                                           (v_Vmd:
                                            (zen.proof 
                                               (zen.forall abst_T 
                                                  (v_Vcd:(zen.term abst_T) =>
                                                   zen.forall abst_T 
                                                     (v_Vdd:
                                                      (zen.term abst_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Vpc v_Vcd))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vdd) 
                                                                 (abst_mult 
                                                                    v_Vcd 
                                                                    v_Vdd)))))))) =>
                                            zen.Rall abst_T 
                                              (v_Vcd:(zen.term abst_T) =>
                                               zen.forall abst_T 
                                                 (v_Vdd:(zen.term abst_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vpc 
                                                             v_Vcd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                v_Vpc v_Vdd) 
                                                             (abst_mult 
                                                                v_Vcd v_Vdd)))))) 
                                              v_Vrc 
                                              (v_Vnd:
                                               (zen.proof 
                                                  (zen.forall abst_T 
                                                     (v_Vdd:
                                                      (zen.term abst_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Vpc v_Vrc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vdd) 
                                                                 (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vdd))))))) =>
                                               zen.Rall abst_T 
                                                 (v_Vdd:(zen.term abst_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vpc 
                                                             v_Vrc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                v_Vpc v_Vdd) 
                                                             (abst_mult 
                                                                v_Vrc v_Vdd))))) 
                                                 v_Vtc 
                                                 (v_Vod:
                                                  (zen.proof 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Vpc v_Vrc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc)))))) =>
                                                  zen.Rimply 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vpc 
                                                             v_Vrc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                v_Vpc v_Vtc) 
                                                             (abst_mult 
                                                                v_Vrc v_Vtc)))) 
                                                    (v_Vpd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    v_Vpc 
                                                                    v_Vrc))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                v_Vpc v_Vrc))) 
                                                       v_Vxc v_Vpd) 
                                                    (v_Vqd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   v_Vpc 
                                                                   v_Vtc) 
                                                                (abst_mult 
                                                                   v_Vrc 
                                                                   v_Vtc)))) 
                                                       v_Vqd v_Vld) v_Vod) 
                                                 v_Vnd) v_Vmd) 
                                           abst_mult_left_substitution_rule) 
                                        v_Vjd) 
                                     (v_Vrd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.and 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_mult v_Vpc 
                                                           v_Vtc) 
                                                        (abst_mult v_Vrc 
                                                           v_Vtc)))) 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult v_Vpc 
                                                              v_Vtc) 
                                                           (abst_mult v_Vrc 
                                                              v_Vtc)))))))) =>
                                      zen.Rcut 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult v_Vrc v_Vvc) 
                                              (abst_mult v_Vrc v_Vvc))) 
                                        (v_Vsd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_mult v_Vrc v_Vvc) 
                                                  (abst_mult v_Vrc v_Vvc)))) =>
                                         zen.Rsubst basics.bool__t 
                                           (v_Vtd:
                                            (zen.term basics.bool__t) =>
                                            zen.triangle 
                                              (focal.is_true v_Vtd)) 
                                           (abst_equal 
                                              (abst_mult v_Vrc v_Vtc) 
                                              (abst_mult v_Vrc v_Vvc)) 
                                           (abst_equal 
                                              (abst_mult v_Vpc v_Vtc) 
                                              (abst_mult v_Vrc v_Vvc)) 
                                           (v_Vud:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_mult v_Vrc 
                                                              v_Vtc) 
                                                           (abst_mult v_Vrc 
                                                              v_Vvc)) 
                                                        (abst_equal 
                                                           (abst_mult v_Vpc 
                                                              v_Vtc) 
                                                           (abst_mult v_Vrc 
                                                              v_Vvc)))))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vvd:(zen.term abst_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal v_Vvd 
                                                          (abst_mult v_Vrc 
                                                             v_Vvc)) 
                                                       (abst_equal 
                                                          (abst_mult v_Vpc 
                                                             v_Vtc) 
                                                          (abst_mult v_Vrc 
                                                             v_Vvc))))) 
                                              (abst_mult v_Vrc v_Vtc) 
                                              (abst_mult v_Vpc v_Vtc) 
                                              (v_Vwd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_mult v_Vrc 
                                                              v_Vtc) 
                                                           (abst_mult v_Vpc 
                                                              v_Vtc))))) =>
                                               zen.Rnotand 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_mult v_Vpc 
                                                             v_Vtc) 
                                                          (abst_mult v_Vrc 
                                                             v_Vtc)))) 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                v_Vpc v_Vtc) 
                                                             (abst_mult 
                                                                v_Vrc v_Vtc))))) 
                                                 (v_Vxd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc)))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_mult v_Vpc 
                                                             v_Vtc) 
                                                          (abst_mult v_Vrc 
                                                             v_Vtc))) 
                                                    (v_Vyd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_mult 
                                                                 v_Vpc v_Vtc) 
                                                              (abst_mult 
                                                                 v_Vrc v_Vtc)))) =>
                                                     zen.Rcut 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_mult 
                                                                v_Vpc v_Vtc) 
                                                             (abst_mult 
                                                                v_Vpc v_Vtc))) 
                                                       (v_Vzd:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc)))) =>
                                                        zen.Rsubst abst_T 
                                                          (v_Vae:
                                                           (zen.term abst_T) =>
                                                           zen.triangle 
                                                             (zen.equal 
                                                                abst_T v_Vae 
                                                                (abst_mult 
                                                                   v_Vpc 
                                                                   v_Vtc))) 
                                                          (abst_mult v_Vpc 
                                                             v_Vtc) 
                                                          (abst_mult v_Vrc 
                                                             v_Vtc) 
                                                          (v_Vkd:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                   (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc))) 
                                                             v_Vyd v_Vkd) 
                                                          (v_Vbe:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (
                                                                    abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc)))) =>
                                                           zen.Rsubst abst_T 
                                                             (v_Vce:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                   v_Vce)) 
                                                             (abst_mult 
                                                                v_Vpc v_Vtc) 
                                                             (abst_mult 
                                                                v_Vpc v_Vtc) 
                                                             (v_Vde:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc))))) =>
                                                              zen.Rnoteq 
                                                                abst_T 
                                                                (abst_mult 
                                                                   v_Vpc 
                                                                   v_Vtc) 
                                                                v_Vde) 
                                                             (v_Vbe:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc))) 
                                                                v_Vbe v_Vwd) 
                                                             v_Vbe) v_Vzd) 
                                                       (v_Vde:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (
                                                                    abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc))))) =>
                                                        zen.Rnoteq abst_T 
                                                          (abst_mult v_Vpc 
                                                             v_Vtc) v_Vde)) 
                                                    v_Vxd) 
                                                 (v_Vee:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (
                                                                    abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc))))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                v_Vpc v_Vtc) 
                                                             (abst_mult 
                                                                v_Vrc v_Vtc)))) 
                                                    (v_Vqd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vbd:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vcd:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vdd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vbd 
                                                                    v_Vcd))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vcd 
                                                                    v_Vdd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vbd 
                                                                    v_Vdd))))))) 
                                                       (abst_mult v_Vpc v_Vtc) 
                                                       (v_Vfe:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              abst_T 
                                                              (v_Vcd:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.forall 
                                                                 abst_T 
                                                                 (v_Vdd:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vcd))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vcd 
                                                                    v_Vdd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vdd)))))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vcd:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vdd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vcd))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vcd 
                                                                    v_Vdd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vdd)))))) 
                                                          (abst_mult v_Vrc 
                                                             v_Vtc) 
                                                          (v_Vge:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 abst_T 
                                                                 (v_Vdd:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vdd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vdd))))))) =>
                                                           zen.Rall abst_T 
                                                             (v_Vdd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vdd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vdd))))) 
                                                             (abst_mult 
                                                                v_Vrc v_Vvc) 
                                                             (v_Vhe:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc))))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                                (v_Vld:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc)))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                   v_Vqd 
                                                                   v_Vld) 
                                                                (v_Vie:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                   (v_Vje:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    v_Vid 
                                                                    v_Vje) 
                                                                   (v_Vke:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vtd:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vtd)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (v_Vle:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vvd 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (v_Vde:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc))))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vde) 
                                                                    (v_Vle:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vme:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vme) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (v_Vne:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc))) 
                                                                    v_Vsd 
                                                                    v_Vne) 
                                                                    (v_Vle:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    v_Vle) 
                                                                    v_Vle) 
                                                                    v_Vle) 
                                                                    (v_Vke:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    v_Vke 
                                                                    v_Vad) 
                                                                    v_Vke) 
                                                                   v_Vie) 
                                                                v_Vhe) v_Vge) 
                                                          v_Vfe) 
                                                       abst_equal_transitive) 
                                                    v_Vee) v_Vrd) 
                                              (v_Vle:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 v_Vpc v_Vtc) 
                                                              (abst_mult 
                                                                 v_Vrc v_Vvc)) 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 v_Vpc v_Vtc) 
                                                              (abst_mult 
                                                                 v_Vrc v_Vvc)))))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Vme:(zen.term abst_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                v_Vpc v_Vtc) 
                                                             v_Vme) 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                v_Vpc v_Vtc) 
                                                             (abst_mult 
                                                                v_Vrc v_Vvc))))) 
                                                 (abst_mult v_Vrc v_Vvc) 
                                                 (abst_mult v_Vrc v_Vvc) 
                                                 (v_Vne:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_mult 
                                                                 v_Vrc v_Vvc) 
                                                              (abst_mult 
                                                                 v_Vrc v_Vvc))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_mult v_Vrc 
                                                             v_Vvc) 
                                                          (abst_mult v_Vrc 
                                                             v_Vvc))) v_Vsd 
                                                    v_Vne) 
                                                 (v_Vle:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                  zen.Rnoteq basics.bool__t 
                                                    (abst_equal 
                                                       (abst_mult v_Vpc v_Vtc) 
                                                       (abst_mult v_Vrc v_Vvc)) 
                                                    v_Vle) v_Vle) v_Vud) 
                                           (v_Vke:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult v_Vpc 
                                                           v_Vtc) 
                                                        (abst_mult v_Vrc 
                                                           v_Vvc))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult v_Vpc v_Vtc) 
                                                       (abst_mult v_Vrc v_Vvc)))) 
                                              v_Vke v_Vad) v_Vid) 
                                        (v_Vne:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_mult v_Vrc v_Vvc) 
                                                     (abst_mult v_Vrc v_Vvc))))) =>
                                         zen.Rcut 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult v_Vrc v_Vvc) 
                                                    (abst_mult v_Vrc v_Vvc)))) 
                                           (v_Voe:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult v_Vrc 
                                                           v_Vvc) 
                                                        (abst_mult v_Vrc 
                                                           v_Vvc))))) =>
                                            zen.Rall abst_T 
                                              (v_Vbd:(zen.term abst_T) =>
                                               zen.forall abst_T 
                                                 (v_Vcd:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vdd:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                v_Vbd v_Vcd))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vcd 
                                                                   v_Vdd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vbd 
                                                                   v_Vdd))))))) 
                                              (abst_mult v_Vrc v_Vtc) 
                                              (v_Vpe:
                                               (zen.proof 
                                                  (zen.forall abst_T 
                                                     (v_Vcd:
                                                      (zen.term abst_T) =>
                                                      zen.forall abst_T 
                                                        (v_Vdd:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vcd))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Vcd 
                                                                    v_Vdd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vdd)))))))) =>
                                               zen.Rall abst_T 
                                                 (v_Vcd:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vdd:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   v_Vrc 
                                                                   v_Vtc) 
                                                                v_Vcd))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vcd 
                                                                   v_Vdd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                   v_Vdd)))))) 
                                                 (abst_mult v_Vrc v_Vvc) 
                                                 (v_Vqe:
                                                  (zen.proof 
                                                     (zen.forall abst_T 
                                                        (v_Vdd:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (
                                                                    abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    v_Vdd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vdd))))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vdd:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   v_Vrc 
                                                                   v_Vtc) 
                                                                (abst_mult 
                                                                   v_Vrc 
                                                                   v_Vvc)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                   v_Vdd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                   v_Vdd))))) 
                                                    (abst_mult v_Vrc v_Vvc) 
                                                    (v_Vre:
                                                     (zen.proof 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (
                                                                    abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc))))))) =>
                                                     zen.Rimply 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   v_Vrc 
                                                                   v_Vtc) 
                                                                (abst_mult 
                                                                   v_Vrc 
                                                                   v_Vvc)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                   (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                   (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                       (v_Vje:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                   (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                          v_Vid v_Vje) 
                                                       (v_Vse:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                   (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                   (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                          (v_Vte:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                             v_Voe v_Vte) 
                                                          (v_Vid:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                           zen.Rsubst 
                                                             basics.bool__t 
                                                             (v_Vtd:
                                                              (zen.term 
                                                                 basics.bool__t) =>
                                                              zen.triangle 
                                                                (focal.is_true 
                                                                   v_Vtd)) 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   v_Vrc 
                                                                   v_Vtc) 
                                                                (abst_mult 
                                                                   v_Vrc 
                                                                   v_Vvc)) 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   v_Vpc 
                                                                   v_Vtc) 
                                                                (abst_mult 
                                                                   v_Vrc 
                                                                   v_Vvc)) 
                                                             (v_Vud:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                              zen.Rsubst 
                                                                abst_T 
                                                                (v_Vvd:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vvd 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                                (abst_mult 
                                                                   v_Vrc 
                                                                   v_Vtc) 
                                                                (abst_mult 
                                                                   v_Vpc 
                                                                   v_Vtc) 
                                                                (v_Vwd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc))))) =>
                                                                 zen.Rnotand 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc))))) 
                                                                   (v_Vxd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc))) 
                                                                    (v_Vyd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc)))) =>
                                                                    zen.Reqsym 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vyd 
                                                                    v_Vwd) 
                                                                    v_Vxd) 
                                                                   (v_Vee:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (v_Vqd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vbd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vcd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vdd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vbd 
                                                                    v_Vcd))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vcd 
                                                                    v_Vdd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vbd 
                                                                    v_Vdd))))))) 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (v_Vfe:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vcd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vdd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vcd))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vcd 
                                                                    v_Vdd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vdd)))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vcd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vdd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vcd))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vcd 
                                                                    v_Vdd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vdd)))))) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (v_Vge:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vdd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vdd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vdd))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vdd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vdd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vdd))))) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (v_Vhe:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                                    (v_Vld:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    v_Vqd 
                                                                    v_Vld) 
                                                                    (v_Vie:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (v_Vje:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    v_Vid 
                                                                    v_Vje) 
                                                                    (v_Vke:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    v_Vke 
                                                                    v_Vad) 
                                                                    v_Vie) 
                                                                    v_Vhe) 
                                                                    v_Vge) 
                                                                    v_Vfe) 
                                                                    abst_equal_transitive) 
                                                                    v_Vee) 
                                                                   v_Vrd) 
                                                                (v_Vle:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                 zen.Rsubst 
                                                                   abst_T 
                                                                   (v_Vme:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vme) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                                   (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                   (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                   (v_Vne:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    v_Vne) 
                                                                   (v_Vle:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    v_Vle) 
                                                                   v_Vle) 
                                                                v_Vud) 
                                                             (v_Vke:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_mult 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                v_Vke v_Vad) 
                                                             v_Vid) v_Vse) 
                                                       v_Vre) v_Vqe) v_Vpe) 
                                              abst_equal_transitive) 
                                           (v_Vte:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult v_Vrc 
                                                              v_Vvc) 
                                                           (abst_mult v_Vrc 
                                                              v_Vvc)))))) =>
                                            zen.Rnoteq abst_T 
                                              (abst_mult v_Vrc v_Vvc) v_Vne)))) 
                                  v_Vgd) v_Vfd) v_Ved) 
                         abst_mult_right_substitution_rule) v_Vyc) v_Vwc) 
                v_Vuc) v_Vsc) v_Vqc) v_Voc).

def Monoid__one_is_neutral :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_one:(cc.eT abst_T) ->
  abst_one_is_left_neutral:(dk_logic.eP 
                              (dk_logic.forall abst_T 
                                 (x:(cc.eT abst_T) =>
                                  dk_logic.ebP 
                                    (abst_equal (abst_mult abst_one x) x)))) ->
  abst_one_is_right_neutral:(dk_logic.eP 
                               (dk_logic.forall abst_T 
                                  (x:(cc.eT abst_T) =>
                                   dk_logic.ebP 
                                     (abst_equal (abst_mult x abst_one) x)))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.and (dk_logic.ebP (abst_equal (abst_mult x abst_one) x)) 
          (dk_logic.ebP (abst_equal (abst_mult abst_one x) x))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_one:(cc.eT abst_T) =>
  abst_one_is_left_neutral:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.ebP (abst_equal (abst_mult abst_one x) x)))) =>
  abst_one_is_right_neutral:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.ebP (abst_equal (abst_mult x abst_one) x)))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.and 
          (zen.triangle 
             (focal.is_true (abst_equal (abst_mult v_Vzb abst_one) v_Vzb))) 
          (zen.triangle 
             (focal.is_true (abst_equal (abst_mult abst_one v_Vzb) v_Vzb))))) 
    (v_Vac:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.and 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult v_Vzb abst_one) v_Vzb))) 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult abst_one v_Vzb) v_Vzb))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.and 
          (zen.triangle 
             (focal.is_true (abst_equal (abst_mult v_Vzb abst_one) v_Vzb))) 
          (zen.triangle 
             (focal.is_true (abst_equal (abst_mult abst_one v_Vzb) v_Vzb)))) 
       (v_Vbc:(zen.term abst_T) =>
        v_Vcc:
        (zen.proof 
           (zen.not 
              (zen.and 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult v_Vbc abst_one) v_Vbc))) 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult abst_one v_Vbc) v_Vbc)))))) =>
        zen.Rnotand 
          (zen.triangle 
             (focal.is_true (abst_equal (abst_mult v_Vbc abst_one) v_Vbc))) 
          (zen.triangle 
             (focal.is_true (abst_equal (abst_mult abst_one v_Vbc) v_Vbc))) 
          (v_Vdc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult v_Vbc abst_one) v_Vbc))))) =>
           zen.Rall abst_T 
             (v_Vzb:(zen.term abst_T) =>
              zen.triangle 
                (focal.is_true (abst_equal (abst_mult v_Vzb abst_one) v_Vzb))) 
             v_Vbc 
             (v_Vec:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult v_Vbc abst_one) v_Vbc)))) =>
              zen.Raxiom 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_mult v_Vbc abst_one) v_Vbc))) v_Vec 
                v_Vdc) abst_one_is_right_neutral) 
          (v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult abst_one v_Vbc) v_Vbc))))) =>
           zen.Rall abst_T 
             (v_Vzb:(zen.term abst_T) =>
              zen.triangle 
                (focal.is_true (abst_equal (abst_mult abst_one v_Vzb) v_Vzb))) 
             v_Vbc 
             (v_Vgc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult abst_one v_Vbc) v_Vbc)))) =>
              zen.Raxiom 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_mult abst_one v_Vbc) v_Vbc))) v_Vgc 
                v_Vfc) abst_one_is_left_neutral) v_Vcc) v_Vac).

def Monoid__one_is_unique :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_one:(cc.eT abst_T) ->
  abst_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (abst_equal x y)) 
                                   (dk_logic.ebP (abst_equal y x)))))) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_one_is_neutral:(dk_logic.eP 
                         (dk_logic.forall abst_T 
                            (x:(cc.eT abst_T) =>
                             dk_logic.and 
                               (dk_logic.ebP 
                                  (abst_equal (abst_mult x abst_one) x)) 
                               (dk_logic.ebP 
                                  (abst_equal (abst_mult abst_one x) x))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (o:(cc.eT abst_T) =>
        dk_logic.imp 
          (dk_logic.forall abst_T 
             (x:(cc.eT abst_T) =>
              dk_logic.or (dk_logic.ebP (abst_equal x (abst_mult x o))) 
                (dk_logic.ebP (abst_equal x (abst_mult o x))))) 
          (dk_logic.ebP (abst_equal o abst_one))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_one:(cc.eT abst_T) =>
  abst_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal y x)))))) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_one_is_neutral:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.and (dk_logic.ebP (abst_equal (abst_mult x abst_one) x)) 
           (dk_logic.ebP (abst_equal (abst_mult abst_one x) x))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vvc:(zen.term abst_T) =>
        zen.imp 
          (zen.forall abst_T 
             (v_Vwc:(zen.term abst_T) =>
              zen.or 
                (zen.triangle 
                   (focal.is_true (abst_equal v_Vwc (abst_mult v_Vwc v_Vvc)))) 
                (zen.triangle 
                   (focal.is_true (abst_equal v_Vwc (abst_mult v_Vvc v_Vwc)))))) 
          (zen.triangle (focal.is_true (abst_equal v_Vvc abst_one))))) 
    (v_Vxc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vvc:(zen.term abst_T) =>
               zen.imp 
                 (zen.forall abst_T 
                    (v_Vwc:(zen.term abst_T) =>
                     zen.or 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal v_Vwc (abst_mult v_Vwc v_Vvc)))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal v_Vwc (abst_mult v_Vvc v_Vwc)))))) 
                 (zen.triangle (focal.is_true (abst_equal v_Vvc abst_one))))))) =>
     zen.Rnotall abst_T 
       (v_Vvc:(zen.term abst_T) =>
        zen.imp 
          (zen.forall abst_T 
             (v_Vwc:(zen.term abst_T) =>
              zen.or 
                (zen.triangle 
                   (focal.is_true (abst_equal v_Vwc (abst_mult v_Vwc v_Vvc)))) 
                (zen.triangle 
                   (focal.is_true (abst_equal v_Vwc (abst_mult v_Vvc v_Vwc)))))) 
          (zen.triangle (focal.is_true (abst_equal v_Vvc abst_one)))) 
       (v_Vyc:(zen.term abst_T) =>
        v_Vzc:
        (zen.proof 
           (zen.not 
              (zen.imp 
                 (zen.forall abst_T 
                    (v_Vwc:(zen.term abst_T) =>
                     zen.or 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal v_Vwc (abst_mult v_Vwc v_Vyc)))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal v_Vwc (abst_mult v_Vyc v_Vwc)))))) 
                 (zen.triangle (focal.is_true (abst_equal v_Vyc abst_one)))))) =>
        zen.Rnotimply 
          (zen.forall abst_T 
             (v_Vwc:(zen.term abst_T) =>
              zen.or 
                (zen.triangle 
                   (focal.is_true (abst_equal v_Vwc (abst_mult v_Vwc v_Vyc)))) 
                (zen.triangle 
                   (focal.is_true (abst_equal v_Vwc (abst_mult v_Vyc v_Vwc)))))) 
          (zen.triangle (focal.is_true (abst_equal v_Vyc abst_one))) 
          (v_Vad:
           (zen.proof 
              (zen.forall abst_T 
                 (v_Vwc:(zen.term abst_T) =>
                  zen.or 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal v_Vwc (abst_mult v_Vwc v_Vyc)))) 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal v_Vwc (abst_mult v_Vyc v_Vwc))))))) =>
           v_Vbd:
           (zen.proof 
              (zen.not 
                 (zen.triangle (focal.is_true (abst_equal v_Vyc abst_one))))) =>
           zen.Rall abst_T 
             (v_Vwc:(zen.term abst_T) =>
              zen.or 
                (zen.triangle 
                   (focal.is_true (abst_equal v_Vwc (abst_mult v_Vwc v_Vyc)))) 
                (zen.triangle 
                   (focal.is_true (abst_equal v_Vwc (abst_mult v_Vyc v_Vwc))))) 
             abst_one 
             (v_Vcd:
              (zen.proof 
                 (zen.or 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal abst_one (abst_mult abst_one v_Vyc)))) 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal abst_one (abst_mult v_Vyc abst_one)))))) =>
              zen.Ror 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal abst_one (abst_mult abst_one v_Vyc)))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal abst_one (abst_mult v_Vyc abst_one)))) 
                (v_Vdd:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal abst_one (abst_mult abst_one v_Vyc))))) =>
                 zen.Rall abst_T 
                   (v_Vwc:(zen.term abst_T) =>
                    zen.forall abst_T 
                      (v_Ved:(zen.term abst_T) =>
                       zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vwc v_Ved))) 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Ved v_Vwc))))) 
                   abst_one 
                   (v_Vfd:
                    (zen.proof 
                       (zen.forall abst_T 
                          (v_Ved:(zen.term abst_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal abst_one v_Ved))) 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Ved abst_one)))))) =>
                    zen.Rall abst_T 
                      (v_Ved:(zen.term abst_T) =>
                       zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_equal abst_one v_Ved))) 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Ved abst_one)))) 
                      v_Vyc 
                      (v_Vgd:
                       (zen.proof 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal abst_one v_Vyc))) 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vyc abst_one))))) =>
                       zen.Rimply 
                         (zen.triangle 
                            (focal.is_true (abst_equal abst_one v_Vyc))) 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vyc abst_one))) 
                         (v_Vhd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_equal abst_one v_Vyc))))) =>
                          zen.Rcut 
                            (zen.and 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal abst_T abst_one abst_one))) 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal abst_one abst_one))))) 
                            (v_Vid:
                             (zen.proof 
                                (zen.and 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T abst_one abst_one))) 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal abst_one abst_one)))))) =>
                             zen.Rand 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal abst_T abst_one abst_one))) 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal abst_one abst_one)))) 
                               (v_Vjd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T abst_one abst_one)))) =>
                                v_Vkd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal abst_one abst_one))))) =>
                                zen.Rnoteq abst_T abst_one v_Vjd) v_Vid) 
                            (v_Vld:
                             (zen.proof 
                                (zen.not 
                                   (zen.and 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T abst_one 
                                               abst_one))) 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal abst_one abst_one))))))) =>
                             zen.Rcut 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_mult abst_one v_Vyc) v_Vyc)) 
                               (v_Vmd:
                                (zen.proof 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_mult abst_one v_Vyc) v_Vyc))) =>
                                zen.Rsubst basics.bool__t 
                                  (v_Vnd:(zen.term basics.bool__t) =>
                                   zen.triangle (focal.is_true v_Vnd)) 
                                  (abst_equal abst_one 
                                     (abst_mult abst_one v_Vyc)) 
                                  (abst_equal abst_one v_Vyc) 
                                  (v_Vod:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (abst_equal abst_one 
                                                  (abst_mult abst_one v_Vyc)) 
                                               (abst_equal abst_one v_Vyc))))) =>
                                   zen.Rsubst abst_T 
                                     (v_Vpd:(zen.term abst_T) =>
                                      zen.not 
                                        (zen.triangle 
                                           (zen.equal basics.bool__t 
                                              (abst_equal v_Vpd 
                                                 (abst_mult abst_one v_Vyc)) 
                                              (abst_equal abst_one v_Vyc)))) 
                                     abst_one abst_one 
                                     (v_Vjd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T abst_one 
                                                  abst_one)))) =>
                                      zen.Rnotand 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T abst_one 
                                                 abst_one))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal abst_one 
                                                    abst_one)))) 
                                        (v_Vqd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        abst_one abst_one))))) =>
                                         zen.Rnotnot 
                                           (zen.triangle 
                                              (zen.equal abst_T abst_one 
                                                 abst_one)) 
                                           (v_Vrd:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal abst_T abst_one 
                                                     abst_one))) =>
                                            zen.Rcut 
                                              (zen.triangle 
                                                 (zen.equal abst_T abst_one 
                                                    abst_one)) 
                                              (v_Vrd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        abst_one abst_one))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Vsd:(zen.term abst_T) =>
                                                  zen.triangle 
                                                    (zen.equal abst_T v_Vsd 
                                                       abst_one)) abst_one 
                                                 abst_one 
                                                 (v_Vjd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              abst_one 
                                                              abst_one)))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          abst_one abst_one)) 
                                                    v_Vrd v_Vjd) 
                                                 (v_Vrd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           abst_one abst_one))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Vtd:
                                                     (zen.term abst_T) =>
                                                     zen.triangle 
                                                       (zen.equal abst_T 
                                                          abst_one v_Vtd)) 
                                                    abst_one abst_one 
                                                    (v_Vjd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 abst_one 
                                                                 abst_one)))) =>
                                                     zen.Rnoteq abst_T 
                                                       abst_one v_Vjd) 
                                                    (v_Vrd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              abst_one 
                                                              abst_one))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             abst_one 
                                                             abst_one)) 
                                                       v_Vrd v_Vjd) v_Vrd) 
                                                 v_Vrd) 
                                              (v_Vjd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           abst_one abst_one)))) =>
                                               zen.Rnoteq abst_T abst_one 
                                                 v_Vjd)) v_Vqd) 
                                        (v_Vud:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal abst_one 
                                                           abst_one)))))) =>
                                         zen.Rnotnot 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal abst_one 
                                                    abst_one))) 
                                           (v_Vvd:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal abst_one 
                                                        abst_one)))) =>
                                            zen.Rall abst_T 
                                              (v_Vwc:(zen.term abst_T) =>
                                               zen.forall abst_T 
                                                 (v_Ved:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vwd:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                v_Vwc v_Ved))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Ved 
                                                                   v_Vwd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vwc 
                                                                   v_Vwd))))))) 
                                              abst_one 
                                              (v_Vxd:
                                               (zen.proof 
                                                  (zen.forall abst_T 
                                                     (v_Ved:
                                                      (zen.term abst_T) =>
                                                      zen.forall abst_T 
                                                        (v_Vwd:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    abst_one 
                                                                    v_Ved))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Ved 
                                                                    v_Vwd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    abst_one 
                                                                    v_Vwd)))))))) =>
                                               zen.Rall abst_T 
                                                 (v_Ved:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vwd:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                abst_one 
                                                                v_Ved))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Ved 
                                                                   v_Vwd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   abst_one 
                                                                   v_Vwd)))))) 
                                                 abst_one 
                                                 (v_Vyd:
                                                  (zen.proof 
                                                     (zen.forall abst_T 
                                                        (v_Vwd:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    abst_one 
                                                                    abst_one))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    abst_one 
                                                                    v_Vwd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    abst_one 
                                                                    v_Vwd))))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vwd:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                abst_one 
                                                                abst_one))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   abst_one 
                                                                   v_Vwd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   abst_one 
                                                                   v_Vwd))))) 
                                                    (abst_mult abst_one v_Vyc) 
                                                    (v_Vzd:
                                                     (zen.proof 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    abst_one 
                                                                    abst_one))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    abst_one 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    v_Vyc)))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    abst_one 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    v_Vyc))))))) =>
                                                     zen.Rimply 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                abst_one 
                                                                abst_one))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   abst_one 
                                                                   (abst_mult 
                                                                    abst_one 
                                                                    v_Vyc)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   abst_one 
                                                                   (abst_mult 
                                                                    abst_one 
                                                                    v_Vyc))))) 
                                                       (v_Vkd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    abst_one 
                                                                    abst_one))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   abst_one 
                                                                   abst_one))) 
                                                          v_Vvd v_Vkd) 
                                                       (v_Vae:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    abst_one 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    v_Vyc)))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    abst_one 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    v_Vyc)))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   abst_one 
                                                                   (abst_mult 
                                                                    abst_one 
                                                                    v_Vyc)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   abst_one 
                                                                   (abst_mult 
                                                                    abst_one 
                                                                    v_Vyc)))) 
                                                          (v_Vbe:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    v_Vyc)))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    abst_one 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    v_Vyc)))) 
                                                             v_Vdd v_Vbe) 
                                                          (v_Vdd:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    abst_one 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    v_Vyc))))) =>
                                                           zen.Rsubst 
                                                             basics.bool__t 
                                                             (v_Vnd:
                                                              (zen.term 
                                                                 basics.bool__t) =>
                                                              zen.triangle 
                                                                (focal.is_true 
                                                                   v_Vnd)) 
                                                             (abst_equal 
                                                                abst_one 
                                                                (abst_mult 
                                                                   abst_one 
                                                                   v_Vyc)) 
                                                             (abst_equal 
                                                                abst_one 
                                                                v_Vyc) 
                                                             (v_Vod:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    v_Vyc)) 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))))) =>
                                                              zen.Rsubst 
                                                                abst_T 
                                                                (v_Vpd:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vpd 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    v_Vyc)) 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc)))) 
                                                                abst_one 
                                                                abst_one 
                                                                (v_Vjd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    abst_one 
                                                                    abst_one)))) =>
                                                                 zen.Rnoteq 
                                                                   abst_T 
                                                                   abst_one 
                                                                   v_Vjd) 
                                                                (v_Vod:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    v_Vyc)) 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))))) =>
                                                                 zen.Rsubst 
                                                                   abst_T 
                                                                   (v_Vce:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vce) 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc)))) 
                                                                   (abst_mult 
                                                                    abst_one 
                                                                    v_Vyc) 
                                                                   v_Vyc 
                                                                   (v_Vde:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    v_Vyc) 
                                                                    v_Vyc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    v_Vyc) 
                                                                    v_Vyc)) 
                                                                    v_Vmd 
                                                                    v_Vde) 
                                                                   (v_Vee:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc) 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc) 
                                                                    v_Vee) 
                                                                   v_Vod) 
                                                                v_Vod) 
                                                             (v_Vfe:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))) 
                                                                v_Vfe v_Vhd) 
                                                             v_Vdd) v_Vae) 
                                                       v_Vzd) v_Vyd) v_Vxd) 
                                              abst_equal_transitive) v_Vud) 
                                        v_Vld) 
                                     (v_Vod:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (abst_equal abst_one 
                                                     (abst_mult abst_one 
                                                        v_Vyc)) 
                                                  (abst_equal abst_one v_Vyc))))) =>
                                      zen.Rsubst abst_T 
                                        (v_Vce:(zen.term abst_T) =>
                                         zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (abst_equal abst_one v_Vce) 
                                                 (abst_equal abst_one v_Vyc)))) 
                                        (abst_mult abst_one v_Vyc) v_Vyc 
                                        (v_Vde:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_mult abst_one 
                                                        v_Vyc) v_Vyc)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_mult abst_one v_Vyc) 
                                                 v_Vyc)) v_Vmd v_Vde) 
                                        (v_Vee:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal abst_one 
                                                        v_Vyc) 
                                                     (abst_equal abst_one 
                                                        v_Vyc))))) =>
                                         zen.Rnoteq basics.bool__t 
                                           (abst_equal abst_one v_Vyc) v_Vee) 
                                        v_Vod) v_Vod) 
                                  (v_Vfe:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal abst_one v_Vyc)))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal abst_one v_Vyc))) 
                                     v_Vfe v_Vhd) v_Vdd) 
                               (v_Vde:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_mult abst_one v_Vyc) v_Vyc)))) =>
                                zen.Rcut 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult abst_one v_Vyc) v_Vyc))) 
                                  (v_Vge:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult abst_one v_Vyc) 
                                               v_Vyc)))) =>
                                   zen.Rall abst_T 
                                     (v_Vwc:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Ved:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vwd:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vwc v_Ved))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Ved 
                                                          v_Vwd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vwc 
                                                          v_Vwd))))))) 
                                     abst_one 
                                     (v_Vxd:
                                      (zen.proof 
                                         (zen.forall abst_T 
                                            (v_Ved:(zen.term abst_T) =>
                                             zen.forall abst_T 
                                               (v_Vwd:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal abst_one 
                                                           v_Ved))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Ved 
                                                              v_Vwd))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              abst_one v_Vwd)))))))) =>
                                      zen.Rall abst_T 
                                        (v_Ved:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vwd:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal abst_one 
                                                       v_Ved))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Ved 
                                                          v_Vwd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal abst_one 
                                                          v_Vwd)))))) 
                                        (abst_mult abst_one v_Vyc) 
                                        (v_Vhe:
                                         (zen.proof 
                                            (zen.forall abst_T 
                                               (v_Vwd:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal abst_one 
                                                           (abst_mult 
                                                              abst_one v_Vyc)))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 abst_one 
                                                                 v_Vyc) v_Vwd))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              abst_one v_Vwd))))))) =>
                                         zen.Rall abst_T 
                                           (v_Vwd:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal abst_one 
                                                       (abst_mult abst_one 
                                                          v_Vyc)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             abst_one v_Vyc) 
                                                          v_Vwd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal abst_one 
                                                          v_Vwd))))) v_Vyc 
                                           (v_Vie:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal abst_one 
                                                           (abst_mult 
                                                              abst_one v_Vyc)))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 abst_one 
                                                                 v_Vyc) v_Vyc))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              abst_one v_Vyc)))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal abst_one 
                                                       (abst_mult abst_one 
                                                          v_Vyc)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             abst_one v_Vyc) 
                                                          v_Vyc))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal abst_one 
                                                          v_Vyc)))) 
                                              (v_Vbe:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              abst_one 
                                                              (abst_mult 
                                                                 abst_one 
                                                                 v_Vyc)))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal abst_one 
                                                          (abst_mult 
                                                             abst_one v_Vyc)))) 
                                                 v_Vdd v_Vbe) 
                                              (v_Vje:
                                               (zen.proof 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 abst_one 
                                                                 v_Vyc) v_Vyc))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              abst_one v_Vyc))))) =>
                                               zen.Rimply 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             abst_one v_Vyc) 
                                                          v_Vyc))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal abst_one 
                                                          v_Vyc))) 
                                                 (v_Vke:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    abst_one 
                                                                    v_Vyc) 
                                                                 v_Vyc))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                abst_one 
                                                                v_Vyc) v_Vyc))) 
                                                    v_Vge v_Vke) 
                                                 (v_Vfe:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              abst_one v_Vyc)))) =>
                                                  zen.Rsubst basics.bool__t 
                                                    (v_Vnd:
                                                     (zen.term basics.bool__t) =>
                                                     zen.triangle 
                                                       (focal.is_true v_Vnd)) 
                                                    (abst_equal abst_one 
                                                       v_Vyc) 
                                                    (abst_equal abst_one 
                                                       v_Vyc) 
                                                    (v_Vee:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc) 
                                                                 (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))))) =>
                                                     zen.Rsubst abst_T 
                                                       (v_Vle:
                                                        (zen.term abst_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   v_Vle 
                                                                   v_Vyc) 
                                                                (abst_equal 
                                                                   abst_one 
                                                                   v_Vyc)))) 
                                                       abst_one abst_one 
                                                       (v_Vjd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    abst_one 
                                                                    abst_one)))) =>
                                                        zen.Rnotand 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   abst_one 
                                                                   abst_one))) 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    abst_one 
                                                                    abst_one)))) 
                                                          (v_Vqd:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    abst_one 
                                                                    abst_one))))) =>
                                                           zen.Rnotnot 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   abst_one 
                                                                   abst_one)) 
                                                             (v_Vrd:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    abst_one 
                                                                    abst_one))) =>
                                                              zen.Reqsym 
                                                                abst_T 
                                                                abst_one 
                                                                abst_one 
                                                                v_Vrd v_Vjd) 
                                                             v_Vqd) 
                                                          (v_Vud:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    abst_one)))))) =>
                                                           zen.Rnotnot 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    abst_one 
                                                                    abst_one))) 
                                                             (v_Vvd:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    abst_one)))) =>
                                                              zen.Rall 
                                                                abst_T 
                                                                (v_Vwc:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.forall 
                                                                   abst_T 
                                                                   (v_Ved:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vwd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vwc 
                                                                    v_Ved))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Ved 
                                                                    v_Vwd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vwc 
                                                                    v_Vwd))))))) 
                                                                abst_one 
                                                                (v_Vxd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Ved:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vwd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Ved))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Ved 
                                                                    v_Vwd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vwd)))))))) =>
                                                                 zen.Rall 
                                                                   abst_T 
                                                                   (v_Ved:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vwd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Ved))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Ved 
                                                                    v_Vwd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vwd)))))) 
                                                                   abst_one 
                                                                   (v_Vyd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vwd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    abst_one))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vwd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vwd))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vwd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    abst_one))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vwd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vwd))))) 
                                                                    v_Vyc 
                                                                    (v_Vme:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    abst_one))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    abst_one))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc)))) 
                                                                    (v_Vkd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    abst_one))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    abst_one))) 
                                                                    v_Vvd 
                                                                    v_Vkd) 
                                                                    (v_Vne:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))) 
                                                                    (v_Vhd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))) 
                                                                    v_Vfe 
                                                                    v_Vhd) 
                                                                    (v_Vfe:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))) 
                                                                    v_Vfe 
                                                                    v_Vhd) 
                                                                    v_Vne) 
                                                                    v_Vme) 
                                                                    v_Vyd) 
                                                                   v_Vxd) 
                                                                abst_equal_transitive) 
                                                             v_Vud) v_Vld) 
                                                       (v_Vee:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    abst_one 
                                                                    v_Vyc) 
                                                                    (
                                                                    abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))))) =>
                                                        zen.Rsubst abst_T 
                                                          (v_Vce:
                                                           (zen.term abst_T) =>
                                                           zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_equal 
                                                                    abst_one 
                                                                    v_Vce) 
                                                                   (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc)))) 
                                                          v_Vyc v_Vyc 
                                                          (v_Voe:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    v_Vyc 
                                                                    v_Vyc)))) =>
                                                           zen.Rnoteq abst_T 
                                                             v_Vyc v_Voe) 
                                                          (v_Vee:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc) 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))))) =>
                                                           zen.Rnoteq 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                abst_one 
                                                                v_Vyc) v_Vee) 
                                                          v_Vee) v_Vee) 
                                                    (v_Vfe:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 abst_one 
                                                                 v_Vyc)))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                abst_one 
                                                                v_Vyc))) 
                                                       v_Vfe v_Vhd) v_Vfe) 
                                                 v_Vje) v_Vie) v_Vhe) v_Vxd) 
                                     abst_equal_transitive) 
                                  (v_Vke:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult abst_one v_Vyc) 
                                                  v_Vyc))))) =>
                                   zen.Rall abst_T 
                                     (v_Vwc:(zen.term abst_T) =>
                                      zen.and 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult v_Vwc abst_one) 
                                                 v_Vwc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult abst_one v_Vwc) 
                                                 v_Vwc)))) v_Vyc 
                                     (v_Vpe:
                                      (zen.proof 
                                         (zen.and 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult v_Vyc 
                                                        abst_one) v_Vyc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult abst_one 
                                                        v_Vyc) v_Vyc))))) =>
                                      zen.Rand 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult v_Vyc abst_one) 
                                                 v_Vyc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult abst_one v_Vyc) 
                                                 v_Vyc))) 
                                        (v_Vqe:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult v_Vyc 
                                                        abst_one) v_Vyc)))) =>
                                         v_Vge:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult abst_one 
                                                        v_Vyc) v_Vyc)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult abst_one v_Vyc) 
                                                    v_Vyc))) v_Vge v_Vke) 
                                        v_Vpe) abst_one_is_neutral)))) 
                         (v_Vre:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vyc abst_one)))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vyc abst_one))) 
                            v_Vre v_Vbd) v_Vgd) v_Vfd) abst_equal_symmetric) 
                (v_Vse:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal abst_one (abst_mult v_Vyc abst_one))))) =>
                 zen.Rall abst_T 
                   (v_Vwc:(zen.term abst_T) =>
                    zen.forall abst_T 
                      (v_Ved:(zen.term abst_T) =>
                       zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vwc v_Ved))) 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Ved v_Vwc))))) 
                   abst_one 
                   (v_Vfd:
                    (zen.proof 
                       (zen.forall abst_T 
                          (v_Ved:(zen.term abst_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal abst_one v_Ved))) 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Ved abst_one)))))) =>
                    zen.Rall abst_T 
                      (v_Ved:(zen.term abst_T) =>
                       zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_equal abst_one v_Ved))) 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Ved abst_one)))) 
                      v_Vyc 
                      (v_Vgd:
                       (zen.proof 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal abst_one v_Vyc))) 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vyc abst_one))))) =>
                       zen.Rimply 
                         (zen.triangle 
                            (focal.is_true (abst_equal abst_one v_Vyc))) 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vyc abst_one))) 
                         (v_Vhd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_equal abst_one v_Vyc))))) =>
                          zen.Rcut 
                            (zen.and 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal abst_T abst_one abst_one))) 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal abst_one abst_one))))) 
                            (v_Vid:
                             (zen.proof 
                                (zen.and 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T abst_one abst_one))) 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal abst_one abst_one)))))) =>
                             zen.Rand 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal abst_T abst_one abst_one))) 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal abst_one abst_one)))) 
                               (v_Vjd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T abst_one abst_one)))) =>
                                v_Vkd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal abst_one abst_one))))) =>
                                zen.Rnoteq abst_T abst_one v_Vjd) v_Vid) 
                            (v_Vld:
                             (zen.proof 
                                (zen.not 
                                   (zen.and 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T abst_one 
                                               abst_one))) 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal abst_one abst_one))))))) =>
                             zen.Rcut 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_mult v_Vyc abst_one) v_Vyc)) 
                               (v_Vte:
                                (zen.proof 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_mult v_Vyc abst_one) v_Vyc))) =>
                                zen.Rsubst basics.bool__t 
                                  (v_Vnd:(zen.term basics.bool__t) =>
                                   zen.triangle (focal.is_true v_Vnd)) 
                                  (abst_equal abst_one 
                                     (abst_mult v_Vyc abst_one)) 
                                  (abst_equal abst_one v_Vyc) 
                                  (v_Vue:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (abst_equal abst_one 
                                                  (abst_mult v_Vyc abst_one)) 
                                               (abst_equal abst_one v_Vyc))))) =>
                                   zen.Rsubst abst_T 
                                     (v_Vve:(zen.term abst_T) =>
                                      zen.not 
                                        (zen.triangle 
                                           (zen.equal basics.bool__t 
                                              (abst_equal v_Vve 
                                                 (abst_mult v_Vyc abst_one)) 
                                              (abst_equal abst_one v_Vyc)))) 
                                     abst_one abst_one 
                                     (v_Vjd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T abst_one 
                                                  abst_one)))) =>
                                      zen.Rnotand 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T abst_one 
                                                 abst_one))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal abst_one 
                                                    abst_one)))) 
                                        (v_Vqd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        abst_one abst_one))))) =>
                                         zen.Rnotnot 
                                           (zen.triangle 
                                              (zen.equal abst_T abst_one 
                                                 abst_one)) 
                                           (v_Vrd:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal abst_T abst_one 
                                                     abst_one))) =>
                                            zen.Rcut 
                                              (zen.triangle 
                                                 (zen.equal abst_T abst_one 
                                                    abst_one)) 
                                              (v_Vrd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        abst_one abst_one))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Vsd:(zen.term abst_T) =>
                                                  zen.triangle 
                                                    (zen.equal abst_T v_Vsd 
                                                       abst_one)) abst_one 
                                                 abst_one 
                                                 (v_Vjd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              abst_one 
                                                              abst_one)))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          abst_one abst_one)) 
                                                    v_Vrd v_Vjd) 
                                                 (v_Vrd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           abst_one abst_one))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Vtd:
                                                     (zen.term abst_T) =>
                                                     zen.triangle 
                                                       (zen.equal abst_T 
                                                          abst_one v_Vtd)) 
                                                    abst_one abst_one 
                                                    (v_Vjd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 abst_one 
                                                                 abst_one)))) =>
                                                     zen.Rnoteq abst_T 
                                                       abst_one v_Vjd) 
                                                    (v_Vrd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              abst_one 
                                                              abst_one))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             abst_one 
                                                             abst_one)) 
                                                       v_Vrd v_Vjd) v_Vrd) 
                                                 v_Vrd) 
                                              (v_Vjd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           abst_one abst_one)))) =>
                                               zen.Rnoteq abst_T abst_one 
                                                 v_Vjd)) v_Vqd) 
                                        (v_Vud:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal abst_one 
                                                           abst_one)))))) =>
                                         zen.Rnotnot 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal abst_one 
                                                    abst_one))) 
                                           (v_Vvd:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal abst_one 
                                                        abst_one)))) =>
                                            zen.Rall abst_T 
                                              (v_Vwc:(zen.term abst_T) =>
                                               zen.forall abst_T 
                                                 (v_Ved:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vwd:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                v_Vwc v_Ved))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Ved 
                                                                   v_Vwd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vwc 
                                                                   v_Vwd))))))) 
                                              abst_one 
                                              (v_Vxd:
                                               (zen.proof 
                                                  (zen.forall abst_T 
                                                     (v_Ved:
                                                      (zen.term abst_T) =>
                                                      zen.forall abst_T 
                                                        (v_Vwd:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    abst_one 
                                                                    v_Ved))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Ved 
                                                                    v_Vwd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    abst_one 
                                                                    v_Vwd)))))))) =>
                                               zen.Rall abst_T 
                                                 (v_Ved:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vwd:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                abst_one 
                                                                v_Ved))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Ved 
                                                                   v_Vwd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   abst_one 
                                                                   v_Vwd)))))) 
                                                 abst_one 
                                                 (v_Vyd:
                                                  (zen.proof 
                                                     (zen.forall abst_T 
                                                        (v_Vwd:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    abst_one 
                                                                    abst_one))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    abst_one 
                                                                    v_Vwd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    abst_one 
                                                                    v_Vwd))))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vwd:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                abst_one 
                                                                abst_one))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   abst_one 
                                                                   v_Vwd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   abst_one 
                                                                   v_Vwd))))) 
                                                    (abst_mult v_Vyc abst_one) 
                                                    (v_Vwe:
                                                     (zen.proof 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    abst_one 
                                                                    abst_one))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    abst_one 
                                                                    (abst_mult 
                                                                    v_Vyc 
                                                                    abst_one)))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    abst_one 
                                                                    (abst_mult 
                                                                    v_Vyc 
                                                                    abst_one))))))) =>
                                                     zen.Rimply 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                abst_one 
                                                                abst_one))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   abst_one 
                                                                   (abst_mult 
                                                                    v_Vyc 
                                                                    abst_one)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   abst_one 
                                                                   (abst_mult 
                                                                    v_Vyc 
                                                                    abst_one))))) 
                                                       (v_Vkd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    abst_one 
                                                                    abst_one))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   abst_one 
                                                                   abst_one))) 
                                                          v_Vvd v_Vkd) 
                                                       (v_Vxe:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    abst_one 
                                                                    (abst_mult 
                                                                    v_Vyc 
                                                                    abst_one)))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    abst_one 
                                                                    (abst_mult 
                                                                    v_Vyc 
                                                                    abst_one)))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   abst_one 
                                                                   (abst_mult 
                                                                    v_Vyc 
                                                                    abst_one)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   abst_one 
                                                                   (abst_mult 
                                                                    v_Vyc 
                                                                    abst_one)))) 
                                                          (v_Vye:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    (abst_mult 
                                                                    v_Vyc 
                                                                    abst_one)))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    abst_one 
                                                                    (abst_mult 
                                                                    v_Vyc 
                                                                    abst_one)))) 
                                                             v_Vse v_Vye) 
                                                          (v_Vse:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    abst_one 
                                                                    (abst_mult 
                                                                    v_Vyc 
                                                                    abst_one))))) =>
                                                           zen.Rsubst 
                                                             basics.bool__t 
                                                             (v_Vnd:
                                                              (zen.term 
                                                                 basics.bool__t) =>
                                                              zen.triangle 
                                                                (focal.is_true 
                                                                   v_Vnd)) 
                                                             (abst_equal 
                                                                abst_one 
                                                                (abst_mult 
                                                                   v_Vyc 
                                                                   abst_one)) 
                                                             (abst_equal 
                                                                abst_one 
                                                                v_Vyc) 
                                                             (v_Vue:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    (abst_mult 
                                                                    v_Vyc 
                                                                    abst_one)) 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))))) =>
                                                              zen.Rsubst 
                                                                abst_T 
                                                                (v_Vve:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vve 
                                                                    (abst_mult 
                                                                    v_Vyc 
                                                                    abst_one)) 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc)))) 
                                                                abst_one 
                                                                abst_one 
                                                                (v_Vjd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    abst_one 
                                                                    abst_one)))) =>
                                                                 zen.Rnoteq 
                                                                   abst_T 
                                                                   abst_one 
                                                                   v_Vjd) 
                                                                (v_Vue:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    (abst_mult 
                                                                    v_Vyc 
                                                                    abst_one)) 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))))) =>
                                                                 zen.Rsubst 
                                                                   abst_T 
                                                                   (v_Vce:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vce) 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc)))) 
                                                                   (abst_mult 
                                                                    v_Vyc 
                                                                    abst_one) 
                                                                   v_Vyc 
                                                                   (v_Vze:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vyc 
                                                                    abst_one) 
                                                                    v_Vyc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vyc 
                                                                    abst_one) 
                                                                    v_Vyc)) 
                                                                    v_Vte 
                                                                    v_Vze) 
                                                                   (v_Vee:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc) 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc) 
                                                                    v_Vee) 
                                                                   v_Vue) 
                                                                v_Vue) 
                                                             (v_Vfe:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))) 
                                                                v_Vfe v_Vhd) 
                                                             v_Vse) v_Vxe) 
                                                       v_Vwe) v_Vyd) v_Vxd) 
                                              abst_equal_transitive) v_Vud) 
                                        v_Vld) 
                                     (v_Vue:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (abst_equal abst_one 
                                                     (abst_mult v_Vyc 
                                                        abst_one)) 
                                                  (abst_equal abst_one v_Vyc))))) =>
                                      zen.Rsubst abst_T 
                                        (v_Vce:(zen.term abst_T) =>
                                         zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (abst_equal abst_one v_Vce) 
                                                 (abst_equal abst_one v_Vyc)))) 
                                        (abst_mult v_Vyc abst_one) v_Vyc 
                                        (v_Vze:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_mult v_Vyc 
                                                        abst_one) v_Vyc)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_mult v_Vyc abst_one) 
                                                 v_Vyc)) v_Vte v_Vze) 
                                        (v_Vee:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal abst_one 
                                                        v_Vyc) 
                                                     (abst_equal abst_one 
                                                        v_Vyc))))) =>
                                         zen.Rnoteq basics.bool__t 
                                           (abst_equal abst_one v_Vyc) v_Vee) 
                                        v_Vue) v_Vue) 
                                  (v_Vfe:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal abst_one v_Vyc)))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal abst_one v_Vyc))) 
                                     v_Vfe v_Vhd) v_Vse) 
                               (v_Vze:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_mult v_Vyc abst_one) v_Vyc)))) =>
                                zen.Rcut 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult v_Vyc abst_one) v_Vyc))) 
                                  (v_Vqe:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult v_Vyc abst_one) 
                                               v_Vyc)))) =>
                                   zen.Rall abst_T 
                                     (v_Vwc:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Ved:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vwd:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vwc v_Ved))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Ved 
                                                          v_Vwd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vwc 
                                                          v_Vwd))))))) 
                                     abst_one 
                                     (v_Vxd:
                                      (zen.proof 
                                         (zen.forall abst_T 
                                            (v_Ved:(zen.term abst_T) =>
                                             zen.forall abst_T 
                                               (v_Vwd:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal abst_one 
                                                           v_Ved))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Ved 
                                                              v_Vwd))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              abst_one v_Vwd)))))))) =>
                                      zen.Rall abst_T 
                                        (v_Ved:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vwd:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal abst_one 
                                                       v_Ved))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Ved 
                                                          v_Vwd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal abst_one 
                                                          v_Vwd)))))) 
                                        (abst_mult v_Vyc abst_one) 
                                        (v_Vaf:
                                         (zen.proof 
                                            (zen.forall abst_T 
                                               (v_Vwd:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal abst_one 
                                                           (abst_mult v_Vyc 
                                                              abst_one)))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 v_Vyc 
                                                                 abst_one) 
                                                              v_Vwd))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              abst_one v_Vwd))))))) =>
                                         zen.Rall abst_T 
                                           (v_Vwd:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal abst_one 
                                                       (abst_mult v_Vyc 
                                                          abst_one)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult v_Vyc 
                                                             abst_one) v_Vwd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal abst_one 
                                                          v_Vwd))))) v_Vyc 
                                           (v_Vbf:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal abst_one 
                                                           (abst_mult v_Vyc 
                                                              abst_one)))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 v_Vyc 
                                                                 abst_one) 
                                                              v_Vyc))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              abst_one v_Vyc)))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal abst_one 
                                                       (abst_mult v_Vyc 
                                                          abst_one)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult v_Vyc 
                                                             abst_one) v_Vyc))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal abst_one 
                                                          v_Vyc)))) 
                                              (v_Vye:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              abst_one 
                                                              (abst_mult 
                                                                 v_Vyc 
                                                                 abst_one)))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal abst_one 
                                                          (abst_mult v_Vyc 
                                                             abst_one)))) 
                                                 v_Vse v_Vye) 
                                              (v_Vcf:
                                               (zen.proof 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 v_Vyc 
                                                                 abst_one) 
                                                              v_Vyc))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              abst_one v_Vyc))))) =>
                                               zen.Rimply 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult v_Vyc 
                                                             abst_one) v_Vyc))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal abst_one 
                                                          v_Vyc))) 
                                                 (v_Vdf:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    v_Vyc 
                                                                    abst_one) 
                                                                 v_Vyc))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                v_Vyc 
                                                                abst_one) 
                                                             v_Vyc))) v_Vqe 
                                                    v_Vdf) 
                                                 (v_Vfe:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              abst_one v_Vyc)))) =>
                                                  zen.Rsubst basics.bool__t 
                                                    (v_Vnd:
                                                     (zen.term basics.bool__t) =>
                                                     zen.triangle 
                                                       (focal.is_true v_Vnd)) 
                                                    (abst_equal abst_one 
                                                       v_Vyc) 
                                                    (abst_equal abst_one 
                                                       v_Vyc) 
                                                    (v_Vee:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc) 
                                                                 (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))))) =>
                                                     zen.Rsubst abst_T 
                                                       (v_Vle:
                                                        (zen.term abst_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   v_Vle 
                                                                   v_Vyc) 
                                                                (abst_equal 
                                                                   abst_one 
                                                                   v_Vyc)))) 
                                                       abst_one abst_one 
                                                       (v_Vjd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    abst_one 
                                                                    abst_one)))) =>
                                                        zen.Rnotand 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   abst_one 
                                                                   abst_one))) 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    abst_one 
                                                                    abst_one)))) 
                                                          (v_Vqd:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    abst_one 
                                                                    abst_one))))) =>
                                                           zen.Rnotnot 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   abst_one 
                                                                   abst_one)) 
                                                             (v_Vrd:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    abst_one 
                                                                    abst_one))) =>
                                                              zen.Reqsym 
                                                                abst_T 
                                                                abst_one 
                                                                abst_one 
                                                                v_Vrd v_Vjd) 
                                                             v_Vqd) 
                                                          (v_Vud:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    abst_one)))))) =>
                                                           zen.Rnotnot 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    abst_one 
                                                                    abst_one))) 
                                                             (v_Vvd:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    abst_one)))) =>
                                                              zen.Rall 
                                                                abst_T 
                                                                (v_Vwc:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.forall 
                                                                   abst_T 
                                                                   (v_Ved:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vwd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vwc 
                                                                    v_Ved))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Ved 
                                                                    v_Vwd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vwc 
                                                                    v_Vwd))))))) 
                                                                abst_one 
                                                                (v_Vxd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Ved:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vwd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Ved))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Ved 
                                                                    v_Vwd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vwd)))))))) =>
                                                                 zen.Rall 
                                                                   abst_T 
                                                                   (v_Ved:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vwd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Ved))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Ved 
                                                                    v_Vwd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vwd)))))) 
                                                                   abst_one 
                                                                   (v_Vyd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vwd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    abst_one))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vwd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vwd))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vwd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    abst_one))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vwd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vwd))))) 
                                                                    v_Vyc 
                                                                    (v_Vme:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    abst_one))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    abst_one))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc)))) 
                                                                    (v_Vkd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    abst_one))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    abst_one))) 
                                                                    v_Vvd 
                                                                    v_Vkd) 
                                                                    (v_Vne:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))) 
                                                                    (v_Vhd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))) 
                                                                    v_Vfe 
                                                                    v_Vhd) 
                                                                    (v_Vfe:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))) 
                                                                    v_Vfe 
                                                                    v_Vhd) 
                                                                    v_Vne) 
                                                                    v_Vme) 
                                                                    v_Vyd) 
                                                                   v_Vxd) 
                                                                abst_equal_transitive) 
                                                             v_Vud) v_Vld) 
                                                       (v_Vee:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    abst_one 
                                                                    v_Vyc) 
                                                                    (
                                                                    abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))))) =>
                                                        zen.Rsubst abst_T 
                                                          (v_Vce:
                                                           (zen.term abst_T) =>
                                                           zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_equal 
                                                                    abst_one 
                                                                    v_Vce) 
                                                                   (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc)))) 
                                                          v_Vyc v_Vyc 
                                                          (v_Voe:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    v_Vyc 
                                                                    v_Vyc)))) =>
                                                           zen.Rnoteq abst_T 
                                                             v_Vyc v_Voe) 
                                                          (v_Vee:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc) 
                                                                    (abst_equal 
                                                                    abst_one 
                                                                    v_Vyc))))) =>
                                                           zen.Rnoteq 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                abst_one 
                                                                v_Vyc) v_Vee) 
                                                          v_Vee) v_Vee) 
                                                    (v_Vfe:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 abst_one 
                                                                 v_Vyc)))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                abst_one 
                                                                v_Vyc))) 
                                                       v_Vfe v_Vhd) v_Vfe) 
                                                 v_Vcf) v_Vbf) v_Vaf) v_Vxd) 
                                     abst_equal_transitive) 
                                  (v_Vdf:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult v_Vyc abst_one) 
                                                  v_Vyc))))) =>
                                   zen.Rall abst_T 
                                     (v_Vwc:(zen.term abst_T) =>
                                      zen.and 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult v_Vwc abst_one) 
                                                 v_Vwc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult abst_one v_Vwc) 
                                                 v_Vwc)))) v_Vyc 
                                     (v_Vpe:
                                      (zen.proof 
                                         (zen.and 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult v_Vyc 
                                                        abst_one) v_Vyc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult abst_one 
                                                        v_Vyc) v_Vyc))))) =>
                                      zen.Rand 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult v_Vyc abst_one) 
                                                 v_Vyc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult abst_one v_Vyc) 
                                                 v_Vyc))) 
                                        (v_Vqe:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult v_Vyc 
                                                        abst_one) v_Vyc)))) =>
                                         v_Vge:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult abst_one 
                                                        v_Vyc) v_Vyc)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult v_Vyc abst_one) 
                                                    v_Vyc))) v_Vqe v_Vdf) 
                                        v_Vpe) abst_one_is_neutral)))) 
                         (v_Vre:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vyc abst_one)))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vyc abst_one))) 
                            v_Vre v_Vbd) v_Vgd) v_Vfd) abst_equal_symmetric) 
                v_Vcd) v_Vad) v_Vzc) v_Vxc).

def Commutative_monoid__mult_right_substitution_rule :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_mult_commutes:(dk_logic.eP 
                        (dk_logic.forall abst_T 
                           (x:(cc.eT abst_T) =>
                            dk_logic.forall abst_T 
                              (y:(cc.eT abst_T) =>
                               dk_logic.ebP 
                                 (abst_equal (abst_mult x y) (abst_mult y x)))))) ->
  abst_mult_left_substitution_rule:(dk_logic.eP 
                                      (dk_logic.forall abst_T 
                                         (x:(cc.eT abst_T) =>
                                          dk_logic.forall abst_T 
                                            (y:(cc.eT abst_T) =>
                                             dk_logic.forall abst_T 
                                               (z:(cc.eT abst_T) =>
                                                dk_logic.imp 
                                                  (dk_logic.ebP 
                                                     (abst_equal x y)) 
                                                  (dk_logic.ebP 
                                                     (abst_equal 
                                                        (abst_mult x z) 
                                                        (abst_mult y z)))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                (dk_logic.ebP (abst_equal (abst_mult z x) (abst_mult z y)))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_mult_commutes:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.ebP (abst_equal (abst_mult x y) (abst_mult y x)))))) =>
  abst_mult_left_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.ebP (abst_equal (abst_mult x z) (abst_mult y z)))))))) =>
  (__D_1_LEMMA:
   (x:(cc.eT abst_T) ->
    y_1:(cc.eT abst_T) ->
    y_2:(cc.eT abst_T) ->
    H:(dk_logic.eP (dk_logic.ebP (abst_equal y_1 y_2))) ->
    dk_logic.eP 
      (dk_logic.ebP (abst_equal (abst_mult x y_1) (abst_mult x y_2)))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult v_Vbc v_Vzb) 
                          (abst_mult v_Vbc v_Vac)))))))) 
     (v_Vcc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Vzb v_Vac))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_mult v_Vbc v_Vzb) 
                                 (abst_mult v_Vbc v_Vac)))))))))) =>
      zen.Rnotall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult v_Vbc v_Vzb) 
                          (abst_mult v_Vbc v_Vac))))))) 
        (v_Vdc:(zen.term abst_T) =>
         v_Vec:
         (zen.proof 
            (zen.not 
               (zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Vdc v_Vac))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_mult v_Vbc v_Vdc) 
                                 (abst_mult v_Vbc v_Vac))))))))) =>
         zen.Rnotall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vac))) 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult v_Vbc v_Vdc) 
                          (abst_mult v_Vbc v_Vac)))))) 
           (v_Vfc:(zen.term abst_T) =>
            v_Vgc:
            (zen.proof 
               (zen.not 
                  (zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Vdc v_Vfc))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_mult v_Vbc v_Vdc) 
                                 (abst_mult v_Vbc v_Vfc)))))))) =>
            zen.Rnotall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vfc))) 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult v_Vbc v_Vdc) 
                          (abst_mult v_Vbc v_Vfc))))) 
              (v_Vhc:(zen.term abst_T) =>
               v_Vic:
               (zen.proof 
                  (zen.not 
                     (zen.imp 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Vdc v_Vfc))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_mult v_Vhc v_Vdc) 
                                 (abst_mult v_Vhc v_Vfc))))))) =>
               zen.Rall abst_T 
                 (v_Vzb:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vjc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vkc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vjc v_Vkc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult v_Vzb v_Vjc) 
                                   (abst_mult v_Vzb v_Vkc))))))) v_Vhc 
                 (v_Vlc:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vjc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vkc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_equal v_Vjc v_Vkc))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_mult v_Vhc v_Vjc) 
                                       (abst_mult v_Vhc v_Vkc)))))))) =>
                  zen.Rall abst_T 
                    (v_Vjc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vkc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vjc v_Vkc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult v_Vhc v_Vjc) 
                                   (abst_mult v_Vhc v_Vkc)))))) v_Vdc 
                    (v_Vmc:
                     (zen.proof 
                        (zen.forall abst_T 
                           (v_Vkc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_equal v_Vdc v_Vkc))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_mult v_Vhc v_Vdc) 
                                       (abst_mult v_Vhc v_Vkc))))))) =>
                     zen.Rall abst_T 
                       (v_Vkc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vdc v_Vkc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult v_Vhc v_Vdc) 
                                   (abst_mult v_Vhc v_Vkc))))) v_Vfc 
                       (v_Vnc:
                        (zen.proof 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_equal v_Vdc v_Vfc))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_mult v_Vhc v_Vdc) 
                                       (abst_mult v_Vhc v_Vfc)))))) =>
                        zen.Raxiom 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vdc v_Vfc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_mult v_Vhc v_Vdc) 
                                      (abst_mult v_Vhc v_Vfc))))) v_Vnc v_Vic) 
                       v_Vmc) v_Vlc) __D_1_LEMMA) v_Vgc) v_Vec) v_Vcc)) 
    (x:(cc.eT abst_T) =>
     y_1:(cc.eT abst_T) =>
     y_2:(cc.eT abst_T) =>
     H:(dk_logic.eP (dk_logic.ebP (abst_equal y_1 y_2))) =>
     (__D_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP (abst_equal (abst_mult x y_1) (abst_mult y_1 x)))) =>
      (__D_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP (abst_equal (abst_mult y_2 x) (abst_mult x y_2)))) =>
       (__D_1_3_LEMMA:
        (dk_logic.eP 
           (dk_logic.ebP (abst_equal (abst_mult y_1 x) (abst_mult y_2 x)))) =>
        zen.nnpp 
          (zen.triangle 
             (focal.is_true (abst_equal (abst_mult x y_1) (abst_mult x y_2)))) 
          (v_Vvc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult x y_1) (abst_mult x y_2)))))) =>
           zen.Rcut 
             (zen.and 
                (zen.not 
                   (zen.triangle 
                      (zen.equal abst_T (abst_mult x y_1) (abst_mult x y_1)))) 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult x y_1) (abst_mult x y_1)))))) 
             (v_Vwc:
              (zen.proof 
                 (zen.and 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal abst_T (abst_mult x y_1) 
                             (abst_mult x y_1)))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult x y_1) (abst_mult x y_1))))))) =>
              zen.Rand 
                (zen.not 
                   (zen.triangle 
                      (zen.equal abst_T (abst_mult x y_1) (abst_mult x y_1)))) 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult x y_1) (abst_mult x y_1))))) 
                (v_Vxc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal abst_T (abst_mult x y_1) 
                             (abst_mult x y_1))))) =>
                 v_Vyc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult x y_1) (abst_mult x y_1)))))) =>
                 zen.Rnoteq abst_T (abst_mult x y_1) v_Vxc) v_Vwc) 
             (v_Vzc:
              (zen.proof 
                 (zen.not 
                    (zen.and 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T (abst_mult x y_1) 
                                (abst_mult x y_1)))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult x y_1) 
                                   (abst_mult x y_1)))))))) =>
              zen.Rcut 
                (zen.triangle 
                   (zen.equal abst_T (abst_mult y_1 x) (abst_mult x y_2))) 
                (v_Vad:
                 (zen.proof 
                    (zen.triangle 
                       (zen.equal abst_T (abst_mult y_1 x) (abst_mult x y_2)))) =>
                 zen.Rsubst basics.bool__t 
                   (v_Vbd:(zen.term basics.bool__t) =>
                    zen.triangle (focal.is_true v_Vbd)) 
                   (abst_equal (abst_mult x y_1) (abst_mult y_1 x)) 
                   (abst_equal (abst_mult x y_1) (abst_mult x y_2)) 
                   (v_Vcd:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal basics.bool__t 
                                (abst_equal (abst_mult x y_1) 
                                   (abst_mult y_1 x)) 
                                (abst_equal (abst_mult x y_1) 
                                   (abst_mult x y_2)))))) =>
                    zen.Rsubst abst_T 
                      (v_Vdd:(zen.term abst_T) =>
                       zen.not 
                         (zen.triangle 
                            (zen.equal basics.bool__t 
                               (abst_equal v_Vdd (abst_mult y_1 x)) 
                               (abst_equal (abst_mult x y_1) 
                                  (abst_mult x y_2))))) (abst_mult x y_1) 
                      (abst_mult x y_1) 
                      (v_Vxc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal abst_T (abst_mult x y_1) 
                                   (abst_mult x y_1))))) =>
                       zen.Rnotand 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T (abst_mult x y_1) 
                                  (abst_mult x y_1)))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult x y_1) 
                                     (abst_mult x y_1))))) 
                         (v_Ved:
                          (zen.proof 
                             (zen.not 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T (abst_mult x y_1) 
                                         (abst_mult x y_1)))))) =>
                          zen.Rnotnot 
                            (zen.triangle 
                               (zen.equal abst_T (abst_mult x y_1) 
                                  (abst_mult x y_1))) 
                            (v_Vfd:
                             (zen.proof 
                                (zen.triangle 
                                   (zen.equal abst_T (abst_mult x y_1) 
                                      (abst_mult x y_1)))) =>
                             zen.Rcut 
                               (zen.triangle 
                                  (zen.equal abst_T (abst_mult x y_1) 
                                     (abst_mult x y_1))) 
                               (v_Vfd:
                                (zen.proof 
                                   (zen.triangle 
                                      (zen.equal abst_T (abst_mult x y_1) 
                                         (abst_mult x y_1)))) =>
                                zen.Rsubst abst_T 
                                  (v_Vgd:(zen.term abst_T) =>
                                   zen.triangle 
                                     (zen.equal abst_T v_Vgd 
                                        (abst_mult x y_1))) 
                                  (abst_mult x y_1) (abst_mult x y_1) 
                                  (v_Vxc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_mult x y_1) 
                                               (abst_mult x y_1))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (zen.equal abst_T (abst_mult x y_1) 
                                           (abst_mult x y_1))) v_Vfd v_Vxc) 
                                  (v_Vfd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (zen.equal abst_T (abst_mult x y_1) 
                                            (abst_mult x y_1)))) =>
                                   zen.Rsubst abst_T 
                                     (v_Vhd:(zen.term abst_T) =>
                                      zen.triangle 
                                        (zen.equal abst_T (abst_mult x y_1) 
                                           v_Vhd)) (abst_mult x y_1) 
                                     (abst_mult x y_1) 
                                     (v_Vxc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_mult x y_1) 
                                                  (abst_mult x y_1))))) =>
                                      zen.Rnoteq abst_T (abst_mult x y_1) 
                                        v_Vxc) 
                                     (v_Vfd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_mult x y_1) 
                                               (abst_mult x y_1)))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult x y_1) 
                                              (abst_mult x y_1))) v_Vfd v_Vxc) 
                                     v_Vfd) v_Vfd) 
                               (v_Vxc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T (abst_mult x y_1) 
                                            (abst_mult x y_1))))) =>
                                zen.Rnoteq abst_T (abst_mult x y_1) v_Vxc)) 
                            v_Ved) 
                         (v_Vid:
                          (zen.proof 
                             (zen.not 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_mult x y_1) 
                                            (abst_mult x y_1))))))) =>
                          zen.Rnotnot 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult x y_1) 
                                     (abst_mult x y_1)))) 
                            (v_Vjd:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_mult x y_1) 
                                         (abst_mult x y_1))))) =>
                             zen.Rall abst_T 
                               (v_Vkd:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vld:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vmd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vkd v_Vld))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vld v_Vmd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vkd v_Vmd))))))) 
                               (abst_mult x y_1) 
                               (v_Vnd:
                                (zen.proof 
                                   (zen.forall abst_T 
                                      (v_Vld:(zen.term abst_T) =>
                                       zen.forall abst_T 
                                         (v_Vmd:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult x y_1) v_Vld))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vld v_Vmd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult x y_1) 
                                                        v_Vmd)))))))) =>
                                zen.Rall abst_T 
                                  (v_Vld:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vmd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal (abst_mult x y_1) 
                                                 v_Vld))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vld v_Vmd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult x y_1) v_Vmd)))))) 
                                  (abst_mult x y_1) 
                                  (v_Vod:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vmd:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult x y_1) 
                                                     (abst_mult x y_1)))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult x y_1) 
                                                        v_Vmd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult x y_1) 
                                                        v_Vmd))))))) =>
                                   zen.Rall abst_T 
                                     (v_Vmd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal (abst_mult x y_1) 
                                                 (abst_mult x y_1)))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult x y_1) v_Vmd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult x y_1) v_Vmd))))) 
                                     (abst_mult y_1 x) 
                                     (v_Vpd:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult x y_1) 
                                                     (abst_mult x y_1)))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult x y_1) 
                                                        (abst_mult y_1 x)))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult x y_1) 
                                                        (abst_mult y_1 x))))))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal (abst_mult x y_1) 
                                                 (abst_mult x y_1)))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult x y_1) 
                                                    (abst_mult y_1 x)))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult x y_1) 
                                                    (abst_mult y_1 x))))) 
                                        (v_Vyc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult x y_1) 
                                                        (abst_mult x y_1)))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult x y_1) 
                                                    (abst_mult x y_1)))) 
                                           v_Vjd v_Vyc) 
                                        (v_Vqd:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult x y_1) 
                                                        (abst_mult y_1 x)))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult x y_1) 
                                                        (abst_mult y_1 x)))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult x y_1) 
                                                    (abst_mult y_1 x)))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult x y_1) 
                                                    (abst_mult y_1 x)))) 
                                           (v_Vrd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult x y_1) 
                                                           (abst_mult y_1 x)))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult x y_1) 
                                                       (abst_mult y_1 x)))) 
                                              __D_1_1_LEMMA v_Vrd) 
                                           (__D_1_1_LEMMA:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult x y_1) 
                                                        (abst_mult y_1 x))))) =>
                                            zen.Rsubst basics.bool__t 
                                              (v_Vbd:
                                               (zen.term basics.bool__t) =>
                                               zen.triangle 
                                                 (focal.is_true v_Vbd)) 
                                              (abst_equal (abst_mult x y_1) 
                                                 (abst_mult y_1 x)) 
                                              (abst_equal (abst_mult x y_1) 
                                                 (abst_mult x y_2)) 
                                              (v_Vcd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_mult x 
                                                                 y_1) 
                                                              (abst_mult y_1 
                                                                 x)) 
                                                           (abst_equal 
                                                              (abst_mult x 
                                                                 y_1) 
                                                              (abst_mult x 
                                                                 y_2)))))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Vdd:(zen.term abst_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal v_Vdd 
                                                             (abst_mult y_1 x)) 
                                                          (abst_equal 
                                                             (abst_mult x y_1) 
                                                             (abst_mult x y_2))))) 
                                                 (abst_mult x y_1) 
                                                 (abst_mult x y_1) 
                                                 (v_Vxc:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_mult x 
                                                                 y_1) 
                                                              (abst_mult x 
                                                                 y_1))))) =>
                                                  zen.Rnoteq abst_T 
                                                    (abst_mult x y_1) v_Vxc) 
                                                 (v_Vcd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    x y_1) 
                                                                 (abst_mult 
                                                                    y_1 x)) 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    x y_1) 
                                                                 (abst_mult 
                                                                    x y_2)))))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Vsd:
                                                     (zen.term abst_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                (abst_mult x 
                                                                   y_1) v_Vsd) 
                                                             (abst_equal 
                                                                (abst_mult x 
                                                                   y_1) 
                                                                (abst_mult x 
                                                                   y_2))))) 
                                                    (abst_mult y_1 x) 
                                                    (abst_mult x y_2) 
                                                    (v_Vtd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_mult 
                                                                    y_1 x) 
                                                                 (abst_mult 
                                                                    x y_2))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_mult y_1 x) 
                                                             (abst_mult x y_2))) 
                                                       v_Vad v_Vtd) 
                                                    (v_Vud:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    x y_1) 
                                                                    (
                                                                    abst_mult 
                                                                    x y_2)) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    x y_1) 
                                                                    (
                                                                    abst_mult 
                                                                    x y_2)))))) =>
                                                     zen.Rnoteq 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_mult x y_1) 
                                                          (abst_mult x y_2)) 
                                                       v_Vud) v_Vcd) v_Vcd) 
                                              (v_Vvd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult x y_1) 
                                                           (abst_mult x y_2))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult x y_1) 
                                                          (abst_mult x y_2)))) 
                                                 v_Vvd v_Vvc) __D_1_1_LEMMA) 
                                           v_Vqd) v_Vpd) v_Vod) v_Vnd) 
                               abst_equal_transitive) v_Vid) v_Vzc) 
                      (v_Vcd:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (abst_equal (abst_mult x y_1) 
                                      (abst_mult y_1 x)) 
                                   (abst_equal (abst_mult x y_1) 
                                      (abst_mult x y_2)))))) =>
                       zen.Rsubst abst_T 
                         (v_Vsd:(zen.term abst_T) =>
                          zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (abst_equal (abst_mult x y_1) v_Vsd) 
                                  (abst_equal (abst_mult x y_1) 
                                     (abst_mult x y_2))))) (abst_mult y_1 x) 
                         (abst_mult x y_2) 
                         (v_Vtd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T (abst_mult y_1 x) 
                                      (abst_mult x y_2))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (zen.equal abst_T (abst_mult y_1 x) 
                                  (abst_mult x y_2))) v_Vad v_Vtd) 
                         (v_Vud:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_equal (abst_mult x y_1) 
                                         (abst_mult x y_2)) 
                                      (abst_equal (abst_mult x y_1) 
                                         (abst_mult x y_2)))))) =>
                          zen.Rnoteq basics.bool__t 
                            (abst_equal (abst_mult x y_1) (abst_mult x y_2)) 
                            v_Vud) v_Vcd) v_Vcd) 
                   (v_Vvd:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult x y_1) (abst_mult x y_2))))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult x y_1) (abst_mult x y_2)))) 
                      v_Vvd v_Vvc) __D_1_1_LEMMA) 
                (v_Vtd:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal abst_T (abst_mult y_1 x) 
                             (abst_mult x y_2))))) =>
                 zen.Rcut 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult y_1 x) (abst_mult x y_2)))) 
                   (v_Vwd:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult y_1 x) (abst_mult x y_2))))) =>
                    zen.Rall abst_T 
                      (v_Vkd:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vld:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vmd:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vkd v_Vld))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vld v_Vmd))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vkd v_Vmd))))))) 
                      (abst_mult x y_1) 
                      (v_Vnd:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vld:(zen.term abst_T) =>
                              zen.forall abst_T 
                                (v_Vmd:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_mult x y_1) v_Vld))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vld v_Vmd))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal (abst_mult x y_1) 
                                               v_Vmd)))))))) =>
                       zen.Rall abst_T 
                         (v_Vld:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vmd:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_mult x y_1) v_Vld))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vld v_Vmd))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_mult x y_1) v_Vmd)))))) 
                         (abst_mult y_1 x) 
                         (v_Vxd:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vmd:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_mult x y_1) 
                                            (abst_mult y_1 x)))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal (abst_mult y_1 x) 
                                               v_Vmd))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal (abst_mult x y_1) 
                                               v_Vmd))))))) =>
                          zen.Rall abst_T 
                            (v_Vmd:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_mult x y_1) 
                                        (abst_mult y_1 x)))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_mult y_1 x) v_Vmd))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_mult x y_1) v_Vmd))))) 
                            (abst_mult x y_2) 
                            (v_Vyd:
                             (zen.proof 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_mult x y_1) 
                                            (abst_mult y_1 x)))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal (abst_mult y_1 x) 
                                               (abst_mult x y_2)))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal (abst_mult x y_1) 
                                               (abst_mult x y_2))))))) =>
                             zen.Rimply 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_mult x y_1) 
                                        (abst_mult y_1 x)))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_mult y_1 x) 
                                           (abst_mult x y_2)))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_mult x y_1) 
                                           (abst_mult x y_2))))) 
                               (v_Vrd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal (abst_mult x y_1) 
                                               (abst_mult y_1 x)))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_mult x y_1) 
                                           (abst_mult y_1 x)))) 
                                  __D_1_1_LEMMA v_Vrd) 
                               (v_Vzd:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal (abst_mult y_1 x) 
                                               (abst_mult x y_2)))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal (abst_mult x y_1) 
                                               (abst_mult x y_2)))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_mult y_1 x) 
                                           (abst_mult x y_2)))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_mult x y_1) 
                                           (abst_mult x y_2)))) 
                                  (v_Vae:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal (abst_mult y_1 x) 
                                                  (abst_mult x y_2)))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal (abst_mult y_1 x) 
                                              (abst_mult x y_2)))) v_Vwd 
                                     v_Vae) 
                                  (v_Vvd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal (abst_mult x y_1) 
                                               (abst_mult x y_2))))) =>
                                   zen.Rsubst basics.bool__t 
                                     (v_Vbd:(zen.term basics.bool__t) =>
                                      zen.triangle (focal.is_true v_Vbd)) 
                                     (abst_equal (abst_mult x y_1) 
                                        (abst_mult x y_2)) 
                                     (abst_equal (abst_mult x y_1) 
                                        (abst_mult x y_2)) 
                                     (v_Vud:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (abst_equal 
                                                     (abst_mult x y_1) 
                                                     (abst_mult x y_2)) 
                                                  (abst_equal 
                                                     (abst_mult x y_1) 
                                                     (abst_mult x y_2)))))) =>
                                      zen.Rsubst abst_T 
                                        (v_Vbe:(zen.term abst_T) =>
                                         zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (abst_equal v_Vbe 
                                                    (abst_mult x y_2)) 
                                                 (abst_equal 
                                                    (abst_mult x y_1) 
                                                    (abst_mult x y_2))))) 
                                        (abst_mult x y_1) (abst_mult x y_1) 
                                        (v_Vxc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_mult x y_1) 
                                                     (abst_mult x y_1))))) =>
                                         zen.Rnotand 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_mult x y_1) 
                                                    (abst_mult x y_1)))) 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult x y_1) 
                                                       (abst_mult x y_1))))) 
                                           (v_Ved:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_mult x y_1) 
                                                           (abst_mult x y_1)))))) =>
                                            zen.Rnotnot 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_mult x y_1) 
                                                    (abst_mult x y_1))) 
                                              (v_Vfd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_mult x y_1) 
                                                        (abst_mult x y_1)))) =>
                                               zen.Reqsym abst_T 
                                                 (abst_mult x y_1) 
                                                 (abst_mult x y_1) v_Vfd 
                                                 v_Vxc) v_Ved) 
                                           (v_Vid:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult x 
                                                                 y_1) 
                                                              (abst_mult x 
                                                                 y_1))))))) =>
                                            zen.Rnotnot 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult x y_1) 
                                                       (abst_mult x y_1)))) 
                                              (v_Vjd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult x y_1) 
                                                           (abst_mult x y_1))))) =>
                                               zen.Rall abst_T 
                                                 (v_Vkd:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vld:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vmd:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vkd 
                                                                   v_Vld))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                 (abst_mult x y_1) 
                                                 (v_Vnd:
                                                  (zen.proof 
                                                     (zen.forall abst_T 
                                                        (v_Vld:
                                                         (zen.term abst_T) =>
                                                         zen.forall abst_T 
                                                           (v_Vmd:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    x y_1) 
                                                                    v_Vld))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y_1) 
                                                                    v_Vmd)))))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vld:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vmd:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    x y_1) 
                                                                   v_Vld))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    x y_1) 
                                                                    v_Vmd)))))) 
                                                    (abst_mult x y_1) 
                                                    (v_Vod:
                                                     (zen.proof 
                                                        (zen.forall abst_T 
                                                           (v_Vmd:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    x y_1) 
                                                                    (abst_mult 
                                                                    x y_1)))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y_1) 
                                                                    v_Vmd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y_1) 
                                                                    v_Vmd))))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vmd:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    x y_1) 
                                                                   (abst_mult 
                                                                    x y_1)))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    x y_1) 
                                                                    v_Vmd))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    x y_1) 
                                                                    v_Vmd))))) 
                                                       (abst_mult x y_2) 
                                                       (v_Vce:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    x y_1) 
                                                                    (abst_mult 
                                                                    x y_1)))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y_1) 
                                                                    (abst_mult 
                                                                    x y_2)))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y_1) 
                                                                    (abst_mult 
                                                                    x y_2))))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    x y_1) 
                                                                   (abst_mult 
                                                                    x y_1)))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    x y_1) 
                                                                    (abst_mult 
                                                                    x y_2)))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    x y_1) 
                                                                    (abst_mult 
                                                                    x y_2))))) 
                                                          (v_Vyc:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y_1) 
                                                                    (abst_mult 
                                                                    x y_1)))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    x y_1) 
                                                                    (abst_mult 
                                                                    x y_1)))) 
                                                             v_Vjd v_Vyc) 
                                                          (v_Vde:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y_1) 
                                                                    (abst_mult 
                                                                    x y_2)))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y_1) 
                                                                    (abst_mult 
                                                                    x y_2)))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    x y_1) 
                                                                    (abst_mult 
                                                                    x y_2)))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    x y_1) 
                                                                    (abst_mult 
                                                                    x y_2)))) 
                                                             (v_Vvc:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y_1) 
                                                                    (abst_mult 
                                                                    x y_2)))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y_1) 
                                                                    (abst_mult 
                                                                    x y_2)))) 
                                                                v_Vvd v_Vvc) 
                                                             (v_Vvd:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y_1) 
                                                                    (abst_mult 
                                                                    x y_2))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y_1) 
                                                                    (abst_mult 
                                                                    x y_2)))) 
                                                                v_Vvd v_Vvc) 
                                                             v_Vde) v_Vce) 
                                                       v_Vod) v_Vnd) 
                                                 abst_equal_transitive) v_Vid) 
                                           v_Vzc) 
                                        (v_Vud:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal 
                                                        (abst_mult x y_1) 
                                                        (abst_mult x y_2)) 
                                                     (abst_equal 
                                                        (abst_mult x y_1) 
                                                        (abst_mult x y_2)))))) =>
                                         zen.Rsubst abst_T 
                                           (v_Vsd:(zen.term abst_T) =>
                                            zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal 
                                                       (abst_mult x y_1) 
                                                       v_Vsd) 
                                                    (abst_equal 
                                                       (abst_mult x y_1) 
                                                       (abst_mult x y_2))))) 
                                           (abst_mult x y_2) 
                                           (abst_mult x y_2) 
                                           (v_Vee:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_mult x y_2) 
                                                        (abst_mult x y_2))))) =>
                                            zen.Rnoteq abst_T 
                                              (abst_mult x y_2) v_Vee) 
                                           (v_Vud:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_mult x y_1) 
                                                           (abst_mult x y_2)) 
                                                        (abst_equal 
                                                           (abst_mult x y_1) 
                                                           (abst_mult x y_2)))))) =>
                                            zen.Rnoteq basics.bool__t 
                                              (abst_equal (abst_mult x y_1) 
                                                 (abst_mult x y_2)) v_Vud) 
                                           v_Vud) v_Vud) 
                                     (v_Vvd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal (abst_mult x y_1) 
                                                  (abst_mult x y_2))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal (abst_mult x y_1) 
                                                 (abst_mult x y_2)))) v_Vvd 
                                        v_Vvc) v_Vvd) v_Vzd) v_Vyd) v_Vxd) 
                         v_Vnd) abst_equal_transitive) 
                   (v_Vae:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult y_1 x) 
                                   (abst_mult x y_2)))))) =>
                    zen.Rcut 
                      (zen.and 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T (abst_mult y_1 x) 
                                  (abst_mult y_1 x)))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult y_1 x) 
                                     (abst_mult y_1 x)))))) 
                      (v_Vfe:
                       (zen.proof 
                          (zen.and 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T (abst_mult y_1 x) 
                                      (abst_mult y_1 x)))) 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_mult y_1 x) 
                                         (abst_mult y_1 x))))))) =>
                       zen.Rand 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T (abst_mult y_1 x) 
                                  (abst_mult y_1 x)))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult y_1 x) 
                                     (abst_mult y_1 x))))) 
                         (v_Vge:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T (abst_mult y_1 x) 
                                      (abst_mult y_1 x))))) =>
                          v_Vhe:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_mult y_1 x) 
                                         (abst_mult y_1 x)))))) =>
                          zen.Rnoteq abst_T (abst_mult y_1 x) v_Vge) v_Vfe) 
                      (v_Vie:
                       (zen.proof 
                          (zen.not 
                             (zen.and 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T (abst_mult y_1 x) 
                                         (abst_mult y_1 x)))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_mult y_1 x) 
                                            (abst_mult y_1 x)))))))) =>
                       zen.Rcut 
                         (zen.triangle 
                            (zen.equal abst_T (abst_mult y_2 x) 
                               (abst_mult x y_2))) 
                         (v_Vje:
                          (zen.proof 
                             (zen.triangle 
                                (zen.equal abst_T (abst_mult y_2 x) 
                                   (abst_mult x y_2)))) =>
                          zen.Rsubst basics.bool__t 
                            (v_Vbd:(zen.term basics.bool__t) =>
                             zen.triangle (focal.is_true v_Vbd)) 
                            (abst_equal (abst_mult y_1 x) (abst_mult y_2 x)) 
                            (abst_equal (abst_mult y_1 x) (abst_mult x y_2)) 
                            (v_Vke:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (abst_equal (abst_mult y_1 x) 
                                            (abst_mult y_2 x)) 
                                         (abst_equal (abst_mult y_1 x) 
                                            (abst_mult x y_2)))))) =>
                             zen.Rsubst abst_T 
                               (v_Vle:(zen.term abst_T) =>
                                zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (abst_equal v_Vle (abst_mult y_2 x)) 
                                        (abst_equal (abst_mult y_1 x) 
                                           (abst_mult x y_2))))) 
                               (abst_mult y_1 x) (abst_mult y_1 x) 
                               (v_Vge:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T (abst_mult y_1 x) 
                                            (abst_mult y_1 x))))) =>
                                zen.Rnotand 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal abst_T (abst_mult y_1 x) 
                                           (abst_mult y_1 x)))) 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal (abst_mult y_1 x) 
                                              (abst_mult y_1 x))))) 
                                  (v_Vme:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_mult y_1 x) 
                                                  (abst_mult y_1 x)))))) =>
                                   zen.Rnotnot 
                                     (zen.triangle 
                                        (zen.equal abst_T (abst_mult y_1 x) 
                                           (abst_mult y_1 x))) 
                                     (v_Vne:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_mult y_1 x) 
                                               (abst_mult y_1 x)))) =>
                                      zen.Rcut 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult y_1 x) 
                                              (abst_mult y_1 x))) 
                                        (v_Vne:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_mult y_1 x) 
                                                  (abst_mult y_1 x)))) =>
                                         zen.Rsubst abst_T 
                                           (v_Voe:(zen.term abst_T) =>
                                            zen.triangle 
                                              (zen.equal abst_T v_Voe 
                                                 (abst_mult y_1 x))) 
                                           (abst_mult y_1 x) 
                                           (abst_mult y_1 x) 
                                           (v_Vge:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_mult y_1 x) 
                                                        (abst_mult y_1 x))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_mult y_1 x) 
                                                    (abst_mult y_1 x))) 
                                              v_Vne v_Vge) 
                                           (v_Vne:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_mult y_1 x) 
                                                     (abst_mult y_1 x)))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vpe:(zen.term abst_T) =>
                                               zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_mult y_1 x) v_Vpe)) 
                                              (abst_mult y_1 x) 
                                              (abst_mult y_1 x) 
                                              (v_Vge:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_mult y_1 x) 
                                                           (abst_mult y_1 x))))) =>
                                               zen.Rnoteq abst_T 
                                                 (abst_mult y_1 x) v_Vge) 
                                              (v_Vne:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_mult y_1 x) 
                                                        (abst_mult y_1 x)))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_mult y_1 x) 
                                                       (abst_mult y_1 x))) 
                                                 v_Vne v_Vge) v_Vne) v_Vne) 
                                        (v_Vge:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_mult y_1 x) 
                                                     (abst_mult y_1 x))))) =>
                                         zen.Rnoteq abst_T (abst_mult y_1 x) 
                                           v_Vge)) v_Vme) 
                                  (v_Vqe:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult y_1 x) 
                                                     (abst_mult y_1 x))))))) =>
                                   zen.Rnotnot 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal (abst_mult y_1 x) 
                                              (abst_mult y_1 x)))) 
                                     (v_Vre:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal (abst_mult y_1 x) 
                                                  (abst_mult y_1 x))))) =>
                                      zen.Rall abst_T 
                                        (v_Vkd:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vld:(zen.term abst_T) =>
                                            zen.forall abst_T 
                                              (v_Vmd:(zen.term abst_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vkd 
                                                          v_Vld))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vld 
                                                             v_Vmd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vkd 
                                                             v_Vmd))))))) 
                                        (abst_mult y_1 x) 
                                        (v_Vse:
                                         (zen.proof 
                                            (zen.forall abst_T 
                                               (v_Vld:(zen.term abst_T) =>
                                                zen.forall abst_T 
                                                  (v_Vmd:(zen.term abst_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult y_1 
                                                                 x) v_Vld))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Vld v_Vmd))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    y_1 x) 
                                                                 v_Vmd)))))))) =>
                                         zen.Rall abst_T 
                                           (v_Vld:(zen.term abst_T) =>
                                            zen.forall abst_T 
                                              (v_Vmd:(zen.term abst_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult y_1 x) 
                                                          v_Vld))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vld 
                                                             v_Vmd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult y_1 x) 
                                                             v_Vmd)))))) 
                                           (abst_mult y_1 x) 
                                           (v_Vte:
                                            (zen.proof 
                                               (zen.forall abst_T 
                                                  (v_Vmd:(zen.term abst_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult y_1 
                                                                 x) 
                                                              (abst_mult y_1 
                                                                 x)))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    y_1 x) 
                                                                 v_Vmd))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    y_1 x) 
                                                                 v_Vmd))))))) =>
                                            zen.Rall abst_T 
                                              (v_Vmd:(zen.term abst_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult y_1 x) 
                                                          (abst_mult y_1 x)))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult y_1 x) 
                                                             v_Vmd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult y_1 x) 
                                                             v_Vmd))))) 
                                              (abst_mult y_2 x) 
                                              (v_Vue:
                                               (zen.proof 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult y_1 
                                                                 x) 
                                                              (abst_mult y_1 
                                                                 x)))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    y_1 x) 
                                                                 (abst_mult 
                                                                    y_2 x)))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    y_1 x) 
                                                                 (abst_mult 
                                                                    y_2 x))))))) =>
                                               zen.Rimply 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult y_1 x) 
                                                          (abst_mult y_1 x)))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult y_1 x) 
                                                             (abst_mult y_2 x)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult y_1 x) 
                                                             (abst_mult y_2 x))))) 
                                                 (v_Vhe:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    y_1 x) 
                                                                 (abst_mult 
                                                                    y_1 x)))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult y_1 x) 
                                                             (abst_mult y_1 x)))) 
                                                    v_Vre v_Vhe) 
                                                 (v_Vve:
                                                  (zen.proof 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    y_1 x) 
                                                                 (abst_mult 
                                                                    y_2 x)))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    y_1 x) 
                                                                 (abst_mult 
                                                                    y_2 x)))))) =>
                                                  zen.Rimply 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult y_1 x) 
                                                             (abst_mult y_2 x)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult y_1 x) 
                                                             (abst_mult y_2 x)))) 
                                                    (v_Vwe:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    y_1 x) 
                                                                    (
                                                                    abst_mult 
                                                                    y_2 x)))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   y_1 x) 
                                                                (abst_mult 
                                                                   y_2 x)))) 
                                                       __D_1_3_LEMMA v_Vwe) 
                                                    (__D_1_3_LEMMA:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    y_1 x) 
                                                                 (abst_mult 
                                                                    y_2 x))))) =>
                                                     zen.Rsubst 
                                                       basics.bool__t 
                                                       (v_Vbd:
                                                        (zen.term 
                                                           basics.bool__t) =>
                                                        zen.triangle 
                                                          (focal.is_true 
                                                             v_Vbd)) 
                                                       (abst_equal 
                                                          (abst_mult y_1 x) 
                                                          (abst_mult y_2 x)) 
                                                       (abst_equal 
                                                          (abst_mult y_1 x) 
                                                          (abst_mult x y_2)) 
                                                       (v_Vke:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    y_2 x)) 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    x y_2)))))) =>
                                                        zen.Rsubst abst_T 
                                                          (v_Vle:
                                                           (zen.term abst_T) =>
                                                           zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_equal 
                                                                    v_Vle 
                                                                    (abst_mult 
                                                                    y_2 x)) 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    x y_2))))) 
                                                          (abst_mult y_1 x) 
                                                          (abst_mult y_1 x) 
                                                          (v_Vge:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    y_1 x))))) =>
                                                           zen.Rnoteq abst_T 
                                                             (abst_mult y_1 x) 
                                                             v_Vge) 
                                                          (v_Vke:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    y_2 x)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    x y_2)))))) =>
                                                           zen.Rsubst abst_T 
                                                             (v_Vxe:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    v_Vxe) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    x y_2))))) 
                                                             (abst_mult y_2 x) 
                                                             (abst_mult x y_2) 
                                                             (v_Vye:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    y_2 x) 
                                                                    (abst_mult 
                                                                    x y_2))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    y_2 x) 
                                                                    (abst_mult 
                                                                    x y_2))) 
                                                                v_Vje v_Vye) 
                                                             (v_Vze:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    x y_2)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    x y_2)))))) =>
                                                              zen.Rnoteq 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    y_1 x) 
                                                                   (abst_mult 
                                                                    x y_2)) 
                                                                v_Vze) v_Vke) 
                                                          v_Vke) 
                                                       (v_Vwd:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    y_1 x) 
                                                                    (
                                                                    abst_mult 
                                                                    x y_2))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    y_1 x) 
                                                                   (abst_mult 
                                                                    x y_2)))) 
                                                          v_Vwd v_Vae) 
                                                       __D_1_3_LEMMA) v_Vve) 
                                                 v_Vue) v_Vte) v_Vse) 
                                        abst_equal_transitive) v_Vqe) v_Vie) 
                               (v_Vke:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (abst_equal (abst_mult y_1 x) 
                                               (abst_mult y_2 x)) 
                                            (abst_equal (abst_mult y_1 x) 
                                               (abst_mult x y_2)))))) =>
                                zen.Rsubst abst_T 
                                  (v_Vxe:(zen.term abst_T) =>
                                   zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (abst_equal (abst_mult y_1 x) 
                                              v_Vxe) 
                                           (abst_equal (abst_mult y_1 x) 
                                              (abst_mult x y_2))))) 
                                  (abst_mult y_2 x) (abst_mult x y_2) 
                                  (v_Vye:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_mult y_2 x) 
                                               (abst_mult x y_2))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (zen.equal abst_T (abst_mult y_2 x) 
                                           (abst_mult x y_2))) v_Vje v_Vye) 
                                  (v_Vze:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (abst_equal (abst_mult y_1 x) 
                                                  (abst_mult x y_2)) 
                                               (abst_equal (abst_mult y_1 x) 
                                                  (abst_mult x y_2)))))) =>
                                   zen.Rnoteq basics.bool__t 
                                     (abst_equal (abst_mult y_1 x) 
                                        (abst_mult x y_2)) v_Vze) v_Vke) 
                               v_Vke) 
                            (v_Vwd:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_mult y_1 x) 
                                         (abst_mult x y_2))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_mult y_1 x) 
                                        (abst_mult x y_2)))) v_Vwd v_Vae) 
                            __D_1_3_LEMMA) 
                         (v_Vye:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T (abst_mult y_2 x) 
                                      (abst_mult x y_2))))) =>
                          zen.Rcut 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult y_2 x) 
                                     (abst_mult x y_2)))) 
                            (__D_1_2_LEMMA:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_mult y_2 x) 
                                         (abst_mult x y_2))))) =>
                             zen.Rall abst_T 
                               (v_Vkd:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vld:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vmd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vkd v_Vld))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vld v_Vmd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vkd v_Vmd))))))) 
                               (abst_mult y_1 x) 
                               (v_Vse:
                                (zen.proof 
                                   (zen.forall abst_T 
                                      (v_Vld:(zen.term abst_T) =>
                                       zen.forall abst_T 
                                         (v_Vmd:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult y_1 x) v_Vld))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vld v_Vmd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult y_1 x) 
                                                        v_Vmd)))))))) =>
                                zen.Rall abst_T 
                                  (v_Vld:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vmd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal (abst_mult y_1 x) 
                                                 v_Vld))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vld v_Vmd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult y_1 x) v_Vmd)))))) 
                                  (abst_mult y_2 x) 
                                  (v_Vaf:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vmd:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult y_1 x) 
                                                     (abst_mult y_2 x)))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult y_2 x) 
                                                        v_Vmd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult y_1 x) 
                                                        v_Vmd))))))) =>
                                   zen.Rall abst_T 
                                     (v_Vmd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal (abst_mult y_1 x) 
                                                 (abst_mult y_2 x)))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult y_2 x) v_Vmd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult y_1 x) v_Vmd))))) 
                                     (abst_mult x y_2) 
                                     (v_Vbf:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult y_1 x) 
                                                     (abst_mult y_2 x)))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult y_2 x) 
                                                        (abst_mult x y_2)))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult y_1 x) 
                                                        (abst_mult x y_2))))))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal (abst_mult y_1 x) 
                                                 (abst_mult y_2 x)))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult y_2 x) 
                                                    (abst_mult x y_2)))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult y_1 x) 
                                                    (abst_mult x y_2))))) 
                                        (v_Vwe:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult y_1 x) 
                                                        (abst_mult y_2 x)))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult y_1 x) 
                                                    (abst_mult y_2 x)))) 
                                           __D_1_3_LEMMA v_Vwe) 
                                        (v_Vcf:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult y_2 x) 
                                                        (abst_mult x y_2)))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult y_1 x) 
                                                        (abst_mult x y_2)))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult y_2 x) 
                                                    (abst_mult x y_2)))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult y_1 x) 
                                                    (abst_mult x y_2)))) 
                                           (v_Vdf:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult y_2 x) 
                                                           (abst_mult x y_2)))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult y_2 x) 
                                                       (abst_mult x y_2)))) 
                                              __D_1_2_LEMMA v_Vdf) 
                                           (v_Vwd:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult y_1 x) 
                                                        (abst_mult x y_2))))) =>
                                            zen.Rsubst basics.bool__t 
                                              (v_Vbd:
                                               (zen.term basics.bool__t) =>
                                               zen.triangle 
                                                 (focal.is_true v_Vbd)) 
                                              (abst_equal (abst_mult y_1 x) 
                                                 (abst_mult x y_2)) 
                                              (abst_equal (abst_mult y_1 x) 
                                                 (abst_mult x y_2)) 
                                              (v_Vze:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_mult y_1 
                                                                 x) 
                                                              (abst_mult x 
                                                                 y_2)) 
                                                           (abst_equal 
                                                              (abst_mult y_1 
                                                                 x) 
                                                              (abst_mult x 
                                                                 y_2)))))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Vbe:(zen.term abst_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal v_Vbe 
                                                             (abst_mult x y_2)) 
                                                          (abst_equal 
                                                             (abst_mult y_1 x) 
                                                             (abst_mult x y_2))))) 
                                                 (abst_mult y_1 x) 
                                                 (abst_mult y_1 x) 
                                                 (v_Vge:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_mult y_1 
                                                                 x) 
                                                              (abst_mult y_1 
                                                                 x))))) =>
                                                  zen.Rnotand 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_mult y_1 x) 
                                                             (abst_mult y_1 x)))) 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   y_1 x) 
                                                                (abst_mult 
                                                                   y_1 x))))) 
                                                    (v_Vme:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_mult 
                                                                    y_1 x) 
                                                                    (
                                                                    abst_mult 
                                                                    y_1 x)))))) =>
                                                     zen.Rnotnot 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_mult y_1 x) 
                                                             (abst_mult y_1 x))) 
                                                       (v_Vne:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_mult 
                                                                    y_1 x) 
                                                                 (abst_mult 
                                                                    y_1 x)))) =>
                                                        zen.Reqsym abst_T 
                                                          (abst_mult y_1 x) 
                                                          (abst_mult y_1 x) 
                                                          v_Vne v_Vge) v_Vme) 
                                                    (v_Vqe:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    y_1 x))))))) =>
                                                     zen.Rnotnot 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   y_1 x) 
                                                                (abst_mult 
                                                                   y_1 x)))) 
                                                       (v_Vre:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    y_1 x) 
                                                                    (
                                                                    abst_mult 
                                                                    y_1 x))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vkd:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vld:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.forall 
                                                                abst_T 
                                                                (v_Vmd:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                          (abst_mult y_1 x) 
                                                          (v_Vse:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 abst_T 
                                                                 (v_Vld:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.forall 
                                                                    abst_T 
                                                                    (
                                                                    v_Vmd:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    v_Vmd)))))))) =>
                                                           zen.Rall abst_T 
                                                             (v_Vld:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.forall 
                                                                abst_T 
                                                                (v_Vmd:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    v_Vld))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    v_Vmd)))))) 
                                                             (abst_mult y_1 x) 
                                                             (v_Vte:
                                                              (zen.proof 
                                                                 (zen.forall 
                                                                    abst_T 
                                                                    (
                                                                    v_Vmd:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    y_1 x)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    v_Vmd))))))) =>
                                                              zen.Rall 
                                                                abst_T 
                                                                (v_Vmd:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    y_1 x)))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    v_Vmd))))) 
                                                                (abst_mult x 
                                                                   y_2) 
                                                                (v_Vef:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    y_1 x)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    x y_2)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    x y_2))))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    y_1 x)))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    x y_2)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    x y_2))))) 
                                                                   (v_Vhe:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    y_1 x)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    y_1 x)))) 
                                                                    v_Vre 
                                                                    v_Vhe) 
                                                                   (v_Vff:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    x y_2)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    x y_2)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    x y_2)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    x y_2)))) 
                                                                    (v_Vae:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    x y_2)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    x y_2)))) 
                                                                    v_Vwd 
                                                                    v_Vae) 
                                                                    (v_Vwd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    x y_2))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    y_1 x) 
                                                                    (abst_mult 
                                                                    x y_2)))) 
                                                                    v_Vwd 
                                                                    v_Vae) 
                                                                    v_Vff) 
                                                                   v_Vef) 
                                                                v_Vte) v_Vse) 
                                                          abst_equal_transitive) 
                                                       v_Vqe) v_Vie) 
                                                 (v_Vze:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    y_1 x) 
                                                                 (abst_mult 
                                                                    x y_2)) 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    y_1 x) 
                                                                 (abst_mult 
                                                                    x y_2)))))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Vxe:
                                                     (zen.term abst_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   y_1 x) 
                                                                v_Vxe) 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   y_1 x) 
                                                                (abst_mult x 
                                                                   y_2))))) 
                                                    (abst_mult x y_2) 
                                                    (abst_mult x y_2) 
                                                    (v_Vee:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_mult 
                                                                    x y_2) 
                                                                 (abst_mult 
                                                                    x y_2))))) =>
                                                     zen.Rnoteq abst_T 
                                                       (abst_mult x y_2) 
                                                       v_Vee) 
                                                    (v_Vze:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    y_1 x) 
                                                                    (
                                                                    abst_mult 
                                                                    x y_2)) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    y_1 x) 
                                                                    (
                                                                    abst_mult 
                                                                    x y_2)))))) =>
                                                     zen.Rnoteq 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_mult y_1 x) 
                                                          (abst_mult x y_2)) 
                                                       v_Vze) v_Vze) v_Vze) 
                                              (v_Vwd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult y_1 x) 
                                                           (abst_mult x y_2))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult y_1 x) 
                                                          (abst_mult x y_2)))) 
                                                 v_Vwd v_Vae) v_Vwd) v_Vcf) 
                                        v_Vbf) v_Vaf) v_Vse) 
                               abst_equal_transitive) 
                            (v_Vdf:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_mult y_2 x) 
                                            (abst_mult x y_2)))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_mult y_2 x) 
                                        (abst_mult x y_2)))) __D_1_2_LEMMA 
                               v_Vdf)))))))) 
         (zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (abst_equal (abst_mult y_1 x) (abst_mult y_2 x)))) 
            (v_Vzb:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult y_1 x) (abst_mult y_2 x)))))) =>
             zen.Rall abst_T 
               (v_Vac:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vbc:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vcc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Vac v_Vbc))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_mult v_Vac v_Vcc) 
                                 (abst_mult v_Vbc v_Vcc))))))) y_1 
               (v_Vdc:
                (zen.proof 
                   (zen.forall abst_T 
                      (v_Vbc:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vcc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true (abst_equal y_1 v_Vbc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult y_1 v_Vcc) 
                                     (abst_mult v_Vbc v_Vcc)))))))) =>
                zen.Rall abst_T 
                  (v_Vbc:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vcc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle (focal.is_true (abst_equal y_1 v_Vbc))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_mult y_1 v_Vcc) 
                                 (abst_mult v_Vbc v_Vcc)))))) y_2 
                  (v_Vec:
                   (zen.proof 
                      (zen.forall abst_T 
                         (v_Vcc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true (abst_equal y_1 y_2))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult y_1 v_Vcc) 
                                     (abst_mult y_2 v_Vcc))))))) =>
                   zen.Rall abst_T 
                     (v_Vcc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle (focal.is_true (abst_equal y_1 y_2))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_mult y_1 v_Vcc) 
                                 (abst_mult y_2 v_Vcc))))) x 
                     (v_Vfc:
                      (zen.proof 
                         (zen.imp 
                            (zen.triangle 
                               (focal.is_true (abst_equal y_1 y_2))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult y_1 x) 
                                     (abst_mult y_2 x)))))) =>
                      zen.Rimply 
                        (zen.triangle (focal.is_true (abst_equal y_1 y_2))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_mult y_1 x) (abst_mult y_2 x)))) 
                        (v_Vgc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true (abst_equal y_1 y_2))))) =>
                         zen.Raxiom 
                           (zen.triangle (focal.is_true (abst_equal y_1 y_2))) 
                           H v_Vgc) 
                        (v_Vhc:
                         (zen.proof 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult y_1 x) 
                                     (abst_mult y_2 x))))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_mult y_1 x) 
                                    (abst_mult y_2 x)))) v_Vhc v_Vzb) v_Vfc) 
                     v_Vec) v_Vdc) abst_mult_left_substitution_rule))) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true (abst_equal (abst_mult y_2 x) (abst_mult x y_2)))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_mult y_2 x) (abst_mult x y_2)))))) =>
            zen.Rall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult v_Vac v_Vbc) 
                          (abst_mult v_Vbc v_Vac))))) y_2 
              (v_Vcc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_mult y_2 v_Vbc) 
                              (abst_mult v_Vbc y_2)))))) =>
               zen.Rall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult y_2 v_Vbc) 
                          (abst_mult v_Vbc y_2)))) x 
                 (v_Vdc:
                  (zen.proof 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_mult y_2 x) (abst_mult x y_2))))) =>
                  zen.Raxiom 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_mult y_2 x) (abst_mult x y_2)))) 
                    v_Vdc v_Vzb) v_Vcc) abst_mult_commutes))) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true (abst_equal (abst_mult x y_1) (abst_mult y_1 x)))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult x y_1) (abst_mult y_1 x)))))) =>
           zen.Rall abst_T 
             (v_Vac:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_mult v_Vac v_Vbc) 
                         (abst_mult v_Vbc v_Vac))))) x 
             (v_Vcc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_mult x v_Vbc) (abst_mult v_Vbc x)))))) =>
              zen.Rall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_mult x v_Vbc) (abst_mult v_Vbc x)))) 
                y_1 
                (v_Vdc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_mult x y_1) (abst_mult y_1 x))))) =>
                 zen.Raxiom 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult x y_1) (abst_mult y_1 x)))) 
                   v_Vdc v_Vzb) v_Vcc) abst_mult_commutes))).

def Monoid_with_absorbant__zero_absorbes :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_zero_left_absorbes:(dk_logic.eP 
                             (dk_logic.forall abst_T 
                                (x:(cc.eT abst_T) =>
                                 dk_logic.ebP 
                                   (abst_equal (abst_mult abst_zero x) 
                                      abst_zero)))) ->
  abst_zero_right_absorbes:(dk_logic.eP 
                              (dk_logic.forall abst_T 
                                 (x:(cc.eT abst_T) =>
                                  dk_logic.ebP 
                                    (abst_equal (abst_mult x abst_zero) 
                                       abst_zero)))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.and 
          (dk_logic.ebP (abst_equal (abst_mult x abst_zero) abst_zero)) 
          (dk_logic.ebP (abst_equal (abst_mult abst_zero x) abst_zero))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_zero_left_absorbes:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.ebP (abst_equal (abst_mult abst_zero x) abst_zero)))) =>
  abst_zero_right_absorbes:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.ebP (abst_equal (abst_mult x abst_zero) abst_zero)))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.and 
          (zen.triangle 
             (focal.is_true 
                (abst_equal (abst_mult v_Vzb abst_zero) abst_zero))) 
          (zen.triangle 
             (focal.is_true 
                (abst_equal (abst_mult abst_zero v_Vzb) abst_zero))))) 
    (v_Vac:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.and 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult v_Vzb abst_zero) abst_zero))) 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult abst_zero v_Vzb) abst_zero))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.and 
          (zen.triangle 
             (focal.is_true 
                (abst_equal (abst_mult v_Vzb abst_zero) abst_zero))) 
          (zen.triangle 
             (focal.is_true 
                (abst_equal (abst_mult abst_zero v_Vzb) abst_zero)))) 
       (v_Vbc:(zen.term abst_T) =>
        v_Vcc:
        (zen.proof 
           (zen.not 
              (zen.and 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult v_Vbc abst_zero) abst_zero))) 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult abst_zero v_Vbc) abst_zero)))))) =>
        zen.Rnotand 
          (zen.triangle 
             (focal.is_true 
                (abst_equal (abst_mult v_Vbc abst_zero) abst_zero))) 
          (zen.triangle 
             (focal.is_true 
                (abst_equal (abst_mult abst_zero v_Vbc) abst_zero))) 
          (v_Vdc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult v_Vbc abst_zero) abst_zero))))) =>
           zen.Rall abst_T 
             (v_Vzb:(zen.term abst_T) =>
              zen.triangle 
                (focal.is_true 
                   (abst_equal (abst_mult v_Vzb abst_zero) abst_zero))) 
             v_Vbc 
             (v_Vec:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult v_Vbc abst_zero) abst_zero)))) =>
              zen.Raxiom 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_mult v_Vbc abst_zero) abst_zero))) 
                v_Vec v_Vdc) abst_zero_right_absorbes) 
          (v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult abst_zero v_Vbc) abst_zero))))) =>
           zen.Rall abst_T 
             (v_Vzb:(zen.term abst_T) =>
              zen.triangle 
                (focal.is_true 
                   (abst_equal (abst_mult abst_zero v_Vzb) abst_zero))) 
             v_Vbc 
             (v_Vgc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult abst_zero v_Vbc) abst_zero)))) =>
              zen.Raxiom 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_mult abst_zero v_Vbc) abst_zero))) 
                v_Vgc v_Vfc) abst_zero_left_absorbes) v_Vcc) v_Vac).

def Commutative_monoid_with_absorbant__zero_right_absorbes :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_mult_commutes:(dk_logic.eP 
                        (dk_logic.forall abst_T 
                           (x:(cc.eT abst_T) =>
                            dk_logic.forall abst_T 
                              (y:(cc.eT abst_T) =>
                               dk_logic.ebP 
                                 (abst_equal (abst_mult x y) (abst_mult y x)))))) ->
  abst_zero_left_absorbes:(dk_logic.eP 
                             (dk_logic.forall abst_T 
                                (x:(cc.eT abst_T) =>
                                 dk_logic.ebP 
                                   (abst_equal (abst_mult abst_zero x) 
                                      abst_zero)))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.ebP (abst_equal (abst_mult x abst_zero) abst_zero)))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_mult_commutes:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.ebP (abst_equal (abst_mult x y) (abst_mult y x)))))) =>
  abst_zero_left_absorbes:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.ebP (abst_equal (abst_mult abst_zero x) abst_zero)))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vkc:(zen.term abst_T) =>
        zen.triangle 
          (focal.is_true (abst_equal (abst_mult v_Vkc abst_zero) abst_zero)))) 
    (v_Vlc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vkc:(zen.term abst_T) =>
               zen.triangle 
                 (focal.is_true 
                    (abst_equal (abst_mult v_Vkc abst_zero) abst_zero)))))) =>
     zen.Rnotall abst_T 
       (v_Vkc:(zen.term abst_T) =>
        zen.triangle 
          (focal.is_true (abst_equal (abst_mult v_Vkc abst_zero) abst_zero))) 
       (v_Vmc:(zen.term abst_T) =>
        v_Vnc:
        (zen.proof 
           (zen.not 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal (abst_mult v_Vmc abst_zero) abst_zero))))) =>
        zen.Rall abst_T 
          (v_Vkc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Voc:(zen.term abst_T) =>
              zen.triangle 
                (focal.is_true 
                   (abst_equal (abst_mult v_Vkc v_Voc) 
                      (abst_mult v_Voc v_Vkc))))) v_Vmc 
          (v_Vpc:
           (zen.proof 
              (zen.forall abst_T 
                 (v_Voc:(zen.term abst_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult v_Vmc v_Voc) 
                          (abst_mult v_Voc v_Vmc)))))) =>
           zen.Rall abst_T 
             (v_Vkc:(zen.term abst_T) =>
              zen.triangle 
                (focal.is_true 
                   (abst_equal (abst_mult abst_zero v_Vkc) abst_zero))) 
             v_Vmc 
             (v_Vqc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult abst_zero v_Vmc) abst_zero)))) =>
              zen.Rcut 
                (zen.and 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T (abst_mult v_Vmc abst_zero) 
                            (abst_mult abst_zero v_Vmc)))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult v_Vmc abst_zero) 
                               (abst_mult abst_zero v_Vmc)))))) 
                (v_Vrc:
                 (zen.proof 
                    (zen.and 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T (abst_mult v_Vmc abst_zero) 
                                (abst_mult abst_zero v_Vmc)))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult v_Vmc abst_zero) 
                                   (abst_mult abst_zero v_Vmc))))))) =>
                 zen.Rand 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T (abst_mult v_Vmc abst_zero) 
                            (abst_mult abst_zero v_Vmc)))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult v_Vmc abst_zero) 
                               (abst_mult abst_zero v_Vmc))))) 
                   (v_Vsc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T (abst_mult v_Vmc abst_zero) 
                                (abst_mult abst_zero v_Vmc))))) =>
                    v_Vtc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult v_Vmc abst_zero) 
                                   (abst_mult abst_zero v_Vmc)))))) =>
                    zen.Rall abst_T 
                      (v_Voc:(zen.term abst_T) =>
                       zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult v_Vmc v_Voc) 
                               (abst_mult v_Voc v_Vmc)))) abst_zero 
                      (v_Vuc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult v_Vmc abst_zero) 
                                   (abst_mult abst_zero v_Vmc))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_mult v_Vmc abst_zero) 
                                  (abst_mult abst_zero v_Vmc)))) v_Vuc v_Vtc) 
                      v_Vpc) v_Vrc) 
                (v_Vvc:
                 (zen.proof 
                    (zen.not 
                       (zen.and 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal abst_T 
                                   (abst_mult v_Vmc abst_zero) 
                                   (abst_mult abst_zero v_Vmc)))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_mult v_Vmc abst_zero) 
                                      (abst_mult abst_zero v_Vmc)))))))) =>
                 zen.Rcut 
                   (zen.triangle (zen.equal abst_T abst_zero abst_zero)) 
                   (v_Vwc:
                    (zen.proof 
                       (zen.triangle (zen.equal abst_T abst_zero abst_zero))) =>
                    zen.Rsubst basics.bool__t 
                      (v_Vxc:(zen.term basics.bool__t) =>
                       zen.triangle (focal.is_true v_Vxc)) 
                      (abst_equal (abst_mult abst_zero v_Vmc) abst_zero) 
                      (abst_equal (abst_mult v_Vmc abst_zero) abst_zero) 
                      (v_Vyc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (abst_equal (abst_mult abst_zero v_Vmc) 
                                      abst_zero) 
                                   (abst_equal (abst_mult v_Vmc abst_zero) 
                                      abst_zero))))) =>
                       zen.Rsubst abst_T 
                         (v_Vzc:(zen.term abst_T) =>
                          zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (abst_equal v_Vzc abst_zero) 
                                  (abst_equal (abst_mult v_Vmc abst_zero) 
                                     abst_zero)))) 
                         (abst_mult abst_zero v_Vmc) 
                         (abst_mult v_Vmc abst_zero) 
                         (v_Vad:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_mult abst_zero v_Vmc) 
                                      (abst_mult v_Vmc abst_zero))))) =>
                          zen.Rnotand 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_mult v_Vmc abst_zero) 
                                     (abst_mult abst_zero v_Vmc)))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_mult v_Vmc abst_zero) 
                                        (abst_mult abst_zero v_Vmc))))) 
                            (v_Vbd:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_mult v_Vmc abst_zero) 
                                            (abst_mult abst_zero v_Vmc)))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_mult v_Vmc abst_zero) 
                                     (abst_mult abst_zero v_Vmc))) 
                               (v_Vcd:
                                (zen.proof 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_mult v_Vmc abst_zero) 
                                         (abst_mult abst_zero v_Vmc)))) =>
                                zen.Rcut 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_mult v_Vmc abst_zero) 
                                        (abst_mult v_Vmc abst_zero))) 
                                  (v_Vdd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_mult v_Vmc abst_zero) 
                                            (abst_mult v_Vmc abst_zero)))) =>
                                   zen.Rsubst abst_T 
                                     (v_Ved:(zen.term abst_T) =>
                                      zen.triangle 
                                        (zen.equal abst_T v_Ved 
                                           (abst_mult v_Vmc abst_zero))) 
                                     (abst_mult v_Vmc abst_zero) 
                                     (abst_mult abst_zero v_Vmc) 
                                     (v_Vsc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_mult v_Vmc abst_zero) 
                                                  (abst_mult abst_zero v_Vmc))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult v_Vmc abst_zero) 
                                              (abst_mult abst_zero v_Vmc))) 
                                        v_Vcd v_Vsc) 
                                     (v_Vfd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_mult abst_zero v_Vmc) 
                                               (abst_mult v_Vmc abst_zero)))) =>
                                      zen.Rsubst abst_T 
                                        (v_Vgd:(zen.term abst_T) =>
                                         zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult abst_zero v_Vmc) 
                                              v_Vgd)) 
                                        (abst_mult v_Vmc abst_zero) 
                                        (abst_mult v_Vmc abst_zero) 
                                        (v_Vhd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_mult v_Vmc 
                                                        abst_zero) 
                                                     (abst_mult v_Vmc 
                                                        abst_zero))))) =>
                                         zen.Rnoteq abst_T 
                                           (abst_mult v_Vmc abst_zero) v_Vhd) 
                                        (v_Vfd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_mult abst_zero v_Vmc) 
                                                  (abst_mult v_Vmc abst_zero)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_mult abst_zero v_Vmc) 
                                                 (abst_mult v_Vmc abst_zero))) 
                                           v_Vfd v_Vad) v_Vfd) v_Vdd) 
                                  (v_Vhd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_mult v_Vmc abst_zero) 
                                               (abst_mult v_Vmc abst_zero))))) =>
                                   zen.Rnoteq abst_T 
                                     (abst_mult v_Vmc abst_zero) v_Vhd)) 
                               v_Vbd) 
                            (v_Vid:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult v_Vmc abst_zero) 
                                               (abst_mult abst_zero v_Vmc))))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_mult v_Vmc abst_zero) 
                                        (abst_mult abst_zero v_Vmc)))) 
                               (v_Vuc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_mult v_Vmc abst_zero) 
                                            (abst_mult abst_zero v_Vmc))))) =>
                                zen.Rall abst_T 
                                  (v_Vkc:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Voc:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vjd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vkc v_Voc))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Voc v_Vjd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vkc v_Vjd))))))) 
                                  (abst_mult v_Vmc abst_zero) 
                                  (v_Vkd:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Voc:(zen.term abst_T) =>
                                          zen.forall abst_T 
                                            (v_Vjd:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult v_Vmc 
                                                           abst_zero) v_Voc))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Voc 
                                                           v_Vjd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult v_Vmc 
                                                              abst_zero) 
                                                           v_Vjd)))))))) =>
                                   zen.Rall abst_T 
                                     (v_Voc:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vjd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult v_Vmc 
                                                       abst_zero) v_Voc))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Voc v_Vjd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult v_Vmc 
                                                          abst_zero) v_Vjd)))))) 
                                     (abst_mult abst_zero v_Vmc) 
                                     (v_Vld:
                                      (zen.proof 
                                         (zen.forall abst_T 
                                            (v_Vjd:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult v_Vmc 
                                                           abst_zero) 
                                                        (abst_mult abst_zero 
                                                           v_Vmc)))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              abst_zero v_Vmc) 
                                                           v_Vjd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult v_Vmc 
                                                              abst_zero) 
                                                           v_Vjd))))))) =>
                                      zen.Rall abst_T 
                                        (v_Vjd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult v_Vmc 
                                                       abst_zero) 
                                                    (abst_mult abst_zero 
                                                       v_Vmc)))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult abst_zero 
                                                          v_Vmc) v_Vjd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult v_Vmc 
                                                          abst_zero) v_Vjd))))) 
                                        abst_zero 
                                        (v_Vmd:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult v_Vmc 
                                                           abst_zero) 
                                                        (abst_mult abst_zero 
                                                           v_Vmc)))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              abst_zero v_Vmc) 
                                                           abst_zero))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult v_Vmc 
                                                              abst_zero) 
                                                           abst_zero)))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult v_Vmc 
                                                       abst_zero) 
                                                    (abst_mult abst_zero 
                                                       v_Vmc)))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult abst_zero 
                                                          v_Vmc) abst_zero))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult v_Vmc 
                                                          abst_zero) 
                                                       abst_zero)))) 
                                           (v_Vtc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult v_Vmc 
                                                              abst_zero) 
                                                           (abst_mult 
                                                              abst_zero v_Vmc)))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult v_Vmc 
                                                          abst_zero) 
                                                       (abst_mult abst_zero 
                                                          v_Vmc)))) v_Vuc 
                                              v_Vtc) 
                                           (v_Vnd:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              abst_zero v_Vmc) 
                                                           abst_zero))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult v_Vmc 
                                                              abst_zero) 
                                                           abst_zero))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult abst_zero 
                                                          v_Vmc) abst_zero))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult v_Vmc 
                                                          abst_zero) 
                                                       abst_zero))) 
                                              (v_Vod:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 abst_zero 
                                                                 v_Vmc) 
                                                              abst_zero))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             abst_zero v_Vmc) 
                                                          abst_zero))) v_Vqc 
                                                 v_Vod) 
                                              (v_Vpd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult v_Vmc 
                                                              abst_zero) 
                                                           abst_zero)))) =>
                                               zen.Rsubst basics.bool__t 
                                                 (v_Vxc:
                                                  (zen.term basics.bool__t) =>
                                                  zen.triangle 
                                                    (focal.is_true v_Vxc)) 
                                                 (abst_equal 
                                                    (abst_mult v_Vmc 
                                                       abst_zero) abst_zero) 
                                                 (abst_equal 
                                                    (abst_mult v_Vmc 
                                                       abst_zero) abst_zero) 
                                                 (v_Vqd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                 abst_zero) 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                 abst_zero))))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Vzc:
                                                     (zen.term abst_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                v_Vzc 
                                                                abst_zero) 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   v_Vmc 
                                                                   abst_zero) 
                                                                abst_zero)))) 
                                                    (abst_mult v_Vmc 
                                                       abst_zero) 
                                                    (abst_mult v_Vmc 
                                                       abst_zero) 
                                                    (v_Vhd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                 (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero))))) =>
                                                     zen.Rnoteq abst_T 
                                                       (abst_mult v_Vmc 
                                                          abst_zero) v_Vhd) 
                                                    (v_Vqd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    abst_zero))))) =>
                                                     zen.Rsubst abst_T 
                                                       (v_Vrd:
                                                        (zen.term abst_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                   v_Vrd) 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                   abst_zero)))) 
                                                       abst_zero abst_zero 
                                                       (v_Vsd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    abst_zero 
                                                                    abst_zero)))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T 
                                                                abst_zero 
                                                                abst_zero)) 
                                                          v_Vwc v_Vsd) 
                                                       (v_Vqd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    abst_zero))))) =>
                                                        zen.Rnoteq 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                v_Vmc 
                                                                abst_zero) 
                                                             abst_zero) v_Vqd) 
                                                       v_Vqd) v_Vqd) 
                                                 (v_Vpd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 v_Vmc 
                                                                 abst_zero) 
                                                              abst_zero)))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                v_Vmc 
                                                                abst_zero) 
                                                             abst_zero))) 
                                                    v_Vpd v_Vnc) v_Vpd) v_Vnd) 
                                           v_Vmd) v_Vld) v_Vkd) 
                                  abst_equal_transitive) v_Vid) v_Vvc) 
                         (v_Vqd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_equal 
                                         (abst_mult v_Vmc abst_zero) 
                                         abst_zero) 
                                      (abst_equal 
                                         (abst_mult v_Vmc abst_zero) 
                                         abst_zero))))) =>
                          zen.Rsubst abst_T 
                            (v_Vrd:(zen.term abst_T) =>
                             zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (abst_equal (abst_mult v_Vmc abst_zero) 
                                        v_Vrd) 
                                     (abst_equal (abst_mult v_Vmc abst_zero) 
                                        abst_zero)))) abst_zero abst_zero 
                            (v_Vsd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T abst_zero abst_zero)))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (zen.equal abst_T abst_zero abst_zero)) 
                               v_Vwc v_Vsd) 
                            (v_Vqd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (abst_equal 
                                            (abst_mult v_Vmc abst_zero) 
                                            abst_zero) 
                                         (abst_equal 
                                            (abst_mult v_Vmc abst_zero) 
                                            abst_zero))))) =>
                             zen.Rnoteq basics.bool__t 
                               (abst_equal (abst_mult v_Vmc abst_zero) 
                                  abst_zero) v_Vqd) v_Vqd) v_Vyc) 
                      (v_Vpd:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult v_Vmc abst_zero) 
                                   abst_zero)))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_mult v_Vmc abst_zero) 
                                  abst_zero))) v_Vpd v_Vnc) v_Vqc) 
                   (v_Vsd:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T abst_zero abst_zero)))) =>
                    zen.Rcut 
                      (zen.triangle 
                         (focal.is_true (abst_equal abst_zero abst_zero))) 
                      (v_Vtd:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_equal abst_zero abst_zero)))) =>
                       zen.Rall abst_T 
                         (v_Vkc:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Voc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vjd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vkc v_Voc))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Voc v_Vjd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vkc v_Vjd))))))) 
                         (abst_mult abst_zero v_Vmc) 
                         (v_Vud:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Voc:(zen.term abst_T) =>
                                 zen.forall abst_T 
                                   (v_Vjd:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult abst_zero v_Vmc) 
                                               v_Voc))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Voc v_Vjd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult abst_zero v_Vmc) 
                                                  v_Vjd)))))))) =>
                          zen.Rall abst_T 
                            (v_Voc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vjd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult abst_zero v_Vmc) v_Voc))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Voc v_Vjd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult abst_zero v_Vmc) 
                                              v_Vjd)))))) abst_zero 
                            (v_Vvd:
                             (zen.proof 
                                (zen.forall abst_T 
                                   (v_Vjd:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult abst_zero v_Vmc) 
                                               abst_zero))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal abst_zero v_Vjd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult abst_zero v_Vmc) 
                                                  v_Vjd))))))) =>
                             zen.Rall abst_T 
                               (v_Vjd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult abst_zero v_Vmc) 
                                           abst_zero))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal abst_zero v_Vjd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult abst_zero v_Vmc) 
                                              v_Vjd))))) abst_zero 
                               (v_Vwd:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult abst_zero v_Vmc) 
                                               abst_zero))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal abst_zero 
                                                  abst_zero))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult abst_zero v_Vmc) 
                                                  abst_zero)))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult abst_zero v_Vmc) 
                                           abst_zero))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal abst_zero abst_zero))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult abst_zero v_Vmc) 
                                              abst_zero)))) 
                                  (v_Vod:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult abst_zero v_Vmc) 
                                                  abst_zero))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult abst_zero v_Vmc) 
                                              abst_zero))) v_Vqc v_Vod) 
                                  (v_Vxd:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal abst_zero 
                                                  abst_zero))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult abst_zero v_Vmc) 
                                                  abst_zero))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal abst_zero abst_zero))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult abst_zero v_Vmc) 
                                              abst_zero))) 
                                     (v_Vyd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal abst_zero 
                                                     abst_zero))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal abst_zero abst_zero))) 
                                        v_Vtd v_Vyd) 
                                     (v_Vqc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult abst_zero v_Vmc) 
                                                  abst_zero)))) =>
                                      zen.Rsubst basics.bool__t 
                                        (v_Vxc:(zen.term basics.bool__t) =>
                                         zen.triangle (focal.is_true v_Vxc)) 
                                        (abst_equal 
                                           (abst_mult abst_zero v_Vmc) 
                                           abst_zero) 
                                        (abst_equal 
                                           (abst_mult v_Vmc abst_zero) 
                                           abst_zero) 
                                        (v_Vyc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal 
                                                        (abst_mult abst_zero 
                                                           v_Vmc) abst_zero) 
                                                     (abst_equal 
                                                        (abst_mult v_Vmc 
                                                           abst_zero) 
                                                        abst_zero))))) =>
                                         zen.Rsubst abst_T 
                                           (v_Vzc:(zen.term abst_T) =>
                                            zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal v_Vzc 
                                                       abst_zero) 
                                                    (abst_equal 
                                                       (abst_mult v_Vmc 
                                                          abst_zero) 
                                                       abst_zero)))) 
                                           (abst_mult abst_zero v_Vmc) 
                                           (abst_mult v_Vmc abst_zero) 
                                           (v_Vad:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_mult abst_zero 
                                                           v_Vmc) 
                                                        (abst_mult v_Vmc 
                                                           abst_zero))))) =>
                                            zen.Rnotand 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_mult v_Vmc 
                                                          abst_zero) 
                                                       (abst_mult abst_zero 
                                                          v_Vmc)))) 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult v_Vmc 
                                                             abst_zero) 
                                                          (abst_mult 
                                                             abst_zero v_Vmc))))) 
                                              (v_Vbd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_mult 
                                                                 v_Vmc 
                                                                 abst_zero) 
                                                              (abst_mult 
                                                                 abst_zero 
                                                                 v_Vmc)))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_mult v_Vmc 
                                                          abst_zero) 
                                                       (abst_mult abst_zero 
                                                          v_Vmc))) 
                                                 (v_Vcd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_mult v_Vmc 
                                                              abst_zero) 
                                                           (abst_mult 
                                                              abst_zero v_Vmc)))) =>
                                                  zen.Reqsym abst_T 
                                                    (abst_mult v_Vmc 
                                                       abst_zero) 
                                                    (abst_mult abst_zero 
                                                       v_Vmc) v_Vcd v_Vad) 
                                                 v_Vbd) 
                                              (v_Vid:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                 (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult v_Vmc 
                                                             abst_zero) 
                                                          (abst_mult 
                                                             abst_zero v_Vmc)))) 
                                                 (v_Vuc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 v_Vmc 
                                                                 abst_zero) 
                                                              (abst_mult 
                                                                 abst_zero 
                                                                 v_Vmc))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vkc:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Voc:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vjd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vkc 
                                                                    v_Voc))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vjd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkc 
                                                                    v_Vjd))))))) 
                                                    (abst_mult v_Vmc 
                                                       abst_zero) 
                                                    (v_Vkd:
                                                     (zen.proof 
                                                        (zen.forall abst_T 
                                                           (v_Voc:
                                                            (zen.term abst_T) =>
                                                            zen.forall 
                                                              abst_T 
                                                              (v_Vjd:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    v_Voc))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vjd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    v_Vjd)))))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Voc:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vjd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    v_Voc))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vjd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    v_Vjd)))))) 
                                                       (abst_mult abst_zero 
                                                          v_Vmc) 
                                                       (v_Vld:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              abst_T 
                                                              (v_Vjd:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc)))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc) 
                                                                    v_Vjd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    v_Vjd))))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vjd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc)))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc) 
                                                                    v_Vjd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    v_Vjd))))) 
                                                          abst_zero 
                                                          (v_Vmd:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc)))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc) 
                                                                    abst_zero))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    abst_zero)))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc)))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc) 
                                                                    abst_zero))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    abst_zero)))) 
                                                             (v_Vtc:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc)))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc)))) 
                                                                v_Vuc v_Vtc) 
                                                             (v_Vnd:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc) 
                                                                    abst_zero))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    abst_zero))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc) 
                                                                    abst_zero))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    abst_zero))) 
                                                                (v_Vod:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc) 
                                                                    abst_zero))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc) 
                                                                    abst_zero))) 
                                                                   v_Vqc 
                                                                   v_Vod) 
                                                                (v_Vpd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    abst_zero)))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    abst_zero))) 
                                                                   v_Vpd 
                                                                   v_Vnc) 
                                                                v_Vnd) v_Vmd) 
                                                          v_Vld) v_Vkd) 
                                                    abst_equal_transitive) 
                                                 v_Vid) v_Vvc) 
                                           (v_Vqd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_mult v_Vmc 
                                                              abst_zero) 
                                                           abst_zero) 
                                                        (abst_equal 
                                                           (abst_mult v_Vmc 
                                                              abst_zero) 
                                                           abst_zero))))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vrd:(zen.term abst_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_mult v_Vmc 
                                                             abst_zero) v_Vrd) 
                                                       (abst_equal 
                                                          (abst_mult v_Vmc 
                                                             abst_zero) 
                                                          abst_zero)))) 
                                              abst_zero abst_zero 
                                              (v_Vsd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           abst_zero 
                                                           abst_zero)))) =>
                                               zen.Rnoteq abst_T abst_zero 
                                                 v_Vsd) 
                                              (v_Vqd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 v_Vmc 
                                                                 abst_zero) 
                                                              abst_zero) 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 v_Vmc 
                                                                 abst_zero) 
                                                              abst_zero))))) =>
                                               zen.Rnoteq basics.bool__t 
                                                 (abst_equal 
                                                    (abst_mult v_Vmc 
                                                       abst_zero) abst_zero) 
                                                 v_Vqd) v_Vqd) v_Vyc) 
                                        (v_Vpd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult v_Vmc 
                                                        abst_zero) abst_zero)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult v_Vmc 
                                                       abst_zero) abst_zero))) 
                                           v_Vpd v_Vnc) v_Vqc) v_Vxd) v_Vwd) 
                               v_Vvd) v_Vud) abst_equal_transitive) 
                      (v_Vyd:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal abst_zero abst_zero))))) =>
                       zen.Rnoteq abst_T abst_zero v_Vsd)))) 
             abst_zero_left_absorbes) abst_mult_commutes) v_Vlc).

def Commutative_monoid_with_divisibility__divides_reflexive :
  abst_T:cc.uT ->
  abst_divides:((cc.eT abst_T) -> (cc.eT abst_T) -> dk_logic.Prop) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_divides_extends_equal:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.imp 
                                         (dk_logic.ebP (abst_equal x y)) 
                                         (abst_divides x y))))) ->
  abst_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.ebP (abst_equal x x)))) ->
  dk_logic.eP (dk_logic.forall abst_T (x:(cc.eT abst_T) => abst_divides x x))
  :=
  abst_T:cc.uT =>
  abst_divides:((cc.eT abst_T) -> (cc.eT abst_T) -> dk_logic.Prop) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_divides_extends_equal:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) (abst_divides x y))))) =>
  abst_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) => dk_logic.ebP (abst_equal x x)))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) => zen.triangle (abst_divides v_Vzb v_Vzb))) 
    (v_Vac:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.triangle (abst_divides v_Vzb v_Vzb))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) => zen.triangle (abst_divides v_Vzb v_Vzb)) 
       (v_Vbc:(zen.term abst_T) =>
        v_Vcc:
        (zen.proof (zen.not (zen.triangle (abst_divides v_Vbc v_Vbc)))) =>
        zen.Rall abst_T 
          (v_Vzb:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vdc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vdc))) 
                (zen.triangle (abst_divides v_Vzb v_Vdc)))) v_Vbc 
          (v_Vec:
           (zen.proof 
              (zen.forall abst_T 
                 (v_Vdc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vdc))) 
                    (zen.triangle (abst_divides v_Vbc v_Vdc))))) =>
           zen.Rall abst_T 
             (v_Vdc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vdc))) 
                (zen.triangle (abst_divides v_Vbc v_Vdc))) v_Vbc 
             (v_Vfc:
              (zen.proof 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vbc))) 
                    (zen.triangle (abst_divides v_Vbc v_Vbc)))) =>
              zen.Rimply 
                (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vbc))) 
                (zen.triangle (abst_divides v_Vbc v_Vbc)) 
                (v_Vgc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vbc))))) =>
                 zen.Rall abst_T 
                   (v_Vzb:(zen.term abst_T) =>
                    zen.triangle (focal.is_true (abst_equal v_Vzb v_Vzb))) 
                   v_Vbc 
                   (v_Vhc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vbc)))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vbc))) 
                      v_Vhc v_Vgc) abst_equal_reflexive) 
                (v_Vic:
                 (zen.proof (zen.triangle (abst_divides v_Vbc v_Vbc))) =>
                 zen.Raxiom (zen.triangle (abst_divides v_Vbc v_Vbc)) v_Vic 
                   v_Vcc) v_Vfc) v_Vec) abst_divides_extends_equal) v_Vac).

def Commutative_monoid_with_divisibility__one_is_minimal :
  abst_T:cc.uT ->
  abst_divides:((cc.eT abst_T) -> (cc.eT abst_T) -> dk_logic.Prop) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_one:(cc.eT abst_T) ->
  abst_divides_extends_equal:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.imp 
                                         (dk_logic.ebP (abst_equal x y)) 
                                         (abst_divides x y))))) ->
  abst_divides_reverses_mult:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.and 
                                         (abst_divides x (abst_mult x y)) 
                                         (abst_divides y (abst_mult x y)))))) ->
  abst_divides_transitive:(dk_logic.eP 
                             (dk_logic.forall abst_T 
                                (x:(cc.eT abst_T) =>
                                 dk_logic.forall abst_T 
                                   (y:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (z:(cc.eT abst_T) =>
                                       dk_logic.imp (abst_divides x y) 
                                         (dk_logic.imp (abst_divides y z) 
                                            (abst_divides x z))))))) ->
  abst_one_is_neutral:(dk_logic.eP 
                         (dk_logic.forall abst_T 
                            (x:(cc.eT abst_T) =>
                             dk_logic.and 
                               (dk_logic.ebP 
                                  (abst_equal (abst_mult x abst_one) x)) 
                               (dk_logic.ebP 
                                  (abst_equal (abst_mult abst_one x) x))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T (x:(cc.eT abst_T) => abst_divides abst_one x))
  :=
  abst_T:cc.uT =>
  abst_divides:((cc.eT abst_T) -> (cc.eT abst_T) -> dk_logic.Prop) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_one:(cc.eT abst_T) =>
  abst_divides_extends_equal:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) (abst_divides x y))))) =>
  abst_divides_reverses_mult:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.and (abst_divides x (abst_mult x y)) 
              (abst_divides y (abst_mult x y)))))) =>
  abst_divides_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (abst_divides x y) 
                 (dk_logic.imp (abst_divides y z) (abst_divides x z))))))) =>
  abst_one_is_neutral:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.and (dk_logic.ebP (abst_equal (abst_mult x abst_one) x)) 
           (dk_logic.ebP (abst_equal (abst_mult abst_one x) x))))) =>
  (__H_1_LEMMA:(x:(cc.eT abst_T) -> dk_logic.eP (abst_divides abst_one x)) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.triangle (abst_divides abst_one v_Vzb))) 
     (v_Vac:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.triangle (abst_divides abst_one v_Vzb))))) =>
      zen.Raxiom 
        (zen.forall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.triangle (abst_divides abst_one v_Vzb))) __H_1_LEMMA v_Vac)) 
    (x:(cc.eT abst_T) =>
     (__H_1_1_LEMMA:
      (dk_logic.eP (abst_divides abst_one (abst_mult abst_one x))) =>
      (__H_1_3_LEMMA:(dk_logic.eP (abst_divides (abst_mult abst_one x) x)) =>
       zen.nnpp (zen.triangle (abst_divides abst_one x)) 
         (v_Vhc:
          (zen.proof (zen.not (zen.triangle (abst_divides abst_one x)))) =>
          zen.Rcut 
            (zen.and 
               (zen.not (zen.triangle (zen.equal abst_T abst_one abst_one))) 
               (zen.not (zen.triangle (abst_divides abst_one abst_one)))) 
            (v_Vic:
             (zen.proof 
                (zen.and 
                   (zen.not 
                      (zen.triangle (zen.equal abst_T abst_one abst_one))) 
                   (zen.not (zen.triangle (abst_divides abst_one abst_one))))) =>
             zen.Rand 
               (zen.not (zen.triangle (zen.equal abst_T abst_one abst_one))) 
               (zen.not (zen.triangle (abst_divides abst_one abst_one))) 
               (v_Vjc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle (zen.equal abst_T abst_one abst_one)))) =>
                v_Vkc:
                (zen.proof 
                   (zen.not (zen.triangle (abst_divides abst_one abst_one)))) =>
                zen.Rnoteq abst_T abst_one v_Vjc) v_Vic) 
            (v_Vlc:
             (zen.proof 
                (zen.not 
                   (zen.and 
                      (zen.not 
                         (zen.triangle (zen.equal abst_T abst_one abst_one))) 
                      (zen.not 
                         (zen.triangle (abst_divides abst_one abst_one)))))) =>
             zen.Rcut 
               (zen.triangle (zen.equal abst_T (abst_mult abst_one x) x)) 
               (v_Vmc:
                (zen.proof 
                   (zen.triangle (zen.equal abst_T (abst_mult abst_one x) x))) =>
                zen.Rsubst abst_T 
                  (v_Vnc:(zen.term abst_T) =>
                   zen.triangle (abst_divides v_Vnc (abst_mult abst_one x))) 
                  abst_one abst_one 
                  (v_Vjc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle (zen.equal abst_T abst_one abst_one)))) =>
                   zen.Rnotand 
                     (zen.not 
                        (zen.triangle (zen.equal abst_T abst_one abst_one))) 
                     (zen.not (zen.triangle (abst_divides abst_one abst_one))) 
                     (v_Voc:
                      (zen.proof 
                         (zen.not 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal abst_T abst_one abst_one))))) =>
                      zen.Rnotnot 
                        (zen.triangle (zen.equal abst_T abst_one abst_one)) 
                        (v_Vpc:
                         (zen.proof 
                            (zen.triangle 
                               (zen.equal abst_T abst_one abst_one))) =>
                         zen.Rcut 
                           (zen.triangle (zen.equal abst_T abst_one abst_one)) 
                           (v_Vpc:
                            (zen.proof 
                               (zen.triangle 
                                  (zen.equal abst_T abst_one abst_one))) =>
                            zen.Rsubst abst_T 
                              (v_Vqc:(zen.term abst_T) =>
                               zen.triangle (zen.equal abst_T v_Vqc abst_one)) 
                              abst_one abst_one 
                              (v_Vjc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal abst_T abst_one abst_one)))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (zen.equal abst_T abst_one abst_one)) 
                                 v_Vpc v_Vjc) 
                              (v_Vpc:
                               (zen.proof 
                                  (zen.triangle 
                                     (zen.equal abst_T abst_one abst_one))) =>
                               zen.Rsubst abst_T 
                                 (v_Vrc:(zen.term abst_T) =>
                                  zen.triangle 
                                    (zen.equal abst_T abst_one v_Vrc)) 
                                 abst_one abst_one 
                                 (v_Vjc:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal abst_T abst_one 
                                              abst_one)))) =>
                                  zen.Rnoteq abst_T abst_one v_Vjc) 
                                 (v_Vpc:
                                  (zen.proof 
                                     (zen.triangle 
                                        (zen.equal abst_T abst_one abst_one))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (zen.equal abst_T abst_one abst_one)) 
                                    v_Vpc v_Vjc) v_Vpc) v_Vpc) 
                           (v_Vjc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal abst_T abst_one abst_one)))) =>
                            zen.Rnoteq abst_T abst_one v_Vjc)) v_Voc) 
                     (v_Vsc:
                      (zen.proof 
                         (zen.not 
                            (zen.not 
                               (zen.triangle (abst_divides abst_one abst_one))))) =>
                      zen.Rnotnot 
                        (zen.triangle (abst_divides abst_one abst_one)) 
                        (v_Vtc:
                         (zen.proof 
                            (zen.triangle (abst_divides abst_one abst_one))) =>
                         zen.Rall abst_T 
                           (v_Vuc:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vvc:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vwc:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle (abst_divides v_Vuc v_Vvc)) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (abst_divides v_Vvc v_Vwc)) 
                                       (zen.triangle 
                                          (abst_divides v_Vuc v_Vwc)))))) 
                           abst_one 
                           (v_Vxc:
                            (zen.proof 
                               (zen.forall abst_T 
                                  (v_Vvc:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vwc:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (abst_divides abst_one v_Vvc)) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (abst_divides v_Vvc v_Vwc)) 
                                           (zen.triangle 
                                              (abst_divides abst_one v_Vwc))))))) =>
                            zen.Rall abst_T 
                              (v_Vvc:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vwc:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (abst_divides abst_one v_Vvc)) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (abst_divides v_Vvc v_Vwc)) 
                                       (zen.triangle 
                                          (abst_divides abst_one v_Vwc))))) 
                              abst_one 
                              (v_Vyc:
                               (zen.proof 
                                  (zen.forall abst_T 
                                     (v_Vwc:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (abst_divides abst_one abst_one)) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (abst_divides abst_one v_Vwc)) 
                                           (zen.triangle 
                                              (abst_divides abst_one v_Vwc)))))) =>
                               zen.Rall abst_T 
                                 (v_Vwc:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (abst_divides abst_one abst_one)) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (abst_divides abst_one v_Vwc)) 
                                       (zen.triangle 
                                          (abst_divides abst_one v_Vwc)))) 
                                 (abst_mult abst_one x) 
                                 (v_Vzc:
                                  (zen.proof 
                                     (zen.imp 
                                        (zen.triangle 
                                           (abst_divides abst_one abst_one)) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (abst_divides abst_one 
                                                 (abst_mult abst_one x))) 
                                           (zen.triangle 
                                              (abst_divides abst_one 
                                                 (abst_mult abst_one x)))))) =>
                                  zen.Rimply 
                                    (zen.triangle 
                                       (abst_divides abst_one abst_one)) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (abst_divides abst_one 
                                             (abst_mult abst_one x))) 
                                       (zen.triangle 
                                          (abst_divides abst_one 
                                             (abst_mult abst_one x)))) 
                                    (v_Vkc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (abst_divides abst_one abst_one)))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (abst_divides abst_one abst_one)) 
                                       v_Vtc v_Vkc) 
                                    (v_Vad:
                                     (zen.proof 
                                        (zen.imp 
                                           (zen.triangle 
                                              (abst_divides abst_one 
                                                 (abst_mult abst_one x))) 
                                           (zen.triangle 
                                              (abst_divides abst_one 
                                                 (abst_mult abst_one x))))) =>
                                     zen.Rimply 
                                       (zen.triangle 
                                          (abst_divides abst_one 
                                             (abst_mult abst_one x))) 
                                       (zen.triangle 
                                          (abst_divides abst_one 
                                             (abst_mult abst_one x))) 
                                       (v_Vbd:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (abst_divides abst_one 
                                                    (abst_mult abst_one x))))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (abst_divides abst_one 
                                                (abst_mult abst_one x))) 
                                          __H_1_1_LEMMA v_Vbd) 
                                       (__H_1_1_LEMMA:
                                        (zen.proof 
                                           (zen.triangle 
                                              (abst_divides abst_one 
                                                 (abst_mult abst_one x)))) =>
                                        zen.Rsubst abst_T 
                                          (v_Vnc:(zen.term abst_T) =>
                                           zen.triangle 
                                             (abst_divides v_Vnc 
                                                (abst_mult abst_one x))) 
                                          abst_one abst_one 
                                          (v_Vjc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       abst_one abst_one)))) =>
                                           zen.Rnoteq abst_T abst_one v_Vjc) 
                                          (__H_1_1_LEMMA:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (abst_divides abst_one 
                                                    (abst_mult abst_one x)))) =>
                                           zen.Rsubst abst_T 
                                             (v_Vcd:(zen.term abst_T) =>
                                              zen.triangle 
                                                (abst_divides abst_one v_Vcd)) 
                                             (abst_mult abst_one x) x 
                                             (v_Vdd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_mult 
                                                             abst_one x) x)))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_mult abst_one x) 
                                                      x)) v_Vmc v_Vdd) 
                                             (v_Ved:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (abst_divides abst_one x))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (abst_divides abst_one x)) 
                                                v_Ved v_Vhc) __H_1_1_LEMMA) 
                                          __H_1_1_LEMMA) v_Vad) v_Vzc) v_Vyc) 
                              v_Vxc) abst_divides_transitive) v_Vsc) v_Vlc) 
                  (__H_1_1_LEMMA:
                   (zen.proof 
                      (zen.triangle 
                         (abst_divides abst_one (abst_mult abst_one x)))) =>
                   zen.Rsubst abst_T 
                     (v_Vcd:(zen.term abst_T) =>
                      zen.triangle (abst_divides abst_one v_Vcd)) 
                     (abst_mult abst_one x) x 
                     (v_Vdd:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T (abst_mult abst_one x) x)))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (zen.equal abst_T (abst_mult abst_one x) x)) 
                        v_Vmc v_Vdd) 
                     (v_Ved:
                      (zen.proof (zen.triangle (abst_divides abst_one x))) =>
                      zen.Raxiom (zen.triangle (abst_divides abst_one x)) 
                        v_Ved v_Vhc) __H_1_1_LEMMA) __H_1_1_LEMMA) 
               (v_Vdd:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T (abst_mult abst_one x) x)))) =>
                zen.Rcut 
                  (zen.triangle (abst_divides (abst_mult abst_one x) x)) 
                  (__H_1_3_LEMMA:
                   (zen.proof 
                      (zen.triangle (abst_divides (abst_mult abst_one x) x))) =>
                   zen.Rall abst_T 
                     (v_Vuc:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vvc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vwc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle (abst_divides v_Vuc v_Vvc)) 
                              (zen.imp 
                                 (zen.triangle (abst_divides v_Vvc v_Vwc)) 
                                 (zen.triangle (abst_divides v_Vuc v_Vwc)))))) 
                     abst_one 
                     (v_Vxc:
                      (zen.proof 
                         (zen.forall abst_T 
                            (v_Vvc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vwc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle (abst_divides abst_one v_Vvc)) 
                                  (zen.imp 
                                     (zen.triangle (abst_divides v_Vvc v_Vwc)) 
                                     (zen.triangle 
                                        (abst_divides abst_one v_Vwc))))))) =>
                      zen.Rall abst_T 
                        (v_Vvc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vwc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle (abst_divides abst_one v_Vvc)) 
                              (zen.imp 
                                 (zen.triangle (abst_divides v_Vvc v_Vwc)) 
                                 (zen.triangle (abst_divides abst_one v_Vwc))))) 
                        (abst_mult abst_one x) 
                        (v_Vfd:
                         (zen.proof 
                            (zen.forall abst_T 
                               (v_Vwc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (abst_divides abst_one 
                                        (abst_mult abst_one x))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (abst_divides (abst_mult abst_one x) 
                                           v_Vwc)) 
                                     (zen.triangle 
                                        (abst_divides abst_one v_Vwc)))))) =>
                         zen.Rall abst_T 
                           (v_Vwc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (abst_divides abst_one 
                                    (abst_mult abst_one x))) 
                              (zen.imp 
                                 (zen.triangle 
                                    (abst_divides (abst_mult abst_one x) 
                                       v_Vwc)) 
                                 (zen.triangle (abst_divides abst_one v_Vwc)))) 
                           x 
                           (v_Vgd:
                            (zen.proof 
                               (zen.imp 
                                  (zen.triangle 
                                     (abst_divides abst_one 
                                        (abst_mult abst_one x))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (abst_divides (abst_mult abst_one x) 
                                           x)) 
                                     (zen.triangle (abst_divides abst_one x))))) =>
                            zen.Rimply 
                              (zen.triangle 
                                 (abst_divides abst_one 
                                    (abst_mult abst_one x))) 
                              (zen.imp 
                                 (zen.triangle 
                                    (abst_divides (abst_mult abst_one x) x)) 
                                 (zen.triangle (abst_divides abst_one x))) 
                              (v_Vbd:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (abst_divides abst_one 
                                           (abst_mult abst_one x))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (abst_divides abst_one 
                                       (abst_mult abst_one x))) 
                                 __H_1_1_LEMMA v_Vbd) 
                              (v_Vhd:
                               (zen.proof 
                                  (zen.imp 
                                     (zen.triangle 
                                        (abst_divides (abst_mult abst_one x) 
                                           x)) 
                                     (zen.triangle (abst_divides abst_one x)))) =>
                               zen.Rimply 
                                 (zen.triangle 
                                    (abst_divides (abst_mult abst_one x) x)) 
                                 (zen.triangle (abst_divides abst_one x)) 
                                 (v_Vid:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (abst_divides 
                                              (abst_mult abst_one x) x)))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (abst_divides (abst_mult abst_one x) x)) 
                                    __H_1_3_LEMMA v_Vid) 
                                 (v_Ved:
                                  (zen.proof 
                                     (zen.triangle (abst_divides abst_one x))) =>
                                  zen.Rsubst abst_T 
                                    (v_Vjd:(zen.term abst_T) =>
                                     zen.triangle (abst_divides v_Vjd x)) 
                                    abst_one abst_one 
                                    (v_Vjc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T abst_one 
                                                 abst_one)))) =>
                                     zen.Rnotand 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal abst_T abst_one 
                                                abst_one))) 
                                       (zen.not 
                                          (zen.triangle 
                                             (abst_divides abst_one abst_one))) 
                                       (v_Voc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       abst_one abst_one))))) =>
                                        zen.Rnotnot 
                                          (zen.triangle 
                                             (zen.equal abst_T abst_one 
                                                abst_one)) 
                                          (v_Vpc:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (zen.equal abst_T abst_one 
                                                    abst_one))) =>
                                           zen.Reqsym abst_T abst_one 
                                             abst_one v_Vpc v_Vjc) v_Voc) 
                                       (v_Vsc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (abst_divides abst_one 
                                                       abst_one))))) =>
                                        zen.Rnotnot 
                                          (zen.triangle 
                                             (abst_divides abst_one abst_one)) 
                                          (v_Vtc:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (abst_divides abst_one 
                                                    abst_one))) =>
                                           zen.Rall abst_T 
                                             (v_Vuc:(zen.term abst_T) =>
                                              zen.forall abst_T 
                                                (v_Vvc:(zen.term abst_T) =>
                                                 zen.forall abst_T 
                                                   (v_Vwc:
                                                    (zen.term abst_T) =>
                                                    zen.imp 
                                                      (zen.triangle 
                                                         (abst_divides v_Vuc 
                                                            v_Vvc)) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (abst_divides 
                                                               v_Vvc v_Vwc)) 
                                                         (zen.triangle 
                                                            (abst_divides 
                                                               v_Vuc v_Vwc)))))) 
                                             abst_one 
                                             (v_Vxc:
                                              (zen.proof 
                                                 (zen.forall abst_T 
                                                    (v_Vvc:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vwc:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (abst_divides 
                                                                abst_one 
                                                                v_Vvc)) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   v_Vvc 
                                                                   v_Vwc)) 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   abst_one 
                                                                   v_Vwc))))))) =>
                                              zen.Rall abst_T 
                                                (v_Vvc:(zen.term abst_T) =>
                                                 zen.forall abst_T 
                                                   (v_Vwc:
                                                    (zen.term abst_T) =>
                                                    zen.imp 
                                                      (zen.triangle 
                                                         (abst_divides 
                                                            abst_one v_Vvc)) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (abst_divides 
                                                               v_Vvc v_Vwc)) 
                                                         (zen.triangle 
                                                            (abst_divides 
                                                               abst_one v_Vwc))))) 
                                                abst_one 
                                                (v_Vyc:
                                                 (zen.proof 
                                                    (zen.forall abst_T 
                                                       (v_Vwc:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (abst_divides 
                                                                abst_one 
                                                                abst_one)) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   abst_one 
                                                                   v_Vwc)) 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   abst_one 
                                                                   v_Vwc)))))) =>
                                                 zen.Rall abst_T 
                                                   (v_Vwc:
                                                    (zen.term abst_T) =>
                                                    zen.imp 
                                                      (zen.triangle 
                                                         (abst_divides 
                                                            abst_one abst_one)) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (abst_divides 
                                                               abst_one v_Vwc)) 
                                                         (zen.triangle 
                                                            (abst_divides 
                                                               abst_one v_Vwc)))) 
                                                   x 
                                                   (v_Vkd:
                                                    (zen.proof 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (abst_divides 
                                                                abst_one 
                                                                abst_one)) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   abst_one x)) 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   abst_one x))))) =>
                                                    zen.Rimply 
                                                      (zen.triangle 
                                                         (abst_divides 
                                                            abst_one abst_one)) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (abst_divides 
                                                               abst_one x)) 
                                                         (zen.triangle 
                                                            (abst_divides 
                                                               abst_one x))) 
                                                      (v_Vkc:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   abst_one 
                                                                   abst_one)))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (abst_divides 
                                                               abst_one 
                                                               abst_one)) 
                                                         v_Vtc v_Vkc) 
                                                      (v_Vld:
                                                       (zen.proof 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   abst_one x)) 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   abst_one x)))) =>
                                                       zen.Rimply 
                                                         (zen.triangle 
                                                            (abst_divides 
                                                               abst_one x)) 
                                                         (zen.triangle 
                                                            (abst_divides 
                                                               abst_one x)) 
                                                         (v_Vhc:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (abst_divides 
                                                                    abst_one 
                                                                    x)))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (abst_divides 
                                                                  abst_one x)) 
                                                            v_Ved v_Vhc) 
                                                         (v_Ved:
                                                          (zen.proof 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   abst_one x))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (abst_divides 
                                                                  abst_one x)) 
                                                            v_Ved v_Vhc) 
                                                         v_Vld) v_Vkd) v_Vyc) 
                                                v_Vxc) 
                                             abst_divides_transitive) v_Vsc) 
                                       v_Vlc) 
                                    (v_Ved:
                                     (zen.proof 
                                        (zen.triangle 
                                           (abst_divides abst_one x))) =>
                                     zen.Rsubst abst_T 
                                       (v_Vcd:(zen.term abst_T) =>
                                        zen.triangle 
                                          (abst_divides abst_one v_Vcd)) x x 
                                       (v_Vmd:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T x x)))) =>
                                        zen.Rnoteq abst_T x v_Vmd) 
                                       (v_Ved:
                                        (zen.proof 
                                           (zen.triangle 
                                              (abst_divides abst_one x))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (abst_divides abst_one x)) 
                                          v_Ved v_Vhc) v_Ved) v_Ved) v_Vhd) 
                              v_Vgd) v_Vfd) v_Vxc) abst_divides_transitive) 
                  (v_Vid:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (abst_divides (abst_mult abst_one x) x)))) =>
                   zen.Raxiom 
                     (zen.triangle (abst_divides (abst_mult abst_one x) x)) 
                     __H_1_3_LEMMA v_Vid))))) 
        ((__H_1_3_1_LEMMA:
          (dk_logic.eP (dk_logic.ebP (abst_equal (abst_mult abst_one x) x))) =>
          zen.nnpp (zen.triangle (abst_divides (abst_mult abst_one x) x)) 
            (v_Vzb:
             (zen.proof 
                (zen.not 
                   (zen.triangle (abst_divides (abst_mult abst_one x) x)))) =>
             zen.Rall abst_T 
               (v_Vac:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vbc:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
                     (zen.triangle (abst_divides v_Vac v_Vbc)))) 
               (abst_mult abst_one x) 
               (v_Vcc:
                (zen.proof 
                   (zen.forall abst_T 
                      (v_Vbc:(zen.term abst_T) =>
                       zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_mult abst_one x) v_Vbc))) 
                         (zen.triangle 
                            (abst_divides (abst_mult abst_one x) v_Vbc))))) =>
                zen.Rall abst_T 
                  (v_Vbc:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_mult abst_one x) v_Vbc))) 
                     (zen.triangle 
                        (abst_divides (abst_mult abst_one x) v_Vbc))) x 
                  (v_Vdc:
                   (zen.proof 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_mult abst_one x) x))) 
                         (zen.triangle 
                            (abst_divides (abst_mult abst_one x) x)))) =>
                   zen.Rimply 
                     (zen.triangle 
                        (focal.is_true (abst_equal (abst_mult abst_one x) x))) 
                     (zen.triangle (abst_divides (abst_mult abst_one x) x)) 
                     (v_Vec:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult abst_one x) x))))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_mult abst_one x) x))) 
                        __H_1_3_1_LEMMA v_Vec) 
                     (v_Vfc:
                      (zen.proof 
                         (zen.triangle 
                            (abst_divides (abst_mult abst_one x) x))) =>
                      zen.Raxiom 
                        (zen.triangle (abst_divides (abst_mult abst_one x) x)) 
                        v_Vfc v_Vzb) v_Vdc) v_Vcc) abst_divides_extends_equal)) 
           (zen.nnpp 
              (zen.triangle 
                 (focal.is_true (abst_equal (abst_mult abst_one x) x))) 
              (v_Vzb:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true (abst_equal (abst_mult abst_one x) x))))) =>
               zen.Rall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.and 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_mult v_Vac abst_one) v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_mult abst_one v_Vac) v_Vac)))) x 
                 (v_Vbc:
                  (zen.proof 
                     (zen.and 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_mult x abst_one) x))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_mult abst_one x) x))))) =>
                  zen.Rand 
                    (zen.triangle 
                       (focal.is_true (abst_equal (abst_mult x abst_one) x))) 
                    (zen.triangle 
                       (focal.is_true (abst_equal (abst_mult abst_one x) x))) 
                    (v_Vcc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_mult x abst_one) x)))) =>
                     v_Vdc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_mult abst_one x) x)))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult abst_one x) x))) v_Vdc 
                       v_Vzb) v_Vbc) abst_one_is_neutral)))) 
       (zen.nnpp 
          (zen.triangle (abst_divides abst_one (abst_mult abst_one x))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle (abst_divides abst_one (abst_mult abst_one x))))) =>
           zen.Rall abst_T 
             (v_Vac:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.and 
                   (zen.triangle (abst_divides v_Vac (abst_mult v_Vac v_Vbc))) 
                   (zen.triangle (abst_divides v_Vbc (abst_mult v_Vac v_Vbc))))) 
             abst_one 
             (v_Vcc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.and 
                       (zen.triangle 
                          (abst_divides abst_one (abst_mult abst_one v_Vbc))) 
                       (zen.triangle 
                          (abst_divides v_Vbc (abst_mult abst_one v_Vbc)))))) =>
              zen.Rall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.and 
                   (zen.triangle 
                      (abst_divides abst_one (abst_mult abst_one v_Vbc))) 
                   (zen.triangle 
                      (abst_divides v_Vbc (abst_mult abst_one v_Vbc)))) x 
                (v_Vdc:
                 (zen.proof 
                    (zen.and 
                       (zen.triangle 
                          (abst_divides abst_one (abst_mult abst_one x))) 
                       (zen.triangle (abst_divides x (abst_mult abst_one x))))) =>
                 zen.Rand 
                   (zen.triangle 
                      (abst_divides abst_one (abst_mult abst_one x))) 
                   (zen.triangle (abst_divides x (abst_mult abst_one x))) 
                   (v_Vec:
                    (zen.proof 
                       (zen.triangle 
                          (abst_divides abst_one (abst_mult abst_one x)))) =>
                    v_Vfc:
                    (zen.proof 
                       (zen.triangle (abst_divides x (abst_mult abst_one x)))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (abst_divides abst_one (abst_mult abst_one x))) 
                      v_Vec v_Vzb) v_Vdc) v_Vcc) abst_divides_reverses_mult))).

def Commutative_monoid_with_absorbant_divibility__zero_is_maximal :
  abst_T:cc.uT ->
  abst_divides:((cc.eT abst_T) -> (cc.eT abst_T) -> dk_logic.Prop) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_divides_extends_equal:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.imp 
                                         (dk_logic.ebP (abst_equal x y)) 
                                         (abst_divides x y))))) ->
  abst_divides_reverses_mult:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.and 
                                         (abst_divides x (abst_mult x y)) 
                                         (abst_divides y (abst_mult x y)))))) ->
  abst_divides_transitive:(dk_logic.eP 
                             (dk_logic.forall abst_T 
                                (x:(cc.eT abst_T) =>
                                 dk_logic.forall abst_T 
                                   (y:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (z:(cc.eT abst_T) =>
                                       dk_logic.imp (abst_divides x y) 
                                         (dk_logic.imp (abst_divides y z) 
                                            (abst_divides x z))))))) ->
  abst_zero_absorbes:(dk_logic.eP 
                        (dk_logic.forall abst_T 
                           (x:(cc.eT abst_T) =>
                            dk_logic.and 
                              (dk_logic.ebP 
                                 (abst_equal (abst_mult x abst_zero) 
                                    abst_zero)) 
                              (dk_logic.ebP 
                                 (abst_equal (abst_mult abst_zero x) 
                                    abst_zero))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T (x:(cc.eT abst_T) => abst_divides x abst_zero))
  :=
  abst_T:cc.uT =>
  abst_divides:((cc.eT abst_T) -> (cc.eT abst_T) -> dk_logic.Prop) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_divides_extends_equal:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) (abst_divides x y))))) =>
  abst_divides_reverses_mult:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.and (abst_divides x (abst_mult x y)) 
              (abst_divides y (abst_mult x y)))))) =>
  abst_divides_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (abst_divides x y) 
                 (dk_logic.imp (abst_divides y z) (abst_divides x z))))))) =>
  abst_zero_absorbes:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.and 
           (dk_logic.ebP (abst_equal (abst_mult x abst_zero) abst_zero)) 
           (dk_logic.ebP (abst_equal (abst_mult abst_zero x) abst_zero))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vhc:(zen.term abst_T) =>
        zen.triangle (abst_divides v_Vhc abst_zero))) 
    (v_Vic:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vhc:(zen.term abst_T) =>
               zen.triangle (abst_divides v_Vhc abst_zero))))) =>
     zen.Rnotall abst_T 
       (v_Vhc:(zen.term abst_T) =>
        zen.triangle (abst_divides v_Vhc abst_zero)) 
       (v_Vjc:(zen.term abst_T) =>
        v_Vkc:
        (zen.proof (zen.not (zen.triangle (abst_divides v_Vjc abst_zero)))) =>
        zen.Rall abst_T 
          (v_Vhc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vlc:(zen.term abst_T) =>
              zen.and 
                (zen.triangle (abst_divides v_Vhc (abst_mult v_Vhc v_Vlc))) 
                (zen.triangle (abst_divides v_Vlc (abst_mult v_Vhc v_Vlc))))) 
          v_Vjc 
          (v_Vmc:
           (zen.proof 
              (zen.forall abst_T 
                 (v_Vlc:(zen.term abst_T) =>
                  zen.and 
                    (zen.triangle 
                       (abst_divides v_Vjc (abst_mult v_Vjc v_Vlc))) 
                    (zen.triangle 
                       (abst_divides v_Vlc (abst_mult v_Vjc v_Vlc)))))) =>
           zen.Rall abst_T 
             (v_Vhc:(zen.term abst_T) =>
              zen.and 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_mult v_Vhc abst_zero) abst_zero))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_mult abst_zero v_Vhc) abst_zero)))) 
             v_Vjc 
             (v_Vnc:
              (zen.proof 
                 (zen.and 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_mult v_Vjc abst_zero) abst_zero))) 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_mult abst_zero v_Vjc) abst_zero))))) =>
              zen.Rand 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_mult v_Vjc abst_zero) abst_zero))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_mult abst_zero v_Vjc) abst_zero))) 
                (v_Voc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_mult v_Vjc abst_zero) abst_zero)))) =>
                 v_Vpc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_mult abst_zero v_Vjc) abst_zero)))) =>
                 zen.Rall abst_T 
                   (v_Vlc:(zen.term abst_T) =>
                    zen.and 
                      (zen.triangle 
                         (abst_divides v_Vjc (abst_mult v_Vjc v_Vlc))) 
                      (zen.triangle 
                         (abst_divides v_Vlc (abst_mult v_Vjc v_Vlc)))) 
                   abst_zero 
                   (v_Vqc:
                    (zen.proof 
                       (zen.and 
                          (zen.triangle 
                             (abst_divides v_Vjc (abst_mult v_Vjc abst_zero))) 
                          (zen.triangle 
                             (abst_divides abst_zero 
                                (abst_mult v_Vjc abst_zero))))) =>
                    zen.Rand 
                      (zen.triangle 
                         (abst_divides v_Vjc (abst_mult v_Vjc abst_zero))) 
                      (zen.triangle 
                         (abst_divides abst_zero (abst_mult v_Vjc abst_zero))) 
                      (v_Vrc:
                       (zen.proof 
                          (zen.triangle 
                             (abst_divides v_Vjc (abst_mult v_Vjc abst_zero)))) =>
                       v_Vsc:
                       (zen.proof 
                          (zen.triangle 
                             (abst_divides abst_zero 
                                (abst_mult v_Vjc abst_zero)))) =>
                       zen.Rcut 
                         (zen.and 
                            (zen.not 
                               (zen.triangle (zen.equal abst_T v_Vjc v_Vjc))) 
                            (zen.not 
                               (zen.triangle (abst_divides v_Vjc v_Vjc)))) 
                         (v_Vtc:
                          (zen.proof 
                             (zen.and 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T v_Vjc v_Vjc))) 
                                (zen.not 
                                   (zen.triangle (abst_divides v_Vjc v_Vjc))))) =>
                          zen.Rand 
                            (zen.not 
                               (zen.triangle (zen.equal abst_T v_Vjc v_Vjc))) 
                            (zen.not 
                               (zen.triangle (abst_divides v_Vjc v_Vjc))) 
                            (v_Vuc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T v_Vjc v_Vjc)))) =>
                             v_Vvc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle (abst_divides v_Vjc v_Vjc)))) =>
                             zen.Rnoteq abst_T v_Vjc v_Vuc) v_Vtc) 
                         (v_Vwc:
                          (zen.proof 
                             (zen.not 
                                (zen.and 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T v_Vjc v_Vjc))) 
                                   (zen.not 
                                      (zen.triangle 
                                         (abst_divides v_Vjc v_Vjc)))))) =>
                          zen.Rcut 
                            (zen.triangle 
                               (zen.equal abst_T (abst_mult v_Vjc abst_zero) 
                                  abst_zero)) 
                            (v_Vxc:
                             (zen.proof 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_mult v_Vjc abst_zero) abst_zero))) =>
                             zen.Rsubst abst_T 
                               (v_Vyc:(zen.term abst_T) =>
                                zen.triangle 
                                  (abst_divides v_Vyc 
                                     (abst_mult v_Vjc abst_zero))) v_Vjc 
                               v_Vjc 
                               (v_Vuc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T v_Vjc v_Vjc)))) =>
                                zen.Rnotand 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal abst_T v_Vjc v_Vjc))) 
                                  (zen.not 
                                     (zen.triangle (abst_divides v_Vjc v_Vjc))) 
                                  (v_Vzc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T v_Vjc v_Vjc))))) =>
                                   zen.Rnotnot 
                                     (zen.triangle 
                                        (zen.equal abst_T v_Vjc v_Vjc)) 
                                     (v_Vad:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal abst_T v_Vjc v_Vjc))) =>
                                      zen.Rcut 
                                        (zen.triangle 
                                           (zen.equal abst_T v_Vjc v_Vjc)) 
                                        (v_Vad:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T v_Vjc v_Vjc))) =>
                                         zen.Rsubst abst_T 
                                           (v_Vbd:(zen.term abst_T) =>
                                            zen.triangle 
                                              (zen.equal abst_T v_Vbd v_Vjc)) 
                                           v_Vjc v_Vjc 
                                           (v_Vuc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T v_Vjc 
                                                        v_Vjc)))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (zen.equal abst_T v_Vjc 
                                                    v_Vjc)) v_Vad v_Vuc) 
                                           (v_Vad:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal abst_T v_Vjc 
                                                     v_Vjc))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vcd:(zen.term abst_T) =>
                                               zen.triangle 
                                                 (zen.equal abst_T v_Vjc 
                                                    v_Vcd)) v_Vjc v_Vjc 
                                              (v_Vuc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           v_Vjc v_Vjc)))) =>
                                               zen.Rnoteq abst_T v_Vjc v_Vuc) 
                                              (v_Vad:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal abst_T v_Vjc 
                                                        v_Vjc))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (zen.equal abst_T v_Vjc 
                                                       v_Vjc)) v_Vad v_Vuc) 
                                              v_Vad) v_Vad) 
                                        (v_Vuc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T v_Vjc 
                                                     v_Vjc)))) =>
                                         zen.Rnoteq abst_T v_Vjc v_Vuc)) 
                                     v_Vzc) 
                                  (v_Vdd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.not 
                                            (zen.triangle 
                                               (abst_divides v_Vjc v_Vjc))))) =>
                                   zen.Rnotnot 
                                     (zen.triangle (abst_divides v_Vjc v_Vjc)) 
                                     (v_Ved:
                                      (zen.proof 
                                         (zen.triangle 
                                            (abst_divides v_Vjc v_Vjc))) =>
                                      zen.Rall abst_T 
                                        (v_Vhc:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vlc:(zen.term abst_T) =>
                                            zen.forall abst_T 
                                              (v_Vfd:(zen.term abst_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (abst_divides v_Vhc v_Vlc)) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (abst_divides v_Vlc 
                                                          v_Vfd)) 
                                                    (zen.triangle 
                                                       (abst_divides v_Vhc 
                                                          v_Vfd)))))) v_Vjc 
                                        (v_Vgd:
                                         (zen.proof 
                                            (zen.forall abst_T 
                                               (v_Vlc:(zen.term abst_T) =>
                                                zen.forall abst_T 
                                                  (v_Vfd:(zen.term abst_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (abst_divides v_Vjc 
                                                           v_Vlc)) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (abst_divides 
                                                              v_Vlc v_Vfd)) 
                                                        (zen.triangle 
                                                           (abst_divides 
                                                              v_Vjc v_Vfd))))))) =>
                                         zen.Rall abst_T 
                                           (v_Vlc:(zen.term abst_T) =>
                                            zen.forall abst_T 
                                              (v_Vfd:(zen.term abst_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (abst_divides v_Vjc v_Vlc)) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (abst_divides v_Vlc 
                                                          v_Vfd)) 
                                                    (zen.triangle 
                                                       (abst_divides v_Vjc 
                                                          v_Vfd))))) v_Vjc 
                                           (v_Vhd:
                                            (zen.proof 
                                               (zen.forall abst_T 
                                                  (v_Vfd:(zen.term abst_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (abst_divides v_Vjc 
                                                           v_Vjc)) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (abst_divides 
                                                              v_Vjc v_Vfd)) 
                                                        (zen.triangle 
                                                           (abst_divides 
                                                              v_Vjc v_Vfd)))))) =>
                                            zen.Rall abst_T 
                                              (v_Vfd:(zen.term abst_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (abst_divides v_Vjc v_Vjc)) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (abst_divides v_Vjc 
                                                          v_Vfd)) 
                                                    (zen.triangle 
                                                       (abst_divides v_Vjc 
                                                          v_Vfd)))) 
                                              (abst_mult v_Vjc abst_zero) 
                                              (v_Vid:
                                               (zen.proof 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (abst_divides v_Vjc 
                                                           v_Vjc)) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (abst_divides 
                                                              v_Vjc 
                                                              (abst_mult 
                                                                 v_Vjc 
                                                                 abst_zero))) 
                                                        (zen.triangle 
                                                           (abst_divides 
                                                              v_Vjc 
                                                              (abst_mult 
                                                                 v_Vjc 
                                                                 abst_zero)))))) =>
                                               zen.Rimply 
                                                 (zen.triangle 
                                                    (abst_divides v_Vjc v_Vjc)) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (abst_divides v_Vjc 
                                                          (abst_mult v_Vjc 
                                                             abst_zero))) 
                                                    (zen.triangle 
                                                       (abst_divides v_Vjc 
                                                          (abst_mult v_Vjc 
                                                             abst_zero)))) 
                                                 (v_Vvc:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (abst_divides 
                                                              v_Vjc v_Vjc)))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (abst_divides v_Vjc 
                                                          v_Vjc)) v_Ved v_Vvc) 
                                                 (v_Vjd:
                                                  (zen.proof 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (abst_divides 
                                                              v_Vjc 
                                                              (abst_mult 
                                                                 v_Vjc 
                                                                 abst_zero))) 
                                                        (zen.triangle 
                                                           (abst_divides 
                                                              v_Vjc 
                                                              (abst_mult 
                                                                 v_Vjc 
                                                                 abst_zero))))) =>
                                                  zen.Rimply 
                                                    (zen.triangle 
                                                       (abst_divides v_Vjc 
                                                          (abst_mult v_Vjc 
                                                             abst_zero))) 
                                                    (zen.triangle 
                                                       (abst_divides v_Vjc 
                                                          (abst_mult v_Vjc 
                                                             abst_zero))) 
                                                    (v_Vkd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (abst_divides 
                                                                 v_Vjc 
                                                                 (abst_mult 
                                                                    v_Vjc 
                                                                    abst_zero))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (abst_divides 
                                                             v_Vjc 
                                                             (abst_mult 
                                                                v_Vjc 
                                                                abst_zero))) 
                                                       v_Vrc v_Vkd) 
                                                    (v_Vrc:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (abst_divides 
                                                              v_Vjc 
                                                              (abst_mult 
                                                                 v_Vjc 
                                                                 abst_zero)))) =>
                                                     zen.Rsubst abst_T 
                                                       (v_Vyc:
                                                        (zen.term abst_T) =>
                                                        zen.triangle 
                                                          (abst_divides 
                                                             v_Vyc 
                                                             (abst_mult 
                                                                v_Vjc 
                                                                abst_zero))) 
                                                       v_Vjc v_Vjc 
                                                       (v_Vuc:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    v_Vjc 
                                                                    v_Vjc)))) =>
                                                        zen.Rnoteq abst_T 
                                                          v_Vjc v_Vuc) 
                                                       (v_Vrc:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (abst_divides 
                                                                 v_Vjc 
                                                                 (abst_mult 
                                                                    v_Vjc 
                                                                    abst_zero)))) =>
                                                        zen.Rsubst abst_T 
                                                          (v_Vld:
                                                           (zen.term abst_T) =>
                                                           zen.triangle 
                                                             (abst_divides 
                                                                v_Vjc v_Vld)) 
                                                          (abst_mult v_Vjc 
                                                             abst_zero) 
                                                          abst_zero 
                                                          (v_Vmd:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vjc 
                                                                    abst_zero) 
                                                                    abst_zero)))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_mult 
                                                                    v_Vjc 
                                                                    abst_zero) 
                                                                   abst_zero)) 
                                                             v_Vxc v_Vmd) 
                                                          (v_Vnd:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (abst_divides 
                                                                    v_Vjc 
                                                                    abst_zero))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   v_Vjc 
                                                                   abst_zero)) 
                                                             v_Vnd v_Vkc) 
                                                          v_Vrc) v_Vrc) v_Vjd) 
                                                 v_Vid) v_Vhd) v_Vgd) 
                                        abst_divides_transitive) v_Vdd) v_Vwc) 
                               (v_Vrc:
                                (zen.proof 
                                   (zen.triangle 
                                      (abst_divides v_Vjc 
                                         (abst_mult v_Vjc abst_zero)))) =>
                                zen.Rsubst abst_T 
                                  (v_Vld:(zen.term abst_T) =>
                                   zen.triangle (abst_divides v_Vjc v_Vld)) 
                                  (abst_mult v_Vjc abst_zero) abst_zero 
                                  (v_Vmd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_mult v_Vjc abst_zero) 
                                               abst_zero)))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_mult v_Vjc abst_zero) 
                                           abst_zero)) v_Vxc v_Vmd) 
                                  (v_Vnd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (abst_divides v_Vjc abst_zero))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (abst_divides v_Vjc abst_zero)) 
                                     v_Vnd v_Vkc) v_Vrc) v_Vrc) 
                            (v_Vmd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_mult v_Vjc abst_zero) 
                                         abst_zero)))) =>
                             zen.Rcut 
                               (zen.triangle 
                                  (abst_divides (abst_mult v_Vjc abst_zero) 
                                     abst_zero)) 
                               (v_Vod:
                                (zen.proof 
                                   (zen.triangle 
                                      (abst_divides 
                                         (abst_mult v_Vjc abst_zero) 
                                         abst_zero))) =>
                                zen.Rall abst_T 
                                  (v_Vhc:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vlc:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vfd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (abst_divides v_Vhc v_Vlc)) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (abst_divides v_Vlc v_Vfd)) 
                                              (zen.triangle 
                                                 (abst_divides v_Vhc v_Vfd)))))) 
                                  v_Vjc 
                                  (v_Vgd:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vlc:(zen.term abst_T) =>
                                          zen.forall abst_T 
                                            (v_Vfd:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (abst_divides v_Vjc v_Vlc)) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (abst_divides v_Vlc 
                                                        v_Vfd)) 
                                                  (zen.triangle 
                                                     (abst_divides v_Vjc 
                                                        v_Vfd))))))) =>
                                   zen.Rall abst_T 
                                     (v_Vlc:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vfd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (abst_divides v_Vjc v_Vlc)) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (abst_divides v_Vlc v_Vfd)) 
                                              (zen.triangle 
                                                 (abst_divides v_Vjc v_Vfd))))) 
                                     (abst_mult v_Vjc abst_zero) 
                                     (v_Vpd:
                                      (zen.proof 
                                         (zen.forall abst_T 
                                            (v_Vfd:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (abst_divides v_Vjc 
                                                     (abst_mult v_Vjc 
                                                        abst_zero))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (abst_divides 
                                                        (abst_mult v_Vjc 
                                                           abst_zero) v_Vfd)) 
                                                  (zen.triangle 
                                                     (abst_divides v_Vjc 
                                                        v_Vfd)))))) =>
                                      zen.Rall abst_T 
                                        (v_Vfd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (abst_divides v_Vjc 
                                                 (abst_mult v_Vjc abst_zero))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (abst_divides 
                                                    (abst_mult v_Vjc 
                                                       abst_zero) v_Vfd)) 
                                              (zen.triangle 
                                                 (abst_divides v_Vjc v_Vfd)))) 
                                        abst_zero 
                                        (v_Vqd:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (abst_divides v_Vjc 
                                                     (abst_mult v_Vjc 
                                                        abst_zero))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (abst_divides 
                                                        (abst_mult v_Vjc 
                                                           abst_zero) 
                                                        abst_zero)) 
                                                  (zen.triangle 
                                                     (abst_divides v_Vjc 
                                                        abst_zero))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (abst_divides v_Vjc 
                                                 (abst_mult v_Vjc abst_zero))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (abst_divides 
                                                    (abst_mult v_Vjc 
                                                       abst_zero) abst_zero)) 
                                              (zen.triangle 
                                                 (abst_divides v_Vjc 
                                                    abst_zero))) 
                                           (v_Vkd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (abst_divides v_Vjc 
                                                        (abst_mult v_Vjc 
                                                           abst_zero))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (abst_divides v_Vjc 
                                                    (abst_mult v_Vjc 
                                                       abst_zero))) v_Vrc 
                                              v_Vkd) 
                                           (v_Vrd:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (abst_divides 
                                                        (abst_mult v_Vjc 
                                                           abst_zero) 
                                                        abst_zero)) 
                                                  (zen.triangle 
                                                     (abst_divides v_Vjc 
                                                        abst_zero)))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (abst_divides 
                                                    (abst_mult v_Vjc 
                                                       abst_zero) abst_zero)) 
                                              (zen.triangle 
                                                 (abst_divides v_Vjc 
                                                    abst_zero)) 
                                              (v_Vsd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (abst_divides 
                                                           (abst_mult v_Vjc 
                                                              abst_zero) 
                                                           abst_zero)))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (abst_divides 
                                                       (abst_mult v_Vjc 
                                                          abst_zero) 
                                                       abst_zero)) v_Vod 
                                                 v_Vsd) 
                                              (v_Vnd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (abst_divides v_Vjc 
                                                        abst_zero))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Vtd:(zen.term abst_T) =>
                                                  zen.triangle 
                                                    (abst_divides v_Vtd 
                                                       abst_zero)) v_Vjc 
                                                 v_Vjc 
                                                 (v_Vuc:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              v_Vjc v_Vjc)))) =>
                                                  zen.Rnotand 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             v_Vjc v_Vjc))) 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (abst_divides 
                                                             v_Vjc v_Vjc))) 
                                                    (v_Vzc:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    v_Vjc 
                                                                    v_Vjc))))) =>
                                                     zen.Rnotnot 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             v_Vjc v_Vjc)) 
                                                       (v_Vad:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 v_Vjc v_Vjc))) =>
                                                        zen.Reqsym abst_T 
                                                          v_Vjc v_Vjc v_Vad 
                                                          v_Vuc) v_Vzc) 
                                                    (v_Vdd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (abst_divides 
                                                                    v_Vjc 
                                                                    v_Vjc))))) =>
                                                     zen.Rnotnot 
                                                       (zen.triangle 
                                                          (abst_divides 
                                                             v_Vjc v_Vjc)) 
                                                       (v_Ved:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (abst_divides 
                                                                 v_Vjc v_Vjc))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vhc:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vlc:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.forall 
                                                                abst_T 
                                                                (v_Vfd:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vhc 
                                                                    v_Vlc)) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vlc 
                                                                    v_Vfd)) 
                                                                    (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vhc 
                                                                    v_Vfd)))))) 
                                                          v_Vjc 
                                                          (v_Vgd:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 abst_T 
                                                                 (v_Vlc:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.forall 
                                                                    abst_T 
                                                                    (
                                                                    v_Vfd:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vjc 
                                                                    v_Vlc)) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vlc 
                                                                    v_Vfd)) 
                                                                    (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vjc 
                                                                    v_Vfd))))))) =>
                                                           zen.Rall abst_T 
                                                             (v_Vlc:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.forall 
                                                                abst_T 
                                                                (v_Vfd:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vjc 
                                                                    v_Vlc)) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vlc 
                                                                    v_Vfd)) 
                                                                    (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vjc 
                                                                    v_Vfd))))) 
                                                             v_Vjc 
                                                             (v_Vhd:
                                                              (zen.proof 
                                                                 (zen.forall 
                                                                    abst_T 
                                                                    (
                                                                    v_Vfd:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vjc 
                                                                    v_Vjc)) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vjc 
                                                                    v_Vfd)) 
                                                                    (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vjc 
                                                                    v_Vfd)))))) =>
                                                              zen.Rall 
                                                                abst_T 
                                                                (v_Vfd:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vjc 
                                                                    v_Vjc)) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vjc 
                                                                    v_Vfd)) 
                                                                    (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vjc 
                                                                    v_Vfd)))) 
                                                                abst_zero 
                                                                (v_Vud:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vjc 
                                                                    v_Vjc)) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vjc 
                                                                    abst_zero)) 
                                                                    (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vjc 
                                                                    abst_zero))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vjc 
                                                                    v_Vjc)) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vjc 
                                                                    abst_zero)) 
                                                                    (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vjc 
                                                                    abst_zero))) 
                                                                   (v_Vvc:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vjc 
                                                                    v_Vjc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vjc 
                                                                    v_Vjc)) 
                                                                    v_Ved 
                                                                    v_Vvc) 
                                                                   (v_Vvd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vjc 
                                                                    abst_zero)) 
                                                                    (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vjc 
                                                                    abst_zero)))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vjc 
                                                                    abst_zero)) 
                                                                    (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vjc 
                                                                    abst_zero)) 
                                                                    (v_Vkc:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vjc 
                                                                    abst_zero)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vjc 
                                                                    abst_zero)) 
                                                                    v_Vnd 
                                                                    v_Vkc) 
                                                                    (v_Vnd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vjc 
                                                                    abst_zero))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (abst_divides 
                                                                    v_Vjc 
                                                                    abst_zero)) 
                                                                    v_Vnd 
                                                                    v_Vkc) 
                                                                    v_Vvd) 
                                                                   v_Vud) 
                                                                v_Vhd) v_Vgd) 
                                                          abst_divides_transitive) 
                                                       v_Vdd) v_Vwc) 
                                                 (v_Vnd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (abst_divides v_Vjc 
                                                           abst_zero))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Vld:
                                                     (zen.term abst_T) =>
                                                     zen.triangle 
                                                       (abst_divides v_Vjc 
                                                          v_Vld)) abst_zero 
                                                    abst_zero 
                                                    (v_Vwd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 abst_zero 
                                                                 abst_zero)))) =>
                                                     zen.Rnoteq abst_T 
                                                       abst_zero v_Vwd) 
                                                    (v_Vnd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (abst_divides 
                                                              v_Vjc abst_zero))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (abst_divides 
                                                             v_Vjc abst_zero)) 
                                                       v_Vnd v_Vkc) v_Vnd) 
                                                 v_Vnd) v_Vrd) v_Vqd) v_Vpd) 
                                     v_Vgd) abst_divides_transitive) 
                               (v_Vsd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (abst_divides 
                                            (abst_mult v_Vjc abst_zero) 
                                            abst_zero)))) =>
                                zen.Rall abst_T 
                                  (v_Vhc:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vlc:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vhc v_Vlc))) 
                                        (zen.triangle 
                                           (abst_divides v_Vhc v_Vlc)))) 
                                  (abst_mult v_Vjc abst_zero) 
                                  (v_Vxd:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vlc:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult v_Vjc 
                                                        abst_zero) v_Vlc))) 
                                            (zen.triangle 
                                               (abst_divides 
                                                  (abst_mult v_Vjc abst_zero) 
                                                  v_Vlc))))) =>
                                   zen.Rall abst_T 
                                     (v_Vlc:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult v_Vjc abst_zero) 
                                                 v_Vlc))) 
                                        (zen.triangle 
                                           (abst_divides 
                                              (abst_mult v_Vjc abst_zero) 
                                              v_Vlc))) abst_zero 
                                     (v_Vyd:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult v_Vjc 
                                                        abst_zero) abst_zero))) 
                                            (zen.triangle 
                                               (abst_divides 
                                                  (abst_mult v_Vjc abst_zero) 
                                                  abst_zero)))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult v_Vjc abst_zero) 
                                                 abst_zero))) 
                                        (zen.triangle 
                                           (abst_divides 
                                              (abst_mult v_Vjc abst_zero) 
                                              abst_zero)) 
                                        (v_Vzd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult v_Vjc 
                                                           abst_zero) 
                                                        abst_zero))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult v_Vjc 
                                                       abst_zero) abst_zero))) 
                                           v_Voc v_Vzd) 
                                        (v_Vod:
                                         (zen.proof 
                                            (zen.triangle 
                                               (abst_divides 
                                                  (abst_mult v_Vjc abst_zero) 
                                                  abst_zero))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (abst_divides 
                                                 (abst_mult v_Vjc abst_zero) 
                                                 abst_zero)) v_Vod v_Vsd) 
                                        v_Vyd) v_Vxd) 
                                  abst_divides_extends_equal)))) v_Vqc) v_Vmc) 
                v_Vnc) abst_zero_absorbes) abst_divides_reverses_mult) v_Vic).

def Cancellative_commutative_monoid__mult_is_right_regular :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_mult_commutes:(dk_logic.eP 
                        (dk_logic.forall abst_T 
                           (x:(cc.eT abst_T) =>
                            dk_logic.forall abst_T 
                              (y:(cc.eT abst_T) =>
                               dk_logic.ebP 
                                 (abst_equal (abst_mult x y) (abst_mult y x)))))) ->
  abst_mult_is_left_regular:(dk_logic.eP 
                               (dk_logic.forall abst_T 
                                  (x:(cc.eT abst_T) =>
                                   dk_logic.forall abst_T 
                                     (y:(cc.eT abst_T) =>
                                      dk_logic.forall abst_T 
                                        (z:(cc.eT abst_T) =>
                                         dk_logic.imp 
                                           (dk_logic.ebP 
                                              (abst_equal (abst_mult x y) 
                                                 (abst_mult x z))) 
                                           (dk_logic.not 
                                              (dk_logic.imp 
                                                 (dk_logic.ebP 
                                                    (abst_equal x abst_zero)) 
                                                 (dk_logic.ebP 
                                                    (abst_equal y z))))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp 
                (dk_logic.ebP (abst_equal (abst_mult y x) (abst_mult z x))) 
                (dk_logic.not 
                   (dk_logic.imp (dk_logic.ebP (abst_equal x abst_zero)) 
                      (dk_logic.ebP (abst_equal y z))))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_mult_commutes:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.ebP (abst_equal (abst_mult x y) (abst_mult y x)))))) =>
  abst_mult_is_left_regular:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp 
                 (dk_logic.ebP (abst_equal (abst_mult x y) (abst_mult x z))) 
                 (dk_logic.not 
                    (dk_logic.imp (dk_logic.ebP (abst_equal x abst_zero)) 
                       (dk_logic.ebP (abst_equal y z))))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vkc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vlc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vmc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_mult v_Vlc v_Vkc) 
                         (abst_mult v_Vmc v_Vkc)))) 
                (zen.not 
                   (zen.imp 
                      (zen.triangle 
                         (focal.is_true (abst_equal v_Vkc abst_zero))) 
                      (zen.triangle (focal.is_true (abst_equal v_Vlc v_Vmc))))))))) 
    (v_Vnc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vkc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vlc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vmc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult v_Vlc v_Vkc) 
                                (abst_mult v_Vmc v_Vkc)))) 
                       (zen.not 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vkc abst_zero))) 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vlc v_Vmc))))))))))) =>
     zen.Rnotall abst_T 
       (v_Vkc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vlc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vmc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_mult v_Vlc v_Vkc) 
                         (abst_mult v_Vmc v_Vkc)))) 
                (zen.not 
                   (zen.imp 
                      (zen.triangle 
                         (focal.is_true (abst_equal v_Vkc abst_zero))) 
                      (zen.triangle (focal.is_true (abst_equal v_Vlc v_Vmc)))))))) 
       (v_Voc:(zen.term abst_T) =>
        v_Vpc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vlc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vmc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult v_Vlc v_Voc) 
                                (abst_mult v_Vmc v_Voc)))) 
                       (zen.not 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Voc abst_zero))) 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vlc v_Vmc)))))))))) =>
        zen.Rnotall abst_T 
          (v_Vlc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vmc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_mult v_Vlc v_Voc) 
                         (abst_mult v_Vmc v_Voc)))) 
                (zen.not 
                   (zen.imp 
                      (zen.triangle 
                         (focal.is_true (abst_equal v_Voc abst_zero))) 
                      (zen.triangle (focal.is_true (abst_equal v_Vlc v_Vmc))))))) 
          (v_Vqc:(zen.term abst_T) =>
           v_Vrc:
           (zen.proof 
              (zen.not 
                 (zen.forall abst_T 
                    (v_Vmc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult v_Vqc v_Voc) 
                                (abst_mult v_Vmc v_Voc)))) 
                       (zen.not 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Voc abst_zero))) 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vqc v_Vmc))))))))) =>
           zen.Rnotall abst_T 
             (v_Vmc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_mult v_Vqc v_Voc) 
                         (abst_mult v_Vmc v_Voc)))) 
                (zen.not 
                   (zen.imp 
                      (zen.triangle 
                         (focal.is_true (abst_equal v_Voc abst_zero))) 
                      (zen.triangle (focal.is_true (abst_equal v_Vqc v_Vmc)))))) 
             (v_Vsc:(zen.term abst_T) =>
              v_Vtc:
              (zen.proof 
                 (zen.not 
                    (zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult v_Vqc v_Voc) 
                                (abst_mult v_Vsc v_Voc)))) 
                       (zen.not 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Voc abst_zero))) 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vqc v_Vsc)))))))) =>
              zen.Rnotimply 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_mult v_Vqc v_Voc) 
                         (abst_mult v_Vsc v_Voc)))) 
                (zen.not 
                   (zen.imp 
                      (zen.triangle 
                         (focal.is_true (abst_equal v_Voc abst_zero))) 
                      (zen.triangle (focal.is_true (abst_equal v_Vqc v_Vsc))))) 
                (v_Vuc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_mult v_Vqc v_Voc) 
                             (abst_mult v_Vsc v_Voc))))) =>
                 v_Vvc:
                 (zen.proof 
                    (zen.not 
                       (zen.not 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Voc abst_zero))) 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vqc v_Vsc))))))) =>
                 zen.Rnotnot 
                   (zen.imp 
                      (zen.triangle 
                         (focal.is_true (abst_equal v_Voc abst_zero))) 
                      (zen.triangle (focal.is_true (abst_equal v_Vqc v_Vsc)))) 
                   (v_Vwc:
                    (zen.proof 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Voc abst_zero))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vqc v_Vsc))))) =>
                    zen.Rall abst_T 
                      (v_Vkc:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vlc:(zen.term abst_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_mult v_Vkc v_Vlc) 
                                  (abst_mult v_Vlc v_Vkc))))) v_Vsc 
                      (v_Vxc:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vlc:(zen.term abst_T) =>
                              zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_mult v_Vsc v_Vlc) 
                                      (abst_mult v_Vlc v_Vsc)))))) =>
                       zen.Rall abst_T 
                         (v_Vkc:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vlc:(zen.term abst_T) =>
                             zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult v_Vkc v_Vlc) 
                                     (abst_mult v_Vlc v_Vkc))))) v_Voc 
                         (v_Vyc:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vlc:(zen.term abst_T) =>
                                 zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_mult v_Voc v_Vlc) 
                                         (abst_mult v_Vlc v_Voc)))))) =>
                          zen.Rall abst_T 
                            (v_Vlc:(zen.term abst_T) =>
                             zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult v_Voc v_Vlc) 
                                     (abst_mult v_Vlc v_Voc)))) v_Vqc 
                            (v_Vzc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_mult v_Voc v_Vqc) 
                                         (abst_mult v_Vqc v_Voc))))) =>
                             zen.Rall abst_T 
                               (v_Vlc:(zen.term abst_T) =>
                                zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_mult v_Vsc v_Vlc) 
                                        (abst_mult v_Vlc v_Vsc)))) v_Voc 
                               (v_Vad:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_mult v_Vsc v_Voc) 
                                            (abst_mult v_Voc v_Vsc))))) =>
                                zen.Rall abst_T 
                                  (v_Vkc:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vlc:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vmc:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult v_Vkc v_Vlc) 
                                                    (abst_mult v_Vkc v_Vmc)))) 
                                           (zen.not 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vkc 
                                                          abst_zero))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vlc 
                                                          v_Vmc)))))))) 
                                  v_Voc 
                                  (v_Vbd:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vlc:(zen.term abst_T) =>
                                          zen.forall abst_T 
                                            (v_Vmc:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult v_Voc 
                                                           v_Vlc) 
                                                        (abst_mult v_Voc 
                                                           v_Vmc)))) 
                                               (zen.not 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Voc 
                                                              abst_zero))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Vlc 
                                                              v_Vmc))))))))) =>
                                   zen.Rall abst_T 
                                     (v_Vlc:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vmc:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult v_Voc v_Vlc) 
                                                    (abst_mult v_Voc v_Vmc)))) 
                                           (zen.not 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Voc 
                                                          abst_zero))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vlc 
                                                          v_Vmc))))))) v_Vqc 
                                     (v_Vcd:
                                      (zen.proof 
                                         (zen.forall abst_T 
                                            (v_Vmc:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult v_Voc 
                                                           v_Vqc) 
                                                        (abst_mult v_Voc 
                                                           v_Vmc)))) 
                                               (zen.not 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Voc 
                                                              abst_zero))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Vqc 
                                                              v_Vmc)))))))) =>
                                      zen.Rall abst_T 
                                        (v_Vmc:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult v_Voc v_Vqc) 
                                                    (abst_mult v_Voc v_Vmc)))) 
                                           (zen.not 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Voc 
                                                          abst_zero))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vqc 
                                                          v_Vmc)))))) v_Vsc 
                                        (v_Vdd:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult v_Voc 
                                                           v_Vqc) 
                                                        (abst_mult v_Voc 
                                                           v_Vsc)))) 
                                               (zen.not 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Voc 
                                                              abst_zero))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Vqc 
                                                              v_Vsc))))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult v_Voc v_Vqc) 
                                                    (abst_mult v_Voc v_Vsc)))) 
                                           (zen.not 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Voc 
                                                          abst_zero))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vqc 
                                                          v_Vsc))))) 
                                           (v_Ved:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult v_Voc 
                                                              v_Vqc) 
                                                           (abst_mult v_Voc 
                                                              v_Vsc)))))) =>
                                            zen.Rcut 
                                              (zen.and 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_mult v_Voc 
                                                             v_Vqc) 
                                                          (abst_mult v_Vqc 
                                                             v_Voc)))) 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                v_Voc v_Vqc) 
                                                             (abst_mult 
                                                                v_Vqc v_Voc)))))) 
                                              (v_Vfd:
                                               (zen.proof 
                                                  (zen.and 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_mult 
                                                                 v_Voc v_Vqc) 
                                                              (abst_mult 
                                                                 v_Vqc v_Voc)))) 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                 (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc))))))) =>
                                               zen.Rand 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_mult v_Voc 
                                                             v_Vqc) 
                                                          (abst_mult v_Vqc 
                                                             v_Voc)))) 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                v_Voc v_Vqc) 
                                                             (abst_mult 
                                                                v_Vqc v_Voc))))) 
                                                 (v_Vgd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_mult 
                                                                 v_Voc v_Vqc) 
                                                              (abst_mult 
                                                                 v_Vqc v_Voc))))) =>
                                                  v_Vhd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                 (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc)))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                v_Voc v_Vqc) 
                                                             (abst_mult 
                                                                v_Vqc v_Voc)))) 
                                                    v_Vzc v_Vhd) v_Vfd) 
                                              (v_Vid:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.and 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                 (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc)))) 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (
                                                                    abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc)))))))) =>
                                               zen.Rcut 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_mult v_Vsc v_Voc) 
                                                       (abst_mult v_Voc v_Vsc))) 
                                                 (v_Vjd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_mult v_Vsc 
                                                              v_Voc) 
                                                           (abst_mult v_Voc 
                                                              v_Vsc)))) =>
                                                  zen.Rsubst basics.bool__t 
                                                    (v_Vkd:
                                                     (zen.term basics.bool__t) =>
                                                     zen.triangle 
                                                       (focal.is_true v_Vkd)) 
                                                    (abst_equal 
                                                       (abst_mult v_Vqc v_Voc) 
                                                       (abst_mult v_Vsc v_Voc)) 
                                                    (abst_equal 
                                                       (abst_mult v_Voc v_Vqc) 
                                                       (abst_mult v_Voc v_Vsc)) 
                                                    (v_Vld:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (
                                                                    abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc)) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (
                                                                    abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))))) =>
                                                     zen.Rsubst abst_T 
                                                       (v_Vmd:
                                                        (zen.term abst_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   v_Vmd 
                                                                   (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc)) 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                   (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc))))) 
                                                       (abst_mult v_Vqc v_Voc) 
                                                       (abst_mult v_Voc v_Vqc) 
                                                       (v_Vnd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (
                                                                    abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc))))) =>
                                                        zen.Rnotand 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                   (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc)))) 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc))))) 
                                                          (v_Vod:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc)))))) =>
                                                           zen.Rnotnot 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                   (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc))) 
                                                             (v_Vpd:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc)))) =>
                                                              zen.Rcut 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc))) 
                                                                (v_Vqd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc)))) =>
                                                                 zen.Rsubst 
                                                                   abst_T 
                                                                   (v_Vrd:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vrd 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc))) 
                                                                   (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                   (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                   (v_Vgd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc))) 
                                                                    v_Vpd 
                                                                    v_Vgd) 
                                                                   (v_Vsd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc)))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vtd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    v_Vtd)) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (v_Vud:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc))))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    v_Vud) 
                                                                    (v_Vsd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc))) 
                                                                    v_Vsd 
                                                                    v_Vnd) 
                                                                    v_Vsd) 
                                                                   v_Vqd) 
                                                                (v_Vud:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc))))) =>
                                                                 zen.Rnoteq 
                                                                   abst_T 
                                                                   (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                   v_Vud)) 
                                                             v_Vod) 
                                                          (v_Vvd:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc))))))) =>
                                                           zen.Rnotnot 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc)))) 
                                                             (v_Vzc:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc))))) =>
                                                              zen.Rall 
                                                                abst_T 
                                                                (v_Vkc:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.forall 
                                                                   abst_T 
                                                                   (v_Vlc:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vmc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkc 
                                                                    v_Vlc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkc 
                                                                    v_Vmc))))))) 
                                                                (abst_mult 
                                                                   v_Voc 
                                                                   v_Vqc) 
                                                                (v_Vwd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vlc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vmc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    v_Vlc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    v_Vmc)))))))) =>
                                                                 zen.Rall 
                                                                   abst_T 
                                                                   (v_Vlc:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vmc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    v_Vlc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    v_Vmc)))))) 
                                                                   (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                   (v_Vxd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vmc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    v_Vmc))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vmc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    v_Vmc))))) 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (v_Vyd:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc))))) 
                                                                    (v_Vhd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc)))) 
                                                                    v_Vzc 
                                                                    v_Vhd) 
                                                                    (v_Vzd:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc)))) 
                                                                    (v_Vae:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc)))) 
                                                                    v_Vuc 
                                                                    v_Vae) 
                                                                    (v_Vbe:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc))))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vkd:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vkd)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)) 
                                                                    (v_Vce:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vmd 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc))))) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (v_Vud:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc))))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    v_Vud) 
                                                                    (v_Vce:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vde:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    v_Vde) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc))))) 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (v_Vee:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    v_Vjd 
                                                                    v_Vee) 
                                                                    (v_Vfe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)) 
                                                                    v_Vfe) 
                                                                    v_Vce) 
                                                                    v_Vce) 
                                                                    (v_Vge:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                    v_Vge 
                                                                    v_Ved) 
                                                                    v_Vbe) 
                                                                    v_Vzd) 
                                                                    v_Vyd) 
                                                                    v_Vxd) 
                                                                   v_Vwd) 
                                                                abst_equal_transitive) 
                                                             v_Vvd) v_Vid) 
                                                       (v_Vce:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc)) 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))))) =>
                                                        zen.Rsubst abst_T 
                                                          (v_Vde:
                                                           (zen.term abst_T) =>
                                                           zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    v_Vde) 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc))))) 
                                                          (abst_mult v_Vsc 
                                                             v_Voc) 
                                                          (abst_mult v_Voc 
                                                             v_Vsc) 
                                                          (v_Vee:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                   (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                             v_Vjd v_Vee) 
                                                          (v_Vfe:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))))) =>
                                                           zen.Rnoteq 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   v_Voc 
                                                                   v_Vqc) 
                                                                (abst_mult 
                                                                   v_Voc 
                                                                   v_Vsc)) 
                                                             v_Vfe) v_Vce) 
                                                       v_Vld) 
                                                    (v_Vge:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                 (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   v_Voc 
                                                                   v_Vqc) 
                                                                (abst_mult 
                                                                   v_Voc 
                                                                   v_Vsc)))) 
                                                       v_Vge v_Ved) v_Vuc) 
                                                 (v_Vee:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_mult 
                                                                 v_Vsc v_Voc) 
                                                              (abst_mult 
                                                                 v_Voc v_Vsc))))) =>
                                                  zen.Rcut 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                v_Vsc v_Voc) 
                                                             (abst_mult 
                                                                v_Voc v_Vsc)))) 
                                                    (v_Vad:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                 (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vkc:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vlc:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vmc:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkc 
                                                                    v_Vlc))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkc 
                                                                    v_Vmc))))))) 
                                                       (abst_mult v_Vqc v_Voc) 
                                                       (v_Vhe:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              abst_T 
                                                              (v_Vlc:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.forall 
                                                                 abst_T 
                                                                 (v_Vmc:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    v_Vlc))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    v_Vmc)))))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vlc:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vmc:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    v_Vlc))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    v_Vmc)))))) 
                                                          (abst_mult v_Vsc 
                                                             v_Voc) 
                                                          (v_Vie:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 abst_T 
                                                                 (v_Vmc:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc)))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    v_Vmc))))))) =>
                                                           zen.Rall abst_T 
                                                             (v_Vmc:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    v_Vmc))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    v_Vmc))))) 
                                                             (abst_mult 
                                                                v_Voc v_Vsc) 
                                                             (v_Vje:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc)))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc))))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc))))) 
                                                                (v_Vae:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc)))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc)))) 
                                                                   v_Vuc 
                                                                   v_Vae) 
                                                                (v_Vke:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                   (v_Vle:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                    v_Vad 
                                                                    v_Vle) 
                                                                   (v_Vme:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vkd:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vkd)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)) 
                                                                    (v_Vne:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Voe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Voe 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc))))) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (v_Vnd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc))))) 
                                                                    (v_Vod:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc))) 
                                                                    (v_Vpd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc)))) =>
                                                                    zen.Reqsym 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    v_Vpd 
                                                                    v_Vnd) 
                                                                    v_Vod) 
                                                                    (v_Vvd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc)))) 
                                                                    (v_Vzc:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vkc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vlc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vmc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkc 
                                                                    v_Vlc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkc 
                                                                    v_Vmc))))))) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (v_Vwd:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vlc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vmc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    v_Vlc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    v_Vmc)))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vlc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vmc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    v_Vlc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    v_Vmc)))))) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (v_Vxd:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vmc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    v_Vmc))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vmc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    v_Vmc))))) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (v_Vpe:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc))))) 
                                                                    (v_Vhd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc)))) 
                                                                    v_Vzc 
                                                                    v_Vhd) 
                                                                    (v_Vqe:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                    (v_Vre:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vqc 
                                                                    v_Voc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                    v_Vme 
                                                                    v_Vre) 
                                                                    (v_Vge:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                    v_Vge 
                                                                    v_Ved) 
                                                                    v_Vqe) 
                                                                    v_Vpe) 
                                                                    v_Vxd) 
                                                                    v_Vwd) 
                                                                    abst_equal_transitive) 
                                                                    v_Vvd) 
                                                                    v_Vid) 
                                                                    (v_Vfe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vde:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    v_Vde) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc))))) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (v_Vse:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    v_Vse) 
                                                                    (v_Vfe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)) 
                                                                    v_Vfe) 
                                                                    v_Vfe) 
                                                                    v_Vne) 
                                                                    (v_Vge:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                    v_Vge 
                                                                    v_Ved) 
                                                                    v_Vme) 
                                                                   v_Vke) 
                                                                v_Vje) v_Vie) 
                                                          v_Vhe) 
                                                       abst_equal_transitive) 
                                                    (v_Vle:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (
                                                                    abst_mult 
                                                                    v_Voc 
                                                                    v_Vsc)))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   v_Vsc 
                                                                   v_Voc) 
                                                                (abst_mult 
                                                                   v_Voc 
                                                                   v_Vsc)))) 
                                                       v_Vad v_Vle)))) 
                                           (v_Vte:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Voc 
                                                              abst_zero))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Vqc 
                                                              v_Vsc)))))) =>
                                            zen.Raxiom 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Voc 
                                                          abst_zero))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vqc 
                                                          v_Vsc)))) v_Vwc 
                                              v_Vte) v_Vdd) v_Vcd) v_Vbd) 
                                  abst_mult_is_left_regular) v_Vxc) v_Vyc) 
                         abst_mult_commutes) abst_mult_commutes) v_Vvc) v_Vtc) 
             v_Vrc) v_Vpc) v_Vnc).

def Cancellative_commutative_monoid__mult_is_regular :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_mult_is_left_regular:(dk_logic.eP 
                               (dk_logic.forall abst_T 
                                  (x:(cc.eT abst_T) =>
                                   dk_logic.forall abst_T 
                                     (y:(cc.eT abst_T) =>
                                      dk_logic.forall abst_T 
                                        (z:(cc.eT abst_T) =>
                                         dk_logic.imp 
                                           (dk_logic.ebP 
                                              (abst_equal (abst_mult x y) 
                                                 (abst_mult x z))) 
                                           (dk_logic.not 
                                              (dk_logic.imp 
                                                 (dk_logic.ebP 
                                                    (abst_equal x abst_zero)) 
                                                 (dk_logic.ebP 
                                                    (abst_equal y z))))))))) ->
  abst_mult_is_right_regular:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.forall abst_T 
                                         (z:(cc.eT abst_T) =>
                                          dk_logic.imp 
                                            (dk_logic.ebP 
                                               (abst_equal (abst_mult y x) 
                                                  (abst_mult z x))) 
                                            (dk_logic.not 
                                               (dk_logic.imp 
                                                  (dk_logic.ebP 
                                                     (abst_equal x abst_zero)) 
                                                  (dk_logic.ebP 
                                                     (abst_equal y z))))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.and 
                (dk_logic.imp 
                   (dk_logic.ebP (abst_equal (abst_mult x y) (abst_mult x z))) 
                   (dk_logic.not 
                      (dk_logic.imp (dk_logic.ebP (abst_equal x abst_zero)) 
                         (dk_logic.ebP (abst_equal y z))))) 
                (dk_logic.imp 
                   (dk_logic.ebP (abst_equal (abst_mult x z) (abst_mult y z))) 
                   (dk_logic.not 
                      (dk_logic.imp (dk_logic.ebP (abst_equal z abst_zero)) 
                         (dk_logic.ebP (abst_equal x y)))))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_mult_is_left_regular:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp 
                 (dk_logic.ebP (abst_equal (abst_mult x y) (abst_mult x z))) 
                 (dk_logic.not 
                    (dk_logic.imp (dk_logic.ebP (abst_equal x abst_zero)) 
                       (dk_logic.ebP (abst_equal y z))))))))) =>
  abst_mult_is_right_regular:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp 
                 (dk_logic.ebP (abst_equal (abst_mult y x) (abst_mult z x))) 
                 (dk_logic.not 
                    (dk_logic.imp (dk_logic.ebP (abst_equal x abst_zero)) 
                       (dk_logic.ebP (abst_equal y z))))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.and 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult v_Vzb v_Vac) 
                            (abst_mult v_Vzb v_Vbc)))) 
                   (zen.not 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vzb abst_zero))) 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vac v_Vbc)))))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult v_Vzb v_Vbc) 
                            (abst_mult v_Vac v_Vbc)))) 
                   (zen.not 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vbc abst_zero))) 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vzb v_Vac)))))))))) 
    (v_Vcc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.and 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult v_Vzb v_Vac) 
                                   (abst_mult v_Vzb v_Vbc)))) 
                          (zen.not 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal v_Vzb abst_zero))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vac v_Vbc)))))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult v_Vzb v_Vbc) 
                                   (abst_mult v_Vac v_Vbc)))) 
                          (zen.not 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal v_Vbc abst_zero))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vzb v_Vac)))))))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.and 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult v_Vzb v_Vac) 
                            (abst_mult v_Vzb v_Vbc)))) 
                   (zen.not 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vzb abst_zero))) 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vac v_Vbc)))))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult v_Vzb v_Vbc) 
                            (abst_mult v_Vac v_Vbc)))) 
                   (zen.not 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vbc abst_zero))) 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vzb v_Vac))))))))) 
       (v_Vdc:(zen.term abst_T) =>
        v_Vec:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.and 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult v_Vdc v_Vac) 
                                   (abst_mult v_Vdc v_Vbc)))) 
                          (zen.not 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal v_Vdc abst_zero))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vac v_Vbc)))))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult v_Vdc v_Vbc) 
                                   (abst_mult v_Vac v_Vbc)))) 
                          (zen.not 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal v_Vbc abst_zero))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vdc v_Vac))))))))))) =>
        zen.Rnotall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.and 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult v_Vdc v_Vac) 
                            (abst_mult v_Vdc v_Vbc)))) 
                   (zen.not 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vdc abst_zero))) 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vac v_Vbc)))))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult v_Vdc v_Vbc) 
                            (abst_mult v_Vac v_Vbc)))) 
                   (zen.not 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vbc abst_zero))) 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vdc v_Vac)))))))) 
          (v_Vfc:(zen.term abst_T) =>
           v_Vgc:
           (zen.proof 
              (zen.not 
                 (zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.and 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult v_Vdc v_Vfc) 
                                   (abst_mult v_Vdc v_Vbc)))) 
                          (zen.not 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal v_Vdc abst_zero))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vfc v_Vbc)))))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult v_Vdc v_Vbc) 
                                   (abst_mult v_Vfc v_Vbc)))) 
                          (zen.not 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal v_Vbc abst_zero))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vdc v_Vfc)))))))))) =>
           zen.Rnotall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.and 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult v_Vdc v_Vfc) 
                            (abst_mult v_Vdc v_Vbc)))) 
                   (zen.not 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vdc abst_zero))) 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vfc v_Vbc)))))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult v_Vdc v_Vbc) 
                            (abst_mult v_Vfc v_Vbc)))) 
                   (zen.not 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vbc abst_zero))) 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vdc v_Vfc))))))) 
             (v_Vhc:(zen.term abst_T) =>
              v_Vic:
              (zen.proof 
                 (zen.not 
                    (zen.and 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult v_Vdc v_Vfc) 
                                   (abst_mult v_Vdc v_Vhc)))) 
                          (zen.not 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal v_Vdc abst_zero))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vfc v_Vhc)))))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult v_Vdc v_Vhc) 
                                   (abst_mult v_Vfc v_Vhc)))) 
                          (zen.not 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal v_Vhc abst_zero))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vdc v_Vfc))))))))) =>
              zen.Rnotand 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult v_Vdc v_Vfc) 
                            (abst_mult v_Vdc v_Vhc)))) 
                   (zen.not 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vdc abst_zero))) 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vfc v_Vhc)))))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult v_Vdc v_Vhc) 
                            (abst_mult v_Vfc v_Vhc)))) 
                   (zen.not 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vhc abst_zero))) 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vdc v_Vfc)))))) 
                (v_Vjc:
                 (zen.proof 
                    (zen.not 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult v_Vdc v_Vfc) 
                                   (abst_mult v_Vdc v_Vhc)))) 
                          (zen.not 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal v_Vdc abst_zero))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vfc v_Vhc)))))))) =>
                 zen.Rall abst_T 
                   (v_Vzb:(zen.term abst_T) =>
                    zen.forall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult v_Vzb v_Vac) 
                                     (abst_mult v_Vzb v_Vbc)))) 
                            (zen.not 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal v_Vzb abst_zero))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vac v_Vbc)))))))) 
                   v_Vdc 
                   (v_Vkc:
                    (zen.proof 
                       (zen.forall abst_T 
                          (v_Vac:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vbc:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_mult v_Vdc v_Vac) 
                                         (abst_mult v_Vdc v_Vbc)))) 
                                (zen.not 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vdc abst_zero))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vac v_Vbc))))))))) =>
                    zen.Rall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult v_Vdc v_Vac) 
                                     (abst_mult v_Vdc v_Vbc)))) 
                            (zen.not 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal v_Vdc abst_zero))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vac v_Vbc))))))) 
                      v_Vfc 
                      (v_Vlc:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vbc:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_mult v_Vdc v_Vfc) 
                                         (abst_mult v_Vdc v_Vbc)))) 
                                (zen.not 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vdc abst_zero))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vfc v_Vbc)))))))) =>
                       zen.Rall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult v_Vdc v_Vfc) 
                                     (abst_mult v_Vdc v_Vbc)))) 
                            (zen.not 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal v_Vdc abst_zero))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vfc v_Vbc)))))) 
                         v_Vhc 
                         (v_Vmc:
                          (zen.proof 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_mult v_Vdc v_Vfc) 
                                         (abst_mult v_Vdc v_Vhc)))) 
                                (zen.not 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vdc abst_zero))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vfc v_Vhc))))))) =>
                          zen.Raxiom 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_mult v_Vdc v_Vfc) 
                                        (abst_mult v_Vdc v_Vhc)))) 
                               (zen.not 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vdc abst_zero))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vfc v_Vhc)))))) 
                            v_Vmc v_Vjc) v_Vlc) v_Vkc) 
                   abst_mult_is_left_regular) 
                (v_Vnc:
                 (zen.proof 
                    (zen.not 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult v_Vdc v_Vhc) 
                                   (abst_mult v_Vfc v_Vhc)))) 
                          (zen.not 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal v_Vhc abst_zero))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vdc v_Vfc)))))))) =>
                 zen.Rall abst_T 
                   (v_Vzb:(zen.term abst_T) =>
                    zen.forall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult v_Vac v_Vzb) 
                                     (abst_mult v_Vbc v_Vzb)))) 
                            (zen.not 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal v_Vzb abst_zero))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vac v_Vbc)))))))) 
                   v_Vhc 
                   (v_Voc:
                    (zen.proof 
                       (zen.forall abst_T 
                          (v_Vac:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vbc:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_mult v_Vac v_Vhc) 
                                         (abst_mult v_Vbc v_Vhc)))) 
                                (zen.not 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vhc abst_zero))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vac v_Vbc))))))))) =>
                    zen.Rall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult v_Vac v_Vhc) 
                                     (abst_mult v_Vbc v_Vhc)))) 
                            (zen.not 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal v_Vhc abst_zero))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vac v_Vbc))))))) 
                      v_Vdc 
                      (v_Vpc:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vbc:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_mult v_Vdc v_Vhc) 
                                         (abst_mult v_Vbc v_Vhc)))) 
                                (zen.not 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vhc abst_zero))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vdc v_Vbc)))))))) =>
                       zen.Rall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult v_Vdc v_Vhc) 
                                     (abst_mult v_Vbc v_Vhc)))) 
                            (zen.not 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal v_Vhc abst_zero))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vdc v_Vbc)))))) 
                         v_Vfc 
                         (v_Vqc:
                          (zen.proof 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_mult v_Vdc v_Vhc) 
                                         (abst_mult v_Vfc v_Vhc)))) 
                                (zen.not 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vhc abst_zero))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vdc v_Vfc))))))) =>
                          zen.Raxiom 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_mult v_Vdc v_Vhc) 
                                        (abst_mult v_Vfc v_Vhc)))) 
                               (zen.not 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vhc abst_zero))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vdc v_Vfc)))))) 
                            v_Vqc v_Vnc) v_Vpc) v_Voc) 
                   abst_mult_is_right_regular) v_Vic) v_Vgc) v_Vec) v_Vcc).

def Regular_monoid__divides :
  abst_T:cc.uT ->
  abst_exquo:((cc.eT abst_T) ->
              (cc.eT abst_T) -> cc.eT (basics.partiel__t abst_T)) ->
  x:(cc.eT abst_T) -> y:(cc.eT abst_T) -> dk_logic.Prop
  :=
  abst_T:cc.uT =>
  abst_exquo:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT (basics.partiel__t abst_T)) =>
  x:(cc.eT abst_T) =>
  y:(cc.eT abst_T) =>
  dk_logic.ebP 
    (basics._tilda__tilda_ (basics.is_failed abst_T (abst_exquo y x))).

def Regular_monoid__recip :
  abst_T:cc.uT ->
  abst_exquo:((cc.eT abst_T) ->
              (cc.eT abst_T) -> cc.eT (basics.partiel__t abst_T)) ->
  abst_one:(cc.eT abst_T) ->
  x:(cc.eT abst_T) -> cc.eT (basics.partiel__t abst_T)
  :=
  abst_T:cc.uT =>
  abst_exquo:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT (basics.partiel__t abst_T)) =>
  abst_one:(cc.eT abst_T) => x:(cc.eT abst_T) => abst_exquo abst_one x.

def Regular_monoid__divides_extends_equal :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_exquo:((cc.eT abst_T) ->
              (cc.eT abst_T) -> cc.eT (basics.partiel__t abst_T)) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
             (Regular_monoid__divides abst_T abst_exquo x y))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_exquo:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT (basics.partiel__t abst_T)) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
             (Regular_monoid__divides abst_T abst_exquo x y)))).

def Regular_monoid__divides_reverses_mult :
  abst_T:cc.uT ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_divides:((cc.eT abst_T) -> (cc.eT abst_T) -> dk_logic.Prop) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.and (abst_divides x (abst_mult x y)) 
             (abst_divides y (abst_mult x y)))))
  :=
  abst_T:cc.uT =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_divides:((cc.eT abst_T) -> (cc.eT abst_T) -> dk_logic.Prop) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.and (abst_divides x (abst_mult x y)) 
             (abst_divides y (abst_mult x y))))).

def Regular_monoid__divides_transitive :
  abst_T:cc.uT ->
  abst_divides:((cc.eT abst_T) -> (cc.eT abst_T) -> dk_logic.Prop) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp (abst_divides x y) 
                (dk_logic.imp (abst_divides y z) (abst_divides x z))))))
  :=
  abst_T:cc.uT =>
  abst_divides:((cc.eT abst_T) -> (cc.eT abst_T) -> dk_logic.Prop) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp (abst_divides x y) 
                (dk_logic.imp (abst_divides y z) (abst_divides x z)))))).

def Division_monoid__inv :
  abst_T:cc.uT ->
  abst_div:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_one:(cc.eT abst_T) -> x:(cc.eT abst_T) -> cc.eT abst_T
  :=
  abst_T:cc.uT =>
  abst_div:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_one:(cc.eT abst_T) => x:(cc.eT abst_T) => abst_div abst_one x.

def Division_monoid__divides :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_zero:(cc.eT abst_T) ->
  x:(cc.eT abst_T) -> y:(cc.eT abst_T) -> dk_logic.Prop
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_zero:(cc.eT abst_T) =>
  x:(cc.eT abst_T) =>
  y:(cc.eT abst_T) =>
  dk_logic.ebP 
    (basics._bar__bar_ (abst_equal y abst_zero) 
       (basics._tilda__tilda_ (abst_equal x abst_zero))).

def Division_monoid__divides_transitive :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_zero:(cc.eT abst_T) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp 
                (Division_monoid__divides abst_T abst_equal abst_zero x y) 
                (dk_logic.imp 
                   (Division_monoid__divides abst_T abst_equal abst_zero y z) 
                   (Division_monoid__divides abst_T abst_equal abst_zero x z))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_zero:(cc.eT abst_T) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle 
                   (Division_monoid__divides abst_T abst_equal abst_zero 
                      v_Vzb v_Vac)) 
                (zen.imp 
                   (zen.triangle 
                      (Division_monoid__divides abst_T abst_equal abst_zero 
                         v_Vac v_Vbc)) 
                   (zen.triangle 
                      (Division_monoid__divides abst_T abst_equal abst_zero 
                         v_Vzb v_Vbc))))))) 
    (v_Vcc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle 
                          (Division_monoid__divides abst_T abst_equal 
                             abst_zero v_Vzb v_Vac)) 
                       (zen.imp 
                          (zen.triangle 
                             (Division_monoid__divides abst_T abst_equal 
                                abst_zero v_Vac v_Vbc)) 
                          (zen.triangle 
                             (Division_monoid__divides abst_T abst_equal 
                                abst_zero v_Vzb v_Vbc))))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle 
                   (Division_monoid__divides abst_T abst_equal abst_zero 
                      v_Vzb v_Vac)) 
                (zen.imp 
                   (zen.triangle 
                      (Division_monoid__divides abst_T abst_equal abst_zero 
                         v_Vac v_Vbc)) 
                   (zen.triangle 
                      (Division_monoid__divides abst_T abst_equal abst_zero 
                         v_Vzb v_Vbc)))))) 
       (v_Vdc:(zen.term abst_T) =>
        v_Vec:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle 
                          (Division_monoid__divides abst_T abst_equal 
                             abst_zero v_Vdc v_Vac)) 
                       (zen.imp 
                          (zen.triangle 
                             (Division_monoid__divides abst_T abst_equal 
                                abst_zero v_Vac v_Vbc)) 
                          (zen.triangle 
                             (Division_monoid__divides abst_T abst_equal 
                                abst_zero v_Vdc v_Vbc)))))))) =>
        zen.Rnotall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle 
                   (Division_monoid__divides abst_T abst_equal abst_zero 
                      v_Vdc v_Vac)) 
                (zen.imp 
                   (zen.triangle 
                      (Division_monoid__divides abst_T abst_equal abst_zero 
                         v_Vac v_Vbc)) 
                   (zen.triangle 
                      (Division_monoid__divides abst_T abst_equal abst_zero 
                         v_Vdc v_Vbc))))) 
          (v_Vfc:(zen.term abst_T) =>
           v_Vgc:
           (zen.proof 
              (zen.not 
                 (zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle 
                          (Division_monoid__divides abst_T abst_equal 
                             abst_zero v_Vdc v_Vfc)) 
                       (zen.imp 
                          (zen.triangle 
                             (Division_monoid__divides abst_T abst_equal 
                                abst_zero v_Vfc v_Vbc)) 
                          (zen.triangle 
                             (Division_monoid__divides abst_T abst_equal 
                                abst_zero v_Vdc v_Vbc))))))) =>
           zen.Rnotall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle 
                   (Division_monoid__divides abst_T abst_equal abst_zero 
                      v_Vdc v_Vfc)) 
                (zen.imp 
                   (zen.triangle 
                      (Division_monoid__divides abst_T abst_equal abst_zero 
                         v_Vfc v_Vbc)) 
                   (zen.triangle 
                      (Division_monoid__divides abst_T abst_equal abst_zero 
                         v_Vdc v_Vbc)))) 
             (v_Vhc:(zen.term abst_T) =>
              v_Vic:
              (zen.proof 
                 (zen.not 
                    (zen.imp 
                       (zen.triangle 
                          (Division_monoid__divides abst_T abst_equal 
                             abst_zero v_Vdc v_Vfc)) 
                       (zen.imp 
                          (zen.triangle 
                             (Division_monoid__divides abst_T abst_equal 
                                abst_zero v_Vfc v_Vhc)) 
                          (zen.triangle 
                             (Division_monoid__divides abst_T abst_equal 
                                abst_zero v_Vdc v_Vhc)))))) =>
              zen.Rnotimply 
                (zen.triangle 
                   (Division_monoid__divides abst_T abst_equal abst_zero 
                      v_Vdc v_Vfc)) 
                (zen.imp 
                   (zen.triangle 
                      (Division_monoid__divides abst_T abst_equal abst_zero 
                         v_Vfc v_Vhc)) 
                   (zen.triangle 
                      (Division_monoid__divides abst_T abst_equal abst_zero 
                         v_Vdc v_Vhc))) 
                (v_Vjc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._bar__bar_ (abst_equal v_Vfc abst_zero) 
                             (basics._tilda__tilda_ 
                                (abst_equal v_Vdc abst_zero)))))) =>
                 v_Vkc:
                 (zen.proof 
                    (zen.not 
                       (zen.imp 
                          (zen.triangle 
                             (Division_monoid__divides abst_T abst_equal 
                                abst_zero v_Vfc v_Vhc)) 
                          (zen.triangle 
                             (Division_monoid__divides abst_T abst_equal 
                                abst_zero v_Vdc v_Vhc))))) =>
                 zen.Rnotimply 
                   (zen.triangle 
                      (Division_monoid__divides abst_T abst_equal abst_zero 
                         v_Vfc v_Vhc)) 
                   (zen.triangle 
                      (Division_monoid__divides abst_T abst_equal abst_zero 
                         v_Vdc v_Vhc)) 
                   (v_Vlc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (basics._bar__bar_ (abst_equal v_Vhc abst_zero) 
                                (basics._tilda__tilda_ 
                                   (abst_equal v_Vfc abst_zero)))))) =>
                    v_Vmc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (basics._bar__bar_ 
                                   (abst_equal v_Vhc abst_zero) 
                                   (basics._tilda__tilda_ 
                                      (abst_equal v_Vdc abst_zero))))))) =>
                    focal.zenon_focal_or (abst_equal v_Vfc abst_zero) 
                      (basics._tilda__tilda_ (abst_equal v_Vdc abst_zero)) 
                      (v_Vnc:
                       (zen.proof 
                          (zen.or 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vfc abst_zero))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._tilda__tilda_ 
                                      (abst_equal v_Vdc abst_zero)))))) =>
                       zen.Ror 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vfc abst_zero))) 
                         (zen.triangle 
                            (focal.is_true 
                               (basics._tilda__tilda_ 
                                  (abst_equal v_Vdc abst_zero)))) 
                         (v_Voc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vfc abst_zero)))) =>
                          focal.zenon_focal_or (abst_equal v_Vhc abst_zero) 
                            (basics._tilda__tilda_ 
                               (abst_equal v_Vfc abst_zero)) 
                            (v_Vpc:
                             (zen.proof 
                                (zen.or 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal v_Vhc abst_zero))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._tilda__tilda_ 
                                            (abst_equal v_Vfc abst_zero)))))) =>
                             zen.Ror 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vhc abst_zero))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._tilda__tilda_ 
                                        (abst_equal v_Vfc abst_zero)))) 
                               (v_Vqc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal v_Vhc abst_zero)))) =>
                                focal.zenon_focal_notor 
                                  (abst_equal v_Vhc abst_zero) 
                                  (basics._tilda__tilda_ 
                                     (abst_equal v_Vdc abst_zero)) 
                                  (v_Vrc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.or 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vhc abst_zero))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (basics._tilda__tilda_ 
                                                     (abst_equal v_Vdc 
                                                        abst_zero))))))) =>
                                   zen.Rnotor 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vhc abst_zero))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (basics._tilda__tilda_ 
                                              (abst_equal v_Vdc abst_zero)))) 
                                     (v_Vsc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vhc abst_zero))))) =>
                                      v_Vtc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (basics._tilda__tilda_ 
                                                     (abst_equal v_Vdc 
                                                        abst_zero)))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vhc abst_zero))) 
                                        v_Vqc v_Vsc) v_Vrc) v_Vmc) 
                               (v_Vuc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._tilda__tilda_ 
                                            (abst_equal v_Vfc abst_zero))))) =>
                                focal.zenon_focal_not 
                                  (abst_equal v_Vfc abst_zero) 
                                  (v_Vvc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vfc abst_zero))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vfc abst_zero))) 
                                     v_Voc v_Vvc) v_Vuc) v_Vpc) v_Vlc) 
                         (v_Vwc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._tilda__tilda_ 
                                      (abst_equal v_Vdc abst_zero))))) =>
                          focal.zenon_focal_notor 
                            (abst_equal v_Vhc abst_zero) 
                            (basics._tilda__tilda_ 
                               (abst_equal v_Vdc abst_zero)) 
                            (v_Vrc:
                             (zen.proof 
                                (zen.not 
                                   (zen.or 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vhc abst_zero))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._tilda__tilda_ 
                                               (abst_equal v_Vdc abst_zero))))))) =>
                             zen.Rnotor 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vhc abst_zero))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._tilda__tilda_ 
                                        (abst_equal v_Vdc abst_zero)))) 
                               (v_Vsc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vhc abst_zero))))) =>
                                v_Vtc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._tilda__tilda_ 
                                               (abst_equal v_Vdc abst_zero)))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._tilda__tilda_ 
                                           (abst_equal v_Vdc abst_zero)))) 
                                  v_Vwc v_Vtc) v_Vrc) v_Vmc) v_Vnc) v_Vjc) 
                   v_Vkc) v_Vic) v_Vgc) v_Vec) v_Vcc).

def Division_monoid__divides_extends_equal :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_zero:(cc.eT abst_T) ->
  abst_different:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (abst_equal x y)) 
                                   (dk_logic.ebP (abst_equal y x)))))) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_same_is_not_different:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.eqv 
                                         (dk_logic.ebP (abst_different x y)) 
                                         (dk_logic.not 
                                            (dk_logic.ebP (abst_equal x y))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
             (Division_monoid__divides abst_T abst_equal abst_zero x y))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_zero:(cc.eT abst_T) =>
  abst_different:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal y x)))))) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_same_is_not_different:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_different x y)) 
              (dk_logic.not (dk_logic.ebP (abst_equal x y))))))) =>
  (__M_1_LEMMA:
   (x:(cc.eT abst_T) ->
    y:(cc.eT abst_T) ->
    H:(dk_logic.eP (dk_logic.ebP (abst_equal x y))) ->
    dk_logic.eP (Division_monoid__divides abst_T abst_equal abst_zero x y)) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.imp (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
              (zen.triangle 
                 (Division_monoid__divides abst_T abst_equal abst_zero v_Vzb 
                    v_Vac))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
                     (zen.triangle 
                        (Division_monoid__divides abst_T abst_equal 
                           abst_zero v_Vzb v_Vac))))))) =>
      zen.Raxiom 
        (zen.forall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
                 (zen.triangle 
                    (Division_monoid__divides abst_T abst_equal abst_zero 
                       v_Vzb v_Vac))))) __M_1_LEMMA v_Vbc)) 
    (x:(cc.eT abst_T) =>
     y:(cc.eT abst_T) =>
     H:(dk_logic.eP (dk_logic.ebP (abst_equal x y))) =>
     (__M_1_1_LEMMA:
      (H_0:(dk_logic.eP (dk_logic.ebP (abst_equal y abst_zero))) ->
       dk_logic.eP (Division_monoid__divides abst_T abst_equal abst_zero x y)) =>
      (__M_1_2_LEMMA:
       (H_1:(dk_logic.eP (dk_logic.ebP (abst_different y abst_zero))) ->
        dk_logic.eP 
          (Division_monoid__divides abst_T abst_equal abst_zero x y)) =>
       zen.nnpp 
         (zen.triangle 
            (Division_monoid__divides abst_T abst_equal abst_zero x y)) 
         (v_Vac:
          (zen.proof 
             (zen.not 
                (zen.triangle 
                   (Division_monoid__divides abst_T abst_equal abst_zero x y)))) =>
          zen.Rimply (zen.triangle (focal.is_true (abst_equal y abst_zero))) 
            (zen.triangle 
               (Division_monoid__divides abst_T abst_equal abst_zero x y)) 
            (v_Vbc:
             (zen.proof 
                (zen.not 
                   (zen.triangle (focal.is_true (abst_equal y abst_zero))))) =>
             zen.Rimply 
               (zen.triangle (focal.is_true (abst_different y abst_zero))) 
               (zen.triangle 
                  (Division_monoid__divides abst_T abst_equal abst_zero x y)) 
               (v_Vcc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true (abst_different y abst_zero))))) =>
                zen.Rall abst_T 
                  (v_Vdc:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vec:(zen.term abst_T) =>
                      zen.eqv 
                        (zen.triangle 
                           (focal.is_true (abst_different v_Vdc v_Vec))) 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Vdc v_Vec)))))) y 
                  (v_Vfc:
                   (zen.proof 
                      (zen.forall abst_T 
                         (v_Vec:(zen.term abst_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true (abst_different y v_Vec))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true (abst_equal y v_Vec))))))) =>
                   zen.Rall abst_T 
                     (v_Vec:(zen.term abst_T) =>
                      zen.eqv 
                        (zen.triangle 
                           (focal.is_true (abst_different y v_Vec))) 
                        (zen.not 
                           (zen.triangle (focal.is_true (abst_equal y v_Vec))))) 
                     abst_zero 
                     (v_Vgc:
                      (zen.proof 
                         (zen.eqv 
                            (zen.triangle 
                               (focal.is_true (abst_different y abst_zero))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true (abst_equal y abst_zero)))))) =>
                      zen.Requiv 
                        (zen.triangle 
                           (focal.is_true (abst_different y abst_zero))) 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true (abst_equal y abst_zero)))) 
                        (v_Vcc0:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true (abst_different y abst_zero))))) =>
                         v_Vhc:
                         (zen.proof 
                            (zen.not 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal y abst_zero)))))) =>
                         zen.Raxiom 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true (abst_equal y abst_zero)))) 
                           v_Vbc v_Vhc) 
                        (v_Vic:
                         (zen.proof 
                            (zen.triangle 
                               (focal.is_true (abst_different y abst_zero)))) =>
                         v_Vbc0:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true (abst_equal y abst_zero))))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true (abst_different y abst_zero))) 
                           v_Vic v_Vcc) v_Vgc) v_Vfc) 
                  abst_same_is_not_different) 
               (v_Vjc:
                (zen.proof 
                   (zen.triangle 
                      (Division_monoid__divides abst_T abst_equal abst_zero 
                         x y))) =>
                zen.Raxiom 
                  (zen.triangle 
                     (Division_monoid__divides abst_T abst_equal abst_zero x 
                        y)) v_Vjc v_Vac) __M_1_2_LEMMA) 
            (v_Vjc:
             (zen.proof 
                (zen.triangle 
                   (Division_monoid__divides abst_T abst_equal abst_zero x y))) =>
             zen.Raxiom 
               (zen.triangle 
                  (Division_monoid__divides abst_T abst_equal abst_zero x y)) 
               v_Vjc v_Vac) __M_1_1_LEMMA)) 
        (H_1:(dk_logic.eP (dk_logic.ebP (abst_different y abst_zero))) =>
         (__M_1_2_1_LEMMA:
          (dk_logic.eP (dk_logic.not (dk_logic.ebP (abst_equal x abst_zero)))) =>
          zen.nnpp 
            (zen.triangle 
               (Division_monoid__divides abst_T abst_equal abst_zero x y)) 
            (v_Vzb:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (basics._bar__bar_ (abst_equal y abst_zero) 
                            (basics._tilda__tilda_ (abst_equal x abst_zero))))))) =>
             focal.zenon_focal_notor (abst_equal y abst_zero) 
               (basics._tilda__tilda_ (abst_equal x abst_zero)) 
               (v_Vac:
                (zen.proof 
                   (zen.not 
                      (zen.or 
                         (zen.triangle 
                            (focal.is_true (abst_equal y abst_zero))) 
                         (zen.triangle 
                            (focal.is_true 
                               (basics._tilda__tilda_ 
                                  (abst_equal x abst_zero))))))) =>
                zen.Rnotor 
                  (zen.triangle (focal.is_true (abst_equal y abst_zero))) 
                  (zen.triangle 
                     (focal.is_true 
                        (basics._tilda__tilda_ (abst_equal x abst_zero)))) 
                  (v_Vbc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true (abst_equal y abst_zero))))) =>
                   v_Vcc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (basics._tilda__tilda_ 
                                  (abst_equal x abst_zero)))))) =>
                   focal.zenon_focal_notnot (abst_equal x abst_zero) 
                     (v_Vdc:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true (abst_equal x abst_zero)))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true (abst_equal x abst_zero))) v_Vdc 
                        __M_1_2_1_LEMMA) v_Vcc) v_Vac) v_Vzb)) 
           (zen.nnpp 
              (zen.not 
                 (zen.triangle (focal.is_true (abst_equal x abst_zero)))) 
              (v_Vlc:
               (zen.proof 
                  (zen.not 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true (abst_equal x abst_zero)))))) =>
               zen.Rall abst_T 
                 (v_Vmc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vnc:(zen.term abst_T) =>
                     zen.eqv 
                       (zen.triangle 
                          (focal.is_true (abst_different v_Vmc v_Vnc))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vmc v_Vnc)))))) y 
                 (v_Voc:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vnc:(zen.term abst_T) =>
                         zen.eqv 
                           (zen.triangle 
                              (focal.is_true (abst_different y v_Vnc))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true (abst_equal y v_Vnc))))))) =>
                  zen.Rall abst_T 
                    (v_Vnc:(zen.term abst_T) =>
                     zen.eqv 
                       (zen.triangle (focal.is_true (abst_different y v_Vnc))) 
                       (zen.not 
                          (zen.triangle (focal.is_true (abst_equal y v_Vnc))))) 
                    abst_zero 
                    (v_Vpc:
                     (zen.proof 
                        (zen.eqv 
                           (zen.triangle 
                              (focal.is_true (abst_different y abst_zero))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true (abst_equal y abst_zero)))))) =>
                     zen.Requiv 
                       (zen.triangle 
                          (focal.is_true (abst_different y abst_zero))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_equal y abst_zero)))) 
                       (v_Vqc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true (abst_different y abst_zero))))) =>
                        v_Vrc:
                        (zen.proof 
                           (zen.not 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal y abst_zero)))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true (abst_different y abst_zero))) 
                          H_1 v_Vqc) 
                       (H_2:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true (abst_different y abst_zero)))) =>
                        v_Vsc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true (abst_equal y abst_zero))))) =>
                        zen.Rnotnot 
                          (zen.triangle 
                             (focal.is_true (abst_equal x abst_zero))) 
                          (v_Vtc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true (abst_equal x abst_zero)))) =>
                           zen.Rcut 
                             (zen.and 
                                (zen.not 
                                   (zen.triangle (zen.equal abst_T y x))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal y x))))) 
                             (v_Vuc:
                              (zen.proof 
                                 (zen.and 
                                    (zen.not 
                                       (zen.triangle (zen.equal abst_T y x))) 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true (abst_equal y x)))))) =>
                              zen.Rand 
                                (zen.not 
                                   (zen.triangle (zen.equal abst_T y x))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal y x)))) 
                                (v_Vvc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle (zen.equal abst_T y x)))) =>
                                 v_Vwc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true (abst_equal y x))))) =>
                                 zen.Rall abst_T 
                                   (v_Vmc:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Vnc:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vmc v_Vnc))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vnc v_Vmc))))) 
                                   x 
                                   (v_Vxc:
                                    (zen.proof 
                                       (zen.forall abst_T 
                                          (v_Vnc:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal x v_Vnc))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Vnc x)))))) =>
                                    zen.Rall abst_T 
                                      (v_Vnc:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal x v_Vnc))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vnc x)))) y 
                                      (v_Vyc:
                                       (zen.proof 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal x y))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal y x))))) =>
                                       zen.Rimply 
                                         (zen.triangle 
                                            (focal.is_true (abst_equal x y))) 
                                         (zen.triangle 
                                            (focal.is_true (abst_equal y x))) 
                                         (v_Vzc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x y))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal x y))) H v_Vzc) 
                                         (v_Vad:
                                          (zen.proof 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal y x)))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal y x))) v_Vad 
                                            v_Vwc) v_Vyc) v_Vxc) 
                                   abst_equal_symmetric) v_Vuc) 
                             (v_Vbd:
                              (zen.proof 
                                 (zen.not 
                                    (zen.and 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal abst_T y x))) 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true (abst_equal y x))))))) =>
                              zen.Rcut 
                                (zen.triangle 
                                   (zen.equal abst_T abst_zero abst_zero)) 
                                (v_Vcd:
                                 (zen.proof 
                                    (zen.triangle 
                                       (zen.equal abst_T abst_zero abst_zero))) =>
                                 zen.Rsubst basics.bool__t 
                                   (v_Vdd:(zen.term basics.bool__t) =>
                                    zen.triangle (focal.is_true v_Vdd)) 
                                   (abst_equal x abst_zero) 
                                   (abst_equal y abst_zero) 
                                   (v_Ved:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal basics.bool__t 
                                                (abst_equal x abst_zero) 
                                                (abst_equal y abst_zero))))) =>
                                    zen.Rsubst abst_T 
                                      (v_Vfd:(zen.term abst_T) =>
                                       zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (abst_equal v_Vfd abst_zero) 
                                               (abst_equal y abst_zero)))) x 
                                      y 
                                      (v_Vgd:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal abst_T x y)))) =>
                                       zen.Rnotand 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T y x))) 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal y x)))) 
                                         (v_Vhd:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal abst_T y x))))) =>
                                          zen.Rnotnot 
                                            (zen.triangle 
                                               (zen.equal abst_T y x)) 
                                            (v_Vid:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (zen.equal abst_T y x))) =>
                                             zen.Rcut 
                                               (zen.triangle 
                                                  (zen.equal abst_T y y)) 
                                               (v_Vjd:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (zen.equal abst_T y y))) =>
                                                zen.Rsubst abst_T 
                                                  (v_Vkd:(zen.term abst_T) =>
                                                   zen.triangle 
                                                     (zen.equal abst_T v_Vkd 
                                                        y)) y x 
                                                  (v_Vvc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T y x)))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (zen.equal abst_T y x)) 
                                                     v_Vid v_Vvc) 
                                                  (v_Vld:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (zen.equal abst_T x 
                                                            y))) =>
                                                   zen.Rsubst abst_T 
                                                     (v_Vmd:
                                                      (zen.term abst_T) =>
                                                      zen.triangle 
                                                        (zen.equal abst_T x 
                                                           v_Vmd)) y y 
                                                     (v_Vnd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T y y)))) =>
                                                      zen.Rnoteq abst_T y 
                                                        v_Vnd) 
                                                     (v_Vld0:
                                                      (zen.proof 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T x y))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              x y)) v_Vld0 
                                                        v_Vgd) v_Vld) v_Vjd) 
                                               (v_Vnd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal abst_T y 
                                                            y)))) =>
                                                zen.Rnoteq abst_T y v_Vnd)) 
                                            v_Vhd) 
                                         (v_Vod:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal y x)))))) =>
                                          zen.Rnotnot 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal y x))) 
                                            (v_Vad:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal y x)))) =>
                                             zen.Rall abst_T 
                                               (v_Vmc:(zen.term abst_T) =>
                                                zen.forall abst_T 
                                                  (v_Vnc:(zen.term abst_T) =>
                                                   zen.forall abst_T 
                                                     (v_Vpd:
                                                      (zen.term abst_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Vmc v_Vnc))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    v_Vnc 
                                                                    v_Vpd))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    v_Vmc 
                                                                    v_Vpd))))))) 
                                               y 
                                               (v_Vqd:
                                                (zen.proof 
                                                   (zen.forall abst_T 
                                                      (v_Vnc:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vpd:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    y v_Vnc))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vnc 
                                                                    v_Vpd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    y v_Vpd)))))))) =>
                                                zen.Rall abst_T 
                                                  (v_Vnc:(zen.term abst_T) =>
                                                   zen.forall abst_T 
                                                     (v_Vpd:
                                                      (zen.term abst_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal y 
                                                                 v_Vnc))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    v_Vnc 
                                                                    v_Vpd))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    y v_Vpd)))))) 
                                                  x 
                                                  (v_Vrd:
                                                   (zen.proof 
                                                      (zen.forall abst_T 
                                                         (v_Vpd:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    y x))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    x v_Vpd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    y v_Vpd))))))) =>
                                                   zen.Rall abst_T 
                                                     (v_Vpd:
                                                      (zen.term abst_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal y x))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    x v_Vpd))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    y v_Vpd))))) 
                                                     abst_zero 
                                                     (v_Vsd:
                                                      (zen.proof 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    y x))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    abst_zero))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    y 
                                                                    abst_zero)))))) =>
                                                      zen.Rimply 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal y x))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    x 
                                                                    abst_zero))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    y 
                                                                    abst_zero)))) 
                                                        (v_Vwc:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    y x))))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    y x))) 
                                                           v_Vad v_Vwc) 
                                                        (v_Vtd:
                                                         (zen.proof 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    abst_zero))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    y 
                                                                    abst_zero))))) =>
                                                         zen.Rimply 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    x 
                                                                    abst_zero))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    y 
                                                                    abst_zero))) 
                                                           (v_Vud:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    abst_zero))))) =>
                                                            zen.Raxiom 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    x 
                                                                    abst_zero))) 
                                                              v_Vtc v_Vud) 
                                                           (v_Vvd:
                                                            (zen.proof 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    y 
                                                                    abst_zero)))) =>
                                                            zen.Rsubst 
                                                              basics.bool__t 
                                                              (v_Vdd:
                                                               (zen.term 
                                                                  basics.bool__t) =>
                                                               zen.triangle 
                                                                 (focal.is_true 
                                                                    v_Vdd)) 
                                                              (abst_equal y 
                                                                 abst_zero) 
                                                              (abst_equal y 
                                                                 abst_zero) 
                                                              (v_Vwd:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    y 
                                                                    abst_zero) 
                                                                    (abst_equal 
                                                                    y 
                                                                    abst_zero))))) =>
                                                               zen.Rsubst 
                                                                 abst_T 
                                                                 (v_Vfd:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vfd 
                                                                    abst_zero) 
                                                                    (abst_equal 
                                                                    y 
                                                                    abst_zero)))) 
                                                                 y y 
                                                                 (v_Vnd:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T y 
                                                                    y)))) =>
                                                                  zen.Rnoteq 
                                                                    abst_T y 
                                                                    v_Vnd) 
                                                                 (v_Vwd0:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    y 
                                                                    abst_zero) 
                                                                    (abst_equal 
                                                                    y 
                                                                    abst_zero))))) =>
                                                                  zen.Rsubst 
                                                                    abst_T 
                                                                    (
                                                                    v_Vxd:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    y v_Vxd) 
                                                                    (abst_equal 
                                                                    y 
                                                                    abst_zero)))) 
                                                                    abst_zero 
                                                                    abst_zero 
                                                                    (
                                                                    v_Vyd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    abst_zero 
                                                                    abst_zero)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    abst_zero 
                                                                    abst_zero)) 
                                                                    v_Vcd 
                                                                    v_Vyd) 
                                                                    (
                                                                    v_Vwd0:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    y 
                                                                    abst_zero) 
                                                                    (abst_equal 
                                                                    y 
                                                                    abst_zero))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    y 
                                                                    abst_zero) 
                                                                    v_Vwd0) 
                                                                    v_Vwd0) 
                                                                 v_Vwd) 
                                                              (v_Vvd0:
                                                               (zen.proof 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y 
                                                                    abst_zero)))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    y 
                                                                    abst_zero))) 
                                                                 v_Vvd0 v_Vsc) 
                                                              v_Vvd) v_Vtd) 
                                                        v_Vsd) v_Vrd) v_Vqd) 
                                               abst_equal_transitive) v_Vod) 
                                         v_Vbd) 
                                      (v_Vwd:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (abst_equal y abst_zero) 
                                                   (abst_equal y abst_zero))))) =>
                                       zen.Rsubst abst_T 
                                         (v_Vxd:(zen.term abst_T) =>
                                          zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (abst_equal y v_Vxd) 
                                                  (abst_equal y abst_zero)))) 
                                         abst_zero abst_zero 
                                         (v_Vyd:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      abst_zero abst_zero)))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (zen.equal abst_T abst_zero 
                                                  abst_zero)) v_Vcd v_Vyd) 
                                         (v_Vwd0:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (abst_equal y abst_zero) 
                                                      (abst_equal y abst_zero))))) =>
                                          zen.Rnoteq basics.bool__t 
                                            (abst_equal y abst_zero) v_Vwd0) 
                                         v_Vwd) v_Ved) 
                                   (v_Vvd:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal y abst_zero)))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal y abst_zero))) v_Vvd 
                                      v_Vsc) v_Vtc) 
                                (v_Vyd:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal abst_T abst_zero 
                                             abst_zero)))) =>
                                 zen.Rcut 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal abst_zero abst_zero))) 
                                   (v_Vzd:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal abst_zero abst_zero)))) =>
                                    zen.Rall abst_T 
                                      (v_Vmc:(zen.term abst_T) =>
                                       zen.forall abst_T 
                                         (v_Vnc:(zen.term abst_T) =>
                                          zen.forall abst_T 
                                            (v_Vpd:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vmc v_Vnc))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vnc 
                                                           v_Vpd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vmc 
                                                           v_Vpd))))))) x 
                                      (v_Vae:
                                       (zen.proof 
                                          (zen.forall abst_T 
                                             (v_Vnc:(zen.term abst_T) =>
                                              zen.forall abst_T 
                                                (v_Vpd:(zen.term abst_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal x v_Vnc))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               v_Vnc v_Vpd))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal x 
                                                               v_Vpd)))))))) =>
                                       zen.Rall abst_T 
                                         (v_Vnc:(zen.term abst_T) =>
                                          zen.forall abst_T 
                                            (v_Vpd:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal x v_Vnc))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vnc 
                                                           v_Vpd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal x v_Vpd)))))) 
                                         abst_zero 
                                         (v_Vbe:
                                          (zen.proof 
                                             (zen.forall abst_T 
                                                (v_Vpd:(zen.term abst_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal x 
                                                            abst_zero))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               abst_zero 
                                                               v_Vpd))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal x 
                                                               v_Vpd))))))) =>
                                          zen.Rall abst_T 
                                            (v_Vpd:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal x abst_zero))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           abst_zero v_Vpd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal x v_Vpd))))) 
                                            abst_zero 
                                            (v_Vce:
                                             (zen.proof 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal x 
                                                            abst_zero))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               abst_zero 
                                                               abst_zero))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal x 
                                                               abst_zero)))))) =>
                                             zen.Rimply 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal x abst_zero))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           abst_zero 
                                                           abst_zero))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal x 
                                                           abst_zero)))) 
                                               (v_Vud:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal x 
                                                               abst_zero))))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal x 
                                                           abst_zero))) 
                                                  v_Vtc v_Vud) 
                                               (v_Vde:
                                                (zen.proof 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               abst_zero 
                                                               abst_zero))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal x 
                                                               abst_zero))))) =>
                                                zen.Rimply 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           abst_zero 
                                                           abst_zero))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal x 
                                                           abst_zero))) 
                                                  (v_Vee:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  abst_zero 
                                                                  abst_zero))))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              abst_zero 
                                                              abst_zero))) 
                                                     v_Vzd v_Vee) 
                                                  (v_Vtc0:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal x 
                                                               abst_zero)))) =>
                                                   zen.Rsubst basics.bool__t 
                                                     (v_Vdd:
                                                      (zen.term 
                                                         basics.bool__t) =>
                                                      zen.triangle 
                                                        (focal.is_true v_Vdd)) 
                                                     (abst_equal x abst_zero) 
                                                     (abst_equal y abst_zero) 
                                                     (v_Ved:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (abst_equal 
                                                                    x 
                                                                    abst_zero) 
                                                                  (abst_equal 
                                                                    y 
                                                                    abst_zero))))) =>
                                                      zen.Rsubst abst_T 
                                                        (v_Vfd:
                                                         (zen.term abst_T) =>
                                                         zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    v_Vfd 
                                                                    abst_zero) 
                                                                 (abst_equal 
                                                                    y 
                                                                    abst_zero)))) 
                                                        x y 
                                                        (v_Vgd:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    abst_T x 
                                                                    y)))) =>
                                                         zen.Rnotand 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T y 
                                                                    x))) 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    y x)))) 
                                                           (v_Vhd:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T y 
                                                                    x))))) =>
                                                            zen.Rnotnot 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T y 
                                                                    x)) 
                                                              (v_Vid:
                                                               (zen.proof 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T y 
                                                                    x))) =>
                                                               zen.Reqsym 
                                                                 abst_T y x 
                                                                 v_Vid v_Vgd) 
                                                              v_Vhd) 
                                                           (v_Vod:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y x)))))) =>
                                                            zen.Rnotnot 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    y x))) 
                                                              (v_Vad:
                                                               (zen.proof 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y x)))) =>
                                                               zen.Rall 
                                                                 abst_T 
                                                                 (v_Vmc:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.forall 
                                                                    abst_T 
                                                                    (
                                                                    v_Vnc:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vpd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vmc 
                                                                    v_Vnc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vnc 
                                                                    v_Vpd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vmc 
                                                                    v_Vpd))))))) 
                                                                 y 
                                                                 (v_Vqd:
                                                                  (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vnc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vpd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y v_Vnc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vnc 
                                                                    v_Vpd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y v_Vpd)))))))) =>
                                                                  zen.Rall 
                                                                    abst_T 
                                                                    (
                                                                    v_Vnc:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vpd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y v_Vnc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vnc 
                                                                    v_Vpd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y v_Vpd)))))) 
                                                                    x 
                                                                    (
                                                                    v_Vrd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vpd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y x))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x v_Vpd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y v_Vpd))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vpd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y x))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x v_Vpd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y v_Vpd))))) 
                                                                    abst_zero 
                                                                    (v_Vsd:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y x))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y 
                                                                    abst_zero)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y x))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y 
                                                                    abst_zero)))) 
                                                                    (v_Vwc:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y x))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y x))) 
                                                                    v_Vad 
                                                                    v_Vwc) 
                                                                    (v_Vtd:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y 
                                                                    abst_zero))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y 
                                                                    abst_zero))) 
                                                                    (v_Vud:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    abst_zero))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    abst_zero))) 
                                                                    v_Vtc0 
                                                                    v_Vud) 
                                                                    (v_Vvd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y 
                                                                    abst_zero)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y 
                                                                    abst_zero))) 
                                                                    v_Vvd 
                                                                    v_Vsc) 
                                                                    v_Vtd) 
                                                                    v_Vsd) 
                                                                    v_Vrd) 
                                                                    v_Vqd) 
                                                                 abst_equal_transitive) 
                                                              v_Vod) v_Vbd) 
                                                        (v_Vwd:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    y 
                                                                    abst_zero) 
                                                                    (abst_equal 
                                                                    y 
                                                                    abst_zero))))) =>
                                                         zen.Rsubst abst_T 
                                                           (v_Vxd:
                                                            (zen.term abst_T) =>
                                                            zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    y v_Vxd) 
                                                                    (
                                                                    abst_equal 
                                                                    y 
                                                                    abst_zero)))) 
                                                           abst_zero 
                                                           abst_zero 
                                                           (v_Vyd0:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    abst_zero 
                                                                    abst_zero)))) =>
                                                            zen.Rnoteq 
                                                              abst_T 
                                                              abst_zero 
                                                              v_Vyd0) 
                                                           (v_Vwd0:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    y 
                                                                    abst_zero) 
                                                                    (abst_equal 
                                                                    y 
                                                                    abst_zero))))) =>
                                                            zen.Rnoteq 
                                                              basics.bool__t 
                                                              (abst_equal y 
                                                                 abst_zero) 
                                                              v_Vwd0) v_Vwd) 
                                                        v_Ved) 
                                                     (v_Vvd:
                                                      (zen.proof 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal y 
                                                                  abst_zero)))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal y 
                                                                 abst_zero))) 
                                                        v_Vvd v_Vsc) v_Vtc0) 
                                                  v_Vde) v_Vce) v_Vbe) v_Vae) 
                                      abst_equal_transitive) 
                                   (v_Vee:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal abst_zero 
                                                   abst_zero))))) =>
                                    zen.Rnoteq abst_T abst_zero v_Vyd)))) 
                          v_Vlc) v_Vpc) v_Voc) abst_same_is_not_different)))) 
       (H_0:(dk_logic.eP (dk_logic.ebP (abst_equal y abst_zero))) =>
        zen.nnpp 
          (zen.triangle 
             (Division_monoid__divides abst_T abst_equal abst_zero x y)) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._bar__bar_ (abst_equal y abst_zero) 
                          (basics._tilda__tilda_ (abst_equal x abst_zero))))))) =>
           focal.zenon_focal_notor (abst_equal y abst_zero) 
             (basics._tilda__tilda_ (abst_equal x abst_zero)) 
             (v_Vac:
              (zen.proof 
                 (zen.not 
                    (zen.or 
                       (zen.triangle (focal.is_true (abst_equal y abst_zero))) 
                       (zen.triangle 
                          (focal.is_true 
                             (basics._tilda__tilda_ (abst_equal x abst_zero))))))) =>
              zen.Rnotor 
                (zen.triangle (focal.is_true (abst_equal y abst_zero))) 
                (zen.triangle 
                   (focal.is_true 
                      (basics._tilda__tilda_ (abst_equal x abst_zero)))) 
                (v_Vbc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_equal y abst_zero))))) =>
                 v_Vcc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (basics._tilda__tilda_ (abst_equal x abst_zero)))))) =>
                 zen.Raxiom 
                   (zen.triangle (focal.is_true (abst_equal y abst_zero))) 
                   H_0 v_Vbc) v_Vac) v_Vzb))).

def Division_monoid__div_left_substitution_rule :
  abst_T:cc.uT ->
  abst_div:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (abst_equal x y)) 
                                   (dk_logic.ebP (abst_equal y x)))))) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_div_divides:(dk_logic.eP 
                      (dk_logic.forall abst_T 
                         (x:(cc.eT abst_T) =>
                          dk_logic.forall abst_T 
                            (y:(cc.eT abst_T) =>
                             dk_logic.or 
                               (dk_logic.ebP (abst_equal y abst_zero)) 
                               (dk_logic.ebP 
                                  (abst_equal (abst_mult (abst_div x y) y) x)))))) ->
  abst_mult_is_regular:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.forall abst_T 
                                   (z:(cc.eT abst_T) =>
                                    dk_logic.and 
                                      (dk_logic.imp 
                                         (dk_logic.ebP 
                                            (abst_equal (abst_mult x y) 
                                               (abst_mult x z))) 
                                         (dk_logic.not 
                                            (dk_logic.imp 
                                               (dk_logic.ebP 
                                                  (abst_equal x abst_zero)) 
                                               (dk_logic.ebP (abst_equal y z))))) 
                                      (dk_logic.imp 
                                         (dk_logic.ebP 
                                            (abst_equal (abst_mult x z) 
                                               (abst_mult y z))) 
                                         (dk_logic.not 
                                            (dk_logic.imp 
                                               (dk_logic.ebP 
                                                  (abst_equal z abst_zero)) 
                                               (dk_logic.ebP (abst_equal x y)))))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x_1:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (x_2:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (y:(cc.eT abst_T) =>
              dk_logic.imp (dk_logic.ebP (abst_equal x_1 x_2)) 
                (dk_logic.imp 
                   (dk_logic.not (dk_logic.ebP (abst_equal y abst_zero))) 
                   (dk_logic.ebP 
                      (abst_equal (abst_div x_1 y) (abst_div x_2 y))))))))
  :=
  abst_T:cc.uT =>
  abst_div:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal y x)))))) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_div_divides:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.or (dk_logic.ebP (abst_equal y abst_zero)) 
              (dk_logic.ebP (abst_equal (abst_mult (abst_div x y) y) x)))))) =>
  abst_mult_is_regular:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.and 
                 (dk_logic.imp 
                    (dk_logic.ebP 
                       (abst_equal (abst_mult x y) (abst_mult x z))) 
                    (dk_logic.not 
                       (dk_logic.imp (dk_logic.ebP (abst_equal x abst_zero)) 
                          (dk_logic.ebP (abst_equal y z))))) 
                 (dk_logic.imp 
                    (dk_logic.ebP 
                       (abst_equal (abst_mult x z) (abst_mult y z))) 
                    (dk_logic.not 
                       (dk_logic.imp (dk_logic.ebP (abst_equal z abst_zero)) 
                          (dk_logic.ebP (abst_equal x y)))))))))) =>
  (__N_1_LEMMA:
   (x_1:(cc.eT abst_T) ->
    x_2:(cc.eT abst_T) ->
    y:(cc.eT abst_T) ->
    H_x:(dk_logic.eP (dk_logic.ebP (abst_equal x_1 x_2))) ->
    H_y:(dk_logic.eP (dk_logic.not (dk_logic.ebP (abst_equal y abst_zero)))) ->
    dk_logic.eP (dk_logic.ebP (abst_equal (abst_div x_1 y) (abst_div x_2 y)))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
                 (zen.imp 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true (abst_equal v_Vbc abst_zero)))) 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_div v_Vzb v_Vbc) 
                             (abst_div v_Vac v_Vbc))))))))) 
     (v_Vcc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Vzb v_Vac))) 
                        (zen.imp 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true (abst_equal v_Vbc abst_zero)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_div v_Vzb v_Vbc) 
                                    (abst_div v_Vac v_Vbc))))))))))) =>
      zen.Raxiom 
        (zen.forall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
                    (zen.imp 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vbc abst_zero)))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_div v_Vzb v_Vbc) 
                                (abst_div v_Vac v_Vbc))))))))) __N_1_LEMMA 
        v_Vcc)) 
    (x_1:(cc.eT abst_T) =>
     x_2:(cc.eT abst_T) =>
     y:(cc.eT abst_T) =>
     H_x:(dk_logic.eP (dk_logic.ebP (abst_equal x_1 x_2))) =>
     H_y:
     (dk_logic.eP (dk_logic.not (dk_logic.ebP (abst_equal y abst_zero)))) =>
     (__N_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP (abst_equal (abst_mult (abst_div x_1 y) y) x_1))) =>
      (__N_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP (abst_equal (abst_mult (abst_div x_2 y) y) x_2))) =>
       (__N_1_3_LEMMA:
        (dk_logic.eP 
           (dk_logic.ebP 
              (abst_equal (abst_mult (abst_div x_1 y) y) 
                 (abst_mult (abst_div x_2 y) y)))) =>
        zen.nnpp 
          (zen.triangle 
             (focal.is_true (abst_equal (abst_div x_1 y) (abst_div x_2 y)))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_div x_1 y) (abst_div x_2 y)))))) =>
           zen.Rall abst_T 
             (v_Vac:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.and 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_mult v_Vac v_Vbc) 
                                  (abst_mult v_Vac v_Vcc)))) 
                         (zen.not 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vac abst_zero))) 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vbc v_Vcc)))))) 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_mult v_Vac v_Vcc) 
                                  (abst_mult v_Vbc v_Vcc)))) 
                         (zen.not 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vcc abst_zero))) 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vac v_Vbc))))))))) 
             (abst_div x_1 y) 
             (v_Vdc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.and 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_mult (abst_div x_1 y) v_Vbc) 
                                      (abst_mult (abst_div x_1 y) v_Vcc)))) 
                             (zen.not 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_div x_1 y) 
                                            abst_zero))) 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vbc v_Vcc)))))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_mult (abst_div x_1 y) v_Vcc) 
                                      (abst_mult v_Vbc v_Vcc)))) 
                             (zen.not 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal v_Vcc abst_zero))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_div x_1 y) v_Vbc)))))))))) =>
              zen.Rall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.and 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_mult (abst_div x_1 y) v_Vbc) 
                                  (abst_mult (abst_div x_1 y) v_Vcc)))) 
                         (zen.not 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_div x_1 y) abst_zero))) 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vbc v_Vcc)))))) 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_mult (abst_div x_1 y) v_Vcc) 
                                  (abst_mult v_Vbc v_Vcc)))) 
                         (zen.not 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vcc abst_zero))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_div x_1 y) v_Vbc)))))))) 
                (abst_div x_2 y) 
                (v_Vec:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.and 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_mult (abst_div x_1 y) 
                                         (abst_div x_2 y)) 
                                      (abst_mult (abst_div x_1 y) v_Vcc)))) 
                             (zen.not 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_div x_1 y) 
                                            abst_zero))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_div x_2 y) v_Vcc)))))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_mult (abst_div x_1 y) v_Vcc) 
                                      (abst_mult (abst_div x_2 y) v_Vcc)))) 
                             (zen.not 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal v_Vcc abst_zero))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_div x_1 y) 
                                            (abst_div x_2 y)))))))))) =>
                 zen.Rall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.and 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_mult (abst_div x_1 y) 
                                     (abst_div x_2 y)) 
                                  (abst_mult (abst_div x_1 y) v_Vcc)))) 
                         (zen.not 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_div x_1 y) abst_zero))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_div x_2 y) v_Vcc)))))) 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_mult (abst_div x_1 y) v_Vcc) 
                                  (abst_mult (abst_div x_2 y) v_Vcc)))) 
                         (zen.not 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vcc abst_zero))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_div x_1 y) 
                                        (abst_div x_2 y)))))))) y 
                   (v_Vfc:
                    (zen.proof 
                       (zen.and 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_mult (abst_div x_1 y) 
                                         (abst_div x_2 y)) 
                                      (abst_mult (abst_div x_1 y) y)))) 
                             (zen.not 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_div x_1 y) 
                                            abst_zero))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_div x_2 y) y)))))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_mult (abst_div x_1 y) y) 
                                      (abst_mult (abst_div x_2 y) y)))) 
                             (zen.not 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal y abst_zero))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_div x_1 y) 
                                            (abst_div x_2 y))))))))) =>
                    zen.Rand 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_mult (abst_div x_1 y) 
                                     (abst_div x_2 y)) 
                                  (abst_mult (abst_div x_1 y) y)))) 
                         (zen.not 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_div x_1 y) abst_zero))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_div x_2 y) y)))))) 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_mult (abst_div x_1 y) y) 
                                  (abst_mult (abst_div x_2 y) y)))) 
                         (zen.not 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_equal y abst_zero))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_div x_1 y) 
                                        (abst_div x_2 y))))))) 
                      (v_Vgc:
                       (zen.proof 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_mult (abst_div x_1 y) 
                                         (abst_div x_2 y)) 
                                      (abst_mult (abst_div x_1 y) y)))) 
                             (zen.not 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_div x_1 y) 
                                            abst_zero))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_div x_2 y) y))))))) =>
                       v_Vhc:
                       (zen.proof 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_mult (abst_div x_1 y) y) 
                                      (abst_mult (abst_div x_2 y) y)))) 
                             (zen.not 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal y abst_zero))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_div x_1 y) 
                                            (abst_div x_2 y)))))))) =>
                       zen.Rimply 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_mult (abst_div x_1 y) y) 
                                  (abst_mult (abst_div x_2 y) y)))) 
                         (zen.not 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_equal y abst_zero))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_div x_1 y) 
                                        (abst_div x_2 y)))))) 
                         (v_Vic:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_mult (abst_div x_1 y) y) 
                                         (abst_mult (abst_div x_2 y) y)))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult (abst_div x_1 y) y) 
                                     (abst_mult (abst_div x_2 y) y)))) 
                            __N_1_3_LEMMA v_Vic) 
                         (v_Vjc:
                          (zen.proof 
                             (zen.not 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal y abst_zero))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_div x_1 y) 
                                            (abst_div x_2 y))))))) =>
                          zen.Rnotimply 
                            (zen.triangle 
                               (focal.is_true (abst_equal y abst_zero))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_div x_1 y) 
                                     (abst_div x_2 y)))) 
                            (v_Vkc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (abst_equal y abst_zero)))) =>
                             v_Vzb:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_div x_1 y) 
                                            (abst_div x_2 y)))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (abst_equal y abst_zero))) 
                               v_Vkc H_y) v_Vjc) v_Vhc) v_Vfc) v_Vec) v_Vdc) 
             abst_mult_is_regular)) 
         (zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (abst_equal (abst_mult (abst_div x_1 y) y) 
                     (abst_mult (abst_div x_2 y) y)))) 
            (v_Vvc:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult (abst_div x_1 y) y) 
                            (abst_mult (abst_div x_2 y) y)))))) =>
             zen.Rcut 
               (zen.and 
                  (zen.not 
                     (zen.triangle 
                        (zen.equal abst_T (abst_mult (abst_div x_1 y) y) 
                           (abst_mult (abst_div x_1 y) y)))) 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_mult (abst_div x_1 y) y) 
                              (abst_mult (abst_div x_1 y) y)))))) 
               (v_Vwc:
                (zen.proof 
                   (zen.and 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal abst_T (abst_mult (abst_div x_1 y) y) 
                               (abst_mult (abst_div x_1 y) y)))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_mult (abst_div x_1 y) y) 
                                  (abst_mult (abst_div x_1 y) y))))))) =>
                zen.Rand 
                  (zen.not 
                     (zen.triangle 
                        (zen.equal abst_T (abst_mult (abst_div x_1 y) y) 
                           (abst_mult (abst_div x_1 y) y)))) 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_mult (abst_div x_1 y) y) 
                              (abst_mult (abst_div x_1 y) y))))) 
                  (v_Vxc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal abst_T (abst_mult (abst_div x_1 y) y) 
                               (abst_mult (abst_div x_1 y) y))))) =>
                   v_Vyc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_mult (abst_div x_1 y) y) 
                                  (abst_mult (abst_div x_1 y) y)))))) =>
                   zen.Rnoteq abst_T (abst_mult (abst_div x_1 y) y) v_Vxc) 
                  v_Vwc) 
               (v_Vzc:
                (zen.proof 
                   (zen.not 
                      (zen.and 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T 
                                  (abst_mult (abst_div x_1 y) y) 
                                  (abst_mult (abst_div x_1 y) y)))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult (abst_div x_1 y) y) 
                                     (abst_mult (abst_div x_1 y) y)))))))) =>
                zen.Rcut 
                  (zen.triangle 
                     (zen.equal abst_T x_1 (abst_mult (abst_div x_2 y) y))) 
                  (v_Vad:
                   (zen.proof 
                      (zen.triangle 
                         (zen.equal abst_T x_1 (abst_mult (abst_div x_2 y) y)))) =>
                   zen.Rsubst basics.bool__t 
                     (v_Vbd:(zen.term basics.bool__t) =>
                      zen.triangle (focal.is_true v_Vbd)) 
                     (abst_equal (abst_mult (abst_div x_1 y) y) x_1) 
                     (abst_equal (abst_mult (abst_div x_1 y) y) 
                        (abst_mult (abst_div x_2 y) y)) 
                     (v_Vcd:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (abst_equal (abst_mult (abst_div x_1 y) y) 
                                     x_1) 
                                  (abst_equal (abst_mult (abst_div x_1 y) y) 
                                     (abst_mult (abst_div x_2 y) y)))))) =>
                      zen.Rsubst abst_T 
                        (v_Vdd:(zen.term abst_T) =>
                         zen.not 
                           (zen.triangle 
                              (zen.equal basics.bool__t 
                                 (abst_equal v_Vdd x_1) 
                                 (abst_equal (abst_mult (abst_div x_1 y) y) 
                                    (abst_mult (abst_div x_2 y) y))))) 
                        (abst_mult (abst_div x_1 y) y) 
                        (abst_mult (abst_div x_1 y) y) 
                        (v_Vxc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_mult (abst_div x_1 y) y) 
                                     (abst_mult (abst_div x_1 y) y))))) =>
                         zen.Rnotand 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal abst_T 
                                    (abst_mult (abst_div x_1 y) y) 
                                    (abst_mult (abst_div x_1 y) y)))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_mult (abst_div x_1 y) y) 
                                       (abst_mult (abst_div x_1 y) y))))) 
                           (v_Ved:
                            (zen.proof 
                               (zen.not 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_mult (abst_div x_1 y) y) 
                                           (abst_mult (abst_div x_1 y) y)))))) =>
                            zen.Rnotnot 
                              (zen.triangle 
                                 (zen.equal abst_T 
                                    (abst_mult (abst_div x_1 y) y) 
                                    (abst_mult (abst_div x_1 y) y))) 
                              (v_Vfd:
                               (zen.proof 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_mult (abst_div x_1 y) y) 
                                        (abst_mult (abst_div x_1 y) y)))) =>
                               zen.Rcut 
                                 (zen.triangle 
                                    (zen.equal abst_T 
                                       (abst_mult (abst_div x_1 y) y) 
                                       (abst_mult (abst_div x_1 y) y))) 
                                 (v_Vfd:
                                  (zen.proof 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_mult (abst_div x_1 y) y) 
                                           (abst_mult (abst_div x_1 y) y)))) =>
                                  zen.Rsubst abst_T 
                                    (v_Vgd:(zen.term abst_T) =>
                                     zen.triangle 
                                       (zen.equal abst_T v_Vgd 
                                          (abst_mult (abst_div x_1 y) y))) 
                                    (abst_mult (abst_div x_1 y) y) 
                                    (abst_mult (abst_div x_1 y) y) 
                                    (v_Vxc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_mult (abst_div x_1 y) 
                                                    y) 
                                                 (abst_mult (abst_div x_1 y) 
                                                    y))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_mult (abst_div x_1 y) y) 
                                             (abst_mult (abst_div x_1 y) y))) 
                                       v_Vfd v_Vxc) 
                                    (v_Vfd:
                                     (zen.proof 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult (abst_div x_1 y) y) 
                                              (abst_mult (abst_div x_1 y) y)))) =>
                                     zen.Rsubst abst_T 
                                       (v_Vhd:(zen.term abst_T) =>
                                        zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_mult (abst_div x_1 y) y) 
                                             v_Vhd)) 
                                       (abst_mult (abst_div x_1 y) y) 
                                       (abst_mult (abst_div x_1 y) y) 
                                       (v_Vxc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_mult 
                                                       (abst_div x_1 y) y) 
                                                    (abst_mult 
                                                       (abst_div x_1 y) y))))) =>
                                        zen.Rnoteq abst_T 
                                          (abst_mult (abst_div x_1 y) y) 
                                          v_Vxc) 
                                       (v_Vfd:
                                        (zen.proof 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_mult (abst_div x_1 y) 
                                                    y) 
                                                 (abst_mult (abst_div x_1 y) 
                                                    y)))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_mult (abst_div x_1 y) y) 
                                                (abst_mult (abst_div x_1 y) y))) 
                                          v_Vfd v_Vxc) v_Vfd) v_Vfd) 
                                 (v_Vxc:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult (abst_div x_1 y) y) 
                                              (abst_mult (abst_div x_1 y) y))))) =>
                                  zen.Rnoteq abst_T 
                                    (abst_mult (abst_div x_1 y) y) v_Vxc)) 
                              v_Ved) 
                           (v_Vid:
                            (zen.proof 
                               (zen.not 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult (abst_div x_1 y) y) 
                                              (abst_mult (abst_div x_1 y) y))))))) =>
                            zen.Rnotnot 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_mult (abst_div x_1 y) y) 
                                       (abst_mult (abst_div x_1 y) y)))) 
                              (v_Vjd:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult (abst_div x_1 y) y) 
                                           (abst_mult (abst_div x_1 y) y))))) =>
                               zen.Rall abst_T 
                                 (v_Vkd:(zen.term abst_T) =>
                                  zen.forall abst_T 
                                    (v_Vld:(zen.term abst_T) =>
                                     zen.forall abst_T 
                                       (v_Vmd:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal v_Vkd v_Vld))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Vld v_Vmd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Vkd v_Vmd))))))) 
                                 (abst_mult (abst_div x_1 y) y) 
                                 (v_Vnd:
                                  (zen.proof 
                                     (zen.forall abst_T 
                                        (v_Vld:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vmd:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_div x_1 y) y) 
                                                       v_Vld))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vld 
                                                          v_Vmd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x_1 y) 
                                                             y) v_Vmd)))))))) =>
                                  zen.Rall abst_T 
                                    (v_Vld:(zen.term abst_T) =>
                                     zen.forall abst_T 
                                       (v_Vmd:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_mult 
                                                      (abst_div x_1 y) y) 
                                                   v_Vld))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Vld v_Vmd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (abst_div x_1 y) y) 
                                                      v_Vmd)))))) 
                                    (abst_mult (abst_div x_1 y) y) 
                                    (v_Vod:
                                     (zen.proof 
                                        (zen.forall abst_T 
                                           (v_Vmd:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_div x_1 y) y) 
                                                       (abst_mult 
                                                          (abst_div x_1 y) y)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x_1 y) 
                                                             y) v_Vmd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x_1 y) 
                                                             y) v_Vmd))))))) =>
                                     zen.Rall abst_T 
                                       (v_Vmd:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_mult 
                                                      (abst_div x_1 y) y) 
                                                   (abst_mult 
                                                      (abst_div x_1 y) y)))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (abst_div x_1 y) y) 
                                                      v_Vmd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (abst_div x_1 y) y) 
                                                      v_Vmd))))) x_1 
                                       (v_Vpd:
                                        (zen.proof 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_div x_1 y) y) 
                                                       (abst_mult 
                                                          (abst_div x_1 y) y)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x_1 y) 
                                                             y) x_1))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x_1 y) 
                                                             y) x_1)))))) =>
                                        zen.Rimply 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_mult 
                                                      (abst_div x_1 y) y) 
                                                   (abst_mult 
                                                      (abst_div x_1 y) y)))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (abst_div x_1 y) y) 
                                                      x_1))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (abst_div x_1 y) y) 
                                                      x_1)))) 
                                          (v_Vyc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x_1 y) 
                                                             y) 
                                                          (abst_mult 
                                                             (abst_div x_1 y) 
                                                             y)))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (abst_div x_1 y) y) 
                                                      (abst_mult 
                                                         (abst_div x_1 y) y)))) 
                                             v_Vjd v_Vyc) 
                                          (v_Vqd:
                                           (zen.proof 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x_1 y) 
                                                             y) x_1))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x_1 y) 
                                                             y) x_1))))) =>
                                           zen.Rimply 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (abst_div x_1 y) y) 
                                                      x_1))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (abst_div x_1 y) y) 
                                                      x_1))) 
                                             (v_Vrd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (abst_div 
                                                                   x_1 y) y) 
                                                             x_1))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_mult 
                                                            (abst_div x_1 y) 
                                                            y) x_1))) 
                                                __N_1_1_LEMMA v_Vrd) 
                                             (__N_1_1_LEMMA:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x_1 y) 
                                                             y) x_1)))) =>
                                              zen.Rsubst basics.bool__t 
                                                (v_Vbd:
                                                 (zen.term basics.bool__t) =>
                                                 zen.triangle 
                                                   (focal.is_true v_Vbd)) 
                                                (abst_equal 
                                                   (abst_mult 
                                                      (abst_div x_1 y) y) x_1) 
                                                (abst_equal 
                                                   (abst_mult 
                                                      (abst_div x_1 y) y) 
                                                   (abst_mult 
                                                      (abst_div x_2 y) y)) 
                                                (v_Vcd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   (abst_div 
                                                                    x_1 y) y) 
                                                                x_1) 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   (abst_div 
                                                                    x_1 y) y) 
                                                                (abst_mult 
                                                                   (abst_div 
                                                                    x_2 y) y)))))) =>
                                                 zen.Rsubst abst_T 
                                                   (v_Vdd:
                                                    (zen.term abst_T) =>
                                                    zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (abst_equal 
                                                               v_Vdd x_1) 
                                                            (abst_equal 
                                                               (abst_mult 
                                                                  (abst_div 
                                                                    x_1 y) y) 
                                                               (abst_mult 
                                                                  (abst_div 
                                                                    x_2 y) y))))) 
                                                   (abst_mult 
                                                      (abst_div x_1 y) y) 
                                                   (abst_mult 
                                                      (abst_div x_1 y) y) 
                                                   (v_Vxc:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T 
                                                                (abst_mult 
                                                                   (abst_div 
                                                                    x_1 y) y) 
                                                                (abst_mult 
                                                                   (abst_div 
                                                                    x_1 y) y))))) =>
                                                    zen.Rnoteq abst_T 
                                                      (abst_mult 
                                                         (abst_div x_1 y) y) 
                                                      v_Vxc) 
                                                   (v_Vcd:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                   x_1) 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                   (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))))) =>
                                                    zen.Rsubst abst_T 
                                                      (v_Vsd:
                                                       (zen.term abst_T) =>
                                                       zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (abst_equal 
                                                                  (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                  v_Vsd) 
                                                               (abst_equal 
                                                                  (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                  (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y))))) 
                                                      x_1 
                                                      (abst_mult 
                                                         (abst_div x_2 y) y) 
                                                      (v_Vtd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   x_1 
                                                                   (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y))))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T x_1 
                                                               (abst_mult 
                                                                  (abst_div 
                                                                    x_2 y) y))) 
                                                         v_Vad v_Vtd) 
                                                      (v_Vud:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)) 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))))) =>
                                                       zen.Rnoteq 
                                                         basics.bool__t 
                                                         (abst_equal 
                                                            (abst_mult 
                                                               (abst_div x_1 
                                                                  y) y) 
                                                            (abst_mult 
                                                               (abst_div x_2 
                                                                  y) y)) 
                                                         v_Vud) v_Vcd) v_Vcd) 
                                                (v_Vvd:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (abst_div 
                                                                   x_1 y) y) 
                                                             (abst_mult 
                                                                (abst_div 
                                                                   x_2 y) y))))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_mult 
                                                               (abst_div x_1 
                                                                  y) y) 
                                                            (abst_mult 
                                                               (abst_div x_2 
                                                                  y) y)))) 
                                                   v_Vvd v_Vvc) __N_1_1_LEMMA) 
                                             v_Vqd) v_Vpd) v_Vod) v_Vnd) 
                                 abst_equal_transitive) v_Vid) v_Vzc) 
                        (v_Vcd:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (abst_equal 
                                        (abst_mult (abst_div x_1 y) y) x_1) 
                                     (abst_equal 
                                        (abst_mult (abst_div x_1 y) y) 
                                        (abst_mult (abst_div x_2 y) y)))))) =>
                         zen.Rsubst abst_T 
                           (v_Vsd:(zen.term abst_T) =>
                            zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (abst_equal 
                                       (abst_mult (abst_div x_1 y) y) v_Vsd) 
                                    (abst_equal 
                                       (abst_mult (abst_div x_1 y) y) 
                                       (abst_mult (abst_div x_2 y) y))))) 
                           x_1 (abst_mult (abst_div x_2 y) y) 
                           (v_Vtd:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal abst_T x_1 
                                        (abst_mult (abst_div x_2 y) y))))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (zen.equal abst_T x_1 
                                    (abst_mult (abst_div x_2 y) y))) v_Vad 
                              v_Vtd) 
                           (v_Vud:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (abst_equal 
                                           (abst_mult (abst_div x_1 y) y) 
                                           (abst_mult (abst_div x_2 y) y)) 
                                        (abst_equal 
                                           (abst_mult (abst_div x_1 y) y) 
                                           (abst_mult (abst_div x_2 y) y)))))) =>
                            zen.Rnoteq basics.bool__t 
                              (abst_equal (abst_mult (abst_div x_1 y) y) 
                                 (abst_mult (abst_div x_2 y) y)) v_Vud) v_Vcd) 
                        v_Vcd) 
                     (v_Vvd:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_mult (abst_div x_1 y) y) 
                                  (abst_mult (abst_div x_2 y) y))))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_mult (abst_div x_1 y) y) 
                                 (abst_mult (abst_div x_2 y) y)))) v_Vvd 
                        v_Vvc) __N_1_1_LEMMA) 
                  (v_Vtd:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal abst_T x_1 
                               (abst_mult (abst_div x_2 y) y))))) =>
                   zen.Rcut 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal x_1 (abst_mult (abst_div x_2 y) y)))) 
                     (v_Vwd:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal x_1 (abst_mult (abst_div x_2 y) y))))) =>
                      zen.Rall abst_T 
                        (v_Vkd:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vld:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vmd:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal v_Vkd v_Vld))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vld v_Vmd))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vkd v_Vmd))))))) 
                        (abst_mult (abst_div x_1 y) y) 
                        (v_Vnd:
                         (zen.proof 
                            (zen.forall abst_T 
                               (v_Vld:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vmd:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult (abst_div x_1 y) y) 
                                              v_Vld))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vld v_Vmd))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult (abst_div x_1 y) 
                                                    y) v_Vmd)))))))) =>
                         zen.Rall abst_T 
                           (v_Vld:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vmd:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_mult (abst_div x_1 y) y) 
                                          v_Vld))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vld v_Vmd))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_mult (abst_div x_1 y) y) 
                                             v_Vmd)))))) x_1 
                           (v_Vxd:
                            (zen.proof 
                               (zen.forall abst_T 
                                  (v_Vmd:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult (abst_div x_1 y) y) 
                                              x_1))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x_1 v_Vmd))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult (abst_div x_1 y) 
                                                    y) v_Vmd))))))) =>
                            zen.Rall abst_T 
                              (v_Vmd:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_mult (abst_div x_1 y) y) x_1))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal x_1 v_Vmd))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_mult (abst_div x_1 y) y) 
                                             v_Vmd))))) 
                              (abst_mult (abst_div x_2 y) y) 
                              (v_Vyd:
                               (zen.proof 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult (abst_div x_1 y) y) 
                                              x_1))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x_1 
                                                 (abst_mult (abst_div x_2 y) 
                                                    y)))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult (abst_div x_1 y) 
                                                    y) 
                                                 (abst_mult (abst_div x_2 y) 
                                                    y))))))) =>
                               zen.Rimply 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_mult (abst_div x_1 y) y) x_1))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal x_1 
                                             (abst_mult (abst_div x_2 y) y)))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_mult (abst_div x_1 y) y) 
                                             (abst_mult (abst_div x_2 y) y))))) 
                                 (v_Vrd:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult (abst_div x_1 y) 
                                                    y) x_1))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_mult (abst_div x_1 y) y) 
                                             x_1))) __N_1_1_LEMMA v_Vrd) 
                                 (v_Vzd:
                                  (zen.proof 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x_1 
                                                 (abst_mult (abst_div x_2 y) 
                                                    y)))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult (abst_div x_1 y) 
                                                    y) 
                                                 (abst_mult (abst_div x_2 y) 
                                                    y)))))) =>
                                  zen.Rimply 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal x_1 
                                             (abst_mult (abst_div x_2 y) y)))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_mult (abst_div x_1 y) y) 
                                             (abst_mult (abst_div x_2 y) y)))) 
                                    (v_Vae:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal x_1 
                                                    (abst_mult 
                                                       (abst_div x_2 y) y)))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x_1 
                                                (abst_mult (abst_div x_2 y) y)))) 
                                       v_Vwd v_Vae) 
                                    (v_Vvd:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult (abst_div x_1 y) 
                                                    y) 
                                                 (abst_mult (abst_div x_2 y) 
                                                    y))))) =>
                                     zen.Rsubst basics.bool__t 
                                       (v_Vbd:(zen.term basics.bool__t) =>
                                        zen.triangle (focal.is_true v_Vbd)) 
                                       (abst_equal 
                                          (abst_mult (abst_div x_1 y) y) 
                                          (abst_mult (abst_div x_2 y) y)) 
                                       (abst_equal 
                                          (abst_mult (abst_div x_1 y) y) 
                                          (abst_mult (abst_div x_2 y) y)) 
                                       (v_Vud:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_div x_1 y) y) 
                                                       (abst_mult 
                                                          (abst_div x_2 y) y)) 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_div x_1 y) y) 
                                                       (abst_mult 
                                                          (abst_div x_2 y) y)))))) =>
                                        zen.Rsubst abst_T 
                                          (v_Vbe:(zen.term abst_T) =>
                                           zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (abst_equal v_Vbe 
                                                      (abst_mult 
                                                         (abst_div x_2 y) y)) 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (abst_div x_1 y) y) 
                                                      (abst_mult 
                                                         (abst_div x_2 y) y))))) 
                                          (abst_mult (abst_div x_1 y) y) 
                                          (abst_mult (abst_div x_1 y) y) 
                                          (v_Vxc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_mult 
                                                          (abst_div x_1 y) y) 
                                                       (abst_mult 
                                                          (abst_div x_1 y) y))))) =>
                                           zen.Rnotand 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_mult 
                                                         (abst_div x_1 y) y) 
                                                      (abst_mult 
                                                         (abst_div x_1 y) y)))) 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_mult 
                                                            (abst_div x_1 y) 
                                                            y) 
                                                         (abst_mult 
                                                            (abst_div x_1 y) 
                                                            y))))) 
                                             (v_Ved:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_mult 
                                                                (abst_div 
                                                                   x_1 y) y) 
                                                             (abst_mult 
                                                                (abst_div 
                                                                   x_1 y) y)))))) =>
                                              zen.Rnotnot 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_mult 
                                                         (abst_div x_1 y) y) 
                                                      (abst_mult 
                                                         (abst_div x_1 y) y))) 
                                                (v_Vfd:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_mult 
                                                             (abst_div x_1 y) 
                                                             y) 
                                                          (abst_mult 
                                                             (abst_div x_1 y) 
                                                             y)))) =>
                                                 zen.Reqsym abst_T 
                                                   (abst_mult 
                                                      (abst_div x_1 y) y) 
                                                   (abst_mult 
                                                      (abst_div x_1 y) y) 
                                                   v_Vfd v_Vxc) v_Ved) 
                                             (v_Vid:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   (abst_div 
                                                                    x_1 y) y) 
                                                                (abst_mult 
                                                                   (abst_div 
                                                                    x_1 y) y))))))) =>
                                              zen.Rnotnot 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_mult 
                                                            (abst_div x_1 y) 
                                                            y) 
                                                         (abst_mult 
                                                            (abst_div x_1 y) 
                                                            y)))) 
                                                (v_Vjd:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (abst_div 
                                                                   x_1 y) y) 
                                                             (abst_mult 
                                                                (abst_div 
                                                                   x_1 y) y))))) =>
                                                 zen.Rall abst_T 
                                                   (v_Vkd:
                                                    (zen.term abst_T) =>
                                                    zen.forall abst_T 
                                                      (v_Vld:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vmd:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                   (abst_mult 
                                                      (abst_div x_1 y) y) 
                                                   (v_Vnd:
                                                    (zen.proof 
                                                       (zen.forall abst_T 
                                                          (v_Vld:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vmd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    v_Vld))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    v_Vmd)))))))) =>
                                                    zen.Rall abst_T 
                                                      (v_Vld:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vmd:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    v_Vld))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    v_Vmd)))))) 
                                                      (abst_mult 
                                                         (abst_div x_1 y) y) 
                                                      (v_Vod:
                                                       (zen.proof 
                                                          (zen.forall abst_T 
                                                             (v_Vmd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    v_Vmd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    v_Vmd))))))) =>
                                                       zen.Rall abst_T 
                                                         (v_Vmd:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y)))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    v_Vmd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    v_Vmd))))) 
                                                         (abst_mult 
                                                            (abst_div x_2 y) 
                                                            y) 
                                                         (v_Vce:
                                                          (zen.proof 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y))))))) =>
                                                          zen.Rimply 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y)))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y))))) 
                                                            (v_Vyc:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y)))))) =>
                                                             zen.Raxiom 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y)))) 
                                                               v_Vjd v_Vyc) 
                                                            (v_Vde:
                                                             (zen.proof 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))))) =>
                                                             zen.Rimply 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))) 
                                                               (v_Vvc:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))) 
                                                                  v_Vvd v_Vvc) 
                                                               (v_Vvd:
                                                                (zen.proof 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_1 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))) 
                                                                  v_Vvd v_Vvc) 
                                                               v_Vde) v_Vce) 
                                                         v_Vod) v_Vnd) 
                                                   abst_equal_transitive) 
                                                v_Vid) v_Vzc) 
                                          (v_Vud:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x_1 y) 
                                                             y) 
                                                          (abst_mult 
                                                             (abst_div x_2 y) 
                                                             y)) 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x_1 y) 
                                                             y) 
                                                          (abst_mult 
                                                             (abst_div x_2 y) 
                                                             y)))))) =>
                                           zen.Rsubst abst_T 
                                             (v_Vsd:(zen.term abst_T) =>
                                              zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (abst_equal 
                                                         (abst_mult 
                                                            (abst_div x_1 y) 
                                                            y) v_Vsd) 
                                                      (abst_equal 
                                                         (abst_mult 
                                                            (abst_div x_1 y) 
                                                            y) 
                                                         (abst_mult 
                                                            (abst_div x_2 y) 
                                                            y))))) 
                                             (abst_mult (abst_div x_2 y) y) 
                                             (abst_mult (abst_div x_2 y) y) 
                                             (v_Vee:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_mult 
                                                             (abst_div x_2 y) 
                                                             y) 
                                                          (abst_mult 
                                                             (abst_div x_2 y) 
                                                             y))))) =>
                                              zen.Rnoteq abst_T 
                                                (abst_mult (abst_div x_2 y) y) 
                                                v_Vee) 
                                             (v_Vud:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (abst_div 
                                                                   x_1 y) y) 
                                                             (abst_mult 
                                                                (abst_div 
                                                                   x_2 y) y)) 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (abst_div 
                                                                   x_1 y) y) 
                                                             (abst_mult 
                                                                (abst_div 
                                                                   x_2 y) y)))))) =>
                                              zen.Rnoteq basics.bool__t 
                                                (abst_equal 
                                                   (abst_mult 
                                                      (abst_div x_1 y) y) 
                                                   (abst_mult 
                                                      (abst_div x_2 y) y)) 
                                                v_Vud) v_Vud) v_Vud) 
                                       (v_Vvd:
                                        (zen.proof 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_div x_1 y) y) 
                                                    (abst_mult 
                                                       (abst_div x_2 y) y))))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_mult 
                                                      (abst_div x_1 y) y) 
                                                   (abst_mult 
                                                      (abst_div x_2 y) y)))) 
                                          v_Vvd v_Vvc) v_Vvd) v_Vzd) v_Vyd) 
                              v_Vxd) v_Vnd) abst_equal_transitive) 
                     (v_Vae:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal x_1 
                                     (abst_mult (abst_div x_2 y) y)))))) =>
                      zen.Rall abst_T 
                        (v_Vkd:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vld:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_equal v_Vkd v_Vld))) 
                              (zen.triangle 
                                 (focal.is_true (abst_equal v_Vld v_Vkd))))) 
                        (abst_mult (abst_div x_2 y) y) 
                        (v_Vfe:
                         (zen.proof 
                            (zen.forall abst_T 
                               (v_Vld:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult (abst_div x_2 y) y) 
                                           v_Vld))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal v_Vld 
                                           (abst_mult (abst_div x_2 y) y))))))) =>
                         zen.Rall abst_T 
                           (v_Vld:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_mult (abst_div x_2 y) y) v_Vld))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal v_Vld 
                                       (abst_mult (abst_div x_2 y) y))))) 
                           x_1 
                           (v_Vge:
                            (zen.proof 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult (abst_div x_2 y) y) x_1))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal x_1 
                                           (abst_mult (abst_div x_2 y) y)))))) =>
                            zen.Rimply 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_mult (abst_div x_2 y) y) x_1))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal x_1 
                                       (abst_mult (abst_div x_2 y) y)))) 
                              (v_Vhe:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult (abst_div x_2 y) y) 
                                              x_1))))) =>
                               zen.Rcut 
                                 (zen.and 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_mult (abst_div x_2 y) y) 
                                             (abst_mult (abst_div x_2 y) y)))) 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_mult (abst_div x_2 y) y) 
                                                (abst_mult (abst_div x_2 y) y)))))) 
                                 (v_Vie:
                                  (zen.proof 
                                     (zen.and 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_mult (abst_div x_2 y) 
                                                    y) 
                                                 (abst_mult (abst_div x_2 y) 
                                                    y)))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_div x_2 y) y) 
                                                    (abst_mult 
                                                       (abst_div x_2 y) y))))))) =>
                                  zen.Rand 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_mult (abst_div x_2 y) y) 
                                             (abst_mult (abst_div x_2 y) y)))) 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_mult (abst_div x_2 y) y) 
                                                (abst_mult (abst_div x_2 y) y))))) 
                                    (v_Vee:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_mult (abst_div x_2 y) 
                                                    y) 
                                                 (abst_mult (abst_div x_2 y) 
                                                    y))))) =>
                                     v_Vje:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_div x_2 y) y) 
                                                    (abst_mult 
                                                       (abst_div x_2 y) y)))))) =>
                                     zen.Rnoteq abst_T 
                                       (abst_mult (abst_div x_2 y) y) v_Vee) 
                                    v_Vie) 
                                 (v_Vke:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.and 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_mult 
                                                       (abst_div x_2 y) y) 
                                                    (abst_mult 
                                                       (abst_div x_2 y) y)))) 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_div x_2 y) y) 
                                                       (abst_mult 
                                                          (abst_div x_2 y) y)))))))) =>
                                  zen.Rcut 
                                    (zen.triangle (zen.equal abst_T x_2 x_1)) 
                                    (v_Vle:
                                     (zen.proof 
                                        (zen.triangle 
                                           (zen.equal abst_T x_2 x_1))) =>
                                     zen.Rsubst basics.bool__t 
                                       (v_Vbd:(zen.term basics.bool__t) =>
                                        zen.triangle (focal.is_true v_Vbd)) 
                                       (abst_equal 
                                          (abst_mult (abst_div x_2 y) y) x_2) 
                                       (abst_equal 
                                          (abst_mult (abst_div x_2 y) y) x_1) 
                                       (v_Vme:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_div x_2 y) y) 
                                                       x_2) 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_div x_2 y) y) 
                                                       x_1))))) =>
                                        zen.Rsubst abst_T 
                                          (v_Vne:(zen.term abst_T) =>
                                           zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (abst_equal v_Vne x_2) 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (abst_div x_2 y) y) 
                                                      x_1)))) 
                                          (abst_mult (abst_div x_2 y) y) 
                                          (abst_mult (abst_div x_2 y) y) 
                                          (v_Vee:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_mult 
                                                          (abst_div x_2 y) y) 
                                                       (abst_mult 
                                                          (abst_div x_2 y) y))))) =>
                                           zen.Rnotand 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_mult 
                                                         (abst_div x_2 y) y) 
                                                      (abst_mult 
                                                         (abst_div x_2 y) y)))) 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_mult 
                                                            (abst_div x_2 y) 
                                                            y) 
                                                         (abst_mult 
                                                            (abst_div x_2 y) 
                                                            y))))) 
                                             (v_Voe:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_mult 
                                                                (abst_div 
                                                                   x_2 y) y) 
                                                             (abst_mult 
                                                                (abst_div 
                                                                   x_2 y) y)))))) =>
                                              zen.Rnotnot 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_mult 
                                                         (abst_div x_2 y) y) 
                                                      (abst_mult 
                                                         (abst_div x_2 y) y))) 
                                                (v_Vpe:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_mult 
                                                             (abst_div x_2 y) 
                                                             y) 
                                                          (abst_mult 
                                                             (abst_div x_2 y) 
                                                             y)))) =>
                                                 zen.Rcut 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         (abst_mult 
                                                            (abst_div x_2 y) 
                                                            y) 
                                                         (abst_mult 
                                                            (abst_div x_2 y) 
                                                            y))) 
                                                   (v_Vpe:
                                                    (zen.proof 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_mult 
                                                                (abst_div 
                                                                   x_2 y) y) 
                                                             (abst_mult 
                                                                (abst_div 
                                                                   x_2 y) y)))) =>
                                                    zen.Rsubst abst_T 
                                                      (v_Vqe:
                                                       (zen.term abst_T) =>
                                                       zen.triangle 
                                                         (zen.equal abst_T 
                                                            v_Vqe 
                                                            (abst_mult 
                                                               (abst_div x_2 
                                                                  y) y))) 
                                                      (abst_mult 
                                                         (abst_div x_2 y) y) 
                                                      (abst_mult 
                                                         (abst_div x_2 y) y) 
                                                      (v_Vee:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                   (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y))))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T 
                                                               (abst_mult 
                                                                  (abst_div 
                                                                    x_2 y) y) 
                                                               (abst_mult 
                                                                  (abst_div 
                                                                    x_2 y) y))) 
                                                         v_Vpe v_Vee) 
                                                      (v_Vpe:
                                                       (zen.proof 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T 
                                                                (abst_mult 
                                                                   (abst_div 
                                                                    x_2 y) y) 
                                                                (abst_mult 
                                                                   (abst_div 
                                                                    x_2 y) y)))) =>
                                                       zen.Rsubst abst_T 
                                                         (v_Vre:
                                                          (zen.term abst_T) =>
                                                          zen.triangle 
                                                            (zen.equal 
                                                               abst_T 
                                                               (abst_mult 
                                                                  (abst_div 
                                                                    x_2 y) y) 
                                                               v_Vre)) 
                                                         (abst_mult 
                                                            (abst_div x_2 y) 
                                                            y) 
                                                         (abst_mult 
                                                            (abst_div x_2 y) 
                                                            y) 
                                                         (v_Vee:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y))))) =>
                                                          zen.Rnoteq abst_T 
                                                            (abst_mult 
                                                               (abst_div x_2 
                                                                  y) y) v_Vee) 
                                                         (v_Vpe:
                                                          (zen.proof 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                   (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T 
                                                                  (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                  (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y))) 
                                                            v_Vpe v_Vee) 
                                                         v_Vpe) v_Vpe) 
                                                   (v_Vee:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T 
                                                                (abst_mult 
                                                                   (abst_div 
                                                                    x_2 y) y) 
                                                                (abst_mult 
                                                                   (abst_div 
                                                                    x_2 y) y))))) =>
                                                    zen.Rnoteq abst_T 
                                                      (abst_mult 
                                                         (abst_div x_2 y) y) 
                                                      v_Vee)) v_Voe) 
                                             (v_Vse:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   (abst_div 
                                                                    x_2 y) y) 
                                                                (abst_mult 
                                                                   (abst_div 
                                                                    x_2 y) y))))))) =>
                                              zen.Rnotnot 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_mult 
                                                            (abst_div x_2 y) 
                                                            y) 
                                                         (abst_mult 
                                                            (abst_div x_2 y) 
                                                            y)))) 
                                                (v_Vte:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (abst_div 
                                                                   x_2 y) y) 
                                                             (abst_mult 
                                                                (abst_div 
                                                                   x_2 y) y))))) =>
                                                 zen.Rall abst_T 
                                                   (v_Vkd:
                                                    (zen.term abst_T) =>
                                                    zen.forall abst_T 
                                                      (v_Vld:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vmd:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                   (abst_mult 
                                                      (abst_div x_2 y) y) 
                                                   (v_Vue:
                                                    (zen.proof 
                                                       (zen.forall abst_T 
                                                          (v_Vld:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vmd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    v_Vld))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    v_Vmd)))))))) =>
                                                    zen.Rall abst_T 
                                                      (v_Vld:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vmd:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    v_Vld))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    v_Vmd)))))) 
                                                      (abst_mult 
                                                         (abst_div x_2 y) y) 
                                                      (v_Vve:
                                                       (zen.proof 
                                                          (zen.forall abst_T 
                                                             (v_Vmd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    v_Vmd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    v_Vmd))))))) =>
                                                       zen.Rall abst_T 
                                                         (v_Vmd:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    v_Vmd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    v_Vmd))))) 
                                                         x_2 
                                                         (v_Vwe:
                                                          (zen.proof 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_2))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_2)))))) =>
                                                          zen.Rimply 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_2))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_2)))) 
                                                            (v_Vje:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))))) =>
                                                             zen.Raxiom 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))) 
                                                               v_Vte v_Vje) 
                                                            (v_Vxe:
                                                             (zen.proof 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_2))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_2))))) =>
                                                             zen.Rimply 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_2))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_2))) 
                                                               (v_Vye:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_2))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_2))) 
                                                                  __N_1_2_LEMMA 
                                                                  v_Vye) 
                                                               (__N_1_2_LEMMA:
                                                                (zen.proof 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_2)))) =>
                                                                zen.Rsubst 
                                                                  basics.bool__t 
                                                                  (v_Vbd:
                                                                   (zen.term 
                                                                    basics.bool__t) =>
                                                                   zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vbd)) 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_2) 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1) 
                                                                  (v_Vme:
                                                                   (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_2) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1))))) =>
                                                                   zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vne:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vne x_2) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1)))) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (v_Vee:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y))))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    v_Vee) 
                                                                    (v_Vme:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_2) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vze:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    v_Vze) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1)))) 
                                                                    x_2 x_1 
                                                                    (v_Vaf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    x_2 x_1)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    x_2 x_1)) 
                                                                    v_Vle 
                                                                    v_Vaf) 
                                                                    (v_Vbf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1) 
                                                                    v_Vbf) 
                                                                    v_Vme) 
                                                                    v_Vme) 
                                                                  (v_Vcf:
                                                                   (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1)))) =>
                                                                   zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1))) 
                                                                    v_Vcf 
                                                                    v_Vhe) 
                                                                  __N_1_2_LEMMA) 
                                                               v_Vxe) v_Vwe) 
                                                         v_Vve) v_Vue) 
                                                   abst_equal_transitive) 
                                                v_Vse) v_Vke) 
                                          (v_Vme:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x_2 y) 
                                                             y) x_2) 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x_2 y) 
                                                             y) x_1))))) =>
                                           zen.Rsubst abst_T 
                                             (v_Vze:(zen.term abst_T) =>
                                              zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (abst_equal 
                                                         (abst_mult 
                                                            (abst_div x_2 y) 
                                                            y) v_Vze) 
                                                      (abst_equal 
                                                         (abst_mult 
                                                            (abst_div x_2 y) 
                                                            y) x_1)))) x_2 
                                             x_1 
                                             (v_Vaf:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T x_2 
                                                          x_1)))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (zen.equal abst_T x_2 x_1)) 
                                                v_Vle v_Vaf) 
                                             (v_Vbf:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (abst_div 
                                                                   x_2 y) y) 
                                                             x_1) 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (abst_div 
                                                                   x_2 y) y) 
                                                             x_1))))) =>
                                              zen.Rnoteq basics.bool__t 
                                                (abst_equal 
                                                   (abst_mult 
                                                      (abst_div x_2 y) y) x_1) 
                                                v_Vbf) v_Vme) v_Vme) 
                                       (v_Vcf:
                                        (zen.proof 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_div x_2 y) y) 
                                                    x_1)))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_mult 
                                                      (abst_div x_2 y) y) x_1))) 
                                          v_Vcf v_Vhe) __N_1_2_LEMMA) 
                                    (v_Vaf:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T x_2 x_1)))) =>
                                     zen.Rcut 
                                       (zen.triangle 
                                          (focal.is_true (abst_equal x_2 x_1))) 
                                       (v_Vdf:
                                        (zen.proof 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal x_2 x_1)))) =>
                                        zen.Rall abst_T 
                                          (v_Vkd:(zen.term abst_T) =>
                                           zen.forall abst_T 
                                             (v_Vld:(zen.term abst_T) =>
                                              zen.forall abst_T 
                                                (v_Vmd:(zen.term abst_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal v_Vkd 
                                                            v_Vld))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               v_Vld v_Vmd))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               v_Vkd v_Vmd))))))) 
                                          (abst_mult (abst_div x_2 y) y) 
                                          (v_Vue:
                                           (zen.proof 
                                              (zen.forall abst_T 
                                                 (v_Vld:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vmd:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   (abst_div 
                                                                    x_2 y) y) 
                                                                v_Vld))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vld 
                                                                   v_Vmd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                   v_Vmd)))))))) =>
                                           zen.Rall abst_T 
                                             (v_Vld:(zen.term abst_T) =>
                                              zen.forall abst_T 
                                                (v_Vmd:(zen.term abst_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_mult 
                                                               (abst_div x_2 
                                                                  y) y) v_Vld))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               v_Vld v_Vmd))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_mult 
                                                                  (abst_div 
                                                                    x_2 y) y) 
                                                               v_Vmd)))))) 
                                             x_2 
                                             (v_Vef:
                                              (zen.proof 
                                                 (zen.forall abst_T 
                                                    (v_Vmd:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   (abst_div 
                                                                    x_2 y) y) 
                                                                x_2))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   x_2 v_Vmd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                   v_Vmd))))))) =>
                                              zen.Rall abst_T 
                                                (v_Vmd:(zen.term abst_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_mult 
                                                               (abst_div x_2 
                                                                  y) y) x_2))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal x_2 
                                                               v_Vmd))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_mult 
                                                                  (abst_div 
                                                                    x_2 y) y) 
                                                               v_Vmd))))) 
                                                x_1 
                                                (v_Vff:
                                                 (zen.proof 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   (abst_div 
                                                                    x_2 y) y) 
                                                                x_2))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   x_2 x_1))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                   x_1)))))) =>
                                                 zen.Rimply 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_mult 
                                                               (abst_div x_2 
                                                                  y) y) x_2))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal x_2 
                                                               x_1))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_mult 
                                                                  (abst_div 
                                                                    x_2 y) y) 
                                                               x_1)))) 
                                                   (v_Vye:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                   x_2))))) =>
                                                    zen.Raxiom 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_mult 
                                                                  (abst_div 
                                                                    x_2 y) y) 
                                                               x_2))) 
                                                      __N_1_2_LEMMA v_Vye) 
                                                   (v_Vgf:
                                                    (zen.proof 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   x_2 x_1))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                   x_1))))) =>
                                                    zen.Rimply 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal x_2 
                                                               x_1))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_mult 
                                                                  (abst_div 
                                                                    x_2 y) y) 
                                                               x_1))) 
                                                      (v_Vhf:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    x_2 x_1))))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  x_2 x_1))) 
                                                         v_Vdf v_Vhf) 
                                                      (v_Vcf:
                                                       (zen.proof 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                   x_1)))) =>
                                                       zen.Rsubst 
                                                         basics.bool__t 
                                                         (v_Vif:
                                                          (zen.term 
                                                             basics.bool__t) =>
                                                          zen.triangle 
                                                            (focal.is_true 
                                                               v_Vif)) 
                                                         (abst_equal 
                                                            (abst_mult 
                                                               (abst_div x_2 
                                                                  y) y) x_1) 
                                                         (abst_equal 
                                                            (abst_mult 
                                                               (abst_div x_2 
                                                                  y) y) x_1) 
                                                         (v_Vbf:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1))))) =>
                                                          zen.Rsubst abst_T 
                                                            (v_Vjf:
                                                             (zen.term abst_T) =>
                                                             zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vjf x_1) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1)))) 
                                                            (abst_mult 
                                                               (abst_div x_2 
                                                                  y) y) 
                                                            (abst_mult 
                                                               (abst_div x_2 
                                                                  y) y) 
                                                            (v_Vee:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y))))) =>
                                                             zen.Rnotand 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))) 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y))))) 
                                                               (v_Voe:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))))) =>
                                                                zen.Rnotnot 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y))) 
                                                                  (v_Vpe:
                                                                   (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))) =>
                                                                   zen.Reqsym 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    v_Vpe 
                                                                    v_Vee) 
                                                                  v_Voe) 
                                                               (v_Vse:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y))))))) =>
                                                                zen.Rnotnot 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))) 
                                                                  (v_Vte:
                                                                   (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y))))) =>
                                                                   zen.Rall 
                                                                    abst_T 
                                                                    (v_Vkd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vld:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (v_Vue:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vld:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    v_Vmd)))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vld:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    v_Vmd)))))) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (v_Vve:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    v_Vmd))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    v_Vmd))))) 
                                                                    x_1 
                                                                    (v_Vkf:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1)))) 
                                                                    (v_Vje:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y)))) 
                                                                    v_Vte 
                                                                    v_Vje) 
                                                                    (v_Vlf:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1))) 
                                                                    (v_Vhe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1))) 
                                                                    v_Vcf 
                                                                    v_Vhe) 
                                                                    (v_Vcf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1))) 
                                                                    v_Vcf 
                                                                    v_Vhe) 
                                                                    v_Vlf) 
                                                                    v_Vkf) 
                                                                    v_Vve) 
                                                                    v_Vue) 
                                                                    abst_equal_transitive) 
                                                                  v_Vse) 
                                                               v_Vke) 
                                                            (v_Vbf:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1))))) =>
                                                             zen.Rsubst 
                                                               abst_T 
                                                               (v_Vmf:
                                                                (zen.term 
                                                                   abst_T) =>
                                                                zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    v_Vmf) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1)))) 
                                                               x_1 x_1 
                                                               (v_Vnf:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    x_1 x_1)))) =>
                                                                zen.Rnoteq 
                                                                  abst_T x_1 
                                                                  v_Vnf) 
                                                               (v_Vbf:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1))))) =>
                                                                zen.Rnoteq 
                                                                  basics.bool__t 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1) 
                                                                  v_Vbf) 
                                                               v_Vbf) v_Vbf) 
                                                         (v_Vcf:
                                                          (zen.proof 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1)))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x_2 y) y) 
                                                                    x_1))) 
                                                            v_Vcf v_Vhe) 
                                                         v_Vcf) v_Vgf) v_Vff) 
                                                v_Vef) v_Vue) 
                                          abst_equal_transitive) 
                                       (v_Vhf:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal x_2 x_1))))) =>
                                        zen.Rall abst_T 
                                          (v_Vkd:(zen.term abst_T) =>
                                           zen.forall abst_T 
                                             (v_Vld:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vkd v_Vld))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vld v_Vkd))))) 
                                          x_1 
                                          (v_Vof:
                                           (zen.proof 
                                              (zen.forall abst_T 
                                                 (v_Vld:(zen.term abst_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal x_1 
                                                             v_Vld))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vld 
                                                             x_1)))))) =>
                                           zen.Rall abst_T 
                                             (v_Vld:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x_1 v_Vld))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vld x_1)))) 
                                             x_2 
                                             (v_Vpf:
                                              (zen.proof 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal x_1 x_2))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal x_2 x_1))))) =>
                                              zen.Rimply 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x_1 x_2))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x_2 x_1))) 
                                                (v_Vqf:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal x_1 
                                                                x_2))))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal x_1 x_2))) 
                                                   H_x v_Vqf) 
                                                (v_Vdf:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal x_2 x_1)))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal x_2 x_1))) 
                                                   v_Vdf v_Vhf) v_Vpf) v_Vof) 
                                          abst_equal_symmetric)))) 
                              (v_Vwd:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal x_1 
                                           (abst_mult (abst_div x_2 y) y))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal x_1 
                                          (abst_mult (abst_div x_2 y) y)))) 
                                 v_Vwd v_Vae) v_Vge) v_Vfe) 
                        abst_equal_symmetric)))))) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true (abst_equal (abst_mult (abst_div x_2 y) y) x_2))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_mult (abst_div x_2 y) y) x_2))))) =>
            zen.Rall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.or 
                    (zen.triangle 
                       (focal.is_true (abst_equal v_Vbc abst_zero))) 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal 
                             (abst_mult (abst_div v_Vac v_Vbc) v_Vbc) v_Vac))))) 
              x_2 
              (v_Vcc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.or 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Vbc abst_zero))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_mult (abst_div x_2 v_Vbc) v_Vbc) x_2)))))) =>
               zen.Rall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.or 
                    (zen.triangle 
                       (focal.is_true (abst_equal v_Vbc abst_zero))) 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_mult (abst_div x_2 v_Vbc) v_Vbc) 
                             x_2)))) y 
                 (v_Vdc:
                  (zen.proof 
                     (zen.or 
                        (zen.triangle 
                           (focal.is_true (abst_equal y abst_zero))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_mult (abst_div x_2 y) y) x_2))))) =>
                  zen.Ror 
                    (zen.triangle (focal.is_true (abst_equal y abst_zero))) 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_mult (abst_div x_2 y) y) x_2))) 
                    (v_Vec:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true (abst_equal y abst_zero)))) =>
                     zen.Raxiom 
                       (zen.triangle (focal.is_true (abst_equal y abst_zero))) 
                       v_Vec H_y) 
                    (v_Vfc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_mult (abst_div x_2 y) y) x_2)))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult (abst_div x_2 y) y) x_2))) 
                       v_Vfc v_Vzb) v_Vdc) v_Vcc) abst_div_divides))) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true (abst_equal (abst_mult (abst_div x_1 y) y) x_1))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult (abst_div x_1 y) y) x_1))))) =>
           zen.Rall abst_T 
             (v_Vac:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.or 
                   (zen.triangle (focal.is_true (abst_equal v_Vbc abst_zero))) 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal 
                            (abst_mult (abst_div v_Vac v_Vbc) v_Vbc) v_Vac))))) 
             x_1 
             (v_Vcc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.or 
                       (zen.triangle 
                          (focal.is_true (abst_equal v_Vbc abst_zero))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_mult (abst_div x_1 v_Vbc) v_Vbc) x_1)))))) =>
              zen.Rall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.or 
                   (zen.triangle (focal.is_true (abst_equal v_Vbc abst_zero))) 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult (abst_div x_1 v_Vbc) v_Vbc) 
                            x_1)))) y 
                (v_Vdc:
                 (zen.proof 
                    (zen.or 
                       (zen.triangle (focal.is_true (abst_equal y abst_zero))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult (abst_div x_1 y) y) x_1))))) =>
                 zen.Ror 
                   (zen.triangle (focal.is_true (abst_equal y abst_zero))) 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult (abst_div x_1 y) y) x_1))) 
                   (v_Vec:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_equal y abst_zero)))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (abst_equal y abst_zero))) 
                      v_Vec H_y) 
                   (v_Vfc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult (abst_div x_1 y) y) x_1)))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult (abst_div x_1 y) y) x_1))) 
                      v_Vfc v_Vzb) v_Vdc) v_Vcc) abst_div_divides))).

def Division_monoid__div_right_substitution_rule :
  abst_T:cc.uT ->
  abst_div:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (abst_equal x y)) 
                                   (dk_logic.ebP (abst_equal y x)))))) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_div_divides:(dk_logic.eP 
                      (dk_logic.forall abst_T 
                         (x:(cc.eT abst_T) =>
                          dk_logic.forall abst_T 
                            (y:(cc.eT abst_T) =>
                             dk_logic.or 
                               (dk_logic.ebP (abst_equal y abst_zero)) 
                               (dk_logic.ebP 
                                  (abst_equal (abst_mult (abst_div x y) y) x)))))) ->
  abst_mult_right_substitution_rule:(dk_logic.eP 
                                       (dk_logic.forall abst_T 
                                          (x:(cc.eT abst_T) =>
                                           dk_logic.forall abst_T 
                                             (y:(cc.eT abst_T) =>
                                              dk_logic.forall abst_T 
                                                (z:(cc.eT abst_T) =>
                                                 dk_logic.imp 
                                                   (dk_logic.ebP 
                                                      (abst_equal x y)) 
                                                   (dk_logic.ebP 
                                                      (abst_equal 
                                                         (abst_mult z x) 
                                                         (abst_mult z y)))))))) ->
  abst_mult_is_regular:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.forall abst_T 
                                   (z:(cc.eT abst_T) =>
                                    dk_logic.and 
                                      (dk_logic.imp 
                                         (dk_logic.ebP 
                                            (abst_equal (abst_mult x y) 
                                               (abst_mult x z))) 
                                         (dk_logic.not 
                                            (dk_logic.imp 
                                               (dk_logic.ebP 
                                                  (abst_equal x abst_zero)) 
                                               (dk_logic.ebP (abst_equal y z))))) 
                                      (dk_logic.imp 
                                         (dk_logic.ebP 
                                            (abst_equal (abst_mult x z) 
                                               (abst_mult y z))) 
                                         (dk_logic.not 
                                            (dk_logic.imp 
                                               (dk_logic.ebP 
                                                  (abst_equal z abst_zero)) 
                                               (dk_logic.ebP (abst_equal x y)))))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y_1:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (y_2:(cc.eT abst_T) =>
              dk_logic.imp (dk_logic.ebP (abst_equal y_1 y_2)) 
                (dk_logic.imp 
                   (dk_logic.not (dk_logic.ebP (abst_equal y_1 abst_zero))) 
                   (dk_logic.ebP 
                      (abst_equal (abst_div x y_1) (abst_div x y_2))))))))
  :=
  abst_T:cc.uT =>
  abst_div:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal y x)))))) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_div_divides:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.or (dk_logic.ebP (abst_equal y abst_zero)) 
              (dk_logic.ebP (abst_equal (abst_mult (abst_div x y) y) x)))))) =>
  abst_mult_right_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.ebP (abst_equal (abst_mult z x) (abst_mult z y)))))))) =>
  abst_mult_is_regular:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.and 
                 (dk_logic.imp 
                    (dk_logic.ebP 
                       (abst_equal (abst_mult x y) (abst_mult x z))) 
                    (dk_logic.not 
                       (dk_logic.imp (dk_logic.ebP (abst_equal x abst_zero)) 
                          (dk_logic.ebP (abst_equal y z))))) 
                 (dk_logic.imp 
                    (dk_logic.ebP 
                       (abst_equal (abst_mult x z) (abst_mult y z))) 
                    (dk_logic.not 
                       (dk_logic.imp (dk_logic.ebP (abst_equal z abst_zero)) 
                          (dk_logic.ebP (abst_equal x y)))))))))) =>
  (__O_1_LEMMA:
   (x:(cc.eT abst_T) ->
    y_1:(cc.eT abst_T) ->
    y_2:(cc.eT abst_T) ->
    H_y:(dk_logic.eP (dk_logic.ebP (abst_equal y_1 y_2))) ->
    H_0:(dk_logic.eP (dk_logic.not (dk_logic.ebP (abst_equal y_1 abst_zero)))) ->
    dk_logic.eP (dk_logic.ebP (abst_equal (abst_div x y_1) (abst_div x y_2)))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
                 (zen.imp 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true (abst_equal v_Vac abst_zero)))) 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_div v_Vzb v_Vac) 
                             (abst_div v_Vzb v_Vbc))))))))) 
     (v_Vcc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Vac v_Vbc))) 
                        (zen.imp 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true (abst_equal v_Vac abst_zero)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_div v_Vzb v_Vac) 
                                    (abst_div v_Vzb v_Vbc))))))))))) =>
      zen.Raxiom 
        (zen.forall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
                    (zen.imp 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vac abst_zero)))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_div v_Vzb v_Vac) 
                                (abst_div v_Vzb v_Vbc))))))))) __O_1_LEMMA 
        v_Vcc)) 
    (x:(cc.eT abst_T) =>
     y_1:(cc.eT abst_T) =>
     y_2:(cc.eT abst_T) =>
     H_y:(dk_logic.eP (dk_logic.ebP (abst_equal y_1 y_2))) =>
     H_0:
     (dk_logic.eP (dk_logic.not (dk_logic.ebP (abst_equal y_1 abst_zero)))) =>
     (__O_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP (abst_equal (abst_mult (abst_div x y_1) y_1) x))) =>
      (__O_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP (abst_equal (abst_mult (abst_div x y_2) y_1) x))) =>
       (__O_1_3_LEMMA:
        (dk_logic.eP 
           (dk_logic.ebP 
              (abst_equal (abst_mult (abst_div x y_1) y_1) 
                 (abst_mult (abst_div x y_2) y_1)))) =>
        zen.nnpp 
          (zen.triangle 
             (focal.is_true (abst_equal (abst_div x y_1) (abst_div x y_2)))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_div x y_1) (abst_div x y_2)))))) =>
           zen.Rall abst_T 
             (v_Vac:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.and 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_mult v_Vac v_Vbc) 
                                  (abst_mult v_Vac v_Vcc)))) 
                         (zen.not 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vac abst_zero))) 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vbc v_Vcc)))))) 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_mult v_Vac v_Vcc) 
                                  (abst_mult v_Vbc v_Vcc)))) 
                         (zen.not 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vcc abst_zero))) 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vac v_Vbc))))))))) 
             (abst_div x y_1) 
             (v_Vdc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.and 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_mult (abst_div x y_1) v_Vbc) 
                                      (abst_mult (abst_div x y_1) v_Vcc)))) 
                             (zen.not 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_div x y_1) 
                                            abst_zero))) 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vbc v_Vcc)))))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_mult (abst_div x y_1) v_Vcc) 
                                      (abst_mult v_Vbc v_Vcc)))) 
                             (zen.not 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal v_Vcc abst_zero))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_div x y_1) v_Vbc)))))))))) =>
              zen.Rall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.and 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_mult (abst_div x y_1) v_Vbc) 
                                  (abst_mult (abst_div x y_1) v_Vcc)))) 
                         (zen.not 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_div x y_1) abst_zero))) 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vbc v_Vcc)))))) 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_mult (abst_div x y_1) v_Vcc) 
                                  (abst_mult v_Vbc v_Vcc)))) 
                         (zen.not 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vcc abst_zero))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_div x y_1) v_Vbc)))))))) 
                (abst_div x y_2) 
                (v_Vec:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.and 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_mult (abst_div x y_1) 
                                         (abst_div x y_2)) 
                                      (abst_mult (abst_div x y_1) v_Vcc)))) 
                             (zen.not 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_div x y_1) 
                                            abst_zero))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_div x y_2) v_Vcc)))))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_mult (abst_div x y_1) v_Vcc) 
                                      (abst_mult (abst_div x y_2) v_Vcc)))) 
                             (zen.not 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal v_Vcc abst_zero))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_div x y_1) 
                                            (abst_div x y_2)))))))))) =>
                 zen.Rall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.and 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_mult (abst_div x y_1) 
                                     (abst_div x y_2)) 
                                  (abst_mult (abst_div x y_1) v_Vcc)))) 
                         (zen.not 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_div x y_1) abst_zero))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_div x y_2) v_Vcc)))))) 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_mult (abst_div x y_1) v_Vcc) 
                                  (abst_mult (abst_div x y_2) v_Vcc)))) 
                         (zen.not 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vcc abst_zero))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_div x y_1) 
                                        (abst_div x y_2)))))))) y_1 
                   (v_Vfc:
                    (zen.proof 
                       (zen.and 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_mult (abst_div x y_1) 
                                         (abst_div x y_2)) 
                                      (abst_mult (abst_div x y_1) y_1)))) 
                             (zen.not 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_div x y_1) 
                                            abst_zero))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_div x y_2) y_1)))))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_mult (abst_div x y_1) y_1) 
                                      (abst_mult (abst_div x y_2) y_1)))) 
                             (zen.not 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal y_1 abst_zero))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_div x y_1) 
                                            (abst_div x y_2))))))))) =>
                    zen.Rand 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_mult (abst_div x y_1) 
                                     (abst_div x y_2)) 
                                  (abst_mult (abst_div x y_1) y_1)))) 
                         (zen.not 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_div x y_1) abst_zero))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_div x y_2) y_1)))))) 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_mult (abst_div x y_1) y_1) 
                                  (abst_mult (abst_div x y_2) y_1)))) 
                         (zen.not 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_equal y_1 abst_zero))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_div x y_1) 
                                        (abst_div x y_2))))))) 
                      (v_Vgc:
                       (zen.proof 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_mult (abst_div x y_1) 
                                         (abst_div x y_2)) 
                                      (abst_mult (abst_div x y_1) y_1)))) 
                             (zen.not 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_div x y_1) 
                                            abst_zero))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_div x y_2) y_1))))))) =>
                       v_Vhc:
                       (zen.proof 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_mult (abst_div x y_1) y_1) 
                                      (abst_mult (abst_div x y_2) y_1)))) 
                             (zen.not 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal y_1 abst_zero))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_div x y_1) 
                                            (abst_div x y_2)))))))) =>
                       zen.Rimply 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_mult (abst_div x y_1) y_1) 
                                  (abst_mult (abst_div x y_2) y_1)))) 
                         (zen.not 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_equal y_1 abst_zero))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_div x y_1) 
                                        (abst_div x y_2)))))) 
                         (v_Vic:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_mult (abst_div x y_1) y_1) 
                                         (abst_mult (abst_div x y_2) y_1)))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_mult (abst_div x y_1) y_1) 
                                     (abst_mult (abst_div x y_2) y_1)))) 
                            __O_1_3_LEMMA v_Vic) 
                         (v_Vjc:
                          (zen.proof 
                             (zen.not 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal y_1 abst_zero))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_div x y_1) 
                                            (abst_div x y_2))))))) =>
                          zen.Rnotimply 
                            (zen.triangle 
                               (focal.is_true (abst_equal y_1 abst_zero))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_div x y_1) 
                                     (abst_div x y_2)))) 
                            (v_Vkc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (abst_equal y_1 abst_zero)))) =>
                             v_Vzb:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_div x y_1) 
                                            (abst_div x y_2)))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (abst_equal y_1 abst_zero))) 
                               v_Vkc H_0) v_Vjc) v_Vhc) v_Vfc) v_Vec) v_Vdc) 
             abst_mult_is_regular)) 
         (zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (abst_equal (abst_mult (abst_div x y_1) y_1) 
                     (abst_mult (abst_div x y_2) y_1)))) 
            (v_Vkc:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult (abst_div x y_1) y_1) 
                            (abst_mult (abst_div x y_2) y_1)))))) =>
             zen.Rcut 
               (zen.and 
                  (zen.not 
                     (zen.triangle 
                        (zen.equal abst_T (abst_mult (abst_div x y_1) y_1) 
                           (abst_mult (abst_div x y_1) y_1)))) 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_mult (abst_div x y_1) y_1) 
                              (abst_mult (abst_div x y_1) y_1)))))) 
               (v_Vlc:
                (zen.proof 
                   (zen.and 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal abst_T 
                               (abst_mult (abst_div x y_1) y_1) 
                               (abst_mult (abst_div x y_1) y_1)))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_mult (abst_div x y_1) y_1) 
                                  (abst_mult (abst_div x y_1) y_1))))))) =>
                zen.Rand 
                  (zen.not 
                     (zen.triangle 
                        (zen.equal abst_T (abst_mult (abst_div x y_1) y_1) 
                           (abst_mult (abst_div x y_1) y_1)))) 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_mult (abst_div x y_1) y_1) 
                              (abst_mult (abst_div x y_1) y_1))))) 
                  (v_Vmc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal abst_T 
                               (abst_mult (abst_div x y_1) y_1) 
                               (abst_mult (abst_div x y_1) y_1))))) =>
                   v_Vnc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_mult (abst_div x y_1) y_1) 
                                  (abst_mult (abst_div x y_1) y_1)))))) =>
                   zen.Rnoteq abst_T (abst_mult (abst_div x y_1) y_1) v_Vmc) 
                  v_Vlc) 
               (v_Voc:
                (zen.proof 
                   (zen.not 
                      (zen.and 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T 
                                  (abst_mult (abst_div x y_1) y_1) 
                                  (abst_mult (abst_div x y_1) y_1)))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_mult (abst_div x y_1) y_1) 
                                     (abst_mult (abst_div x y_1) y_1)))))))) =>
                zen.Rcut 
                  (zen.triangle 
                     (zen.equal abst_T x (abst_mult (abst_div x y_2) y_1))) 
                  (v_Vpc:
                   (zen.proof 
                      (zen.triangle 
                         (zen.equal abst_T x (abst_mult (abst_div x y_2) y_1)))) =>
                   zen.Rsubst basics.bool__t 
                     (v_Vqc:(zen.term basics.bool__t) =>
                      zen.triangle (focal.is_true v_Vqc)) 
                     (abst_equal (abst_mult (abst_div x y_1) y_1) x) 
                     (abst_equal (abst_mult (abst_div x y_1) y_1) 
                        (abst_mult (abst_div x y_2) y_1)) 
                     (v_Vrc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (abst_equal 
                                     (abst_mult (abst_div x y_1) y_1) x) 
                                  (abst_equal 
                                     (abst_mult (abst_div x y_1) y_1) 
                                     (abst_mult (abst_div x y_2) y_1)))))) =>
                      zen.Rsubst abst_T 
                        (v_Vsc:(zen.term abst_T) =>
                         zen.not 
                           (zen.triangle 
                              (zen.equal basics.bool__t (abst_equal v_Vsc x) 
                                 (abst_equal 
                                    (abst_mult (abst_div x y_1) y_1) 
                                    (abst_mult (abst_div x y_2) y_1))))) 
                        (abst_mult (abst_div x y_1) y_1) 
                        (abst_mult (abst_div x y_1) y_1) 
                        (v_Vmc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_mult (abst_div x y_1) y_1) 
                                     (abst_mult (abst_div x y_1) y_1))))) =>
                         zen.Rnotand 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal abst_T 
                                    (abst_mult (abst_div x y_1) y_1) 
                                    (abst_mult (abst_div x y_1) y_1)))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_mult (abst_div x y_1) y_1) 
                                       (abst_mult (abst_div x y_1) y_1))))) 
                           (v_Vtc:
                            (zen.proof 
                               (zen.not 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_mult (abst_div x y_1) y_1) 
                                           (abst_mult (abst_div x y_1) y_1)))))) =>
                            zen.Rnotnot 
                              (zen.triangle 
                                 (zen.equal abst_T 
                                    (abst_mult (abst_div x y_1) y_1) 
                                    (abst_mult (abst_div x y_1) y_1))) 
                              (v_Vuc:
                               (zen.proof 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_mult (abst_div x y_1) y_1) 
                                        (abst_mult (abst_div x y_1) y_1)))) =>
                               zen.Rcut 
                                 (zen.triangle 
                                    (zen.equal abst_T 
                                       (abst_mult (abst_div x y_1) y_1) 
                                       (abst_mult (abst_div x y_1) y_1))) 
                                 (v_Vuc:
                                  (zen.proof 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_mult (abst_div x y_1) y_1) 
                                           (abst_mult (abst_div x y_1) y_1)))) =>
                                  zen.Rsubst abst_T 
                                    (v_Vvc:(zen.term abst_T) =>
                                     zen.triangle 
                                       (zen.equal abst_T v_Vvc 
                                          (abst_mult (abst_div x y_1) y_1))) 
                                    (abst_mult (abst_div x y_1) y_1) 
                                    (abst_mult (abst_div x y_1) y_1) 
                                    (v_Vmc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_mult (abst_div x y_1) 
                                                    y_1) 
                                                 (abst_mult (abst_div x y_1) 
                                                    y_1))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_mult (abst_div x y_1) y_1) 
                                             (abst_mult (abst_div x y_1) y_1))) 
                                       v_Vuc v_Vmc) 
                                    (v_Vuc:
                                     (zen.proof 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult (abst_div x y_1) y_1) 
                                              (abst_mult (abst_div x y_1) y_1)))) =>
                                     zen.Rsubst abst_T 
                                       (v_Vwc:(zen.term abst_T) =>
                                        zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_mult (abst_div x y_1) y_1) 
                                             v_Vwc)) 
                                       (abst_mult (abst_div x y_1) y_1) 
                                       (abst_mult (abst_div x y_1) y_1) 
                                       (v_Vmc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_mult 
                                                       (abst_div x y_1) y_1) 
                                                    (abst_mult 
                                                       (abst_div x y_1) y_1))))) =>
                                        zen.Rnoteq abst_T 
                                          (abst_mult (abst_div x y_1) y_1) 
                                          v_Vmc) 
                                       (v_Vuc:
                                        (zen.proof 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_mult (abst_div x y_1) 
                                                    y_1) 
                                                 (abst_mult (abst_div x y_1) 
                                                    y_1)))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_mult (abst_div x y_1) 
                                                   y_1) 
                                                (abst_mult (abst_div x y_1) 
                                                   y_1))) v_Vuc v_Vmc) v_Vuc) 
                                    v_Vuc) 
                                 (v_Vmc:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult (abst_div x y_1) y_1) 
                                              (abst_mult (abst_div x y_1) y_1))))) =>
                                  zen.Rnoteq abst_T 
                                    (abst_mult (abst_div x y_1) y_1) v_Vmc)) 
                              v_Vtc) 
                           (v_Vxc:
                            (zen.proof 
                               (zen.not 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult (abst_div x y_1) y_1) 
                                              (abst_mult (abst_div x y_1) y_1))))))) =>
                            zen.Rnotnot 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_mult (abst_div x y_1) y_1) 
                                       (abst_mult (abst_div x y_1) y_1)))) 
                              (v_Vyc:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult (abst_div x y_1) y_1) 
                                           (abst_mult (abst_div x y_1) y_1))))) =>
                               zen.Rall abst_T 
                                 (v_Vzc:(zen.term abst_T) =>
                                  zen.forall abst_T 
                                    (v_Vad:(zen.term abst_T) =>
                                     zen.forall abst_T 
                                       (v_Vbd:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal v_Vzc v_Vad))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Vad v_Vbd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Vzc v_Vbd))))))) 
                                 (abst_mult (abst_div x y_1) y_1) 
                                 (v_Vcd:
                                  (zen.proof 
                                     (zen.forall abst_T 
                                        (v_Vad:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vbd:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_div x y_1) 
                                                          y_1) v_Vad))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vad 
                                                          v_Vbd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x y_1) 
                                                             y_1) v_Vbd)))))))) =>
                                  zen.Rall abst_T 
                                    (v_Vad:(zen.term abst_T) =>
                                     zen.forall abst_T 
                                       (v_Vbd:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_mult 
                                                      (abst_div x y_1) y_1) 
                                                   v_Vad))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Vad v_Vbd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (abst_div x y_1) y_1) 
                                                      v_Vbd)))))) 
                                    (abst_mult (abst_div x y_1) y_1) 
                                    (v_Vdd:
                                     (zen.proof 
                                        (zen.forall abst_T 
                                           (v_Vbd:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_div x y_1) 
                                                          y_1) 
                                                       (abst_mult 
                                                          (abst_div x y_1) 
                                                          y_1)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x y_1) 
                                                             y_1) v_Vbd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x y_1) 
                                                             y_1) v_Vbd))))))) =>
                                     zen.Rall abst_T 
                                       (v_Vbd:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_mult 
                                                      (abst_div x y_1) y_1) 
                                                   (abst_mult 
                                                      (abst_div x y_1) y_1)))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (abst_div x y_1) y_1) 
                                                      v_Vbd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (abst_div x y_1) y_1) 
                                                      v_Vbd))))) x 
                                       (v_Ved:
                                        (zen.proof 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_div x y_1) 
                                                          y_1) 
                                                       (abst_mult 
                                                          (abst_div x y_1) 
                                                          y_1)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x y_1) 
                                                             y_1) x))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x y_1) 
                                                             y_1) x)))))) =>
                                        zen.Rimply 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_mult 
                                                      (abst_div x y_1) y_1) 
                                                   (abst_mult 
                                                      (abst_div x y_1) y_1)))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (abst_div x y_1) y_1) 
                                                      x))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (abst_div x y_1) y_1) 
                                                      x)))) 
                                          (v_Vnc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x y_1) 
                                                             y_1) 
                                                          (abst_mult 
                                                             (abst_div x y_1) 
                                                             y_1)))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (abst_div x y_1) y_1) 
                                                      (abst_mult 
                                                         (abst_div x y_1) y_1)))) 
                                             v_Vyc v_Vnc) 
                                          (v_Vfd:
                                           (zen.proof 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x y_1) 
                                                             y_1) x))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x y_1) 
                                                             y_1) x))))) =>
                                           zen.Rimply 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (abst_div x y_1) y_1) 
                                                      x))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (abst_div x y_1) y_1) 
                                                      x))) 
                                             (v_Vgd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (abst_div x 
                                                                   y_1) y_1) 
                                                             x))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_mult 
                                                            (abst_div x y_1) 
                                                            y_1) x))) 
                                                __O_1_1_LEMMA v_Vgd) 
                                             (__O_1_1_LEMMA:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x y_1) 
                                                             y_1) x)))) =>
                                              zen.Rsubst basics.bool__t 
                                                (v_Vhd:
                                                 (zen.term basics.bool__t) =>
                                                 zen.triangle 
                                                   (focal.is_true v_Vhd)) 
                                                (abst_equal 
                                                   (abst_mult 
                                                      (abst_div x y_1) y_1) x) 
                                                (abst_equal 
                                                   (abst_mult 
                                                      (abst_div x y_1) y_1) 
                                                   (abst_mult 
                                                      (abst_div x y_2) y_1)) 
                                                (v_Vrc:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   (abst_div 
                                                                    x y_1) 
                                                                   y_1) x) 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   (abst_div 
                                                                    x y_1) 
                                                                   y_1) 
                                                                (abst_mult 
                                                                   (abst_div 
                                                                    x y_2) 
                                                                   y_1)))))) =>
                                                 zen.Rsubst abst_T 
                                                   (v_Vid:
                                                    (zen.term abst_T) =>
                                                    zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (abst_equal 
                                                               v_Vid x) 
                                                            (abst_equal 
                                                               (abst_mult 
                                                                  (abst_div 
                                                                    x y_1) 
                                                                  y_1) 
                                                               (abst_mult 
                                                                  (abst_div 
                                                                    x y_2) 
                                                                  y_1))))) 
                                                   (abst_mult 
                                                      (abst_div x y_1) y_1) 
                                                   (abst_mult 
                                                      (abst_div x y_1) y_1) 
                                                   (v_Vmc:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T 
                                                                (abst_mult 
                                                                   (abst_div 
                                                                    x y_1) 
                                                                   y_1) 
                                                                (abst_mult 
                                                                   (abst_div 
                                                                    x y_1) 
                                                                   y_1))))) =>
                                                    zen.Rnoteq abst_T 
                                                      (abst_mult 
                                                         (abst_div x y_1) y_1) 
                                                      v_Vmc) 
                                                   (v_Vrc:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) x) 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                   (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1)))))) =>
                                                    zen.Rsubst abst_T 
                                                      (v_Vjd:
                                                       (zen.term abst_T) =>
                                                       zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (abst_equal 
                                                                  (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                  v_Vjd) 
                                                               (abst_equal 
                                                                  (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                  (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1))))) 
                                                      x 
                                                      (abst_mult 
                                                         (abst_div x y_2) y_1) 
                                                      (v_Vkd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T x 
                                                                   (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1))))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T x 
                                                               (abst_mult 
                                                                  (abst_div 
                                                                    x y_2) 
                                                                  y_1))) 
                                                         v_Vpc v_Vkd) 
                                                      (v_Vld:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1)) 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1)))))) =>
                                                       zen.Rnoteq 
                                                         basics.bool__t 
                                                         (abst_equal 
                                                            (abst_mult 
                                                               (abst_div x 
                                                                  y_1) y_1) 
                                                            (abst_mult 
                                                               (abst_div x 
                                                                  y_2) y_1)) 
                                                         v_Vld) v_Vrc) v_Vrc) 
                                                (v_Vmd:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (abst_div x 
                                                                   y_1) y_1) 
                                                             (abst_mult 
                                                                (abst_div x 
                                                                   y_2) y_1))))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_mult 
                                                               (abst_div x 
                                                                  y_1) y_1) 
                                                            (abst_mult 
                                                               (abst_div x 
                                                                  y_2) y_1)))) 
                                                   v_Vmd v_Vkc) __O_1_1_LEMMA) 
                                             v_Vfd) v_Ved) v_Vdd) v_Vcd) 
                                 abst_equal_transitive) v_Vxc) v_Voc) 
                        (v_Vrc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (abst_equal 
                                        (abst_mult (abst_div x y_1) y_1) x) 
                                     (abst_equal 
                                        (abst_mult (abst_div x y_1) y_1) 
                                        (abst_mult (abst_div x y_2) y_1)))))) =>
                         zen.Rsubst abst_T 
                           (v_Vjd:(zen.term abst_T) =>
                            zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (abst_equal 
                                       (abst_mult (abst_div x y_1) y_1) v_Vjd) 
                                    (abst_equal 
                                       (abst_mult (abst_div x y_1) y_1) 
                                       (abst_mult (abst_div x y_2) y_1))))) 
                           x (abst_mult (abst_div x y_2) y_1) 
                           (v_Vkd:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal abst_T x 
                                        (abst_mult (abst_div x y_2) y_1))))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (zen.equal abst_T x 
                                    (abst_mult (abst_div x y_2) y_1))) v_Vpc 
                              v_Vkd) 
                           (v_Vld:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (abst_equal 
                                           (abst_mult (abst_div x y_1) y_1) 
                                           (abst_mult (abst_div x y_2) y_1)) 
                                        (abst_equal 
                                           (abst_mult (abst_div x y_1) y_1) 
                                           (abst_mult (abst_div x y_2) y_1)))))) =>
                            zen.Rnoteq basics.bool__t 
                              (abst_equal (abst_mult (abst_div x y_1) y_1) 
                                 (abst_mult (abst_div x y_2) y_1)) v_Vld) 
                           v_Vrc) v_Vrc) 
                     (v_Vmd:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_mult (abst_div x y_1) y_1) 
                                  (abst_mult (abst_div x y_2) y_1))))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_mult (abst_div x y_1) y_1) 
                                 (abst_mult (abst_div x y_2) y_1)))) v_Vmd 
                        v_Vkc) __O_1_1_LEMMA) 
                  (v_Vkd:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal abst_T x 
                               (abst_mult (abst_div x y_2) y_1))))) =>
                   zen.Rcut 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal x (abst_mult (abst_div x y_2) y_1)))) 
                     (v_Vnd:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal x (abst_mult (abst_div x y_2) y_1))))) =>
                      zen.Rall abst_T 
                        (v_Vzc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vad:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vbd:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal v_Vzc v_Vad))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vad v_Vbd))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vzc v_Vbd))))))) 
                        (abst_mult (abst_div x y_1) y_1) 
                        (v_Vcd:
                         (zen.proof 
                            (zen.forall abst_T 
                               (v_Vad:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vbd:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult (abst_div x y_1) y_1) 
                                              v_Vad))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vad v_Vbd))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult (abst_div x y_1) 
                                                    y_1) v_Vbd)))))))) =>
                         zen.Rall abst_T 
                           (v_Vad:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vbd:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_mult (abst_div x y_1) y_1) 
                                          v_Vad))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vad v_Vbd))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_mult (abst_div x y_1) y_1) 
                                             v_Vbd)))))) x 
                           (v_Vod:
                            (zen.proof 
                               (zen.forall abst_T 
                                  (v_Vbd:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult (abst_div x y_1) y_1) 
                                              x))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x v_Vbd))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult (abst_div x y_1) 
                                                    y_1) v_Vbd))))))) =>
                            zen.Rall abst_T 
                              (v_Vbd:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_mult (abst_div x y_1) y_1) x))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal x v_Vbd))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_mult (abst_div x y_1) y_1) 
                                             v_Vbd))))) 
                              (abst_mult (abst_div x y_2) y_1) 
                              (v_Vpd:
                               (zen.proof 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult (abst_div x y_1) y_1) 
                                              x))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x 
                                                 (abst_mult (abst_div x y_2) 
                                                    y_1)))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult (abst_div x y_1) 
                                                    y_1) 
                                                 (abst_mult (abst_div x y_2) 
                                                    y_1))))))) =>
                               zen.Rimply 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_mult (abst_div x y_1) y_1) x))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal x 
                                             (abst_mult (abst_div x y_2) y_1)))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_mult (abst_div x y_1) y_1) 
                                             (abst_mult (abst_div x y_2) y_1))))) 
                                 (v_Vgd:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult (abst_div x y_1) 
                                                    y_1) x))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_mult (abst_div x y_1) y_1) 
                                             x))) __O_1_1_LEMMA v_Vgd) 
                                 (v_Vqd:
                                  (zen.proof 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x 
                                                 (abst_mult (abst_div x y_2) 
                                                    y_1)))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult (abst_div x y_1) 
                                                    y_1) 
                                                 (abst_mult (abst_div x y_2) 
                                                    y_1)))))) =>
                                  zen.Rimply 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal x 
                                             (abst_mult (abst_div x y_2) y_1)))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_mult (abst_div x y_1) y_1) 
                                             (abst_mult (abst_div x y_2) y_1)))) 
                                    (v_Vrd:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal x 
                                                    (abst_mult 
                                                       (abst_div x y_2) y_1)))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_mult (abst_div x y_2) 
                                                   y_1)))) v_Vnd v_Vrd) 
                                    (v_Vmd:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult (abst_div x y_1) 
                                                    y_1) 
                                                 (abst_mult (abst_div x y_2) 
                                                    y_1))))) =>
                                     zen.Rsubst basics.bool__t 
                                       (v_Vhd:(zen.term basics.bool__t) =>
                                        zen.triangle (focal.is_true v_Vhd)) 
                                       (abst_equal 
                                          (abst_mult (abst_div x y_1) y_1) 
                                          (abst_mult (abst_div x y_2) y_1)) 
                                       (abst_equal 
                                          (abst_mult (abst_div x y_1) y_1) 
                                          (abst_mult (abst_div x y_2) y_1)) 
                                       (v_Vld:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_div x y_1) 
                                                          y_1) 
                                                       (abst_mult 
                                                          (abst_div x y_2) 
                                                          y_1)) 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_div x y_1) 
                                                          y_1) 
                                                       (abst_mult 
                                                          (abst_div x y_2) 
                                                          y_1)))))) =>
                                        zen.Rsubst abst_T 
                                          (v_Vsd:(zen.term abst_T) =>
                                           zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (abst_equal v_Vsd 
                                                      (abst_mult 
                                                         (abst_div x y_2) y_1)) 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (abst_div x y_1) y_1) 
                                                      (abst_mult 
                                                         (abst_div x y_2) y_1))))) 
                                          (abst_mult (abst_div x y_1) y_1) 
                                          (abst_mult (abst_div x y_1) y_1) 
                                          (v_Vmc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_mult 
                                                          (abst_div x y_1) 
                                                          y_1) 
                                                       (abst_mult 
                                                          (abst_div x y_1) 
                                                          y_1))))) =>
                                           zen.Rnotand 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_mult 
                                                         (abst_div x y_1) y_1) 
                                                      (abst_mult 
                                                         (abst_div x y_1) y_1)))) 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_mult 
                                                            (abst_div x y_1) 
                                                            y_1) 
                                                         (abst_mult 
                                                            (abst_div x y_1) 
                                                            y_1))))) 
                                             (v_Vtc:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_mult 
                                                                (abst_div x 
                                                                   y_1) y_1) 
                                                             (abst_mult 
                                                                (abst_div x 
                                                                   y_1) y_1)))))) =>
                                              zen.Rnotnot 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_mult 
                                                         (abst_div x y_1) y_1) 
                                                      (abst_mult 
                                                         (abst_div x y_1) y_1))) 
                                                (v_Vuc:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_mult 
                                                             (abst_div x y_1) 
                                                             y_1) 
                                                          (abst_mult 
                                                             (abst_div x y_1) 
                                                             y_1)))) =>
                                                 zen.Reqsym abst_T 
                                                   (abst_mult 
                                                      (abst_div x y_1) y_1) 
                                                   (abst_mult 
                                                      (abst_div x y_1) y_1) 
                                                   v_Vuc v_Vmc) v_Vtc) 
                                             (v_Vxc:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   (abst_div 
                                                                    x y_1) 
                                                                   y_1) 
                                                                (abst_mult 
                                                                   (abst_div 
                                                                    x y_1) 
                                                                   y_1))))))) =>
                                              zen.Rnotnot 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_mult 
                                                            (abst_div x y_1) 
                                                            y_1) 
                                                         (abst_mult 
                                                            (abst_div x y_1) 
                                                            y_1)))) 
                                                (v_Vyc:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (abst_div x 
                                                                   y_1) y_1) 
                                                             (abst_mult 
                                                                (abst_div x 
                                                                   y_1) y_1))))) =>
                                                 zen.Rall abst_T 
                                                   (v_Vzc:
                                                    (zen.term abst_T) =>
                                                    zen.forall abst_T 
                                                      (v_Vad:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vbd:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vbd))))))) 
                                                   (abst_mult 
                                                      (abst_div x y_1) y_1) 
                                                   (v_Vcd:
                                                    (zen.proof 
                                                       (zen.forall abst_T 
                                                          (v_Vad:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vbd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    v_Vad))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    v_Vbd)))))))) =>
                                                    zen.Rall abst_T 
                                                      (v_Vad:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vbd:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    v_Vad))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    v_Vbd)))))) 
                                                      (abst_mult 
                                                         (abst_div x y_1) y_1) 
                                                      (v_Vdd:
                                                       (zen.proof 
                                                          (zen.forall abst_T 
                                                             (v_Vbd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    v_Vbd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    v_Vbd))))))) =>
                                                       zen.Rall abst_T 
                                                         (v_Vbd:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1)))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    v_Vbd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    v_Vbd))))) 
                                                         (abst_mult 
                                                            (abst_div x y_2) 
                                                            y_1) 
                                                         (v_Vtd:
                                                          (zen.proof 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1)))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1))))))) =>
                                                          zen.Rimply 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1)))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1)))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1))))) 
                                                            (v_Vnc:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1)))))) =>
                                                             zen.Raxiom 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1)))) 
                                                               v_Vyc v_Vnc) 
                                                            (v_Vud:
                                                             (zen.proof 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1)))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1)))))) =>
                                                             zen.Rimply 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1)))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1)))) 
                                                               (v_Vkc:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1)))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1)))) 
                                                                  v_Vmd v_Vkc) 
                                                               (v_Vmd:
                                                                (zen.proof 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_1) 
                                                                    y_1) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1)))) 
                                                                  v_Vmd v_Vkc) 
                                                               v_Vud) v_Vtd) 
                                                         v_Vdd) v_Vcd) 
                                                   abst_equal_transitive) 
                                                v_Vxc) v_Voc) 
                                          (v_Vld:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x y_1) 
                                                             y_1) 
                                                          (abst_mult 
                                                             (abst_div x y_2) 
                                                             y_1)) 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x y_1) 
                                                             y_1) 
                                                          (abst_mult 
                                                             (abst_div x y_2) 
                                                             y_1)))))) =>
                                           zen.Rsubst abst_T 
                                             (v_Vjd:(zen.term abst_T) =>
                                              zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (abst_equal 
                                                         (abst_mult 
                                                            (abst_div x y_1) 
                                                            y_1) v_Vjd) 
                                                      (abst_equal 
                                                         (abst_mult 
                                                            (abst_div x y_1) 
                                                            y_1) 
                                                         (abst_mult 
                                                            (abst_div x y_2) 
                                                            y_1))))) 
                                             (abst_mult (abst_div x y_2) y_1) 
                                             (abst_mult (abst_div x y_2) y_1) 
                                             (v_Vvd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_mult 
                                                             (abst_div x y_2) 
                                                             y_1) 
                                                          (abst_mult 
                                                             (abst_div x y_2) 
                                                             y_1))))) =>
                                              zen.Rnoteq abst_T 
                                                (abst_mult (abst_div x y_2) 
                                                   y_1) v_Vvd) 
                                             (v_Vld:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (abst_div x 
                                                                   y_1) y_1) 
                                                             (abst_mult 
                                                                (abst_div x 
                                                                   y_2) y_1)) 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (abst_div x 
                                                                   y_1) y_1) 
                                                             (abst_mult 
                                                                (abst_div x 
                                                                   y_2) y_1)))))) =>
                                              zen.Rnoteq basics.bool__t 
                                                (abst_equal 
                                                   (abst_mult 
                                                      (abst_div x y_1) y_1) 
                                                   (abst_mult 
                                                      (abst_div x y_2) y_1)) 
                                                v_Vld) v_Vld) v_Vld) 
                                       (v_Vmd:
                                        (zen.proof 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_div x y_1) y_1) 
                                                    (abst_mult 
                                                       (abst_div x y_2) y_1))))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_mult 
                                                      (abst_div x y_1) y_1) 
                                                   (abst_mult 
                                                      (abst_div x y_2) y_1)))) 
                                          v_Vmd v_Vkc) v_Vmd) v_Vqd) v_Vpd) 
                              v_Vod) v_Vcd) abst_equal_transitive) 
                     (v_Vrd:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal x 
                                     (abst_mult (abst_div x y_2) y_1)))))) =>
                      zen.Rall abst_T 
                        (v_Vzc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vad:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_equal v_Vzc v_Vad))) 
                              (zen.triangle 
                                 (focal.is_true (abst_equal v_Vad v_Vzc))))) 
                        (abst_mult (abst_div x y_2) y_1) 
                        (v_Vwd:
                         (zen.proof 
                            (zen.forall abst_T 
                               (v_Vad:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult (abst_div x y_2) y_1) 
                                           v_Vad))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal v_Vad 
                                           (abst_mult (abst_div x y_2) y_1))))))) =>
                         zen.Rall abst_T 
                           (v_Vad:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_mult (abst_div x y_2) y_1) v_Vad))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal v_Vad 
                                       (abst_mult (abst_div x y_2) y_1))))) 
                           x 
                           (v_Vxd:
                            (zen.proof 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult (abst_div x y_2) y_1) x))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal x 
                                           (abst_mult (abst_div x y_2) y_1)))))) =>
                            zen.Rimply 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_mult (abst_div x y_2) y_1) x))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal x 
                                       (abst_mult (abst_div x y_2) y_1)))) 
                              (v_Vyd:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult (abst_div x y_2) y_1) 
                                              x))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_mult (abst_div x y_2) y_1) x))) 
                                 __O_1_2_LEMMA v_Vyd) 
                              (v_Vnd:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal x 
                                           (abst_mult (abst_div x y_2) y_1))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal x 
                                          (abst_mult (abst_div x y_2) y_1)))) 
                                 v_Vnd v_Vrd) v_Vxd) v_Vwd) 
                        abst_equal_symmetric)))))) 
        ((__O_1_2_1_LEMMA:
          (dk_logic.eP 
             (dk_logic.ebP (abst_equal (abst_mult (abst_div x y_2) y_2) x))) =>
          (__O_1_2_2_LEMMA:
           (dk_logic.eP 
              (dk_logic.ebP 
                 (abst_equal (abst_mult (abst_div x y_2) y_1) 
                    (abst_mult (abst_div x y_2) y_2)))) =>
           zen.nnpp 
             (zen.triangle 
                (focal.is_true 
                   (abst_equal (abst_mult (abst_div x y_2) y_1) x))) 
             (v_Vkc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_mult (abst_div x y_2) y_1) x))))) =>
              zen.Rcut 
                (zen.and 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T (abst_mult (abst_div x y_2) y_1) 
                            (abst_mult (abst_div x y_2) y_2)))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult (abst_div x y_2) y_1) 
                               (abst_mult (abst_div x y_2) y_2)))))) 
                (v_Vlc:
                 (zen.proof 
                    (zen.and 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T 
                                (abst_mult (abst_div x y_2) y_1) 
                                (abst_mult (abst_div x y_2) y_2)))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult (abst_div x y_2) y_1) 
                                   (abst_mult (abst_div x y_2) y_2))))))) =>
                 zen.Rand 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T (abst_mult (abst_div x y_2) y_1) 
                            (abst_mult (abst_div x y_2) y_2)))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult (abst_div x y_2) y_1) 
                               (abst_mult (abst_div x y_2) y_2))))) 
                   (v_Vmc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T 
                                (abst_mult (abst_div x y_2) y_1) 
                                (abst_mult (abst_div x y_2) y_2))))) =>
                    v_Vnc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult (abst_div x y_2) y_1) 
                                   (abst_mult (abst_div x y_2) y_2)))))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult (abst_div x y_2) y_1) 
                               (abst_mult (abst_div x y_2) y_2)))) 
                      __O_1_2_2_LEMMA v_Vnc) v_Vlc) 
                (v_Voc:
                 (zen.proof 
                    (zen.not 
                       (zen.and 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal abst_T 
                                   (abst_mult (abst_div x y_2) y_1) 
                                   (abst_mult (abst_div x y_2) y_2)))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_mult (abst_div x y_2) y_1) 
                                      (abst_mult (abst_div x y_2) y_2)))))))) =>
                 zen.Rcut (zen.triangle (zen.equal abst_T x x)) 
                   (v_Vpc:
                    (zen.proof (zen.triangle (zen.equal abst_T x x))) =>
                    zen.Rsubst basics.bool__t 
                      (v_Vqc:(zen.term basics.bool__t) =>
                       zen.triangle (focal.is_true v_Vqc)) 
                      (abst_equal (abst_mult (abst_div x y_2) y_2) x) 
                      (abst_equal (abst_mult (abst_div x y_2) y_1) x) 
                      (v_Vrc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (abst_equal 
                                      (abst_mult (abst_div x y_2) y_2) x) 
                                   (abst_equal 
                                      (abst_mult (abst_div x y_2) y_1) x))))) =>
                       zen.Rsubst abst_T 
                         (v_Vsc:(zen.term abst_T) =>
                          zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (abst_equal v_Vsc x) 
                                  (abst_equal 
                                     (abst_mult (abst_div x y_2) y_1) x)))) 
                         (abst_mult (abst_div x y_2) y_2) 
                         (abst_mult (abst_div x y_2) y_1) 
                         (v_Vtc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_mult (abst_div x y_2) y_2) 
                                      (abst_mult (abst_div x y_2) y_1))))) =>
                          zen.Rnotand 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_mult (abst_div x y_2) y_1) 
                                     (abst_mult (abst_div x y_2) y_2)))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_mult (abst_div x y_2) y_1) 
                                        (abst_mult (abst_div x y_2) y_2))))) 
                            (v_Vuc:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_mult (abst_div x y_2) y_1) 
                                            (abst_mult (abst_div x y_2) y_2)))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_mult (abst_div x y_2) y_1) 
                                     (abst_mult (abst_div x y_2) y_2))) 
                               (v_Vvc:
                                (zen.proof 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_mult (abst_div x y_2) y_1) 
                                         (abst_mult (abst_div x y_2) y_2)))) =>
                                zen.Rcut 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_mult (abst_div x y_2) y_1) 
                                        (abst_mult (abst_div x y_2) y_1))) 
                                  (v_Vwc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_mult (abst_div x y_2) y_1) 
                                            (abst_mult (abst_div x y_2) y_1)))) =>
                                   zen.Rsubst abst_T 
                                     (v_Vxc:(zen.term abst_T) =>
                                      zen.triangle 
                                        (zen.equal abst_T v_Vxc 
                                           (abst_mult (abst_div x y_2) y_1))) 
                                     (abst_mult (abst_div x y_2) y_1) 
                                     (abst_mult (abst_div x y_2) y_2) 
                                     (v_Vmc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_mult 
                                                     (abst_div x y_2) y_1) 
                                                  (abst_mult 
                                                     (abst_div x y_2) y_2))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult (abst_div x y_2) y_1) 
                                              (abst_mult (abst_div x y_2) y_2))) 
                                        v_Vvc v_Vmc) 
                                     (v_Vyc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_mult (abst_div x y_2) 
                                                  y_2) 
                                               (abst_mult (abst_div x y_2) 
                                                  y_1)))) =>
                                      zen.Rsubst abst_T 
                                        (v_Vzc:(zen.term abst_T) =>
                                         zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult (abst_div x y_2) y_2) 
                                              v_Vzc)) 
                                        (abst_mult (abst_div x y_2) y_1) 
                                        (abst_mult (abst_div x y_2) y_1) 
                                        (v_Vad:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_mult 
                                                        (abst_div x y_2) y_1) 
                                                     (abst_mult 
                                                        (abst_div x y_2) y_1))))) =>
                                         zen.Rnoteq abst_T 
                                           (abst_mult (abst_div x y_2) y_1) 
                                           v_Vad) 
                                        (v_Vyc:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_mult 
                                                     (abst_div x y_2) y_2) 
                                                  (abst_mult 
                                                     (abst_div x y_2) y_1)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_mult (abst_div x y_2) 
                                                    y_2) 
                                                 (abst_mult (abst_div x y_2) 
                                                    y_1))) v_Vyc v_Vtc) v_Vyc) 
                                     v_Vwc) 
                                  (v_Vad:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_mult (abst_div x y_2) 
                                                  y_1) 
                                               (abst_mult (abst_div x y_2) 
                                                  y_1))))) =>
                                   zen.Rnoteq abst_T 
                                     (abst_mult (abst_div x y_2) y_1) v_Vad)) 
                               v_Vuc) 
                            (v_Vbd:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult (abst_div x y_2) 
                                                  y_1) 
                                               (abst_mult (abst_div x y_2) 
                                                  y_2))))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_mult (abst_div x y_2) y_1) 
                                        (abst_mult (abst_div x y_2) y_2)))) 
                               (__O_1_2_2_LEMMA:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_mult (abst_div x y_2) y_1) 
                                            (abst_mult (abst_div x y_2) y_2))))) =>
                                zen.Rall abst_T 
                                  (v_Vcd:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vdd:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Ved:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vcd v_Vdd))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vdd v_Ved))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vcd v_Ved))))))) 
                                  (abst_mult (abst_div x y_2) y_1) 
                                  (v_Vfd:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vdd:(zen.term abst_T) =>
                                          zen.forall abst_T 
                                            (v_Ved:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult 
                                                           (abst_div x y_2) 
                                                           y_1) v_Vdd))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vdd 
                                                           v_Ved))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (abst_div x y_2) 
                                                              y_1) v_Ved)))))))) =>
                                   zen.Rall abst_T 
                                     (v_Vdd:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Ved:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_div x y_2) y_1) 
                                                    v_Vdd))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vdd v_Ved))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_div x y_2) 
                                                          y_1) v_Ved)))))) 
                                     (abst_mult (abst_div x y_2) y_2) 
                                     (v_Vgd:
                                      (zen.proof 
                                         (zen.forall abst_T 
                                            (v_Ved:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult 
                                                           (abst_div x y_2) 
                                                           y_1) 
                                                        (abst_mult 
                                                           (abst_div x y_2) 
                                                           y_2)))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (abst_div x y_2) 
                                                              y_2) v_Ved))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (abst_div x y_2) 
                                                              y_1) v_Ved))))))) =>
                                      zen.Rall abst_T 
                                        (v_Ved:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_div x y_2) y_1) 
                                                    (abst_mult 
                                                       (abst_div x y_2) y_2)))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_div x y_2) 
                                                          y_2) v_Ved))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_div x y_2) 
                                                          y_1) v_Ved))))) x 
                                        (v_Vhd:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult 
                                                           (abst_div x y_2) 
                                                           y_1) 
                                                        (abst_mult 
                                                           (abst_div x y_2) 
                                                           y_2)))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (abst_div x y_2) 
                                                              y_2) x))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (abst_div x y_2) 
                                                              y_1) x)))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_div x y_2) y_1) 
                                                    (abst_mult 
                                                       (abst_div x y_2) y_2)))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_div x y_2) 
                                                          y_2) x))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_div x y_2) 
                                                          y_1) x)))) 
                                           (v_Vnc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (abst_div x y_2) 
                                                              y_1) 
                                                           (abst_mult 
                                                              (abst_div x y_2) 
                                                              y_2)))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_div x y_2) 
                                                          y_1) 
                                                       (abst_mult 
                                                          (abst_div x y_2) 
                                                          y_2)))) 
                                              __O_1_2_2_LEMMA v_Vnc) 
                                           (v_Vid:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (abst_div x y_2) 
                                                              y_2) x))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (abst_div x y_2) 
                                                              y_1) x))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_div x y_2) 
                                                          y_2) x))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_div x y_2) 
                                                          y_1) x))) 
                                              (v_Vjd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 (abst_div x 
                                                                    y_2) y_2) 
                                                              x))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x y_2) 
                                                             y_2) x))) 
                                                 __O_1_2_1_LEMMA v_Vjd) 
                                              (v_Vkd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (abst_div x y_2) 
                                                              y_1) x)))) =>
                                               zen.Rsubst basics.bool__t 
                                                 (v_Vqc:
                                                  (zen.term basics.bool__t) =>
                                                  zen.triangle 
                                                    (focal.is_true v_Vqc)) 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_div x y_2) y_1) 
                                                    x) 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_div x y_2) y_1) 
                                                    x) 
                                                 (v_Vld:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    (
                                                                    abst_div 
                                                                    x y_2) 
                                                                    y_1) x) 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    (
                                                                    abst_div 
                                                                    x y_2) 
                                                                    y_1) x))))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Vsc:
                                                     (zen.term abst_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                v_Vsc x) 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   (abst_div 
                                                                    x y_2) 
                                                                   y_1) x)))) 
                                                    (abst_mult 
                                                       (abst_div x y_2) y_1) 
                                                    (abst_mult 
                                                       (abst_div x y_2) y_1) 
                                                    (v_Vad:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_mult 
                                                                    (
                                                                    abst_div 
                                                                    x y_2) 
                                                                    y_1) 
                                                                 (abst_mult 
                                                                    (
                                                                    abst_div 
                                                                    x y_2) 
                                                                    y_1))))) =>
                                                     zen.Rnoteq abst_T 
                                                       (abst_mult 
                                                          (abst_div x y_2) 
                                                          y_1) v_Vad) 
                                                    (v_Vld:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1) x) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1) x))))) =>
                                                     zen.Rsubst abst_T 
                                                       (v_Vmd:
                                                        (zen.term abst_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1) 
                                                                   v_Vmd) 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1) x)))) 
                                                       x x 
                                                       (v_Vnd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T x 
                                                                    x)))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T x x)) 
                                                          v_Vpc v_Vnd) 
                                                       (v_Vld:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1) x) 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1) x))))) =>
                                                        zen.Rnoteq 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (abst_div x 
                                                                   y_2) y_1) 
                                                             x) v_Vld) v_Vld) 
                                                    v_Vld) 
                                                 (v_Vkd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 (abst_div x 
                                                                    y_2) y_1) 
                                                              x)))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (abst_div x 
                                                                   y_2) y_1) 
                                                             x))) v_Vkd v_Vkc) 
                                                 v_Vkd) v_Vid) v_Vhd) v_Vgd) 
                                     v_Vfd) abst_equal_transitive) v_Vbd) 
                            v_Voc) 
                         (v_Vld:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_equal 
                                         (abst_mult (abst_div x y_2) y_1) x) 
                                      (abst_equal 
                                         (abst_mult (abst_div x y_2) y_1) x))))) =>
                          zen.Rsubst abst_T 
                            (v_Vmd:(zen.term abst_T) =>
                             zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (abst_equal 
                                        (abst_mult (abst_div x y_2) y_1) 
                                        v_Vmd) 
                                     (abst_equal 
                                        (abst_mult (abst_div x y_2) y_1) x)))) 
                            x x 
                            (v_Vnd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle (zen.equal abst_T x x)))) =>
                             zen.Raxiom 
                               (zen.triangle (zen.equal abst_T x x)) v_Vpc 
                               v_Vnd) 
                            (v_Vld:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (abst_equal 
                                            (abst_mult (abst_div x y_2) y_1) 
                                            x) 
                                         (abst_equal 
                                            (abst_mult (abst_div x y_2) y_1) 
                                            x))))) =>
                             zen.Rnoteq basics.bool__t 
                               (abst_equal (abst_mult (abst_div x y_2) y_1) x) 
                               v_Vld) v_Vld) v_Vrc) 
                      (v_Vkd:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult (abst_div x y_2) y_1) 
                                   x)))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_mult (abst_div x y_2) y_1) x))) 
                         v_Vkd v_Vkc) __O_1_2_1_LEMMA) 
                   (v_Vnd:
                    (zen.proof 
                       (zen.not (zen.triangle (zen.equal abst_T x x)))) =>
                    zen.Rcut (zen.triangle (focal.is_true (abst_equal x x))) 
                      (v_Vod:
                       (zen.proof 
                          (zen.triangle (focal.is_true (abst_equal x x)))) =>
                       zen.Rall abst_T 
                         (v_Vcd:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vdd:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Ved:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vcd v_Vdd))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vdd v_Ved))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vcd v_Ved))))))) 
                         (abst_mult (abst_div x y_2) y_2) 
                         (v_Vpd:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vdd:(zen.term abst_T) =>
                                 zen.forall abst_T 
                                   (v_Ved:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult (abst_div x y_2) 
                                                  y_2) v_Vdd))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vdd v_Ved))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult 
                                                     (abst_div x y_2) y_2) 
                                                  v_Ved)))))))) =>
                          zen.Rall abst_T 
                            (v_Vdd:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Ved:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult (abst_div x y_2) y_2) 
                                           v_Vdd))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vdd v_Ved))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult (abst_div x y_2) y_2) 
                                              v_Ved)))))) x 
                            (v_Vqd:
                             (zen.proof 
                                (zen.forall abst_T 
                                   (v_Ved:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult (abst_div x y_2) 
                                                  y_2) x))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal x v_Ved))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult 
                                                     (abst_div x y_2) y_2) 
                                                  v_Ved))))))) =>
                             zen.Rall abst_T 
                               (v_Ved:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult (abst_div x y_2) y_2) x))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (abst_equal x v_Ved))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult (abst_div x y_2) y_2) 
                                              v_Ved))))) x 
                               (v_Vrd:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult (abst_div x y_2) 
                                                  y_2) x))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true (abst_equal x x))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult 
                                                     (abst_div x y_2) y_2) x)))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult (abst_div x y_2) y_2) x))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (abst_equal x x))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult (abst_div x y_2) y_2) 
                                              x)))) 
                                  (v_Vjd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult 
                                                     (abst_div x y_2) y_2) x))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult (abst_div x y_2) y_2) 
                                              x))) __O_1_2_1_LEMMA v_Vjd) 
                                  (v_Vsd:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true (abst_equal x x))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult 
                                                     (abst_div x y_2) y_2) x))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true (abst_equal x x))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult (abst_div x y_2) y_2) 
                                              x))) 
                                     (v_Vtd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal x x))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true (abst_equal x x))) 
                                        v_Vod v_Vtd) 
                                     (__O_1_2_1_LEMMA:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult 
                                                     (abst_div x y_2) y_2) x)))) =>
                                      zen.Rsubst basics.bool__t 
                                        (v_Vqc:(zen.term basics.bool__t) =>
                                         zen.triangle (focal.is_true v_Vqc)) 
                                        (abst_equal 
                                           (abst_mult (abst_div x y_2) y_2) x) 
                                        (abst_equal 
                                           (abst_mult (abst_div x y_2) y_1) x) 
                                        (v_Vrc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal 
                                                        (abst_mult 
                                                           (abst_div x y_2) 
                                                           y_2) x) 
                                                     (abst_equal 
                                                        (abst_mult 
                                                           (abst_div x y_2) 
                                                           y_1) x))))) =>
                                         zen.Rsubst abst_T 
                                           (v_Vsc:(zen.term abst_T) =>
                                            zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal v_Vsc x) 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_div x y_2) 
                                                          y_1) x)))) 
                                           (abst_mult (abst_div x y_2) y_2) 
                                           (abst_mult (abst_div x y_2) y_1) 
                                           (v_Vtc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_mult 
                                                           (abst_div x y_2) 
                                                           y_2) 
                                                        (abst_mult 
                                                           (abst_div x y_2) 
                                                           y_1))))) =>
                                            zen.Rnotand 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_mult 
                                                          (abst_div x y_2) 
                                                          y_1) 
                                                       (abst_mult 
                                                          (abst_div x y_2) 
                                                          y_2)))) 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x y_2) 
                                                             y_1) 
                                                          (abst_mult 
                                                             (abst_div x y_2) 
                                                             y_2))))) 
                                              (v_Vuc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_mult 
                                                                 (abst_div x 
                                                                    y_2) y_1) 
                                                              (abst_mult 
                                                                 (abst_div x 
                                                                    y_2) y_2)))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_mult 
                                                          (abst_div x y_2) 
                                                          y_1) 
                                                       (abst_mult 
                                                          (abst_div x y_2) 
                                                          y_2))) 
                                                 (v_Vvc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_mult 
                                                              (abst_div x y_2) 
                                                              y_1) 
                                                           (abst_mult 
                                                              (abst_div x y_2) 
                                                              y_2)))) =>
                                                  zen.Reqsym abst_T 
                                                    (abst_mult 
                                                       (abst_div x y_2) y_1) 
                                                    (abst_mult 
                                                       (abst_div x y_2) y_2) 
                                                    v_Vvc v_Vtc) v_Vuc) 
                                              (v_Vbd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    (
                                                                    abst_div 
                                                                    x y_2) 
                                                                    y_1) 
                                                                 (abst_mult 
                                                                    (
                                                                    abst_div 
                                                                    x y_2) 
                                                                    y_2))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x y_2) 
                                                             y_1) 
                                                          (abst_mult 
                                                             (abst_div x y_2) 
                                                             y_2)))) 
                                                 (__O_1_2_2_LEMMA:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 (abst_div x 
                                                                    y_2) y_1) 
                                                              (abst_mult 
                                                                 (abst_div x 
                                                                    y_2) y_2))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vcd:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vdd:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Ved:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vcd 
                                                                    v_Vdd))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vdd 
                                                                    v_Ved))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vcd 
                                                                    v_Ved))))))) 
                                                    (abst_mult 
                                                       (abst_div x y_2) y_1) 
                                                    (v_Vfd:
                                                     (zen.proof 
                                                        (zen.forall abst_T 
                                                           (v_Vdd:
                                                            (zen.term abst_T) =>
                                                            zen.forall 
                                                              abst_T 
                                                              (v_Ved:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1) 
                                                                    v_Vdd))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vdd 
                                                                    v_Ved))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1) 
                                                                    v_Ved)))))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vdd:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Ved:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1) 
                                                                    v_Vdd))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vdd 
                                                                    v_Ved))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1) 
                                                                    v_Ved)))))) 
                                                       (abst_mult 
                                                          (abst_div x y_2) 
                                                          y_2) 
                                                       (v_Vgd:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              abst_T 
                                                              (v_Ved:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_2)))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_2) 
                                                                    v_Ved))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1) 
                                                                    v_Ved))))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Ved:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_2)))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_2) 
                                                                    v_Ved))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1) 
                                                                    v_Ved))))) 
                                                          x 
                                                          (v_Vhd:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_2)))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_2) x))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1) x)))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_2)))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_2) x))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1) x)))) 
                                                             (v_Vnc:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_2)))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1) 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_2)))) 
                                                                __O_1_2_2_LEMMA 
                                                                v_Vnc) 
                                                             (v_Vid:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_2) x))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1) x))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_2) x))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1) x))) 
                                                                (v_Vjd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_2) x))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_2) x))) 
                                                                   __O_1_2_1_LEMMA 
                                                                   v_Vjd) 
                                                                (v_Vkd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1) x)))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_div 
                                                                    x y_2) 
                                                                    y_1) x))) 
                                                                   v_Vkd 
                                                                   v_Vkc) 
                                                                v_Vid) v_Vhd) 
                                                          v_Vgd) v_Vfd) 
                                                    abst_equal_transitive) 
                                                 v_Vbd) v_Voc) 
                                           (v_Vld:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (abst_div x y_2) 
                                                              y_1) x) 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (abst_div x y_2) 
                                                              y_1) x))))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vmd:(zen.term abst_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x y_2) 
                                                             y_1) v_Vmd) 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_div x y_2) 
                                                             y_1) x)))) x x 
                                              (v_Vnd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T x x)))) =>
                                               zen.Rnoteq abst_T x v_Vnd) 
                                              (v_Vld:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 (abst_div x 
                                                                    y_2) y_1) 
                                                              x) 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 (abst_div x 
                                                                    y_2) y_1) 
                                                              x))))) =>
                                               zen.Rnoteq basics.bool__t 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_div x y_2) y_1) 
                                                    x) v_Vld) v_Vld) v_Vrc) 
                                        (v_Vkd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult 
                                                        (abst_div x y_2) y_1) 
                                                     x)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_div x y_2) y_1) 
                                                    x))) v_Vkd v_Vkc) 
                                        __O_1_2_1_LEMMA) v_Vsd) v_Vrd) v_Vqd) 
                            v_Vpd) abst_equal_transitive) 
                      (v_Vtd:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle (focal.is_true (abst_equal x x))))) =>
                       zen.Rnoteq abst_T x v_Vnd))))) 
            ((__O_1_2_2_1_LEMMA:
              (z:(cc.eT abst_T) ->
               dk_logic.eP 
                 (dk_logic.ebP 
                    (abst_equal (abst_mult z y_1) (abst_mult z y_2)))) =>
              zen.nnpp 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_mult (abst_div x y_2) y_1) 
                         (abst_mult (abst_div x y_2) y_2)))) 
                (v_Vzb:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult (abst_div x y_2) y_1) 
                                (abst_mult (abst_div x y_2) y_2)))))) =>
                 zen.Rall abst_T 
                   (v_Vac:(zen.term abst_T) =>
                    zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult v_Vac y_1) 
                            (abst_mult v_Vac y_2)))) (abst_div x y_2) 
                   (v_Vbc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult (abst_div x y_2) y_1) 
                                (abst_mult (abst_div x y_2) y_2))))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult (abst_div x y_2) y_1) 
                               (abst_mult (abst_div x y_2) y_2)))) v_Vbc 
                      v_Vzb) __O_1_2_2_1_LEMMA)) 
               (z:(cc.eT abst_T) =>
                zen.nnpp 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_mult z y_1) (abst_mult z y_2)))) 
                  (v_Vzb:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_mult z y_1) 
                                  (abst_mult z y_2)))))) =>
                   zen.Rall abst_T 
                     (v_Vac:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vbc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vcc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_equal v_Vac v_Vbc))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_mult v_Vcc v_Vac) 
                                       (abst_mult v_Vcc v_Vbc))))))) y_1 
                     (v_Vdc:
                      (zen.proof 
                         (zen.forall abst_T 
                            (v_Vbc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vcc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal y_1 v_Vbc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_mult v_Vcc y_1) 
                                           (abst_mult v_Vcc v_Vbc)))))))) =>
                      zen.Rall abst_T 
                        (v_Vbc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vcc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_equal y_1 v_Vbc))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_mult v_Vcc y_1) 
                                       (abst_mult v_Vcc v_Vbc)))))) y_2 
                        (v_Vec:
                         (zen.proof 
                            (zen.forall abst_T 
                               (v_Vcc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal y_1 y_2))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_mult v_Vcc y_1) 
                                           (abst_mult v_Vcc y_2))))))) =>
                         zen.Rall abst_T 
                           (v_Vcc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_equal y_1 y_2))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_mult v_Vcc y_1) 
                                       (abst_mult v_Vcc y_2))))) z 
                           (v_Vfc:
                            (zen.proof 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal y_1 y_2))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_mult z y_1) 
                                           (abst_mult z y_2)))))) =>
                            zen.Rimply 
                              (zen.triangle 
                                 (focal.is_true (abst_equal y_1 y_2))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_mult z y_1) 
                                       (abst_mult z y_2)))) 
                              (v_Vgc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true (abst_equal y_1 y_2))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal y_1 y_2))) 
                                 H_y v_Vgc) 
                              (v_Vhc:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_mult z y_1) 
                                           (abst_mult z y_2))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_mult z y_1) 
                                          (abst_mult z y_2)))) v_Vhc v_Vzb) 
                              v_Vfc) v_Vec) v_Vdc) 
                     abst_mult_right_substitution_rule)))) 
           ((__O_1_2_1_1_LEMMA:
             (dk_logic.eP 
                (dk_logic.not (dk_logic.ebP (abst_equal y_2 abst_zero)))) =>
             zen.nnpp 
               (zen.triangle 
                  (focal.is_true 
                     (abst_equal (abst_mult (abst_div x y_2) y_2) x))) 
               (v_Vzb:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult (abst_div x y_2) y_2) x))))) =>
                zen.Rall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.or 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Vbc abst_zero))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_mult (abst_div v_Vac v_Vbc) v_Vbc) 
                                 v_Vac))))) x 
                  (v_Vcc:
                   (zen.proof 
                      (zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.or 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vbc abst_zero))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_mult (abst_div x v_Vbc) v_Vbc) x)))))) =>
                   zen.Rall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.or 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Vbc abst_zero))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_mult (abst_div x v_Vbc) v_Vbc) x)))) 
                     y_2 
                     (v_Vdc:
                      (zen.proof 
                         (zen.or 
                            (zen.triangle 
                               (focal.is_true (abst_equal y_2 abst_zero))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_mult (abst_div x y_2) y_2) x))))) =>
                      zen.Ror 
                        (zen.triangle 
                           (focal.is_true (abst_equal y_2 abst_zero))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_mult (abst_div x y_2) y_2) x))) 
                        (v_Vec:
                         (zen.proof 
                            (zen.triangle 
                               (focal.is_true (abst_equal y_2 abst_zero)))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true (abst_equal y_2 abst_zero))) 
                           v_Vec __O_1_2_1_1_LEMMA) 
                        (v_Vfc:
                         (zen.proof 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_mult (abst_div x y_2) y_2) x)))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_mult (abst_div x y_2) y_2) x))) 
                           v_Vfc v_Vzb) v_Vdc) v_Vcc) abst_div_divides)) 
              (zen.nnpp 
                 (zen.not 
                    (zen.triangle (focal.is_true (abst_equal y_2 abst_zero)))) 
                 (v_Vkc:
                  (zen.proof 
                     (zen.not 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true (abst_equal y_2 abst_zero)))))) =>
                  zen.Rnotnot 
                    (zen.triangle (focal.is_true (abst_equal y_2 abst_zero))) 
                    (v_Vlc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true (abst_equal y_2 abst_zero)))) =>
                     zen.Rcut 
                       (zen.and 
                          (zen.not (zen.triangle (zen.equal abst_T y_1 y_2))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_equal y_1 y_2))))) 
                       (v_Vmc:
                        (zen.proof 
                           (zen.and 
                              (zen.not 
                                 (zen.triangle (zen.equal abst_T y_1 y_2))) 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal y_1 y_2)))))) =>
                        zen.Rand 
                          (zen.not (zen.triangle (zen.equal abst_T y_1 y_2))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_equal y_1 y_2)))) 
                          (v_Vnc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle (zen.equal abst_T y_1 y_2)))) =>
                           v_Voc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal y_1 y_2))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true (abst_equal y_1 y_2))) H_y 
                             v_Voc) v_Vmc) 
                       (v_Vpc:
                        (zen.proof 
                           (zen.not 
                              (zen.and 
                                 (zen.not 
                                    (zen.triangle (zen.equal abst_T y_1 y_2))) 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal y_1 y_2))))))) =>
                        zen.Rcut 
                          (zen.triangle 
                             (zen.equal abst_T abst_zero abst_zero)) 
                          (v_Vqc:
                           (zen.proof 
                              (zen.triangle 
                                 (zen.equal abst_T abst_zero abst_zero))) =>
                           zen.Rsubst basics.bool__t 
                             (v_Vrc:(zen.term basics.bool__t) =>
                              zen.triangle (focal.is_true v_Vrc)) 
                             (abst_equal y_2 abst_zero) 
                             (abst_equal y_1 abst_zero) 
                             (v_Vsc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal basics.bool__t 
                                          (abst_equal y_2 abst_zero) 
                                          (abst_equal y_1 abst_zero))))) =>
                              zen.Rsubst abst_T 
                                (v_Vtc:(zen.term abst_T) =>
                                 zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (abst_equal v_Vtc abst_zero) 
                                         (abst_equal y_1 abst_zero)))) y_2 
                                y_1 
                                (v_Vuc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal abst_T y_2 y_1)))) =>
                                 zen.Rnotand 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T y_1 y_2))) 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true (abst_equal y_1 y_2)))) 
                                   (v_Vvc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal abst_T y_1 y_2))))) =>
                                    zen.Rnotnot 
                                      (zen.triangle 
                                         (zen.equal abst_T y_1 y_2)) 
                                      (v_Vwc:
                                       (zen.proof 
                                          (zen.triangle 
                                             (zen.equal abst_T y_1 y_2))) =>
                                       zen.Rcut 
                                         (zen.triangle 
                                            (zen.equal abst_T y_1 y_1)) 
                                         (v_Vxc:
                                          (zen.proof 
                                             (zen.triangle 
                                                (zen.equal abst_T y_1 y_1))) =>
                                          zen.Rsubst abst_T 
                                            (v_Vyc:(zen.term abst_T) =>
                                             zen.triangle 
                                               (zen.equal abst_T v_Vyc y_1)) 
                                            y_1 y_2 
                                            (v_Vnc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal abst_T y_1 
                                                         y_2)))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (zen.equal abst_T y_1 y_2)) 
                                               v_Vwc v_Vnc) 
                                            (v_Vzc:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (zen.equal abst_T y_2 y_1))) =>
                                             zen.Rsubst abst_T 
                                               (v_Vad:(zen.term abst_T) =>
                                                zen.triangle 
                                                  (zen.equal abst_T y_2 v_Vad)) 
                                               y_1 y_1 
                                               (v_Vbd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            y_1 y_1)))) =>
                                                zen.Rnoteq abst_T y_1 v_Vbd) 
                                               (v_Vzc:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (zen.equal abst_T y_2 
                                                         y_1))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (zen.equal abst_T y_2 
                                                        y_1)) v_Vzc v_Vuc) 
                                               v_Vzc) v_Vxc) 
                                         (v_Vbd:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T y_1 y_1)))) =>
                                          zen.Rnoteq abst_T y_1 v_Vbd)) v_Vvc) 
                                   (v_Vcd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal y_1 y_2)))))) =>
                                    zen.Rnotnot 
                                      (zen.triangle 
                                         (focal.is_true (abst_equal y_1 y_2))) 
                                      (H_y:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal y_1 y_2)))) =>
                                       zen.Rall abst_T 
                                         (v_Vdd:(zen.term abst_T) =>
                                          zen.forall abst_T 
                                            (v_Ved:(zen.term abst_T) =>
                                             zen.forall abst_T 
                                               (v_Vfd:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vdd 
                                                           v_Ved))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Ved 
                                                              v_Vfd))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Vdd 
                                                              v_Vfd))))))) 
                                         y_1 
                                         (v_Vgd:
                                          (zen.proof 
                                             (zen.forall abst_T 
                                                (v_Ved:(zen.term abst_T) =>
                                                 zen.forall abst_T 
                                                   (v_Vfd:
                                                    (zen.term abst_T) =>
                                                    zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal y_1 
                                                               v_Ved))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  v_Ved v_Vfd))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  y_1 v_Vfd)))))))) =>
                                          zen.Rall abst_T 
                                            (v_Ved:(zen.term abst_T) =>
                                             zen.forall abst_T 
                                               (v_Vfd:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal y_1 v_Ved))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Ved 
                                                              v_Vfd))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal y_1 
                                                              v_Vfd)))))) 
                                            y_2 
                                            (v_Vhd:
                                             (zen.proof 
                                                (zen.forall abst_T 
                                                   (v_Vfd:
                                                    (zen.term abst_T) =>
                                                    zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal y_1 
                                                               y_2))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  y_2 v_Vfd))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  y_1 v_Vfd))))))) =>
                                             zen.Rall abst_T 
                                               (v_Vfd:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal y_1 y_2))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal y_2 
                                                              v_Vfd))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal y_1 
                                                              v_Vfd))))) 
                                               abst_zero 
                                               (v_Vid:
                                                (zen.proof 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal y_1 
                                                               y_2))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  y_2 
                                                                  abst_zero))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  y_1 
                                                                  abst_zero)))))) =>
                                                zen.Rimply 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal y_1 y_2))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal y_2 
                                                              abst_zero))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal y_1 
                                                              abst_zero)))) 
                                                  (v_Voc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  y_1 y_2))))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal y_1 
                                                              y_2))) H_y 
                                                     v_Voc) 
                                                  (v_Vjd:
                                                   (zen.proof 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  y_2 
                                                                  abst_zero))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  y_1 
                                                                  abst_zero))))) =>
                                                   zen.Rimply 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal y_2 
                                                              abst_zero))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal y_1 
                                                              abst_zero))) 
                                                     (v_Vkd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    y_2 
                                                                    abst_zero))))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 y_2 
                                                                 abst_zero))) 
                                                        v_Vlc v_Vkd) 
                                                     (v_Vld:
                                                      (zen.proof 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  y_1 
                                                                  abst_zero)))) =>
                                                      zen.Rsubst 
                                                        basics.bool__t 
                                                        (v_Vrc:
                                                         (zen.term 
                                                            basics.bool__t) =>
                                                         zen.triangle 
                                                           (focal.is_true 
                                                              v_Vrc)) 
                                                        (abst_equal y_1 
                                                           abst_zero) 
                                                        (abst_equal y_1 
                                                           abst_zero) 
                                                        (v_Vmd:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    y_1 
                                                                    abst_zero) 
                                                                    (abst_equal 
                                                                    y_1 
                                                                    abst_zero))))) =>
                                                         zen.Rsubst abst_T 
                                                           (v_Vtc:
                                                            (zen.term abst_T) =>
                                                            zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    v_Vtc 
                                                                    abst_zero) 
                                                                    (
                                                                    abst_equal 
                                                                    y_1 
                                                                    abst_zero)))) 
                                                           y_1 y_1 
                                                           (v_Vbd:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    y_1 y_1)))) =>
                                                            zen.Rnoteq 
                                                              abst_T y_1 
                                                              v_Vbd) 
                                                           (v_Vmd:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    y_1 
                                                                    abst_zero) 
                                                                    (abst_equal 
                                                                    y_1 
                                                                    abst_zero))))) =>
                                                            zen.Rsubst 
                                                              abst_T 
                                                              (v_Vnd:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    y_1 v_Vnd) 
                                                                    (abst_equal 
                                                                    y_1 
                                                                    abst_zero)))) 
                                                              abst_zero 
                                                              abst_zero 
                                                              (v_Vod:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    abst_zero 
                                                                    abst_zero)))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    abst_zero 
                                                                    abst_zero)) 
                                                                 v_Vqc v_Vod) 
                                                              (v_Vmd:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    y_1 
                                                                    abst_zero) 
                                                                    (abst_equal 
                                                                    y_1 
                                                                    abst_zero))))) =>
                                                               zen.Rnoteq 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    y_1 
                                                                    abst_zero) 
                                                                 v_Vmd) v_Vmd) 
                                                           v_Vmd) 
                                                        (v_Vld:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    y_1 
                                                                    abst_zero)))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    y_1 
                                                                    abst_zero))) 
                                                           v_Vld H_0) v_Vld) 
                                                     v_Vjd) v_Vid) v_Vhd) 
                                            v_Vgd) abst_equal_transitive) 
                                      v_Vcd) v_Vpc) 
                                (v_Vmd:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal basics.bool__t 
                                             (abst_equal y_1 abst_zero) 
                                             (abst_equal y_1 abst_zero))))) =>
                                 zen.Rsubst abst_T 
                                   (v_Vnd:(zen.term abst_T) =>
                                    zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (abst_equal y_1 v_Vnd) 
                                            (abst_equal y_1 abst_zero)))) 
                                   abst_zero abst_zero 
                                   (v_Vod:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal abst_T abst_zero 
                                                abst_zero)))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (zen.equal abst_T abst_zero 
                                            abst_zero)) v_Vqc v_Vod) 
                                   (v_Vmd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal basics.bool__t 
                                                (abst_equal y_1 abst_zero) 
                                                (abst_equal y_1 abst_zero))))) =>
                                    zen.Rnoteq basics.bool__t 
                                      (abst_equal y_1 abst_zero) v_Vmd) v_Vmd) 
                                v_Vsc) 
                             (v_Vld:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal y_1 abst_zero)))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true (abst_equal y_1 abst_zero))) 
                                v_Vld H_0) v_Vlc) 
                          (v_Vod:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal abst_T abst_zero abst_zero)))) =>
                           zen.Rcut 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal abst_zero abst_zero))) 
                             (v_Vpd:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal abst_zero abst_zero)))) =>
                              zen.Rall abst_T 
                                (v_Vdd:(zen.term abst_T) =>
                                 zen.forall abst_T 
                                   (v_Ved:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Vfd:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vdd v_Ved))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Ved v_Vfd))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vdd v_Vfd))))))) 
                                y_2 
                                (v_Vqd:
                                 (zen.proof 
                                    (zen.forall abst_T 
                                       (v_Ved:(zen.term abst_T) =>
                                        zen.forall abst_T 
                                          (v_Vfd:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal y_2 v_Ved))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Ved v_Vfd))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal y_2 v_Vfd)))))))) =>
                                 zen.Rall abst_T 
                                   (v_Ved:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Vfd:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal y_2 v_Ved))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Ved v_Vfd))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal y_2 v_Vfd)))))) 
                                   abst_zero 
                                   (v_Vrd:
                                    (zen.proof 
                                       (zen.forall abst_T 
                                          (v_Vfd:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal y_2 abst_zero))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal abst_zero 
                                                         v_Vfd))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal y_2 v_Vfd))))))) =>
                                    zen.Rall abst_T 
                                      (v_Vfd:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal y_2 abst_zero))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal abst_zero v_Vfd))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal y_2 v_Vfd))))) 
                                      abst_zero 
                                      (v_Vsd:
                                       (zen.proof 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal y_2 abst_zero))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal abst_zero 
                                                         abst_zero))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal y_2 
                                                         abst_zero)))))) =>
                                       zen.Rimply 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal y_2 abst_zero))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal abst_zero 
                                                     abst_zero))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal y_2 abst_zero)))) 
                                         (v_Vkd:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal y_2 
                                                         abst_zero))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal y_2 abst_zero))) 
                                            v_Vlc v_Vkd) 
                                         (v_Vtd:
                                          (zen.proof 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal abst_zero 
                                                         abst_zero))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal y_2 
                                                         abst_zero))))) =>
                                          zen.Rimply 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal abst_zero 
                                                     abst_zero))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal y_2 abst_zero))) 
                                            (v_Vud:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            abst_zero 
                                                            abst_zero))))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal abst_zero 
                                                        abst_zero))) v_Vpd 
                                               v_Vud) 
                                            (v_Vlc:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal y_2 
                                                         abst_zero)))) =>
                                             zen.Rsubst basics.bool__t 
                                               (v_Vrc:
                                                (zen.term basics.bool__t) =>
                                                zen.triangle 
                                                  (focal.is_true v_Vrc)) 
                                               (abst_equal y_2 abst_zero) 
                                               (abst_equal y_1 abst_zero) 
                                               (v_Vsc:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (abst_equal y_2 
                                                               abst_zero) 
                                                            (abst_equal y_1 
                                                               abst_zero))))) =>
                                                zen.Rsubst abst_T 
                                                  (v_Vtc:(zen.term abst_T) =>
                                                   zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal v_Vtc 
                                                              abst_zero) 
                                                           (abst_equal y_1 
                                                              abst_zero)))) 
                                                  y_2 y_1 
                                                  (v_Vuc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T y_2 y_1)))) =>
                                                   zen.Rnotand 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              y_1 y_2))) 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 y_1 y_2)))) 
                                                     (v_Vvc:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    abst_T 
                                                                    y_1 y_2))))) =>
                                                      zen.Rnotnot 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              y_1 y_2)) 
                                                        (v_Vwc:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T y_1 
                                                                  y_2))) =>
                                                         zen.Reqsym abst_T 
                                                           y_1 y_2 v_Vwc 
                                                           v_Vuc) v_Vvc) 
                                                     (v_Vcd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    y_1 y_2)))))) =>
                                                      zen.Rnotnot 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 y_1 y_2))) 
                                                        (H_y:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    y_1 y_2)))) =>
                                                         zen.Rall abst_T 
                                                           (v_Vdd:
                                                            (zen.term abst_T) =>
                                                            zen.forall 
                                                              abst_T 
                                                              (v_Ved:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.forall 
                                                                 abst_T 
                                                                 (v_Vfd:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vdd 
                                                                    v_Ved))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Ved 
                                                                    v_Vfd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vdd 
                                                                    v_Vfd))))))) 
                                                           y_1 
                                                           (v_Vgd:
                                                            (zen.proof 
                                                               (zen.forall 
                                                                  abst_T 
                                                                  (v_Ved:
                                                                   (zen.term 
                                                                    abst_T) =>
                                                                   zen.forall 
                                                                    abst_T 
                                                                    (v_Vfd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y_1 v_Ved))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Ved 
                                                                    v_Vfd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y_1 v_Vfd)))))))) =>
                                                            zen.Rall abst_T 
                                                              (v_Ved:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.forall 
                                                                 abst_T 
                                                                 (v_Vfd:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y_1 v_Ved))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Ved 
                                                                    v_Vfd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y_1 v_Vfd)))))) 
                                                              y_2 
                                                              (v_Vhd:
                                                               (zen.proof 
                                                                  (zen.forall 
                                                                    abst_T 
                                                                    (v_Vfd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y_1 y_2))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y_2 v_Vfd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y_1 v_Vfd))))))) =>
                                                               zen.Rall 
                                                                 abst_T 
                                                                 (v_Vfd:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y_1 y_2))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y_2 v_Vfd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y_1 v_Vfd))))) 
                                                                 abst_zero 
                                                                 (v_Vid:
                                                                  (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y_1 y_2))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y_2 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y_1 
                                                                    abst_zero)))))) =>
                                                                  zen.Rimply 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y_1 y_2))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y_2 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y_1 
                                                                    abst_zero)))) 
                                                                    (
                                                                    v_Voc:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y_1 y_2))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y_1 y_2))) 
                                                                    H_y v_Voc) 
                                                                    (
                                                                    v_Vjd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y_2 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y_1 
                                                                    abst_zero))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y_2 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y_1 
                                                                    abst_zero))) 
                                                                    (v_Vkd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y_2 
                                                                    abst_zero))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y_2 
                                                                    abst_zero))) 
                                                                    v_Vlc 
                                                                    v_Vkd) 
                                                                    (v_Vld:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y_1 
                                                                    abst_zero)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    y_1 
                                                                    abst_zero))) 
                                                                    v_Vld H_0) 
                                                                    v_Vjd) 
                                                                    v_Vid) 
                                                                 v_Vhd) v_Vgd) 
                                                           abst_equal_transitive) 
                                                        v_Vcd) v_Vpc) 
                                                  (v_Vmd:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (abst_equal 
                                                                  y_1 
                                                                  abst_zero) 
                                                               (abst_equal 
                                                                  y_1 
                                                                  abst_zero))))) =>
                                                   zen.Rsubst abst_T 
                                                     (v_Vnd:
                                                      (zen.term abst_T) =>
                                                      zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 y_1 v_Vnd) 
                                                              (abst_equal 
                                                                 y_1 
                                                                 abst_zero)))) 
                                                     abst_zero abst_zero 
                                                     (v_Vod:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T 
                                                                  abst_zero 
                                                                  abst_zero)))) =>
                                                      zen.Rnoteq abst_T 
                                                        abst_zero v_Vod) 
                                                     (v_Vmd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (abst_equal 
                                                                    y_1 
                                                                    abst_zero) 
                                                                  (abst_equal 
                                                                    y_1 
                                                                    abst_zero))))) =>
                                                      zen.Rnoteq 
                                                        basics.bool__t 
                                                        (abst_equal y_1 
                                                           abst_zero) v_Vmd) 
                                                     v_Vmd) v_Vsc) 
                                               (v_Vld:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal y_1 
                                                            abst_zero)))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal y_1 
                                                           abst_zero))) 
                                                  v_Vld H_0) v_Vlc) v_Vtd) 
                                         v_Vsd) v_Vrd) v_Vqd) 
                                abst_equal_transitive) 
                             (v_Vud:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal abst_zero abst_zero))))) =>
                              zen.Rnoteq abst_T abst_zero v_Vod)))) v_Vkc))))) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true (abst_equal (abst_mult (abst_div x y_1) y_1) x))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult (abst_div x y_1) y_1) x))))) =>
           zen.Rall abst_T 
             (v_Vac:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.or 
                   (zen.triangle (focal.is_true (abst_equal v_Vbc abst_zero))) 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal 
                            (abst_mult (abst_div v_Vac v_Vbc) v_Vbc) v_Vac))))) 
             x 
             (v_Vcc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.or 
                       (zen.triangle 
                          (focal.is_true (abst_equal v_Vbc abst_zero))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_mult (abst_div x v_Vbc) v_Vbc) x)))))) =>
              zen.Rall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.or 
                   (zen.triangle (focal.is_true (abst_equal v_Vbc abst_zero))) 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult (abst_div x v_Vbc) v_Vbc) x)))) 
                y_1 
                (v_Vdc:
                 (zen.proof 
                    (zen.or 
                       (zen.triangle 
                          (focal.is_true (abst_equal y_1 abst_zero))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult (abst_div x y_1) y_1) x))))) =>
                 zen.Ror 
                   (zen.triangle (focal.is_true (abst_equal y_1 abst_zero))) 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult (abst_div x y_1) y_1) x))) 
                   (v_Vec:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true (abst_equal y_1 abst_zero)))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true (abst_equal y_1 abst_zero))) v_Vec 
                      H_0) 
                   (v_Vfc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult (abst_div x y_1) y_1) x)))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult (abst_div x y_1) y_1) x))) 
                      v_Vfc v_Vzb) v_Vdc) v_Vcc) abst_div_divides))).

def Division_monoid__divides_reverses_mult :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_different:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_mult_commutes:(dk_logic.eP 
                        (dk_logic.forall abst_T 
                           (x:(cc.eT abst_T) =>
                            dk_logic.forall abst_T 
                              (y:(cc.eT abst_T) =>
                               dk_logic.ebP 
                                 (abst_equal (abst_mult x y) (abst_mult y x)))))) ->
  abst_mult_left_substitution_rule:(dk_logic.eP 
                                      (dk_logic.forall abst_T 
                                         (x:(cc.eT abst_T) =>
                                          dk_logic.forall abst_T 
                                            (y:(cc.eT abst_T) =>
                                             dk_logic.forall abst_T 
                                               (z:(cc.eT abst_T) =>
                                                dk_logic.imp 
                                                  (dk_logic.ebP 
                                                     (abst_equal x y)) 
                                                  (dk_logic.ebP 
                                                     (abst_equal 
                                                        (abst_mult x z) 
                                                        (abst_mult y z)))))))) ->
  abst_same_is_not_different:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.eqv 
                                         (dk_logic.ebP (abst_different x y)) 
                                         (dk_logic.not 
                                            (dk_logic.ebP (abst_equal x y))))))) ->
  abst_divides_transitive:(dk_logic.eP 
                             (dk_logic.forall abst_T 
                                (x:(cc.eT abst_T) =>
                                 dk_logic.forall abst_T 
                                   (y:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (z:(cc.eT abst_T) =>
                                       dk_logic.imp 
                                         (Division_monoid__divides abst_T 
                                            abst_equal abst_zero x y) 
                                         (dk_logic.imp 
                                            (Division_monoid__divides abst_T 
                                               abst_equal abst_zero y z) 
                                            (Division_monoid__divides abst_T 
                                               abst_equal abst_zero x z))))))) ->
  abst_divides_extends_equal:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.imp 
                                         (dk_logic.ebP (abst_equal x y)) 
                                         (Division_monoid__divides abst_T 
                                            abst_equal abst_zero x y))))) ->
  abst_zero_absorbes:(dk_logic.eP 
                        (dk_logic.forall abst_T 
                           (x:(cc.eT abst_T) =>
                            dk_logic.and 
                              (dk_logic.ebP 
                                 (abst_equal (abst_mult x abst_zero) 
                                    abst_zero)) 
                              (dk_logic.ebP 
                                 (abst_equal (abst_mult abst_zero x) 
                                    abst_zero))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.and 
             (Division_monoid__divides abst_T abst_equal abst_zero x 
                (abst_mult x y)) 
             (Division_monoid__divides abst_T abst_equal abst_zero y 
                (abst_mult x y)))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_different:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_mult_commutes:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.ebP (abst_equal (abst_mult x y) (abst_mult y x)))))) =>
  abst_mult_left_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.ebP (abst_equal (abst_mult x z) (abst_mult y z)))))))) =>
  abst_same_is_not_different:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_different x y)) 
              (dk_logic.not (dk_logic.ebP (abst_equal x y))))))) =>
  abst_divides_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp 
                 (Division_monoid__divides abst_T abst_equal abst_zero x y) 
                 (dk_logic.imp 
                    (Division_monoid__divides abst_T abst_equal abst_zero y z) 
                    (Division_monoid__divides abst_T abst_equal abst_zero x z))))))) =>
  abst_divides_extends_equal:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (Division_monoid__divides abst_T abst_equal abst_zero x y))))) =>
  abst_zero_absorbes:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.and 
           (dk_logic.ebP (abst_equal (abst_mult x abst_zero) abst_zero)) 
           (dk_logic.ebP (abst_equal (abst_mult abst_zero x) abst_zero))))) =>
  (__P_1_LEMMA:
   (x:(cc.eT abst_T) ->
    y:(cc.eT abst_T) ->
    dk_logic.eP 
      (Division_monoid__divides abst_T abst_equal abst_zero x (abst_mult x y))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vhc:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vic:(zen.term abst_T) =>
            zen.and 
              (zen.triangle 
                 (Division_monoid__divides abst_T abst_equal abst_zero v_Vhc 
                    (abst_mult v_Vhc v_Vic))) 
              (zen.triangle 
                 (Division_monoid__divides abst_T abst_equal abst_zero v_Vic 
                    (abst_mult v_Vhc v_Vic)))))) 
     (v_Vjc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vhc:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vic:(zen.term abst_T) =>
                   zen.and 
                     (zen.triangle 
                        (Division_monoid__divides abst_T abst_equal 
                           abst_zero v_Vhc (abst_mult v_Vhc v_Vic))) 
                     (zen.triangle 
                        (Division_monoid__divides abst_T abst_equal 
                           abst_zero v_Vic (abst_mult v_Vhc v_Vic)))))))) =>
      zen.Rnotall abst_T 
        (v_Vhc:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vic:(zen.term abst_T) =>
            zen.and 
              (zen.triangle 
                 (Division_monoid__divides abst_T abst_equal abst_zero v_Vhc 
                    (abst_mult v_Vhc v_Vic))) 
              (zen.triangle 
                 (Division_monoid__divides abst_T abst_equal abst_zero v_Vic 
                    (abst_mult v_Vhc v_Vic))))) 
        (v_Vkc:(zen.term abst_T) =>
         v_Vlc:
         (zen.proof 
            (zen.not 
               (zen.forall abst_T 
                  (v_Vic:(zen.term abst_T) =>
                   zen.and 
                     (zen.triangle 
                        (Division_monoid__divides abst_T abst_equal 
                           abst_zero v_Vkc (abst_mult v_Vkc v_Vic))) 
                     (zen.triangle 
                        (Division_monoid__divides abst_T abst_equal 
                           abst_zero v_Vic (abst_mult v_Vkc v_Vic))))))) =>
         zen.Rnotall abst_T 
           (v_Vic:(zen.term abst_T) =>
            zen.and 
              (zen.triangle 
                 (Division_monoid__divides abst_T abst_equal abst_zero v_Vkc 
                    (abst_mult v_Vkc v_Vic))) 
              (zen.triangle 
                 (Division_monoid__divides abst_T abst_equal abst_zero v_Vic 
                    (abst_mult v_Vkc v_Vic)))) 
           (v_Vmc:(zen.term abst_T) =>
            v_Vnc:
            (zen.proof 
               (zen.not 
                  (zen.and 
                     (zen.triangle 
                        (Division_monoid__divides abst_T abst_equal 
                           abst_zero v_Vkc (abst_mult v_Vkc v_Vmc))) 
                     (zen.triangle 
                        (Division_monoid__divides abst_T abst_equal 
                           abst_zero v_Vmc (abst_mult v_Vkc v_Vmc)))))) =>
            zen.Rnotand 
              (zen.triangle 
                 (Division_monoid__divides abst_T abst_equal abst_zero v_Vkc 
                    (abst_mult v_Vkc v_Vmc))) 
              (zen.triangle 
                 (Division_monoid__divides abst_T abst_equal abst_zero v_Vmc 
                    (abst_mult v_Vkc v_Vmc))) 
              (v_Voc:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (Division_monoid__divides abst_T abst_equal 
                           abst_zero v_Vkc (abst_mult v_Vkc v_Vmc))))) =>
               zen.Rall abst_T 
                 (v_Vhc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vic:(zen.term abst_T) =>
                     zen.triangle 
                       (Division_monoid__divides abst_T abst_equal abst_zero 
                          v_Vhc (abst_mult v_Vhc v_Vic)))) v_Vkc 
                 (v_Vpc:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vic:(zen.term abst_T) =>
                         zen.triangle 
                           (Division_monoid__divides abst_T abst_equal 
                              abst_zero v_Vkc (abst_mult v_Vkc v_Vic))))) =>
                  zen.Rall abst_T 
                    (v_Vic:(zen.term abst_T) =>
                     zen.triangle 
                       (Division_monoid__divides abst_T abst_equal abst_zero 
                          v_Vkc (abst_mult v_Vkc v_Vic))) v_Vmc 
                    (v_Vqc:
                     (zen.proof 
                        (zen.triangle 
                           (Division_monoid__divides abst_T abst_equal 
                              abst_zero v_Vkc (abst_mult v_Vkc v_Vmc)))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (Division_monoid__divides abst_T abst_equal 
                             abst_zero v_Vkc (abst_mult v_Vkc v_Vmc))) v_Vqc 
                       v_Voc) v_Vpc) __P_1_LEMMA) 
              (v_Vrc:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (Division_monoid__divides abst_T abst_equal 
                           abst_zero v_Vmc (abst_mult v_Vkc v_Vmc))))) =>
               zen.Rall abst_T 
                 (v_Vhc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vic:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_mult v_Vhc v_Vic) 
                             (abst_mult v_Vic v_Vhc))))) v_Vmc 
                 (v_Vsc:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vic:(zen.term abst_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_mult v_Vmc v_Vic) 
                                 (abst_mult v_Vic v_Vmc)))))) =>
                  zen.Rall abst_T 
                    (v_Vic:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_mult v_Vmc v_Vic) 
                             (abst_mult v_Vic v_Vmc)))) v_Vkc 
                    (v_Vtc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_mult v_Vmc v_Vkc) 
                                 (abst_mult v_Vkc v_Vmc))))) =>
                     zen.Rall abst_T 
                       (v_Vhc:(zen.term abst_T) =>
                        zen.forall abst_T 
                          (v_Vic:(zen.term abst_T) =>
                           zen.triangle 
                             (Division_monoid__divides abst_T abst_equal 
                                abst_zero v_Vhc (abst_mult v_Vhc v_Vic)))) 
                       v_Vmc 
                       (v_Vuc:
                        (zen.proof 
                           (zen.forall abst_T 
                              (v_Vic:(zen.term abst_T) =>
                               zen.triangle 
                                 (Division_monoid__divides abst_T abst_equal 
                                    abst_zero v_Vmc (abst_mult v_Vmc v_Vic))))) =>
                        zen.Rall abst_T 
                          (v_Vic:(zen.term abst_T) =>
                           zen.triangle 
                             (Division_monoid__divides abst_T abst_equal 
                                abst_zero v_Vmc (abst_mult v_Vmc v_Vic))) 
                          v_Vkc 
                          (v_Vvc:
                           (zen.proof 
                              (zen.triangle 
                                 (Division_monoid__divides abst_T abst_equal 
                                    abst_zero v_Vmc (abst_mult v_Vmc v_Vkc)))) =>
                           zen.Rcut 
                             (zen.and 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T v_Vmc v_Vmc))) 
                                (zen.not 
                                   (zen.triangle 
                                      (Division_monoid__divides abst_T 
                                         abst_equal abst_zero v_Vmc v_Vmc)))) 
                             (v_Vwc:
                              (zen.proof 
                                 (zen.and 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal abst_T v_Vmc v_Vmc))) 
                                    (zen.not 
                                       (zen.triangle 
                                          (Division_monoid__divides abst_T 
                                             abst_equal abst_zero v_Vmc v_Vmc))))) =>
                              zen.Rand 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T v_Vmc v_Vmc))) 
                                (zen.not 
                                   (zen.triangle 
                                      (Division_monoid__divides abst_T 
                                         abst_equal abst_zero v_Vmc v_Vmc))) 
                                (v_Vxc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal abst_T v_Vmc v_Vmc)))) =>
                                 v_Vyc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (Division_monoid__divides abst_T 
                                             abst_equal abst_zero v_Vmc v_Vmc)))) =>
                                 zen.Rnoteq abst_T v_Vmc v_Vxc) v_Vwc) 
                             (v_Vzc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.and 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal abst_T v_Vmc v_Vmc))) 
                                       (zen.not 
                                          (zen.triangle 
                                             (Division_monoid__divides 
                                                abst_T abst_equal abst_zero 
                                                v_Vmc v_Vmc)))))) =>
                              zen.Rcut 
                                (zen.triangle 
                                   (zen.equal abst_T (abst_mult v_Vmc v_Vkc) 
                                      (abst_mult v_Vkc v_Vmc))) 
                                (v_Vad:
                                 (zen.proof 
                                    (zen.triangle 
                                       (zen.equal abst_T 
                                          (abst_mult v_Vmc v_Vkc) 
                                          (abst_mult v_Vkc v_Vmc)))) =>
                                 zen.Rsubst abst_T 
                                   (v_Vbd:(zen.term abst_T) =>
                                    zen.triangle 
                                      (Division_monoid__divides abst_T 
                                         abst_equal abst_zero v_Vbd 
                                         (abst_mult v_Vmc v_Vkc))) v_Vmc 
                                   v_Vmc 
                                   (v_Vxc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal abst_T v_Vmc v_Vmc)))) =>
                                    zen.Rnotand 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T v_Vmc v_Vmc))) 
                                      (zen.not 
                                         (zen.triangle 
                                            (Division_monoid__divides abst_T 
                                               abst_equal abst_zero v_Vmc 
                                               v_Vmc))) 
                                      (v_Vcd:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T v_Vmc 
                                                      v_Vmc))))) =>
                                       zen.Rnotnot 
                                         (zen.triangle 
                                            (zen.equal abst_T v_Vmc v_Vmc)) 
                                         (v_Vdd:
                                          (zen.proof 
                                             (zen.triangle 
                                                (zen.equal abst_T v_Vmc v_Vmc))) =>
                                          zen.Rcut 
                                            (zen.triangle 
                                               (zen.equal abst_T v_Vmc v_Vmc)) 
                                            (v_Vdd0:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (zen.equal abst_T v_Vmc 
                                                      v_Vmc))) =>
                                             zen.Rsubst abst_T 
                                               (v_Ved:(zen.term abst_T) =>
                                                zen.triangle 
                                                  (zen.equal abst_T v_Ved 
                                                     v_Vmc)) v_Vmc v_Vmc 
                                               (v_Vxc0:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            v_Vmc v_Vmc)))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (zen.equal abst_T v_Vmc 
                                                        v_Vmc)) v_Vdd0 v_Vxc0) 
                                               (v_Vdd0:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         v_Vmc v_Vmc))) =>
                                                zen.Rsubst abst_T 
                                                  (v_Vfd:(zen.term abst_T) =>
                                                   zen.triangle 
                                                     (zen.equal abst_T v_Vmc 
                                                        v_Vfd)) v_Vmc v_Vmc 
                                                  (v_Vxc0:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T v_Vmc 
                                                               v_Vmc)))) =>
                                                   zen.Rnoteq abst_T v_Vmc 
                                                     v_Vxc0) 
                                                  (v_Vdd0:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            v_Vmc v_Vmc))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           v_Vmc v_Vmc)) 
                                                     v_Vdd0 v_Vxc) v_Vdd0) 
                                               v_Vdd0) 
                                            (v_Vxc0:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         v_Vmc v_Vmc)))) =>
                                             zen.Rnoteq abst_T v_Vmc v_Vxc0)) 
                                         v_Vcd) 
                                      (v_Vgd:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.not 
                                                (zen.triangle 
                                                   (Division_monoid__divides 
                                                      abst_T abst_equal 
                                                      abst_zero v_Vmc v_Vmc))))) =>
                                       zen.Rnotnot 
                                         (zen.triangle 
                                            (Division_monoid__divides abst_T 
                                               abst_equal abst_zero v_Vmc 
                                               v_Vmc)) 
                                         (v_Vhd:
                                          (zen.proof 
                                             (zen.triangle 
                                                (Division_monoid__divides 
                                                   abst_T abst_equal 
                                                   abst_zero v_Vmc v_Vmc))) =>
                                          zen.Rall abst_T 
                                            (v_Vhc:(zen.term abst_T) =>
                                             zen.forall abst_T 
                                               (v_Vic:(zen.term abst_T) =>
                                                zen.forall abst_T 
                                                  (v_Vid:(zen.term abst_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (Division_monoid__divides 
                                                           abst_T abst_equal 
                                                           abst_zero v_Vhc 
                                                           v_Vic)) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (Division_monoid__divides 
                                                              abst_T 
                                                              abst_equal 
                                                              abst_zero 
                                                              v_Vic v_Vid)) 
                                                        (zen.triangle 
                                                           (Division_monoid__divides 
                                                              abst_T 
                                                              abst_equal 
                                                              abst_zero 
                                                              v_Vhc v_Vid)))))) 
                                            v_Vmc 
                                            (v_Vjd:
                                             (zen.proof 
                                                (zen.forall abst_T 
                                                   (v_Vic:
                                                    (zen.term abst_T) =>
                                                    zen.forall abst_T 
                                                      (v_Vid:
                                                       (zen.term abst_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (Division_monoid__divides 
                                                               abst_T 
                                                               abst_equal 
                                                               abst_zero 
                                                               v_Vmc v_Vic)) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (Division_monoid__divides 
                                                                  abst_T 
                                                                  abst_equal 
                                                                  abst_zero 
                                                                  v_Vic v_Vid)) 
                                                            (zen.triangle 
                                                               (Division_monoid__divides 
                                                                  abst_T 
                                                                  abst_equal 
                                                                  abst_zero 
                                                                  v_Vmc v_Vid))))))) =>
                                             zen.Rall abst_T 
                                               (v_Vic:(zen.term abst_T) =>
                                                zen.forall abst_T 
                                                  (v_Vid:(zen.term abst_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (Division_monoid__divides 
                                                           abst_T abst_equal 
                                                           abst_zero v_Vmc 
                                                           v_Vic)) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (Division_monoid__divides 
                                                              abst_T 
                                                              abst_equal 
                                                              abst_zero 
                                                              v_Vic v_Vid)) 
                                                        (zen.triangle 
                                                           (Division_monoid__divides 
                                                              abst_T 
                                                              abst_equal 
                                                              abst_zero 
                                                              v_Vmc v_Vid))))) 
                                               v_Vmc 
                                               (v_Vkd:
                                                (zen.proof 
                                                   (zen.forall abst_T 
                                                      (v_Vid:
                                                       (zen.term abst_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (Division_monoid__divides 
                                                               abst_T 
                                                               abst_equal 
                                                               abst_zero 
                                                               v_Vmc v_Vmc)) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (Division_monoid__divides 
                                                                  abst_T 
                                                                  abst_equal 
                                                                  abst_zero 
                                                                  v_Vmc v_Vid)) 
                                                            (zen.triangle 
                                                               (Division_monoid__divides 
                                                                  abst_T 
                                                                  abst_equal 
                                                                  abst_zero 
                                                                  v_Vmc v_Vid)))))) =>
                                                zen.Rall abst_T 
                                                  (v_Vid:(zen.term abst_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (Division_monoid__divides 
                                                           abst_T abst_equal 
                                                           abst_zero v_Vmc 
                                                           v_Vmc)) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (Division_monoid__divides 
                                                              abst_T 
                                                              abst_equal 
                                                              abst_zero 
                                                              v_Vmc v_Vid)) 
                                                        (zen.triangle 
                                                           (Division_monoid__divides 
                                                              abst_T 
                                                              abst_equal 
                                                              abst_zero 
                                                              v_Vmc v_Vid)))) 
                                                  (abst_mult v_Vmc v_Vkc) 
                                                  (v_Vld:
                                                   (zen.proof 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (Division_monoid__divides 
                                                               abst_T 
                                                               abst_equal 
                                                               abst_zero 
                                                               v_Vmc v_Vmc)) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (Division_monoid__divides 
                                                                  abst_T 
                                                                  abst_equal 
                                                                  abst_zero 
                                                                  v_Vmc 
                                                                  (abst_mult 
                                                                    v_Vmc 
                                                                    v_Vkc))) 
                                                            (zen.triangle 
                                                               (Division_monoid__divides 
                                                                  abst_T 
                                                                  abst_equal 
                                                                  abst_zero 
                                                                  v_Vmc 
                                                                  (abst_mult 
                                                                    v_Vmc 
                                                                    v_Vkc)))))) =>
                                                   zen.Rimply 
                                                     (zen.triangle 
                                                        (Division_monoid__divides 
                                                           abst_T abst_equal 
                                                           abst_zero v_Vmc 
                                                           v_Vmc)) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (Division_monoid__divides 
                                                              abst_T 
                                                              abst_equal 
                                                              abst_zero 
                                                              v_Vmc 
                                                              (abst_mult 
                                                                 v_Vmc v_Vkc))) 
                                                        (zen.triangle 
                                                           (Division_monoid__divides 
                                                              abst_T 
                                                              abst_equal 
                                                              abst_zero 
                                                              v_Vmc 
                                                              (abst_mult 
                                                                 v_Vmc v_Vkc)))) 
                                                     (v_Vyc:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (Division_monoid__divides 
                                                                  abst_T 
                                                                  abst_equal 
                                                                  abst_zero 
                                                                  v_Vmc v_Vmc)))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (Division_monoid__divides 
                                                              abst_T 
                                                              abst_equal 
                                                              abst_zero 
                                                              v_Vmc v_Vmc)) 
                                                        v_Vhd v_Vyc) 
                                                     (v_Vmd:
                                                      (zen.proof 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (Division_monoid__divides 
                                                                  abst_T 
                                                                  abst_equal 
                                                                  abst_zero 
                                                                  v_Vmc 
                                                                  (abst_mult 
                                                                    v_Vmc 
                                                                    v_Vkc))) 
                                                            (zen.triangle 
                                                               (Division_monoid__divides 
                                                                  abst_T 
                                                                  abst_equal 
                                                                  abst_zero 
                                                                  v_Vmc 
                                                                  (abst_mult 
                                                                    v_Vmc 
                                                                    v_Vkc))))) =>
                                                      zen.Rimply 
                                                        (zen.triangle 
                                                           (Division_monoid__divides 
                                                              abst_T 
                                                              abst_equal 
                                                              abst_zero 
                                                              v_Vmc 
                                                              (abst_mult 
                                                                 v_Vmc v_Vkc))) 
                                                        (zen.triangle 
                                                           (Division_monoid__divides 
                                                              abst_T 
                                                              abst_equal 
                                                              abst_zero 
                                                              v_Vmc 
                                                              (abst_mult 
                                                                 v_Vmc v_Vkc))) 
                                                        (v_Vnd:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    v_Vkc))))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (Division_monoid__divides 
                                                                 abst_T 
                                                                 abst_equal 
                                                                 abst_zero 
                                                                 v_Vmc 
                                                                 (abst_mult 
                                                                    v_Vmc 
                                                                    v_Vkc))) 
                                                           v_Vvc v_Vnd) 
                                                        (v_Vvc0:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (Division_monoid__divides 
                                                                  abst_T 
                                                                  abst_equal 
                                                                  abst_zero 
                                                                  v_Vmc 
                                                                  (abst_mult 
                                                                    v_Vmc 
                                                                    v_Vkc)))) =>
                                                         zen.Rsubst abst_T 
                                                           (v_Vbd:
                                                            (zen.term abst_T) =>
                                                            zen.triangle 
                                                              (Division_monoid__divides 
                                                                 abst_T 
                                                                 abst_equal 
                                                                 abst_zero 
                                                                 v_Vbd 
                                                                 (abst_mult 
                                                                    v_Vmc 
                                                                    v_Vkc))) 
                                                           v_Vmc v_Vmc 
                                                           (v_Vxc0:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vmc 
                                                                    v_Vmc)))) =>
                                                            zen.Rnoteq 
                                                              abst_T v_Vmc 
                                                              v_Vxc0) 
                                                           (v_Vvc0:
                                                            (zen.proof 
                                                               (zen.triangle 
                                                                  (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    v_Vkc)))) =>
                                                            zen.Rsubst 
                                                              abst_T 
                                                              (v_Vod:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.triangle 
                                                                 (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    v_Vod)) 
                                                              (abst_mult 
                                                                 v_Vmc v_Vkc) 
                                                              (abst_mult 
                                                                 v_Vkc v_Vmc) 
                                                              (v_Vpd:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    v_Vkc) 
                                                                    (abst_mult 
                                                                    v_Vkc 
                                                                    v_Vmc))))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    v_Vkc) 
                                                                    (abst_mult 
                                                                    v_Vkc 
                                                                    v_Vmc))) 
                                                                 v_Vad v_Vpd) 
                                                              (v_Vqd:
                                                               (zen.proof 
                                                                  (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    (abst_mult 
                                                                    v_Vkc 
                                                                    v_Vmc)))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    (abst_mult 
                                                                    v_Vkc 
                                                                    v_Vmc))) 
                                                                 v_Vqd v_Vrc) 
                                                              v_Vvc0) v_Vvc0) 
                                                        v_Vmd) v_Vld) v_Vkd) 
                                               v_Vjd) abst_divides_transitive) 
                                         v_Vgd) v_Vzc) 
                                   (v_Vvc0:
                                    (zen.proof 
                                       (zen.triangle 
                                          (Division_monoid__divides abst_T 
                                             abst_equal abst_zero v_Vmc 
                                             (abst_mult v_Vmc v_Vkc)))) =>
                                    zen.Rsubst abst_T 
                                      (v_Vod:(zen.term abst_T) =>
                                       zen.triangle 
                                         (Division_monoid__divides abst_T 
                                            abst_equal abst_zero v_Vmc v_Vod)) 
                                      (abst_mult v_Vmc v_Vkc) 
                                      (abst_mult v_Vkc v_Vmc) 
                                      (v_Vpd:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal abst_T 
                                                   (abst_mult v_Vmc v_Vkc) 
                                                   (abst_mult v_Vkc v_Vmc))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_mult v_Vmc v_Vkc) 
                                               (abst_mult v_Vkc v_Vmc))) 
                                         v_Vad v_Vpd) 
                                      (v_Vqd:
                                       (zen.proof 
                                          (zen.triangle 
                                             (Division_monoid__divides 
                                                abst_T abst_equal abst_zero 
                                                v_Vmc (abst_mult v_Vkc v_Vmc)))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (Division_monoid__divides abst_T 
                                               abst_equal abst_zero v_Vmc 
                                               (abst_mult v_Vkc v_Vmc))) 
                                         v_Vqd v_Vrc) v_Vvc0) v_Vvc) 
                                (v_Vpd:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_mult v_Vmc v_Vkc) 
                                             (abst_mult v_Vkc v_Vmc))))) =>
                                 zen.Rcut 
                                   (zen.triangle 
                                      (Division_monoid__divides abst_T 
                                         abst_equal abst_zero 
                                         (abst_mult v_Vmc v_Vkc) 
                                         (abst_mult v_Vkc v_Vmc))) 
                                   (v_Vrd:
                                    (zen.proof 
                                       (zen.triangle 
                                          (Division_monoid__divides abst_T 
                                             abst_equal abst_zero 
                                             (abst_mult v_Vmc v_Vkc) 
                                             (abst_mult v_Vkc v_Vmc)))) =>
                                    zen.Rall abst_T 
                                      (v_Vhc:(zen.term abst_T) =>
                                       zen.forall abst_T 
                                         (v_Vic:(zen.term abst_T) =>
                                          zen.forall abst_T 
                                            (v_Vid:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (Division_monoid__divides 
                                                     abst_T abst_equal 
                                                     abst_zero v_Vhc v_Vic)) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (Division_monoid__divides 
                                                        abst_T abst_equal 
                                                        abst_zero v_Vic v_Vid)) 
                                                  (zen.triangle 
                                                     (Division_monoid__divides 
                                                        abst_T abst_equal 
                                                        abst_zero v_Vhc v_Vid)))))) 
                                      v_Vmc 
                                      (v_Vjd:
                                       (zen.proof 
                                          (zen.forall abst_T 
                                             (v_Vic:(zen.term abst_T) =>
                                              zen.forall abst_T 
                                                (v_Vid:(zen.term abst_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (Division_monoid__divides 
                                                         abst_T abst_equal 
                                                         abst_zero v_Vmc 
                                                         v_Vic)) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (Division_monoid__divides 
                                                            abst_T 
                                                            abst_equal 
                                                            abst_zero v_Vic 
                                                            v_Vid)) 
                                                      (zen.triangle 
                                                         (Division_monoid__divides 
                                                            abst_T 
                                                            abst_equal 
                                                            abst_zero v_Vmc 
                                                            v_Vid))))))) =>
                                       zen.Rall abst_T 
                                         (v_Vic:(zen.term abst_T) =>
                                          zen.forall abst_T 
                                            (v_Vid:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (Division_monoid__divides 
                                                     abst_T abst_equal 
                                                     abst_zero v_Vmc v_Vic)) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (Division_monoid__divides 
                                                        abst_T abst_equal 
                                                        abst_zero v_Vic v_Vid)) 
                                                  (zen.triangle 
                                                     (Division_monoid__divides 
                                                        abst_T abst_equal 
                                                        abst_zero v_Vmc v_Vid))))) 
                                         (abst_mult v_Vmc v_Vkc) 
                                         (v_Vsd:
                                          (zen.proof 
                                             (zen.forall abst_T 
                                                (v_Vid:(zen.term abst_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (Division_monoid__divides 
                                                         abst_T abst_equal 
                                                         abst_zero v_Vmc 
                                                         (abst_mult v_Vmc 
                                                            v_Vkc))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (Division_monoid__divides 
                                                            abst_T 
                                                            abst_equal 
                                                            abst_zero 
                                                            (abst_mult v_Vmc 
                                                               v_Vkc) v_Vid)) 
                                                      (zen.triangle 
                                                         (Division_monoid__divides 
                                                            abst_T 
                                                            abst_equal 
                                                            abst_zero v_Vmc 
                                                            v_Vid)))))) =>
                                          zen.Rall abst_T 
                                            (v_Vid:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (Division_monoid__divides 
                                                     abst_T abst_equal 
                                                     abst_zero v_Vmc 
                                                     (abst_mult v_Vmc v_Vkc))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (Division_monoid__divides 
                                                        abst_T abst_equal 
                                                        abst_zero 
                                                        (abst_mult v_Vmc 
                                                           v_Vkc) v_Vid)) 
                                                  (zen.triangle 
                                                     (Division_monoid__divides 
                                                        abst_T abst_equal 
                                                        abst_zero v_Vmc v_Vid)))) 
                                            (abst_mult v_Vkc v_Vmc) 
                                            (v_Vtd:
                                             (zen.proof 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (Division_monoid__divides 
                                                         abst_T abst_equal 
                                                         abst_zero v_Vmc 
                                                         (abst_mult v_Vmc 
                                                            v_Vkc))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (Division_monoid__divides 
                                                            abst_T 
                                                            abst_equal 
                                                            abst_zero 
                                                            (abst_mult v_Vmc 
                                                               v_Vkc) 
                                                            (abst_mult v_Vkc 
                                                               v_Vmc))) 
                                                      (zen.triangle 
                                                         (Division_monoid__divides 
                                                            abst_T 
                                                            abst_equal 
                                                            abst_zero v_Vmc 
                                                            (abst_mult v_Vkc 
                                                               v_Vmc)))))) =>
                                             zen.Rimply 
                                               (zen.triangle 
                                                  (Division_monoid__divides 
                                                     abst_T abst_equal 
                                                     abst_zero v_Vmc 
                                                     (abst_mult v_Vmc v_Vkc))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (Division_monoid__divides 
                                                        abst_T abst_equal 
                                                        abst_zero 
                                                        (abst_mult v_Vmc 
                                                           v_Vkc) 
                                                        (abst_mult v_Vkc 
                                                           v_Vmc))) 
                                                  (zen.triangle 
                                                     (Division_monoid__divides 
                                                        abst_T abst_equal 
                                                        abst_zero v_Vmc 
                                                        (abst_mult v_Vkc 
                                                           v_Vmc)))) 
                                               (v_Vnd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (Division_monoid__divides 
                                                            abst_T 
                                                            abst_equal 
                                                            abst_zero v_Vmc 
                                                            (abst_mult v_Vmc 
                                                               v_Vkc))))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (Division_monoid__divides 
                                                        abst_T abst_equal 
                                                        abst_zero v_Vmc 
                                                        (abst_mult v_Vmc 
                                                           v_Vkc))) v_Vvc 
                                                  v_Vnd) 
                                               (v_Vud:
                                                (zen.proof 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (Division_monoid__divides 
                                                            abst_T 
                                                            abst_equal 
                                                            abst_zero 
                                                            (abst_mult v_Vmc 
                                                               v_Vkc) 
                                                            (abst_mult v_Vkc 
                                                               v_Vmc))) 
                                                      (zen.triangle 
                                                         (Division_monoid__divides 
                                                            abst_T 
                                                            abst_equal 
                                                            abst_zero v_Vmc 
                                                            (abst_mult v_Vkc 
                                                               v_Vmc))))) =>
                                                zen.Rimply 
                                                  (zen.triangle 
                                                     (Division_monoid__divides 
                                                        abst_T abst_equal 
                                                        abst_zero 
                                                        (abst_mult v_Vmc 
                                                           v_Vkc) 
                                                        (abst_mult v_Vkc 
                                                           v_Vmc))) 
                                                  (zen.triangle 
                                                     (Division_monoid__divides 
                                                        abst_T abst_equal 
                                                        abst_zero v_Vmc 
                                                        (abst_mult v_Vkc 
                                                           v_Vmc))) 
                                                  (v_Vvd:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (Division_monoid__divides 
                                                               abst_T 
                                                               abst_equal 
                                                               abst_zero 
                                                               (abst_mult 
                                                                  v_Vmc v_Vkc) 
                                                               (abst_mult 
                                                                  v_Vkc v_Vmc))))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (Division_monoid__divides 
                                                           abst_T abst_equal 
                                                           abst_zero 
                                                           (abst_mult v_Vmc 
                                                              v_Vkc) 
                                                           (abst_mult v_Vkc 
                                                              v_Vmc))) v_Vrd 
                                                     v_Vvd) 
                                                  (v_Vqd:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (Division_monoid__divides 
                                                            abst_T 
                                                            abst_equal 
                                                            abst_zero v_Vmc 
                                                            (abst_mult v_Vkc 
                                                               v_Vmc)))) =>
                                                   zen.Rsubst abst_T 
                                                     (v_Vwd:
                                                      (zen.term abst_T) =>
                                                      zen.triangle 
                                                        (Division_monoid__divides 
                                                           abst_T abst_equal 
                                                           abst_zero v_Vwd 
                                                           (abst_mult v_Vkc 
                                                              v_Vmc))) v_Vmc 
                                                     v_Vmc 
                                                     (v_Vxc:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T 
                                                                  v_Vmc v_Vmc)))) =>
                                                      zen.Rnotand 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 v_Vmc v_Vmc))) 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (Division_monoid__divides 
                                                                 abst_T 
                                                                 abst_equal 
                                                                 abst_zero 
                                                                 v_Vmc v_Vmc))) 
                                                        (v_Vcd:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vmc 
                                                                    v_Vmc))))) =>
                                                         zen.Rnotnot 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 v_Vmc v_Vmc)) 
                                                           (v_Vdd:
                                                            (zen.proof 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    abst_T 
                                                                    v_Vmc 
                                                                    v_Vmc))) =>
                                                            zen.Reqsym 
                                                              abst_T v_Vmc 
                                                              v_Vmc v_Vdd 
                                                              v_Vxc) v_Vcd) 
                                                        (v_Vgd:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    v_Vmc))))) =>
                                                         zen.Rnotnot 
                                                           (zen.triangle 
                                                              (Division_monoid__divides 
                                                                 abst_T 
                                                                 abst_equal 
                                                                 abst_zero 
                                                                 v_Vmc v_Vmc)) 
                                                           (v_Vhd:
                                                            (zen.proof 
                                                               (zen.triangle 
                                                                  (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    v_Vmc))) =>
                                                            zen.Rall abst_T 
                                                              (v_Vhc:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.forall 
                                                                 abst_T 
                                                                 (v_Vic:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.forall 
                                                                    abst_T 
                                                                    (
                                                                    v_Vid:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vhc 
                                                                    v_Vic)) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vic 
                                                                    v_Vid)) 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vhc 
                                                                    v_Vid)))))) 
                                                              v_Vmc 
                                                              (v_Vjd0:
                                                               (zen.proof 
                                                                  (zen.forall 
                                                                    abst_T 
                                                                    (v_Vic:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vid:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    v_Vic)) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vic 
                                                                    v_Vid)) 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    v_Vid))))))) =>
                                                               zen.Rall 
                                                                 abst_T 
                                                                 (v_Vic:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.forall 
                                                                    abst_T 
                                                                    (
                                                                    v_Vid:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    v_Vic)) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vic 
                                                                    v_Vid)) 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    v_Vid))))) 
                                                                 v_Vmc 
                                                                 (v_Vkd:
                                                                  (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vid:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    v_Vmc)) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    v_Vid)) 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    v_Vid)))))) =>
                                                                  zen.Rall 
                                                                    abst_T 
                                                                    (
                                                                    v_Vid:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    v_Vmc)) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    v_Vid)) 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    v_Vid)))) 
                                                                    (
                                                                    abst_mult 
                                                                    v_Vkc 
                                                                    v_Vmc) 
                                                                    (
                                                                    v_Vxd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    v_Vmc)) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    (abst_mult 
                                                                    v_Vkc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    (abst_mult 
                                                                    v_Vkc 
                                                                    v_Vmc)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    v_Vmc)) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    (abst_mult 
                                                                    v_Vkc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    (abst_mult 
                                                                    v_Vkc 
                                                                    v_Vmc)))) 
                                                                    (v_Vyc:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    v_Vmc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    v_Vmc)) 
                                                                    v_Vhd 
                                                                    v_Vyc) 
                                                                    (v_Vyd:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    (abst_mult 
                                                                    v_Vkc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    (abst_mult 
                                                                    v_Vkc 
                                                                    v_Vmc))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    (abst_mult 
                                                                    v_Vkc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    (abst_mult 
                                                                    v_Vkc 
                                                                    v_Vmc))) 
                                                                    (v_Vrc0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    (abst_mult 
                                                                    v_Vkc 
                                                                    v_Vmc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    (abst_mult 
                                                                    v_Vkc 
                                                                    v_Vmc))) 
                                                                    v_Vqd 
                                                                    v_Vrc0) 
                                                                    (v_Vqd0:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    (abst_mult 
                                                                    v_Vkc 
                                                                    v_Vmc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (Division_monoid__divides 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc 
                                                                    (abst_mult 
                                                                    v_Vkc 
                                                                    v_Vmc))) 
                                                                    v_Vqd0 
                                                                    v_Vrc) 
                                                                    v_Vyd) 
                                                                    v_Vxd) 
                                                                    v_Vkd) 
                                                                 v_Vjd0) 
                                                              abst_divides_transitive) 
                                                           v_Vgd) v_Vzc) 
                                                     (v_Vqd0:
                                                      (zen.proof 
                                                         (zen.triangle 
                                                            (Division_monoid__divides 
                                                               abst_T 
                                                               abst_equal 
                                                               abst_zero 
                                                               v_Vmc 
                                                               (abst_mult 
                                                                  v_Vkc v_Vmc)))) =>
                                                      zen.Rsubst abst_T 
                                                        (v_Vod:
                                                         (zen.term abst_T) =>
                                                         zen.triangle 
                                                           (Division_monoid__divides 
                                                              abst_T 
                                                              abst_equal 
                                                              abst_zero 
                                                              v_Vmc v_Vod)) 
                                                        (abst_mult v_Vkc 
                                                           v_Vmc) 
                                                        (abst_mult v_Vkc 
                                                           v_Vmc) 
                                                        (v_Vzd:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    v_Vkc 
                                                                    v_Vmc) 
                                                                    (abst_mult 
                                                                    v_Vkc 
                                                                    v_Vmc))))) =>
                                                         zen.Rnoteq abst_T 
                                                           (abst_mult v_Vkc 
                                                              v_Vmc) v_Vzd) 
                                                        (v_Vqd0:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (Division_monoid__divides 
                                                                  abst_T 
                                                                  abst_equal 
                                                                  abst_zero 
                                                                  v_Vmc 
                                                                  (abst_mult 
                                                                    v_Vkc 
                                                                    v_Vmc)))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (Division_monoid__divides 
                                                                 abst_T 
                                                                 abst_equal 
                                                                 abst_zero 
                                                                 v_Vmc 
                                                                 (abst_mult 
                                                                    v_Vkc 
                                                                    v_Vmc))) 
                                                           v_Vqd0 v_Vrc) 
                                                        v_Vqd0) v_Vqd) v_Vud) 
                                               v_Vtd) v_Vsd) v_Vjd) 
                                      abst_divides_transitive) 
                                   (v_Vvd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (Division_monoid__divides 
                                                abst_T abst_equal abst_zero 
                                                (abst_mult v_Vmc v_Vkc) 
                                                (abst_mult v_Vkc v_Vmc))))) =>
                                    zen.Rall abst_T 
                                      (v_Vhc:(zen.term abst_T) =>
                                       zen.forall abst_T 
                                         (v_Vic:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vhc v_Vic))) 
                                            (zen.triangle 
                                               (Division_monoid__divides 
                                                  abst_T abst_equal 
                                                  abst_zero v_Vhc v_Vic)))) 
                                      (abst_mult v_Vmc v_Vkc) 
                                      (v_Vae:
                                       (zen.proof 
                                          (zen.forall abst_T 
                                             (v_Vic:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_mult v_Vmc 
                                                            v_Vkc) v_Vic))) 
                                                (zen.triangle 
                                                   (Division_monoid__divides 
                                                      abst_T abst_equal 
                                                      abst_zero 
                                                      (abst_mult v_Vmc v_Vkc) 
                                                      v_Vic))))) =>
                                       zen.Rall abst_T 
                                         (v_Vic:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult v_Vmc v_Vkc) 
                                                     v_Vic))) 
                                            (zen.triangle 
                                               (Division_monoid__divides 
                                                  abst_T abst_equal 
                                                  abst_zero 
                                                  (abst_mult v_Vmc v_Vkc) 
                                                  v_Vic))) 
                                         (abst_mult v_Vkc v_Vmc) 
                                         (v_Vbe:
                                          (zen.proof 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_mult v_Vmc 
                                                            v_Vkc) 
                                                         (abst_mult v_Vkc 
                                                            v_Vmc)))) 
                                                (zen.triangle 
                                                   (Division_monoid__divides 
                                                      abst_T abst_equal 
                                                      abst_zero 
                                                      (abst_mult v_Vmc v_Vkc) 
                                                      (abst_mult v_Vkc v_Vmc))))) =>
                                          zen.Rimply 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult v_Vmc v_Vkc) 
                                                     (abst_mult v_Vkc v_Vmc)))) 
                                            (zen.triangle 
                                               (Division_monoid__divides 
                                                  abst_T abst_equal 
                                                  abst_zero 
                                                  (abst_mult v_Vmc v_Vkc) 
                                                  (abst_mult v_Vkc v_Vmc))) 
                                            (v_Vce:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_mult v_Vmc 
                                                               v_Vkc) 
                                                            (abst_mult v_Vkc 
                                                               v_Vmc)))))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult v_Vmc 
                                                           v_Vkc) 
                                                        (abst_mult v_Vkc 
                                                           v_Vmc)))) v_Vtc 
                                               v_Vce) 
                                            (v_Vrd:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (Division_monoid__divides 
                                                      abst_T abst_equal 
                                                      abst_zero 
                                                      (abst_mult v_Vmc v_Vkc) 
                                                      (abst_mult v_Vkc v_Vmc)))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (Division_monoid__divides 
                                                     abst_T abst_equal 
                                                     abst_zero 
                                                     (abst_mult v_Vmc v_Vkc) 
                                                     (abst_mult v_Vkc v_Vmc))) 
                                               v_Vrd v_Vvd) v_Vbe) v_Vae) 
                                      abst_divides_extends_equal)))) v_Vuc) 
                       __P_1_LEMMA) v_Vsc) abst_mult_commutes) v_Vnc) v_Vlc) 
        v_Vjc)) 
    (x:(cc.eT abst_T) =>
     y:(cc.eT abst_T) =>
     (__P_1_1_LEMMA:
      (H_0:(dk_logic.eP (dk_logic.ebP (abst_equal x abst_zero))) ->
       dk_logic.eP 
         (Division_monoid__divides abst_T abst_equal abst_zero x 
            (abst_mult x y))) =>
      (__P_1_2_LEMMA:
       (H_1:(dk_logic.eP (dk_logic.ebP (abst_different x abst_zero))) ->
        dk_logic.eP 
          (Division_monoid__divides abst_T abst_equal abst_zero x 
             (abst_mult x y))) =>
       zen.nnpp 
         (zen.triangle 
            (Division_monoid__divides abst_T abst_equal abst_zero x 
               (abst_mult x y))) 
         (v_Vac:
          (zen.proof 
             (zen.not 
                (zen.triangle 
                   (Division_monoid__divides abst_T abst_equal abst_zero x 
                      (abst_mult x y))))) =>
          zen.Rimply (zen.triangle (focal.is_true (abst_equal x abst_zero))) 
            (zen.triangle 
               (Division_monoid__divides abst_T abst_equal abst_zero x 
                  (abst_mult x y))) 
            (v_Vbc:
             (zen.proof 
                (zen.not 
                   (zen.triangle (focal.is_true (abst_equal x abst_zero))))) =>
             zen.Rimply 
               (zen.triangle (focal.is_true (abst_different x abst_zero))) 
               (zen.triangle 
                  (Division_monoid__divides abst_T abst_equal abst_zero x 
                     (abst_mult x y))) 
               (v_Vcc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true (abst_different x abst_zero))))) =>
                zen.Rall abst_T 
                  (v_Vdc:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vec:(zen.term abst_T) =>
                      zen.eqv 
                        (zen.triangle 
                           (focal.is_true (abst_different v_Vdc v_Vec))) 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Vdc v_Vec)))))) x 
                  (v_Vfc:
                   (zen.proof 
                      (zen.forall abst_T 
                         (v_Vec:(zen.term abst_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true (abst_different x v_Vec))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true (abst_equal x v_Vec))))))) =>
                   zen.Rall abst_T 
                     (v_Vec:(zen.term abst_T) =>
                      zen.eqv 
                        (zen.triangle 
                           (focal.is_true (abst_different x v_Vec))) 
                        (zen.not 
                           (zen.triangle (focal.is_true (abst_equal x v_Vec))))) 
                     abst_zero 
                     (v_Vgc:
                      (zen.proof 
                         (zen.eqv 
                            (zen.triangle 
                               (focal.is_true (abst_different x abst_zero))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true (abst_equal x abst_zero)))))) =>
                      zen.Requiv 
                        (zen.triangle 
                           (focal.is_true (abst_different x abst_zero))) 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true (abst_equal x abst_zero)))) 
                        (v_Vcc0:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true (abst_different x abst_zero))))) =>
                         v_Vhc:
                         (zen.proof 
                            (zen.not 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal x abst_zero)))))) =>
                         zen.Raxiom 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true (abst_equal x abst_zero)))) 
                           v_Vbc v_Vhc) 
                        (v_Vic:
                         (zen.proof 
                            (zen.triangle 
                               (focal.is_true (abst_different x abst_zero)))) =>
                         v_Vbc0:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true (abst_equal x abst_zero))))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true (abst_different x abst_zero))) 
                           v_Vic v_Vcc) v_Vgc) v_Vfc) 
                  abst_same_is_not_different) 
               (v_Vjc:
                (zen.proof 
                   (zen.triangle 
                      (Division_monoid__divides abst_T abst_equal abst_zero 
                         x (abst_mult x y)))) =>
                zen.Raxiom 
                  (zen.triangle 
                     (Division_monoid__divides abst_T abst_equal abst_zero x 
                        (abst_mult x y))) v_Vjc v_Vac) __P_1_2_LEMMA) 
            (v_Vjc:
             (zen.proof 
                (zen.triangle 
                   (Division_monoid__divides abst_T abst_equal abst_zero x 
                      (abst_mult x y)))) =>
             zen.Raxiom 
               (zen.triangle 
                  (Division_monoid__divides abst_T abst_equal abst_zero x 
                     (abst_mult x y))) v_Vjc v_Vac) __P_1_1_LEMMA)) 
        (H_1:(dk_logic.eP (dk_logic.ebP (abst_different x abst_zero))) =>
         zen.nnpp 
           (zen.triangle 
              (Division_monoid__divides abst_T abst_equal abst_zero x 
                 (abst_mult x y))) 
           (v_Vac:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (basics._bar__bar_ 
                           (abst_equal (abst_mult x y) abst_zero) 
                           (basics._tilda__tilda_ (abst_equal x abst_zero))))))) =>
            zen.Rall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle 
                       (focal.is_true (abst_different v_Vbc v_Vcc))) 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc)))))) 
              x 
              (v_Vdc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vcc:(zen.term abst_T) =>
                      zen.eqv 
                        (zen.triangle 
                           (focal.is_true (abst_different x v_Vcc))) 
                        (zen.not 
                           (zen.triangle (focal.is_true (abst_equal x v_Vcc))))))) =>
               zen.Rall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle (focal.is_true (abst_different x v_Vcc))) 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_equal x v_Vcc))))) 
                 abst_zero 
                 (v_Vec:
                  (zen.proof 
                     (zen.eqv 
                        (zen.triangle 
                           (focal.is_true (abst_different x abst_zero))) 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true (abst_equal x abst_zero)))))) =>
                  zen.Requiv 
                    (zen.triangle 
                       (focal.is_true (abst_different x abst_zero))) 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_equal x abst_zero)))) 
                    (v_Vfc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true (abst_different x abst_zero))))) =>
                     v_Vgc:
                     (zen.proof 
                        (zen.not 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true (abst_equal x abst_zero)))))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true (abst_different x abst_zero))) H_1 
                       v_Vfc) 
                    (H_2:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true (abst_different x abst_zero)))) =>
                     v_Vhc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true (abst_equal x abst_zero))))) =>
                     focal.zenon_focal_notor 
                       (abst_equal (abst_mult x y) abst_zero) 
                       (basics._tilda__tilda_ (abst_equal x abst_zero)) 
                       (v_Vic:
                        (zen.proof 
                           (zen.not 
                              (zen.or 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_mult x y) abst_zero))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics._tilda__tilda_ 
                                          (abst_equal x abst_zero))))))) =>
                        zen.Rnotor 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult x y) abst_zero))) 
                          (zen.triangle 
                             (focal.is_true 
                                (basics._tilda__tilda_ 
                                   (abst_equal x abst_zero)))) 
                          (v_Vjc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_mult x y) abst_zero))))) =>
                           v_Vkc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics._tilda__tilda_ 
                                          (abst_equal x abst_zero)))))) =>
                           focal.zenon_focal_notnot (abst_equal x abst_zero) 
                             (v_Vlc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal x abst_zero)))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true (abst_equal x abst_zero))) 
                                v_Vlc v_Vhc) v_Vkc) v_Vic) v_Vac) v_Vec) 
                 v_Vdc) abst_same_is_not_different))) 
       (H_0:(dk_logic.eP (dk_logic.ebP (abst_equal x abst_zero))) =>
        (__P_1_1_1_LEMMA:
         (dk_logic.eP (dk_logic.ebP (abst_equal (abst_mult x y) abst_zero))) =>
         zen.nnpp 
           (zen.triangle 
              (Division_monoid__divides abst_T abst_equal abst_zero x 
                 (abst_mult x y))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (basics._bar__bar_ 
                           (abst_equal (abst_mult x y) abst_zero) 
                           (basics._tilda__tilda_ (abst_equal x abst_zero))))))) =>
            focal.zenon_focal_notor (abst_equal (abst_mult x y) abst_zero) 
              (basics._tilda__tilda_ (abst_equal x abst_zero)) 
              (v_Vac:
               (zen.proof 
                  (zen.not 
                     (zen.or 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_mult x y) abst_zero))) 
                        (zen.triangle 
                           (focal.is_true 
                              (basics._tilda__tilda_ (abst_equal x abst_zero))))))) =>
               zen.Rnotor 
                 (zen.triangle 
                    (focal.is_true (abst_equal (abst_mult x y) abst_zero))) 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._tilda__tilda_ (abst_equal x abst_zero)))) 
                 (v_Vbc:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_mult x y) abst_zero))))) =>
                  v_Vcc:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (basics._tilda__tilda_ (abst_equal x abst_zero)))))) =>
                  zen.Raxiom 
                    (zen.triangle 
                       (focal.is_true (abst_equal (abst_mult x y) abst_zero))) 
                    __P_1_1_1_LEMMA v_Vbc) v_Vac) v_Vzb)) 
          (zen.nnpp 
             (zen.triangle 
                (focal.is_true (abst_equal (abst_mult x y) abst_zero))) 
             (v_Vkc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true (abst_equal (abst_mult x y) abst_zero))))) =>
              zen.Rall abst_T 
                (v_Vlc:(zen.term abst_T) =>
                 zen.and 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult v_Vlc abst_zero) abst_zero))) 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult abst_zero v_Vlc) abst_zero)))) 
                y 
                (v_Vmc:
                 (zen.proof 
                    (zen.and 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult y abst_zero) abst_zero))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult abst_zero y) abst_zero))))) =>
                 zen.Rand 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult y abst_zero) abst_zero))) 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult abst_zero y) abst_zero))) 
                   (v_Vnc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult y abst_zero) abst_zero)))) =>
                    v_Voc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult abst_zero y) abst_zero)))) =>
                    zen.Rcut 
                      (zen.and 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T (abst_mult x y) 
                                  (abst_mult abst_zero y)))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult x y) 
                                     (abst_mult abst_zero y)))))) 
                      (v_Vpc:
                       (zen.proof 
                          (zen.and 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T (abst_mult x y) 
                                      (abst_mult abst_zero y)))) 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_mult x y) 
                                         (abst_mult abst_zero y))))))) =>
                       zen.Rand 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T (abst_mult x y) 
                                  (abst_mult abst_zero y)))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult x y) 
                                     (abst_mult abst_zero y))))) 
                         (v_Vqc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T (abst_mult x y) 
                                      (abst_mult abst_zero y))))) =>
                          v_Vrc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_mult x y) 
                                         (abst_mult abst_zero y)))))) =>
                          zen.Rall abst_T 
                            (v_Vlc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vsc:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vtc:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vlc v_Vsc))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult v_Vlc v_Vtc) 
                                              (abst_mult v_Vsc v_Vtc))))))) 
                            x 
                            (v_Vuc:
                             (zen.proof 
                                (zen.forall abst_T 
                                   (v_Vsc:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Vtc:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal x v_Vsc))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult x v_Vtc) 
                                                  (abst_mult v_Vsc v_Vtc)))))))) =>
                             zen.Rall abst_T 
                               (v_Vsc:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vtc:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (abst_equal x v_Vsc))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal (abst_mult x v_Vtc) 
                                              (abst_mult v_Vsc v_Vtc)))))) 
                               abst_zero 
                               (v_Vvc:
                                (zen.proof 
                                   (zen.forall abst_T 
                                      (v_Vtc:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal x abst_zero))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult x v_Vtc) 
                                                  (abst_mult abst_zero v_Vtc))))))) =>
                                zen.Rall abst_T 
                                  (v_Vtc:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal x abst_zero))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal (abst_mult x v_Vtc) 
                                              (abst_mult abst_zero v_Vtc))))) 
                                  y 
                                  (v_Vwc:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal x abst_zero))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal (abst_mult x y) 
                                                  (abst_mult abst_zero y)))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal x abst_zero))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal (abst_mult x y) 
                                              (abst_mult abst_zero y)))) 
                                     (v_Vxc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal x abst_zero))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x abst_zero))) H_0 
                                        v_Vxc) 
                                     (v_Vyc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal (abst_mult x y) 
                                                  (abst_mult abst_zero y))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal (abst_mult x y) 
                                                 (abst_mult abst_zero y)))) 
                                        v_Vyc v_Vrc) v_Vwc) v_Vvc) v_Vuc) 
                            abst_mult_left_substitution_rule) v_Vpc) 
                      (v_Vzc:
                       (zen.proof 
                          (zen.not 
                             (zen.and 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T (abst_mult x y) 
                                         (abst_mult abst_zero y)))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_mult x y) 
                                            (abst_mult abst_zero y)))))))) =>
                       zen.Rcut 
                         (zen.triangle (zen.equal abst_T abst_zero abst_zero)) 
                         (v_Vad:
                          (zen.proof 
                             (zen.triangle 
                                (zen.equal abst_T abst_zero abst_zero))) =>
                          zen.Rsubst basics.bool__t 
                            (v_Vbd:(zen.term basics.bool__t) =>
                             zen.triangle (focal.is_true v_Vbd)) 
                            (abst_equal (abst_mult abst_zero y) abst_zero) 
                            (abst_equal (abst_mult x y) abst_zero) 
                            (v_Vcd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (abst_equal (abst_mult abst_zero y) 
                                            abst_zero) 
                                         (abst_equal (abst_mult x y) 
                                            abst_zero))))) =>
                             zen.Rsubst abst_T 
                               (v_Vdd:(zen.term abst_T) =>
                                zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (abst_equal v_Vdd abst_zero) 
                                        (abst_equal (abst_mult x y) abst_zero)))) 
                               (abst_mult abst_zero y) (abst_mult x y) 
                               (v_Ved:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_mult abst_zero y) 
                                            (abst_mult x y))))) =>
                                zen.Rnotand 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal abst_T (abst_mult x y) 
                                           (abst_mult abst_zero y)))) 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal (abst_mult x y) 
                                              (abst_mult abst_zero y))))) 
                                  (v_Vfd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_mult x y) 
                                                  (abst_mult abst_zero y)))))) =>
                                   zen.Rnotnot 
                                     (zen.triangle 
                                        (zen.equal abst_T (abst_mult x y) 
                                           (abst_mult abst_zero y))) 
                                     (v_Vgd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_mult x y) 
                                               (abst_mult abst_zero y)))) =>
                                      zen.Rcut 
                                        (zen.triangle 
                                           (zen.equal abst_T (abst_mult x y) 
                                              (abst_mult x y))) 
                                        (v_Vhd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_mult x y) 
                                                  (abst_mult x y)))) =>
                                         zen.Rsubst abst_T 
                                           (v_Vid:(zen.term abst_T) =>
                                            zen.triangle 
                                              (zen.equal abst_T v_Vid 
                                                 (abst_mult x y))) 
                                           (abst_mult x y) 
                                           (abst_mult abst_zero y) 
                                           (v_Vqc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_mult x y) 
                                                        (abst_mult abst_zero 
                                                           y))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_mult x y) 
                                                    (abst_mult abst_zero y))) 
                                              v_Vgd v_Vqc) 
                                           (v_Vjd:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_mult abst_zero y) 
                                                     (abst_mult x y)))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vkd:(zen.term abst_T) =>
                                               zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_mult abst_zero y) 
                                                    v_Vkd)) (abst_mult x y) 
                                              (abst_mult x y) 
                                              (v_Vld:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_mult x y) 
                                                           (abst_mult x y))))) =>
                                               zen.Rnoteq abst_T 
                                                 (abst_mult x y) v_Vld) 
                                              (v_Vjd0:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_mult abst_zero 
                                                           y) (abst_mult x y)))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_mult abst_zero y) 
                                                       (abst_mult x y))) 
                                                 v_Vjd0 v_Ved) v_Vjd) v_Vhd) 
                                        (v_Vld:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_mult x y) 
                                                     (abst_mult x y))))) =>
                                         zen.Rnoteq abst_T (abst_mult x y) 
                                           v_Vld)) v_Vfd) 
                                  (v_Vmd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult x y) 
                                                     (abst_mult abst_zero y))))))) =>
                                   zen.Rnotnot 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal (abst_mult x y) 
                                              (abst_mult abst_zero y)))) 
                                     (v_Vyc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal (abst_mult x y) 
                                                  (abst_mult abst_zero y))))) =>
                                      zen.Rall abst_T 
                                        (v_Vlc:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vsc:(zen.term abst_T) =>
                                            zen.forall abst_T 
                                              (v_Vtc:(zen.term abst_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vlc 
                                                          v_Vsc))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vsc 
                                                             v_Vtc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vlc 
                                                             v_Vtc))))))) 
                                        (abst_mult x y) 
                                        (v_Vnd:
                                         (zen.proof 
                                            (zen.forall abst_T 
                                               (v_Vsc:(zen.term abst_T) =>
                                                zen.forall abst_T 
                                                  (v_Vtc:(zen.term abst_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult x y) 
                                                              v_Vsc))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Vsc v_Vtc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    x y) 
                                                                 v_Vtc)))))))) =>
                                         zen.Rall abst_T 
                                           (v_Vsc:(zen.term abst_T) =>
                                            zen.forall abst_T 
                                              (v_Vtc:(zen.term abst_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult x y) 
                                                          v_Vsc))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vsc 
                                                             v_Vtc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult x y) 
                                                             v_Vtc)))))) 
                                           (abst_mult abst_zero y) 
                                           (v_Vod:
                                            (zen.proof 
                                               (zen.forall abst_T 
                                                  (v_Vtc:(zen.term abst_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult x y) 
                                                              (abst_mult 
                                                                 abst_zero y)))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    abst_zero 
                                                                    y) v_Vtc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    x y) 
                                                                 v_Vtc))))))) =>
                                            zen.Rall abst_T 
                                              (v_Vtc:(zen.term abst_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult x y) 
                                                          (abst_mult 
                                                             abst_zero y)))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                abst_zero y) 
                                                             v_Vtc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult x y) 
                                                             v_Vtc))))) 
                                              abst_zero 
                                              (v_Vpd:
                                               (zen.proof 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult x y) 
                                                              (abst_mult 
                                                                 abst_zero y)))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    abst_zero 
                                                                    y) 
                                                                 abst_zero))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    x y) 
                                                                 abst_zero)))))) =>
                                               zen.Rimply 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult x y) 
                                                          (abst_mult 
                                                             abst_zero y)))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                abst_zero y) 
                                                             abst_zero))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult x y) 
                                                             abst_zero)))) 
                                                 (v_Vrc:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    x y) 
                                                                 (abst_mult 
                                                                    abst_zero 
                                                                    y)))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult x y) 
                                                             (abst_mult 
                                                                abst_zero y)))) 
                                                    v_Vyc v_Vrc) 
                                                 (v_Vqd:
                                                  (zen.proof 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    abst_zero 
                                                                    y) 
                                                                 abst_zero))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    x y) 
                                                                 abst_zero))))) =>
                                                  zen.Rimply 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                abst_zero y) 
                                                             abst_zero))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult x y) 
                                                             abst_zero))) 
                                                    (v_Vrd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    abst_zero 
                                                                    y) 
                                                                    abst_zero))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   abst_zero 
                                                                   y) 
                                                                abst_zero))) 
                                                       v_Voc v_Vrd) 
                                                    (v_Vsd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    x y) 
                                                                 abst_zero)))) =>
                                                     zen.Rsubst 
                                                       basics.bool__t 
                                                       (v_Vbd:
                                                        (zen.term 
                                                           basics.bool__t) =>
                                                        zen.triangle 
                                                          (focal.is_true 
                                                             v_Vbd)) 
                                                       (abst_equal 
                                                          (abst_mult x y) 
                                                          abst_zero) 
                                                       (abst_equal 
                                                          (abst_mult x y) 
                                                          abst_zero) 
                                                       (v_Vtd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    abst_zero) 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    abst_zero))))) =>
                                                        zen.Rsubst abst_T 
                                                          (v_Vdd:
                                                           (zen.term abst_T) =>
                                                           zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_equal 
                                                                    v_Vdd 
                                                                    abst_zero) 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    abst_zero)))) 
                                                          (abst_mult x y) 
                                                          (abst_mult x y) 
                                                          (v_Vld:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    (abst_mult 
                                                                    x y))))) =>
                                                           zen.Rnoteq abst_T 
                                                             (abst_mult x y) 
                                                             v_Vld) 
                                                          (v_Vtd0:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    abst_zero) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    abst_zero))))) =>
                                                           zen.Rsubst abst_T 
                                                             (v_Vud:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    v_Vud) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    abst_zero)))) 
                                                             abst_zero 
                                                             abst_zero 
                                                             (v_Vvd:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    abst_zero 
                                                                    abst_zero)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    abst_zero 
                                                                    abst_zero)) 
                                                                v_Vad v_Vvd) 
                                                             (v_Vtd0:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    abst_zero) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    abst_zero))))) =>
                                                              zen.Rnoteq 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    x y) 
                                                                   abst_zero) 
                                                                v_Vtd0) 
                                                             v_Vtd0) v_Vtd) 
                                                       (v_Vsd0:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    x y) 
                                                                    abst_zero)))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    x y) 
                                                                   abst_zero))) 
                                                          v_Vsd0 v_Vkc) v_Vsd) 
                                                    v_Vqd) v_Vpd) v_Vod) 
                                           v_Vnd) abst_equal_transitive) 
                                     v_Vmd) v_Vzc) 
                               (v_Vtd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (abst_equal (abst_mult x y) 
                                               abst_zero) 
                                            (abst_equal (abst_mult x y) 
                                               abst_zero))))) =>
                                zen.Rsubst abst_T 
                                  (v_Vud:(zen.term abst_T) =>
                                   zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (abst_equal (abst_mult x y) v_Vud) 
                                           (abst_equal (abst_mult x y) 
                                              abst_zero)))) abst_zero 
                                  abst_zero 
                                  (v_Vvd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T abst_zero 
                                               abst_zero)))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (zen.equal abst_T abst_zero abst_zero)) 
                                     v_Vad v_Vvd) 
                                  (v_Vtd0:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (abst_equal (abst_mult x y) 
                                                  abst_zero) 
                                               (abst_equal (abst_mult x y) 
                                                  abst_zero))))) =>
                                   zen.Rnoteq basics.bool__t 
                                     (abst_equal (abst_mult x y) abst_zero) 
                                     v_Vtd0) v_Vtd) v_Vcd) 
                            (v_Vsd:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_mult x y) abst_zero)))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_mult x y) abst_zero))) 
                               v_Vsd v_Vkc) v_Voc) 
                         (v_Vvd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T abst_zero abst_zero)))) =>
                          zen.Rcut 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal abst_zero abst_zero))) 
                            (v_Vwd:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal abst_zero abst_zero)))) =>
                             zen.Rall abst_T 
                               (v_Vlc:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vsc:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vtc:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vlc v_Vsc))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vsc v_Vtc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vlc v_Vtc))))))) 
                               (abst_mult abst_zero y) 
                               (v_Vxd:
                                (zen.proof 
                                   (zen.forall abst_T 
                                      (v_Vsc:(zen.term abst_T) =>
                                       zen.forall abst_T 
                                         (v_Vtc:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult abst_zero y) 
                                                     v_Vsc))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vsc v_Vtc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult abst_zero 
                                                           y) v_Vtc)))))))) =>
                                zen.Rall abst_T 
                                  (v_Vsc:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vtc:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult abst_zero y) 
                                                 v_Vsc))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vsc v_Vtc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult abst_zero y) 
                                                    v_Vtc)))))) abst_zero 
                                  (v_Vyd:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vtc:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult abst_zero y) 
                                                     abst_zero))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal abst_zero 
                                                        v_Vtc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult abst_zero 
                                                           y) v_Vtc))))))) =>
                                   zen.Rall abst_T 
                                     (v_Vtc:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult abst_zero y) 
                                                 abst_zero))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal abst_zero v_Vtc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult abst_zero y) 
                                                    v_Vtc))))) abst_zero 
                                     (v_Vzd:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult abst_zero y) 
                                                     abst_zero))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal abst_zero 
                                                        abst_zero))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult abst_zero 
                                                           y) abst_zero)))))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult abst_zero y) 
                                                 abst_zero))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal abst_zero 
                                                    abst_zero))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult abst_zero y) 
                                                    abst_zero)))) 
                                        (v_Vrd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult abst_zero 
                                                           y) abst_zero))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult abst_zero y) 
                                                    abst_zero))) v_Voc v_Vrd) 
                                        (v_Vae:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal abst_zero 
                                                        abst_zero))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult abst_zero 
                                                           y) abst_zero))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal abst_zero 
                                                    abst_zero))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult abst_zero y) 
                                                    abst_zero))) 
                                           (v_Vbe:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           abst_zero 
                                                           abst_zero))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal abst_zero 
                                                       abst_zero))) v_Vwd 
                                              v_Vbe) 
                                           (v_Voc0:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult abst_zero 
                                                           y) abst_zero)))) =>
                                            zen.Rsubst basics.bool__t 
                                              (v_Vbd:
                                               (zen.term basics.bool__t) =>
                                               zen.triangle 
                                                 (focal.is_true v_Vbd)) 
                                              (abst_equal 
                                                 (abst_mult abst_zero y) 
                                                 abst_zero) 
                                              (abst_equal (abst_mult x y) 
                                                 abst_zero) 
                                              (v_Vcd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 abst_zero y) 
                                                              abst_zero) 
                                                           (abst_equal 
                                                              (abst_mult x y) 
                                                              abst_zero))))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Vdd:(zen.term abst_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal v_Vdd 
                                                             abst_zero) 
                                                          (abst_equal 
                                                             (abst_mult x y) 
                                                             abst_zero)))) 
                                                 (abst_mult abst_zero y) 
                                                 (abst_mult x y) 
                                                 (v_Ved:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_mult 
                                                                 abst_zero y) 
                                                              (abst_mult x y))))) =>
                                                  zen.Rnotand 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_mult x y) 
                                                             (abst_mult 
                                                                abst_zero y)))) 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult x 
                                                                   y) 
                                                                (abst_mult 
                                                                   abst_zero 
                                                                   y))))) 
                                                    (v_Vfd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_mult 
                                                                    x y) 
                                                                    (
                                                                    abst_mult 
                                                                    abst_zero 
                                                                    y)))))) =>
                                                     zen.Rnotnot 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_mult x y) 
                                                             (abst_mult 
                                                                abst_zero y))) 
                                                       (v_Vgd:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_mult 
                                                                    x y) 
                                                                 (abst_mult 
                                                                    abst_zero 
                                                                    y)))) =>
                                                        zen.Reqsym abst_T 
                                                          (abst_mult x y) 
                                                          (abst_mult 
                                                             abst_zero y) 
                                                          v_Vgd v_Ved) v_Vfd) 
                                                    (v_Vmd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    y))))))) =>
                                                     zen.Rnotnot 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult x 
                                                                   y) 
                                                                (abst_mult 
                                                                   abst_zero 
                                                                   y)))) 
                                                       (v_Vyc:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    x y) 
                                                                    (
                                                                    abst_mult 
                                                                    abst_zero 
                                                                    y))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vlc:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vsc:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.forall 
                                                                abst_T 
                                                                (v_Vtc:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vsc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vsc 
                                                                    v_Vtc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vtc))))))) 
                                                          (abst_mult x y) 
                                                          (v_Vnd:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 abst_T 
                                                                 (v_Vsc:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.forall 
                                                                    abst_T 
                                                                    (
                                                                    v_Vtc:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    v_Vsc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vsc 
                                                                    v_Vtc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    v_Vtc)))))))) =>
                                                           zen.Rall abst_T 
                                                             (v_Vsc:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.forall 
                                                                abst_T 
                                                                (v_Vtc:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    v_Vsc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vsc 
                                                                    v_Vtc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    v_Vtc)))))) 
                                                             (abst_mult 
                                                                abst_zero y) 
                                                             (v_Vod:
                                                              (zen.proof 
                                                                 (zen.forall 
                                                                    abst_T 
                                                                    (
                                                                    v_Vtc:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    y)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    y) v_Vtc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    v_Vtc))))))) =>
                                                              zen.Rall 
                                                                abst_T 
                                                                (v_Vtc:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    y)))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    y) v_Vtc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    v_Vtc))))) 
                                                                abst_zero 
                                                                (v_Vpd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    y)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    y) 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    abst_zero)))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    y)))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    y) 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    abst_zero)))) 
                                                                   (v_Vrc:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    y)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    y)))) 
                                                                    v_Vyc 
                                                                    v_Vrc) 
                                                                   (v_Vqd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    y) 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    abst_zero))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    y) 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    abst_zero))) 
                                                                    (v_Vrd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    y) 
                                                                    abst_zero))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    y) 
                                                                    abst_zero))) 
                                                                    v_Voc0 
                                                                    v_Vrd) 
                                                                    (v_Vsd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    abst_zero)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x y) 
                                                                    abst_zero))) 
                                                                    v_Vsd 
                                                                    v_Vkc) 
                                                                    v_Vqd) 
                                                                   v_Vpd) 
                                                                v_Vod) v_Vnd) 
                                                          abst_equal_transitive) 
                                                       v_Vmd) v_Vzc) 
                                                 (v_Vtd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    x y) 
                                                                 abst_zero) 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    x y) 
                                                                 abst_zero))))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Vud:
                                                     (zen.term abst_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                (abst_mult x 
                                                                   y) v_Vud) 
                                                             (abst_equal 
                                                                (abst_mult x 
                                                                   y) 
                                                                abst_zero)))) 
                                                    abst_zero abst_zero 
                                                    (v_Vvd0:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 abst_zero 
                                                                 abst_zero)))) =>
                                                     zen.Rnoteq abst_T 
                                                       abst_zero v_Vvd0) 
                                                    (v_Vtd0:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    x y) 
                                                                    abst_zero) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    x y) 
                                                                    abst_zero))))) =>
                                                     zen.Rnoteq 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_mult x y) 
                                                          abst_zero) v_Vtd0) 
                                                    v_Vtd) v_Vcd) 
                                              (v_Vsd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult x y) 
                                                           abst_zero)))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult x y) 
                                                          abst_zero))) v_Vsd 
                                                 v_Vkc) v_Voc0) v_Vae) v_Vzd) 
                                     v_Vyd) v_Vxd) abst_equal_transitive) 
                            (v_Vbe:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal abst_zero abst_zero))))) =>
                             zen.Rnoteq abst_T abst_zero v_Vvd)))) v_Vmc) 
                abst_zero_absorbes)))).

def Division_monoid__inv_substitution_rule :
  abst_T:cc.uT ->
  abst_div:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_one:(cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_div_right_substitution_rule:(dk_logic.eP 
                                      (dk_logic.forall abst_T 
                                         (x:(cc.eT abst_T) =>
                                          dk_logic.forall abst_T 
                                            (y_1:(cc.eT abst_T) =>
                                             dk_logic.forall abst_T 
                                               (y_2:(cc.eT abst_T) =>
                                                dk_logic.imp 
                                                  (dk_logic.ebP 
                                                     (abst_equal y_1 y_2)) 
                                                  (dk_logic.imp 
                                                     (dk_logic.not 
                                                        (dk_logic.ebP 
                                                           (abst_equal y_1 
                                                              abst_zero))) 
                                                     (dk_logic.ebP 
                                                        (abst_equal 
                                                           (abst_div x y_1) 
                                                           (abst_div x y_2))))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x_1:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (x_2:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_equal x_1 x_2)) 
             (dk_logic.imp 
                (dk_logic.not (dk_logic.ebP (abst_equal x_1 abst_zero))) 
                (dk_logic.ebP 
                   (abst_equal 
                      (Division_monoid__inv abst_T abst_div abst_one x_1) 
                      (Division_monoid__inv abst_T abst_div abst_one x_2)))))))
  :=
  abst_T:cc.uT =>
  abst_div:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_one:(cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_div_right_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y_1:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (y_2:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal y_1 y_2)) 
                 (dk_logic.imp 
                    (dk_logic.not (dk_logic.ebP (abst_equal y_1 abst_zero))) 
                    (dk_logic.ebP 
                       (abst_equal (abst_div x y_1) (abst_div x y_2))))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
             (zen.imp 
                (zen.not 
                   (zen.triangle (focal.is_true (abst_equal v_Vzb abst_zero)))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal 
                         (Division_monoid__inv abst_T abst_div abst_one v_Vzb) 
                         (Division_monoid__inv abst_T abst_div abst_one v_Vac)))))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
                    (zen.imp 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vzb abst_zero)))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (Division_monoid__inv abst_T abst_div 
                                   abst_one v_Vzb) 
                                (Division_monoid__inv abst_T abst_div 
                                   abst_one v_Vac)))))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
             (zen.imp 
                (zen.not 
                   (zen.triangle (focal.is_true (abst_equal v_Vzb abst_zero)))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal 
                         (Division_monoid__inv abst_T abst_div abst_one v_Vzb) 
                         (Division_monoid__inv abst_T abst_div abst_one v_Vac))))))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vac))) 
                    (zen.imp 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vcc abst_zero)))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (Division_monoid__inv abst_T abst_div 
                                   abst_one v_Vcc) 
                                (Division_monoid__inv abst_T abst_div 
                                   abst_one v_Vac))))))))) =>
        zen.Rnotall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vac))) 
             (zen.imp 
                (zen.not 
                   (zen.triangle (focal.is_true (abst_equal v_Vcc abst_zero)))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal 
                         (Division_monoid__inv abst_T abst_div abst_one v_Vcc) 
                         (Division_monoid__inv abst_T abst_div abst_one v_Vac)))))) 
          (v_Vec:(zen.term abst_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec))) 
                    (zen.imp 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vcc abst_zero)))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (Division_monoid__inv abst_T abst_div 
                                   abst_one v_Vcc) 
                                (Division_monoid__inv abst_T abst_div 
                                   abst_one v_Vec)))))))) =>
           zen.Rnotimply 
             (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec))) 
             (zen.imp 
                (zen.not 
                   (zen.triangle (focal.is_true (abst_equal v_Vcc abst_zero)))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal 
                         (Division_monoid__inv abst_T abst_div abst_one v_Vcc) 
                         (Division_monoid__inv abst_T abst_div abst_one v_Vec))))) 
             (v_Vgc:
              (zen.proof 
                 (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec)))) =>
              v_Vhc:
              (zen.proof 
                 (zen.not 
                    (zen.imp 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vcc abst_zero)))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (Division_monoid__inv abst_T abst_div 
                                   abst_one v_Vcc) 
                                (Division_monoid__inv abst_T abst_div 
                                   abst_one v_Vec))))))) =>
              zen.Rnotimply 
                (zen.not 
                   (zen.triangle (focal.is_true (abst_equal v_Vcc abst_zero)))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal 
                         (Division_monoid__inv abst_T abst_div abst_one v_Vcc) 
                         (Division_monoid__inv abst_T abst_div abst_one v_Vec)))) 
                (v_Vic:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true (abst_equal v_Vcc abst_zero))))) =>
                 v_Vjc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_div abst_one v_Vcc) 
                                (abst_div abst_one v_Vec)))))) =>
                 zen.Rall abst_T 
                   (v_Vkc:(zen.term abst_T) =>
                    zen.forall abst_T 
                      (v_Vlc:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vmc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vlc v_Vmc))) 
                            (zen.imp 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal v_Vlc abst_zero)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_div v_Vkc v_Vlc) 
                                        (abst_div v_Vkc v_Vmc)))))))) 
                   abst_one 
                   (v_Vnc:
                    (zen.proof 
                       (zen.forall abst_T 
                          (v_Vlc:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vmc:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vlc v_Vmc))) 
                                (zen.imp 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vlc abst_zero)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_div abst_one v_Vlc) 
                                            (abst_div abst_one v_Vmc))))))))) =>
                    zen.Rall abst_T 
                      (v_Vlc:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vmc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vlc v_Vmc))) 
                            (zen.imp 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal v_Vlc abst_zero)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_div abst_one v_Vlc) 
                                        (abst_div abst_one v_Vmc))))))) 
                      v_Vcc 
                      (v_Voc:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vmc:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vcc v_Vmc))) 
                                (zen.imp 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vcc abst_zero)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_div abst_one v_Vcc) 
                                            (abst_div abst_one v_Vmc)))))))) =>
                       zen.Rall abst_T 
                         (v_Vmc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vcc v_Vmc))) 
                            (zen.imp 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal v_Vcc abst_zero)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_div abst_one v_Vcc) 
                                        (abst_div abst_one v_Vmc)))))) v_Vec 
                         (v_Vpc:
                          (zen.proof 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vcc v_Vec))) 
                                (zen.imp 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vcc abst_zero)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_div abst_one v_Vcc) 
                                            (abst_div abst_one v_Vec))))))) =>
                          zen.Rimply 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vcc v_Vec))) 
                            (zen.imp 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal v_Vcc abst_zero)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_div abst_one v_Vcc) 
                                        (abst_div abst_one v_Vec))))) 
                            (v_Vqc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vcc v_Vec))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vcc v_Vec))) 
                               v_Vgc v_Vqc) 
                            (v_Vrc:
                             (zen.proof 
                                (zen.imp 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vcc abst_zero)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_div abst_one v_Vcc) 
                                            (abst_div abst_one v_Vec)))))) =>
                             zen.Rimply 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal v_Vcc abst_zero)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_div abst_one v_Vcc) 
                                        (abst_div abst_one v_Vec)))) 
                               (v_Vsc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vcc abst_zero)))))) =>
                                zen.Rnotnot 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal v_Vcc abst_zero))) 
                                  (v_Vtc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vcc abst_zero)))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vcc abst_zero))) 
                                     v_Vtc v_Vic) v_Vsc) 
                               (v_Vuc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_div abst_one v_Vcc) 
                                            (abst_div abst_one v_Vec))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_div abst_one v_Vcc) 
                                           (abst_div abst_one v_Vec)))) 
                                  v_Vuc v_Vjc) v_Vrc) v_Vpc) v_Voc) v_Vnc) 
                   abst_div_right_substitution_rule) v_Vhc) v_Vfc) v_Vdc) 
       v_Vbc).

def Division_monoid__div_really_divides :
  abst_T:cc.uT ->
  abst_div:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_different:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_div_divides:(dk_logic.eP 
                      (dk_logic.forall abst_T 
                         (x:(cc.eT abst_T) =>
                          dk_logic.forall abst_T 
                            (y:(cc.eT abst_T) =>
                             dk_logic.or 
                               (dk_logic.ebP (abst_equal y abst_zero)) 
                               (dk_logic.ebP 
                                  (abst_equal (abst_mult (abst_div x y) y) x)))))) ->
  abst_divides:((cc.eT abst_T) -> (cc.eT abst_T) -> dk_logic.Prop) ->
  abst_same_is_not_different:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.eqv 
                                         (dk_logic.ebP (abst_different x y)) 
                                         (dk_logic.not 
                                            (dk_logic.ebP (abst_equal x y))))))) ->
  abst_divides_transitive:(dk_logic.eP 
                             (dk_logic.forall abst_T 
                                (x:(cc.eT abst_T) =>
                                 dk_logic.forall abst_T 
                                   (y:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (z:(cc.eT abst_T) =>
                                       dk_logic.imp (abst_divides x y) 
                                         (dk_logic.imp (abst_divides y z) 
                                            (abst_divides x z))))))) ->
  abst_divides_extends_equal:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.imp 
                                         (dk_logic.ebP (abst_equal x y)) 
                                         (abst_divides x y))))) ->
  abst_divides_reverses_mult:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.and 
                                         (abst_divides x (abst_mult x y)) 
                                         (abst_divides y (abst_mult x y)))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.or (dk_logic.ebP (abst_equal y abst_zero)) 
             (abst_divides (abst_div x y) x))))
  :=
  abst_T:cc.uT =>
  abst_div:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_different:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_div_divides:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.or (dk_logic.ebP (abst_equal y abst_zero)) 
              (dk_logic.ebP (abst_equal (abst_mult (abst_div x y) y) x)))))) =>
  abst_divides:((cc.eT abst_T) -> (cc.eT abst_T) -> dk_logic.Prop) =>
  abst_same_is_not_different:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_different x y)) 
              (dk_logic.not (dk_logic.ebP (abst_equal x y))))))) =>
  abst_divides_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (abst_divides x y) 
                 (dk_logic.imp (abst_divides y z) (abst_divides x z))))))) =>
  abst_divides_extends_equal:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) (abst_divides x y))))) =>
  abst_divides_reverses_mult:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.and (abst_divides x (abst_mult x y)) 
              (abst_divides y (abst_mult x y)))))) =>
  (__R_1_LEMMA:
   (x:(cc.eT abst_T) ->
    y:(cc.eT abst_T) ->
    H:(dk_logic.eP (dk_logic.ebP (abst_different y abst_zero))) ->
    dk_logic.eP (abst_divides (abst_div x y) x)) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vac:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vbc:(zen.term abst_T) =>
            zen.or 
              (zen.triangle (focal.is_true (abst_equal v_Vbc abst_zero))) 
              (zen.triangle (abst_divides (abst_div v_Vac v_Vbc) v_Vac))))) 
     (v_Vcc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vac:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vbc:(zen.term abst_T) =>
                   zen.or 
                     (zen.triangle 
                        (focal.is_true (abst_equal v_Vbc abst_zero))) 
                     (zen.triangle 
                        (abst_divides (abst_div v_Vac v_Vbc) v_Vac))))))) =>
      zen.Rnotall abst_T 
        (v_Vac:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vbc:(zen.term abst_T) =>
            zen.or 
              (zen.triangle (focal.is_true (abst_equal v_Vbc abst_zero))) 
              (zen.triangle (abst_divides (abst_div v_Vac v_Vbc) v_Vac)))) 
        (v_Vdc:(zen.term abst_T) =>
         v_Vec:
         (zen.proof 
            (zen.not 
               (zen.forall abst_T 
                  (v_Vbc:(zen.term abst_T) =>
                   zen.or 
                     (zen.triangle 
                        (focal.is_true (abst_equal v_Vbc abst_zero))) 
                     (zen.triangle 
                        (abst_divides (abst_div v_Vdc v_Vbc) v_Vdc)))))) =>
         zen.Rnotall abst_T 
           (v_Vbc:(zen.term abst_T) =>
            zen.or 
              (zen.triangle (focal.is_true (abst_equal v_Vbc abst_zero))) 
              (zen.triangle (abst_divides (abst_div v_Vdc v_Vbc) v_Vdc))) 
           (v_Vfc:(zen.term abst_T) =>
            v_Vgc:
            (zen.proof 
               (zen.not 
                  (zen.or 
                     (zen.triangle 
                        (focal.is_true (abst_equal v_Vfc abst_zero))) 
                     (zen.triangle 
                        (abst_divides (abst_div v_Vdc v_Vfc) v_Vdc))))) =>
            zen.Rnotor 
              (zen.triangle (focal.is_true (abst_equal v_Vfc abst_zero))) 
              (zen.triangle (abst_divides (abst_div v_Vdc v_Vfc) v_Vdc)) 
              (v_Vhc:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true (abst_equal v_Vfc abst_zero))))) =>
               v_Vic:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (abst_divides (abst_div v_Vdc v_Vfc) v_Vdc)))) =>
               zen.Rall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true (abst_different v_Vbc abst_zero))) 
                       (zen.triangle 
                          (abst_divides (abst_div v_Vac v_Vbc) v_Vac)))) 
                 v_Vdc 
                 (v_Vjc:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vbc:(zen.term abst_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_different v_Vbc abst_zero))) 
                           (zen.triangle 
                              (abst_divides (abst_div v_Vdc v_Vbc) v_Vdc))))) =>
                  zen.Rall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true (abst_different v_Vbc abst_zero))) 
                       (zen.triangle 
                          (abst_divides (abst_div v_Vdc v_Vbc) v_Vdc))) 
                    v_Vfc 
                    (v_Vkc:
                     (zen.proof 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_different v_Vfc abst_zero))) 
                           (zen.triangle 
                              (abst_divides (abst_div v_Vdc v_Vfc) v_Vdc)))) =>
                     zen.Rimply 
                       (zen.triangle 
                          (focal.is_true (abst_different v_Vfc abst_zero))) 
                       (zen.triangle 
                          (abst_divides (abst_div v_Vdc v_Vfc) v_Vdc)) 
                       (v_Vlc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_different v_Vfc abst_zero))))) =>
                        zen.Rall abst_T 
                          (v_Vac:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vbc:(zen.term abst_T) =>
                              zen.eqv 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_different v_Vac v_Vbc))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vac v_Vbc)))))) 
                          v_Vfc 
                          (v_Vmc:
                           (zen.proof 
                              (zen.forall abst_T 
                                 (v_Vbc:(zen.term abst_T) =>
                                  zen.eqv 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_different v_Vfc v_Vbc))) 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vfc v_Vbc))))))) =>
                           zen.Rall abst_T 
                             (v_Vbc:(zen.term abst_T) =>
                              zen.eqv 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_different v_Vfc v_Vbc))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vfc v_Vbc))))) 
                             abst_zero 
                             (v_Vnc:
                              (zen.proof 
                                 (zen.eqv 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_different v_Vfc abst_zero))) 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vfc abst_zero)))))) =>
                              zen.Requiv 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_different v_Vfc abst_zero))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal v_Vfc abst_zero)))) 
                                (v_Vlc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_different v_Vfc abst_zero))))) =>
                                 v_Voc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal v_Vfc abst_zero)))))) =>
                                 zen.Raxiom 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vfc abst_zero)))) 
                                   v_Vhc v_Voc) 
                                (v_Vpc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_different v_Vfc abst_zero)))) =>
                                 v_Vhc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vfc abst_zero))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_different v_Vfc abst_zero))) 
                                   v_Vpc v_Vlc) v_Vnc) v_Vmc) 
                          abst_same_is_not_different) 
                       (v_Vqc:
                        (zen.proof 
                           (zen.triangle 
                              (abst_divides (abst_div v_Vdc v_Vfc) v_Vdc))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (abst_divides (abst_div v_Vdc v_Vfc) v_Vdc)) 
                          v_Vqc v_Vic) v_Vkc) v_Vjc) __R_1_LEMMA) v_Vgc) 
           v_Vec) v_Vcc)) 
    (x:(cc.eT abst_T) =>
     y:(cc.eT abst_T) =>
     H:(dk_logic.eP (dk_logic.ebP (abst_different y abst_zero))) =>
     (__R_1_1_LEMMA:
      (dk_logic.eP (dk_logic.ebP (abst_equal (abst_mult (abst_div x y) y) x))) =>
      (__R_1_2_LEMMA:
       (dk_logic.eP 
          (abst_divides (abst_div x y) (abst_mult (abst_div x y) y))) =>
       zen.nnpp (zen.triangle (abst_divides (abst_div x y) x)) 
         (v_Vhc:
          (zen.proof (zen.not (zen.triangle (abst_divides (abst_div x y) x)))) =>
          zen.Rcut 
            (zen.and 
               (zen.not 
                  (zen.triangle 
                     (zen.equal abst_T (abst_div x y) (abst_div x y)))) 
               (zen.not 
                  (zen.triangle (abst_divides (abst_div x y) (abst_div x y))))) 
            (v_Vic:
             (zen.proof 
                (zen.and 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T (abst_div x y) (abst_div x y)))) 
                   (zen.not 
                      (zen.triangle 
                         (abst_divides (abst_div x y) (abst_div x y)))))) =>
             zen.Rand 
               (zen.not 
                  (zen.triangle 
                     (zen.equal abst_T (abst_div x y) (abst_div x y)))) 
               (zen.not 
                  (zen.triangle (abst_divides (abst_div x y) (abst_div x y)))) 
               (v_Vjc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T (abst_div x y) (abst_div x y))))) =>
                v_Vkc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (abst_divides (abst_div x y) (abst_div x y))))) =>
                zen.Rnoteq abst_T (abst_div x y) v_Vjc) v_Vic) 
            (v_Vlc:
             (zen.proof 
                (zen.not 
                   (zen.and 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal abst_T (abst_div x y) (abst_div x y)))) 
                      (zen.not 
                         (zen.triangle 
                            (abst_divides (abst_div x y) (abst_div x y))))))) =>
             zen.Rcut 
               (zen.triangle 
                  (zen.equal abst_T (abst_mult (abst_div x y) y) x)) 
               (v_Vmc:
                (zen.proof 
                   (zen.triangle 
                      (zen.equal abst_T (abst_mult (abst_div x y) y) x))) =>
                zen.Rsubst abst_T 
                  (v_Vnc:(zen.term abst_T) =>
                   zen.triangle 
                     (abst_divides v_Vnc (abst_mult (abst_div x y) y))) 
                  (abst_div x y) (abst_div x y) 
                  (v_Vjc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal abst_T (abst_div x y) (abst_div x y))))) =>
                   zen.Rnotand 
                     (zen.not 
                        (zen.triangle 
                           (zen.equal abst_T (abst_div x y) (abst_div x y)))) 
                     (zen.not 
                        (zen.triangle 
                           (abst_divides (abst_div x y) (abst_div x y)))) 
                     (v_Voc:
                      (zen.proof 
                         (zen.not 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal abst_T (abst_div x y) 
                                     (abst_div x y)))))) =>
                      zen.Rnotnot 
                        (zen.triangle 
                           (zen.equal abst_T (abst_div x y) (abst_div x y))) 
                        (v_Vpc:
                         (zen.proof 
                            (zen.triangle 
                               (zen.equal abst_T (abst_div x y) 
                                  (abst_div x y)))) =>
                         zen.Rcut 
                           (zen.triangle 
                              (zen.equal abst_T (abst_div x y) (abst_div x y))) 
                           (v_Vpc:
                            (zen.proof 
                               (zen.triangle 
                                  (zen.equal abst_T (abst_div x y) 
                                     (abst_div x y)))) =>
                            zen.Rsubst abst_T 
                              (v_Vqc:(zen.term abst_T) =>
                               zen.triangle 
                                 (zen.equal abst_T v_Vqc (abst_div x y))) 
                              (abst_div x y) (abst_div x y) 
                              (v_Vjc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal abst_T (abst_div x y) 
                                           (abst_div x y))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (zen.equal abst_T (abst_div x y) 
                                       (abst_div x y))) v_Vpc v_Vjc) 
                              (v_Vpc:
                               (zen.proof 
                                  (zen.triangle 
                                     (zen.equal abst_T (abst_div x y) 
                                        (abst_div x y)))) =>
                               zen.Rsubst abst_T 
                                 (v_Vrc:(zen.term abst_T) =>
                                  zen.triangle 
                                    (zen.equal abst_T (abst_div x y) v_Vrc)) 
                                 (abst_div x y) (abst_div x y) 
                                 (v_Vjc:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal abst_T (abst_div x y) 
                                              (abst_div x y))))) =>
                                  zen.Rnoteq abst_T (abst_div x y) v_Vjc) 
                                 (v_Vpc:
                                  (zen.proof 
                                     (zen.triangle 
                                        (zen.equal abst_T (abst_div x y) 
                                           (abst_div x y)))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (zen.equal abst_T (abst_div x y) 
                                          (abst_div x y))) v_Vpc v_Vjc) v_Vpc) 
                              v_Vpc) 
                           (v_Vjc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal abst_T (abst_div x y) 
                                        (abst_div x y))))) =>
                            zen.Rnoteq abst_T (abst_div x y) v_Vjc)) v_Voc) 
                     (v_Vsc:
                      (zen.proof 
                         (zen.not 
                            (zen.not 
                               (zen.triangle 
                                  (abst_divides (abst_div x y) (abst_div x y)))))) =>
                      zen.Rnotnot 
                        (zen.triangle 
                           (abst_divides (abst_div x y) (abst_div x y))) 
                        (v_Vtc:
                         (zen.proof 
                            (zen.triangle 
                               (abst_divides (abst_div x y) (abst_div x y)))) =>
                         zen.Rall abst_T 
                           (v_Vuc:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vvc:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vwc:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle (abst_divides v_Vuc v_Vvc)) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (abst_divides v_Vvc v_Vwc)) 
                                       (zen.triangle 
                                          (abst_divides v_Vuc v_Vwc)))))) 
                           (abst_div x y) 
                           (v_Vxc:
                            (zen.proof 
                               (zen.forall abst_T 
                                  (v_Vvc:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vwc:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (abst_divides (abst_div x y) v_Vvc)) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (abst_divides v_Vvc v_Vwc)) 
                                           (zen.triangle 
                                              (abst_divides (abst_div x y) 
                                                 v_Vwc))))))) =>
                            zen.Rall abst_T 
                              (v_Vvc:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vwc:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (abst_divides (abst_div x y) v_Vvc)) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (abst_divides v_Vvc v_Vwc)) 
                                       (zen.triangle 
                                          (abst_divides (abst_div x y) v_Vwc))))) 
                              (abst_div x y) 
                              (v_Vyc:
                               (zen.proof 
                                  (zen.forall abst_T 
                                     (v_Vwc:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (abst_divides (abst_div x y) 
                                              (abst_div x y))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (abst_divides (abst_div x y) 
                                                 v_Vwc)) 
                                           (zen.triangle 
                                              (abst_divides (abst_div x y) 
                                                 v_Vwc)))))) =>
                               zen.Rall abst_T 
                                 (v_Vwc:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (abst_divides (abst_div x y) 
                                          (abst_div x y))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (abst_divides (abst_div x y) v_Vwc)) 
                                       (zen.triangle 
                                          (abst_divides (abst_div x y) v_Vwc)))) 
                                 (abst_mult (abst_div x y) y) 
                                 (v_Vzc:
                                  (zen.proof 
                                     (zen.imp 
                                        (zen.triangle 
                                           (abst_divides (abst_div x y) 
                                              (abst_div x y))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (abst_divides (abst_div x y) 
                                                 (abst_mult (abst_div x y) y))) 
                                           (zen.triangle 
                                              (abst_divides (abst_div x y) 
                                                 (abst_mult (abst_div x y) y)))))) =>
                                  zen.Rimply 
                                    (zen.triangle 
                                       (abst_divides (abst_div x y) 
                                          (abst_div x y))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (abst_divides (abst_div x y) 
                                             (abst_mult (abst_div x y) y))) 
                                       (zen.triangle 
                                          (abst_divides (abst_div x y) 
                                             (abst_mult (abst_div x y) y)))) 
                                    (v_Vkc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (abst_divides (abst_div x y) 
                                                 (abst_div x y))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (abst_divides (abst_div x y) 
                                             (abst_div x y))) v_Vtc v_Vkc) 
                                    (v_Vad:
                                     (zen.proof 
                                        (zen.imp 
                                           (zen.triangle 
                                              (abst_divides (abst_div x y) 
                                                 (abst_mult (abst_div x y) y))) 
                                           (zen.triangle 
                                              (abst_divides (abst_div x y) 
                                                 (abst_mult (abst_div x y) y))))) =>
                                     zen.Rimply 
                                       (zen.triangle 
                                          (abst_divides (abst_div x y) 
                                             (abst_mult (abst_div x y) y))) 
                                       (zen.triangle 
                                          (abst_divides (abst_div x y) 
                                             (abst_mult (abst_div x y) y))) 
                                       (v_Vbd:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (abst_divides 
                                                    (abst_div x y) 
                                                    (abst_mult 
                                                       (abst_div x y) y))))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (abst_divides (abst_div x y) 
                                                (abst_mult (abst_div x y) y))) 
                                          __R_1_2_LEMMA v_Vbd) 
                                       (__R_1_2_LEMMA:
                                        (zen.proof 
                                           (zen.triangle 
                                              (abst_divides (abst_div x y) 
                                                 (abst_mult (abst_div x y) y)))) =>
                                        zen.Rsubst abst_T 
                                          (v_Vnc:(zen.term abst_T) =>
                                           zen.triangle 
                                             (abst_divides v_Vnc 
                                                (abst_mult (abst_div x y) y))) 
                                          (abst_div x y) (abst_div x y) 
                                          (v_Vjc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_div x y) 
                                                       (abst_div x y))))) =>
                                           zen.Rnoteq abst_T (abst_div x y) 
                                             v_Vjc) 
                                          (__R_1_2_LEMMA:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (abst_divides 
                                                    (abst_div x y) 
                                                    (abst_mult 
                                                       (abst_div x y) y)))) =>
                                           zen.Rsubst abst_T 
                                             (v_Vcd:(zen.term abst_T) =>
                                              zen.triangle 
                                                (abst_divides (abst_div x y) 
                                                   v_Vcd)) 
                                             (abst_mult (abst_div x y) y) x 
                                             (v_Vdd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_mult 
                                                             (abst_div x y) y) 
                                                          x)))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_mult 
                                                         (abst_div x y) y) x)) 
                                                v_Vmc v_Vdd) 
                                             (v_Ved:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (abst_divides 
                                                       (abst_div x y) x))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (abst_divides 
                                                      (abst_div x y) x)) 
                                                v_Ved v_Vhc) __R_1_2_LEMMA) 
                                          __R_1_2_LEMMA) v_Vad) v_Vzc) v_Vyc) 
                              v_Vxc) abst_divides_transitive) v_Vsc) v_Vlc) 
                  (__R_1_2_LEMMA:
                   (zen.proof 
                      (zen.triangle 
                         (abst_divides (abst_div x y) 
                            (abst_mult (abst_div x y) y)))) =>
                   zen.Rsubst abst_T 
                     (v_Vcd:(zen.term abst_T) =>
                      zen.triangle (abst_divides (abst_div x y) v_Vcd)) 
                     (abst_mult (abst_div x y) y) x 
                     (v_Vdd:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T 
                                  (abst_mult (abst_div x y) y) x)))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (zen.equal abst_T (abst_mult (abst_div x y) y) x)) 
                        v_Vmc v_Vdd) 
                     (v_Ved:
                      (zen.proof 
                         (zen.triangle (abst_divides (abst_div x y) x))) =>
                      zen.Raxiom 
                        (zen.triangle (abst_divides (abst_div x y) x)) v_Ved 
                        v_Vhc) __R_1_2_LEMMA) __R_1_2_LEMMA) 
               (v_Vdd:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T (abst_mult (abst_div x y) y) x)))) =>
                zen.Rcut 
                  (zen.triangle (abst_divides (abst_mult (abst_div x y) y) x)) 
                  (v_Vfd:
                   (zen.proof 
                      (zen.triangle 
                         (abst_divides (abst_mult (abst_div x y) y) x))) =>
                   zen.Rall abst_T 
                     (v_Vuc:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vvc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vwc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle (abst_divides v_Vuc v_Vvc)) 
                              (zen.imp 
                                 (zen.triangle (abst_divides v_Vvc v_Vwc)) 
                                 (zen.triangle (abst_divides v_Vuc v_Vwc)))))) 
                     (abst_div x y) 
                     (v_Vxc:
                      (zen.proof 
                         (zen.forall abst_T 
                            (v_Vvc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vwc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (abst_divides (abst_div x y) v_Vvc)) 
                                  (zen.imp 
                                     (zen.triangle (abst_divides v_Vvc v_Vwc)) 
                                     (zen.triangle 
                                        (abst_divides (abst_div x y) v_Vwc))))))) =>
                      zen.Rall abst_T 
                        (v_Vvc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vwc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (abst_divides (abst_div x y) v_Vvc)) 
                              (zen.imp 
                                 (zen.triangle (abst_divides v_Vvc v_Vwc)) 
                                 (zen.triangle 
                                    (abst_divides (abst_div x y) v_Vwc))))) 
                        (abst_mult (abst_div x y) y) 
                        (v_Vgd:
                         (zen.proof 
                            (zen.forall abst_T 
                               (v_Vwc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (abst_divides (abst_div x y) 
                                        (abst_mult (abst_div x y) y))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (abst_divides 
                                           (abst_mult (abst_div x y) y) v_Vwc)) 
                                     (zen.triangle 
                                        (abst_divides (abst_div x y) v_Vwc)))))) =>
                         zen.Rall abst_T 
                           (v_Vwc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (abst_divides (abst_div x y) 
                                    (abst_mult (abst_div x y) y))) 
                              (zen.imp 
                                 (zen.triangle 
                                    (abst_divides 
                                       (abst_mult (abst_div x y) y) v_Vwc)) 
                                 (zen.triangle 
                                    (abst_divides (abst_div x y) v_Vwc)))) x 
                           (v_Vhd:
                            (zen.proof 
                               (zen.imp 
                                  (zen.triangle 
                                     (abst_divides (abst_div x y) 
                                        (abst_mult (abst_div x y) y))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (abst_divides 
                                           (abst_mult (abst_div x y) y) x)) 
                                     (zen.triangle 
                                        (abst_divides (abst_div x y) x))))) =>
                            zen.Rimply 
                              (zen.triangle 
                                 (abst_divides (abst_div x y) 
                                    (abst_mult (abst_div x y) y))) 
                              (zen.imp 
                                 (zen.triangle 
                                    (abst_divides 
                                       (abst_mult (abst_div x y) y) x)) 
                                 (zen.triangle 
                                    (abst_divides (abst_div x y) x))) 
                              (v_Vbd:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (abst_divides (abst_div x y) 
                                           (abst_mult (abst_div x y) y))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (abst_divides (abst_div x y) 
                                       (abst_mult (abst_div x y) y))) 
                                 __R_1_2_LEMMA v_Vbd) 
                              (v_Vid:
                               (zen.proof 
                                  (zen.imp 
                                     (zen.triangle 
                                        (abst_divides 
                                           (abst_mult (abst_div x y) y) x)) 
                                     (zen.triangle 
                                        (abst_divides (abst_div x y) x)))) =>
                               zen.Rimply 
                                 (zen.triangle 
                                    (abst_divides 
                                       (abst_mult (abst_div x y) y) x)) 
                                 (zen.triangle 
                                    (abst_divides (abst_div x y) x)) 
                                 (v_Vjd:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (abst_divides 
                                              (abst_mult (abst_div x y) y) x)))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (abst_divides 
                                          (abst_mult (abst_div x y) y) x)) 
                                    v_Vfd v_Vjd) 
                                 (v_Ved:
                                  (zen.proof 
                                     (zen.triangle 
                                        (abst_divides (abst_div x y) x))) =>
                                  zen.Rsubst abst_T 
                                    (v_Vkd:(zen.term abst_T) =>
                                     zen.triangle (abst_divides v_Vkd x)) 
                                    (abst_div x y) (abst_div x y) 
                                    (v_Vjc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_div x y) 
                                                 (abst_div x y))))) =>
                                     zen.Rnotand 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_div x y) (abst_div x y)))) 
                                       (zen.not 
                                          (zen.triangle 
                                             (abst_divides (abst_div x y) 
                                                (abst_div x y)))) 
                                       (v_Voc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_div x y) 
                                                       (abst_div x y)))))) =>
                                        zen.Rnotnot 
                                          (zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_div x y) (abst_div x y))) 
                                          (v_Vpc:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_div x y) 
                                                    (abst_div x y)))) =>
                                           zen.Reqsym abst_T (abst_div x y) 
                                             (abst_div x y) v_Vpc v_Vjc) 
                                          v_Voc) 
                                       (v_Vsc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (abst_divides 
                                                       (abst_div x y) 
                                                       (abst_div x y)))))) =>
                                        zen.Rnotnot 
                                          (zen.triangle 
                                             (abst_divides (abst_div x y) 
                                                (abst_div x y))) 
                                          (v_Vtc:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (abst_divides 
                                                    (abst_div x y) 
                                                    (abst_div x y)))) =>
                                           zen.Rall abst_T 
                                             (v_Vuc:(zen.term abst_T) =>
                                              zen.forall abst_T 
                                                (v_Vvc:(zen.term abst_T) =>
                                                 zen.forall abst_T 
                                                   (v_Vwc:
                                                    (zen.term abst_T) =>
                                                    zen.imp 
                                                      (zen.triangle 
                                                         (abst_divides v_Vuc 
                                                            v_Vvc)) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (abst_divides 
                                                               v_Vvc v_Vwc)) 
                                                         (zen.triangle 
                                                            (abst_divides 
                                                               v_Vuc v_Vwc)))))) 
                                             (abst_div x y) 
                                             (v_Vxc:
                                              (zen.proof 
                                                 (zen.forall abst_T 
                                                    (v_Vvc:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vwc:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (abst_divides 
                                                                (abst_div x y) 
                                                                v_Vvc)) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   v_Vvc 
                                                                   v_Vwc)) 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   (abst_div 
                                                                    x y) 
                                                                   v_Vwc))))))) =>
                                              zen.Rall abst_T 
                                                (v_Vvc:(zen.term abst_T) =>
                                                 zen.forall abst_T 
                                                   (v_Vwc:
                                                    (zen.term abst_T) =>
                                                    zen.imp 
                                                      (zen.triangle 
                                                         (abst_divides 
                                                            (abst_div x y) 
                                                            v_Vvc)) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (abst_divides 
                                                               v_Vvc v_Vwc)) 
                                                         (zen.triangle 
                                                            (abst_divides 
                                                               (abst_div x y) 
                                                               v_Vwc))))) 
                                                (abst_div x y) 
                                                (v_Vyc:
                                                 (zen.proof 
                                                    (zen.forall abst_T 
                                                       (v_Vwc:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (abst_divides 
                                                                (abst_div x y) 
                                                                (abst_div x y))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   (abst_div 
                                                                    x y) 
                                                                   v_Vwc)) 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   (abst_div 
                                                                    x y) 
                                                                   v_Vwc)))))) =>
                                                 zen.Rall abst_T 
                                                   (v_Vwc:
                                                    (zen.term abst_T) =>
                                                    zen.imp 
                                                      (zen.triangle 
                                                         (abst_divides 
                                                            (abst_div x y) 
                                                            (abst_div x y))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (abst_divides 
                                                               (abst_div x y) 
                                                               v_Vwc)) 
                                                         (zen.triangle 
                                                            (abst_divides 
                                                               (abst_div x y) 
                                                               v_Vwc)))) x 
                                                   (v_Vld:
                                                    (zen.proof 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (abst_divides 
                                                                (abst_div x y) 
                                                                (abst_div x y))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   (abst_div 
                                                                    x y) x)) 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   (abst_div 
                                                                    x y) x))))) =>
                                                    zen.Rimply 
                                                      (zen.triangle 
                                                         (abst_divides 
                                                            (abst_div x y) 
                                                            (abst_div x y))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (abst_divides 
                                                               (abst_div x y) 
                                                               x)) 
                                                         (zen.triangle 
                                                            (abst_divides 
                                                               (abst_div x y) 
                                                               x))) 
                                                      (v_Vkc:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   (abst_div 
                                                                    x y) 
                                                                   (abst_div 
                                                                    x y))))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (abst_divides 
                                                               (abst_div x y) 
                                                               (abst_div x y))) 
                                                         v_Vtc v_Vkc) 
                                                      (v_Vmd:
                                                       (zen.proof 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   (abst_div 
                                                                    x y) x)) 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   (abst_div 
                                                                    x y) x)))) =>
                                                       zen.Rimply 
                                                         (zen.triangle 
                                                            (abst_divides 
                                                               (abst_div x y) 
                                                               x)) 
                                                         (zen.triangle 
                                                            (abst_divides 
                                                               (abst_div x y) 
                                                               x)) 
                                                         (v_Vhc:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (abst_divides 
                                                                    (abst_div 
                                                                    x y) x)))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (abst_divides 
                                                                  (abst_div 
                                                                    x y) x)) 
                                                            v_Ved v_Vhc) 
                                                         (v_Ved:
                                                          (zen.proof 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   (abst_div 
                                                                    x y) x))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (abst_divides 
                                                                  (abst_div 
                                                                    x y) x)) 
                                                            v_Ved v_Vhc) 
                                                         v_Vmd) v_Vld) v_Vyc) 
                                                v_Vxc) 
                                             abst_divides_transitive) v_Vsc) 
                                       v_Vlc) 
                                    (v_Ved:
                                     (zen.proof 
                                        (zen.triangle 
                                           (abst_divides (abst_div x y) x))) =>
                                     zen.Rsubst abst_T 
                                       (v_Vcd:(zen.term abst_T) =>
                                        zen.triangle 
                                          (abst_divides (abst_div x y) v_Vcd)) 
                                       x x 
                                       (v_Vnd:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T x x)))) =>
                                        zen.Rnoteq abst_T x v_Vnd) 
                                       (v_Ved:
                                        (zen.proof 
                                           (zen.triangle 
                                              (abst_divides (abst_div x y) x))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (abst_divides (abst_div x y) x)) 
                                          v_Ved v_Vhc) v_Ved) v_Ved) v_Vid) 
                              v_Vhd) v_Vgd) v_Vxc) abst_divides_transitive) 
                  (v_Vjd:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (abst_divides (abst_mult (abst_div x y) y) x)))) =>
                   zen.Rall abst_T 
                     (v_Vuc:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vvc:(zen.term abst_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Vuc v_Vvc))) 
                           (zen.triangle (abst_divides v_Vuc v_Vvc)))) 
                     (abst_mult (abst_div x y) y) 
                     (v_Vod:
                      (zen.proof 
                         (zen.forall abst_T 
                            (v_Vvc:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_mult (abst_div x y) y) v_Vvc))) 
                               (zen.triangle 
                                  (abst_divides (abst_mult (abst_div x y) y) 
                                     v_Vvc))))) =>
                      zen.Rall abst_T 
                        (v_Vvc:(zen.term abst_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_mult (abst_div x y) y) 
                                    v_Vvc))) 
                           (zen.triangle 
                              (abst_divides (abst_mult (abst_div x y) y) 
                                 v_Vvc))) x 
                        (v_Vpd:
                         (zen.proof 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_mult (abst_div x y) y) x))) 
                               (zen.triangle 
                                  (abst_divides (abst_mult (abst_div x y) y) 
                                     x)))) =>
                         zen.Rimply 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_mult (abst_div x y) y) x))) 
                           (zen.triangle 
                              (abst_divides (abst_mult (abst_div x y) y) x)) 
                           (v_Vqd:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult (abst_div x y) y) x))))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_mult (abst_div x y) y) 
                                       x))) __R_1_1_LEMMA v_Vqd) 
                           (v_Vfd:
                            (zen.proof 
                               (zen.triangle 
                                  (abst_divides (abst_mult (abst_div x y) y) 
                                     x))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (abst_divides (abst_mult (abst_div x y) y) x)) 
                              v_Vfd v_Vjd) v_Vpd) v_Vod) 
                     abst_divides_extends_equal))))) 
        (zen.nnpp 
           (zen.triangle 
              (abst_divides (abst_div x y) (abst_mult (abst_div x y) y))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (abst_divides (abst_div x y) 
                        (abst_mult (abst_div x y) y))))) =>
            zen.Rall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.and 
                    (zen.triangle 
                       (abst_divides v_Vac (abst_mult v_Vac v_Vbc))) 
                    (zen.triangle 
                       (abst_divides v_Vbc (abst_mult v_Vac v_Vbc))))) 
              (abst_div x y) 
              (v_Vcc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.and 
                        (zen.triangle 
                           (abst_divides (abst_div x y) 
                              (abst_mult (abst_div x y) v_Vbc))) 
                        (zen.triangle 
                           (abst_divides v_Vbc 
                              (abst_mult (abst_div x y) v_Vbc)))))) =>
               zen.Rall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.and 
                    (zen.triangle 
                       (abst_divides (abst_div x y) 
                          (abst_mult (abst_div x y) v_Vbc))) 
                    (zen.triangle 
                       (abst_divides v_Vbc (abst_mult (abst_div x y) v_Vbc)))) 
                 y 
                 (v_Vdc:
                  (zen.proof 
                     (zen.and 
                        (zen.triangle 
                           (abst_divides (abst_div x y) 
                              (abst_mult (abst_div x y) y))) 
                        (zen.triangle 
                           (abst_divides y (abst_mult (abst_div x y) y))))) =>
                  zen.Rand 
                    (zen.triangle 
                       (abst_divides (abst_div x y) 
                          (abst_mult (abst_div x y) y))) 
                    (zen.triangle 
                       (abst_divides y (abst_mult (abst_div x y) y))) 
                    (v_Vec:
                     (zen.proof 
                        (zen.triangle 
                           (abst_divides (abst_div x y) 
                              (abst_mult (abst_div x y) y)))) =>
                     v_Vfc:
                     (zen.proof 
                        (zen.triangle 
                           (abst_divides y (abst_mult (abst_div x y) y)))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (abst_divides (abst_div x y) 
                             (abst_mult (abst_div x y) y))) v_Vec v_Vzb) 
                    v_Vdc) v_Vcc) abst_divides_reverses_mult))) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true (abst_equal (abst_mult (abst_div x y) y) x))) 
          (v_Vac:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult (abst_div x y) y) x))))) =>
           zen.Rall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vcc:(zen.term abst_T) =>
                 zen.eqv 
                   (zen.triangle (focal.is_true (abst_different v_Vbc v_Vcc))) 
                   (zen.not 
                      (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc)))))) 
             y 
             (v_Vdc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.eqv 
                       (zen.triangle (focal.is_true (abst_different y v_Vcc))) 
                       (zen.not 
                          (zen.triangle (focal.is_true (abst_equal y v_Vcc))))))) =>
              zen.Rall abst_T 
                (v_Vcc:(zen.term abst_T) =>
                 zen.eqv 
                   (zen.triangle (focal.is_true (abst_different y v_Vcc))) 
                   (zen.not 
                      (zen.triangle (focal.is_true (abst_equal y v_Vcc))))) 
                abst_zero 
                (v_Vec:
                 (zen.proof 
                    (zen.eqv 
                       (zen.triangle 
                          (focal.is_true (abst_different y abst_zero))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_equal y abst_zero)))))) =>
                 zen.Requiv 
                   (zen.triangle (focal.is_true (abst_different y abst_zero))) 
                   (zen.not 
                      (zen.triangle (focal.is_true (abst_equal y abst_zero)))) 
                   (v_Vfc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_different y abst_zero))))) =>
                    v_Vgc:
                    (zen.proof 
                       (zen.not 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_equal y abst_zero)))))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true (abst_different y abst_zero))) H 
                      v_Vfc) 
                   (H:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true (abst_different y abst_zero)))) =>
                    v_Vhc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_equal y abst_zero))))) =>
                    zen.Rall abst_T 
                      (v_Vbc:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vcc:(zen.term abst_T) =>
                          zen.or 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vcc abst_zero))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_mult (abst_div v_Vbc v_Vcc) v_Vcc) 
                                     v_Vbc))))) x 
                      (v_Vic:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vcc:(zen.term abst_T) =>
                              zen.or 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal v_Vcc abst_zero))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_mult (abst_div x v_Vcc) v_Vcc) 
                                         x)))))) =>
                       zen.Rall abst_T 
                         (v_Vcc:(zen.term abst_T) =>
                          zen.or 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vcc abst_zero))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_mult (abst_div x v_Vcc) v_Vcc) x)))) 
                         y 
                         (v_Vjc:
                          (zen.proof 
                             (zen.or 
                                (zen.triangle 
                                   (focal.is_true (abst_equal y abst_zero))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_mult (abst_div x y) y) x))))) =>
                          zen.Ror 
                            (zen.triangle 
                               (focal.is_true (abst_equal y abst_zero))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult (abst_div x y) y) x))) 
                            (v_Vkc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (abst_equal y abst_zero)))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (abst_equal y abst_zero))) 
                               v_Vkc v_Vhc) 
                            (v_Vlc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_mult (abst_div x y) y) x)))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_mult (abst_div x y) y) x))) 
                               v_Vlc v_Vac) v_Vjc) v_Vic) abst_div_divides) 
                   v_Vec) v_Vdc) abst_same_is_not_different))).

