#NAME additive_law.

def Zero_check_set__equals_zero_is_zero_check :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_zero:(cc.eT abst_T) ->
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_is_zero_substitution_rule:(dk_logic.eP 
                                    (dk_logic.forall abst_T 
                                       (x:(cc.eT abst_T) =>
                                        dk_logic.forall abst_T 
                                          (y:(cc.eT abst_T) =>
                                           dk_logic.imp 
                                             (dk_logic.ebP (abst_is_zero x)) 
                                             (dk_logic.imp 
                                                (dk_logic.or 
                                                   (dk_logic.ebP 
                                                      (abst_equal x y)) 
                                                   (dk_logic.ebP 
                                                      (abst_equal y x))) 
                                                (dk_logic.ebP 
                                                   (abst_is_zero y))))))) ->
  abst_zero_checks_to_zero:(dk_logic.eP 
                              (dk_logic.ebP (abst_is_zero abst_zero))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.imp 
          (dk_logic.or (dk_logic.ebP (abst_equal abst_zero x)) 
             (dk_logic.ebP (abst_equal x abst_zero))) 
          (dk_logic.ebP (abst_is_zero x))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_zero:(cc.eT abst_T) =>
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_is_zero_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_is_zero x)) 
              (dk_logic.imp 
                 (dk_logic.or (dk_logic.ebP (abst_equal x y)) 
                    (dk_logic.ebP (abst_equal y x))) 
                 (dk_logic.ebP (abst_is_zero y))))))) =>
  abst_zero_checks_to_zero:
  (dk_logic.eP (dk_logic.ebP (abst_is_zero abst_zero))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.imp 
          (zen.or 
             (zen.triangle (focal.is_true (abst_equal abst_zero v_Vzb))) 
             (zen.triangle (focal.is_true (abst_equal v_Vzb abst_zero)))) 
          (zen.triangle (focal.is_true (abst_is_zero v_Vzb))))) 
    (v_Vac:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.imp 
                 (zen.or 
                    (zen.triangle 
                       (focal.is_true (abst_equal abst_zero v_Vzb))) 
                    (zen.triangle 
                       (focal.is_true (abst_equal v_Vzb abst_zero)))) 
                 (zen.triangle (focal.is_true (abst_is_zero v_Vzb))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.imp 
          (zen.or 
             (zen.triangle (focal.is_true (abst_equal abst_zero v_Vzb))) 
             (zen.triangle (focal.is_true (abst_equal v_Vzb abst_zero)))) 
          (zen.triangle (focal.is_true (abst_is_zero v_Vzb)))) 
       (v_Vbc:(zen.term abst_T) =>
        v_Vcc:
        (zen.proof 
           (zen.not 
              (zen.imp 
                 (zen.or 
                    (zen.triangle 
                       (focal.is_true (abst_equal abst_zero v_Vbc))) 
                    (zen.triangle 
                       (focal.is_true (abst_equal v_Vbc abst_zero)))) 
                 (zen.triangle (focal.is_true (abst_is_zero v_Vbc)))))) =>
        zen.Rnotimply 
          (zen.or 
             (zen.triangle (focal.is_true (abst_equal abst_zero v_Vbc))) 
             (zen.triangle (focal.is_true (abst_equal v_Vbc abst_zero)))) 
          (zen.triangle (focal.is_true (abst_is_zero v_Vbc))) 
          (v_Vdc:
           (zen.proof 
              (zen.or 
                 (zen.triangle (focal.is_true (abst_equal abst_zero v_Vbc))) 
                 (zen.triangle (focal.is_true (abst_equal v_Vbc abst_zero))))) =>
           v_Vec:
           (zen.proof 
              (zen.not (zen.triangle (focal.is_true (abst_is_zero v_Vbc))))) =>
           zen.Rall abst_T 
             (v_Vzb:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vfc:(zen.term abst_T) =>
                 zen.imp (zen.triangle (focal.is_true (abst_is_zero v_Vzb))) 
                   (zen.imp 
                      (zen.or 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vzb v_Vfc))) 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vfc v_Vzb)))) 
                      (zen.triangle (focal.is_true (abst_is_zero v_Vfc)))))) 
             abst_zero 
             (v_Vgc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Vfc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_is_zero abst_zero))) 
                       (zen.imp 
                          (zen.or 
                             (zen.triangle 
                                (focal.is_true (abst_equal abst_zero v_Vfc))) 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vfc abst_zero)))) 
                          (zen.triangle (focal.is_true (abst_is_zero v_Vfc))))))) =>
              zen.Rall abst_T 
                (v_Vfc:(zen.term abst_T) =>
                 zen.imp 
                   (zen.triangle (focal.is_true (abst_is_zero abst_zero))) 
                   (zen.imp 
                      (zen.or 
                         (zen.triangle 
                            (focal.is_true (abst_equal abst_zero v_Vfc))) 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vfc abst_zero)))) 
                      (zen.triangle (focal.is_true (abst_is_zero v_Vfc))))) 
                v_Vbc 
                (v_Vhc:
                 (zen.proof 
                    (zen.imp 
                       (zen.triangle (focal.is_true (abst_is_zero abst_zero))) 
                       (zen.imp 
                          (zen.or 
                             (zen.triangle 
                                (focal.is_true (abst_equal abst_zero v_Vbc))) 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vbc abst_zero)))) 
                          (zen.triangle (focal.is_true (abst_is_zero v_Vbc)))))) =>
                 zen.Rimply 
                   (zen.triangle (focal.is_true (abst_is_zero abst_zero))) 
                   (zen.imp 
                      (zen.or 
                         (zen.triangle 
                            (focal.is_true (abst_equal abst_zero v_Vbc))) 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vbc abst_zero)))) 
                      (zen.triangle (focal.is_true (abst_is_zero v_Vbc)))) 
                   (v_Vic:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_is_zero abst_zero))))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (abst_is_zero abst_zero))) 
                      abst_zero_checks_to_zero v_Vic) 
                   (v_Vjc:
                    (zen.proof 
                       (zen.imp 
                          (zen.or 
                             (zen.triangle 
                                (focal.is_true (abst_equal abst_zero v_Vbc))) 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vbc abst_zero)))) 
                          (zen.triangle (focal.is_true (abst_is_zero v_Vbc))))) =>
                    zen.Rimply 
                      (zen.or 
                         (zen.triangle 
                            (focal.is_true (abst_equal abst_zero v_Vbc))) 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vbc abst_zero)))) 
                      (zen.triangle (focal.is_true (abst_is_zero v_Vbc))) 
                      (v_Vkc:
                       (zen.proof 
                          (zen.not 
                             (zen.or 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal abst_zero v_Vbc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal v_Vbc abst_zero)))))) =>
                       zen.Raxiom 
                         (zen.or 
                            (zen.triangle 
                               (focal.is_true (abst_equal abst_zero v_Vbc))) 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vbc abst_zero)))) 
                         v_Vdc v_Vkc) 
                      (v_Vlc:
                       (zen.proof 
                          (zen.triangle (focal.is_true (abst_is_zero v_Vbc)))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_is_zero v_Vbc))) 
                         v_Vlc v_Vec) v_Vjc) v_Vhc) v_Vgc) 
             abst_is_zero_substitution_rule) v_Vcc) v_Vac).

def Additive_semi_group__plus_left_substitution_rule :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_plus_commutes:(dk_logic.eP 
                        (dk_logic.forall abst_T 
                           (x:(cc.eT abst_T) =>
                            dk_logic.forall abst_T 
                              (y:(cc.eT abst_T) =>
                               dk_logic.ebP 
                                 (abst_equal (abst_plus x y) (abst_plus y x)))))) ->
  abst_plus_right_substitution_rule:(dk_logic.eP 
                                       (dk_logic.forall abst_T 
                                          (x:(cc.eT abst_T) =>
                                           dk_logic.forall abst_T 
                                             (y:(cc.eT abst_T) =>
                                              dk_logic.forall abst_T 
                                                (z:(cc.eT abst_T) =>
                                                 dk_logic.imp 
                                                   (dk_logic.ebP 
                                                      (abst_equal x y)) 
                                                   (dk_logic.ebP 
                                                      (abst_equal 
                                                         (abst_plus z x) 
                                                         (abst_plus z y)))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                (dk_logic.ebP (abst_equal (abst_plus x z) (abst_plus y z)))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_plus_commutes:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.ebP (abst_equal (abst_plus x y) (abst_plus y x)))))) =>
  abst_plus_right_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.ebP (abst_equal (abst_plus z x) (abst_plus z y)))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vkc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vlc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vmc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vkc v_Vlc))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus v_Vkc v_Vmc) 
                         (abst_plus v_Vlc v_Vmc)))))))) 
    (v_Vnc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vkc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vlc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vmc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vkc v_Vlc))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_plus v_Vkc v_Vmc) 
                                (abst_plus v_Vlc v_Vmc)))))))))) =>
     zen.Rnotall abst_T 
       (v_Vkc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vlc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vmc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vkc v_Vlc))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus v_Vkc v_Vmc) 
                         (abst_plus v_Vlc v_Vmc))))))) 
       (v_Voc:(zen.term abst_T) =>
        v_Vpc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vlc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vmc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Voc v_Vlc))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_plus v_Voc v_Vmc) 
                                (abst_plus v_Vlc v_Vmc))))))))) =>
        zen.Rnotall abst_T 
          (v_Vlc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vmc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Voc v_Vlc))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus v_Voc v_Vmc) 
                         (abst_plus v_Vlc v_Vmc)))))) 
          (v_Vqc:(zen.term abst_T) =>
           v_Vrc:
           (zen.proof 
              (zen.not 
                 (zen.forall abst_T 
                    (v_Vmc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Voc v_Vqc))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_plus v_Voc v_Vmc) 
                                (abst_plus v_Vqc v_Vmc)))))))) =>
           zen.Rnotall abst_T 
             (v_Vmc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Voc v_Vqc))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus v_Voc v_Vmc) 
                         (abst_plus v_Vqc v_Vmc))))) 
             (v_Vsc:(zen.term abst_T) =>
              v_Vtc:
              (zen.proof 
                 (zen.not 
                    (zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Voc v_Vqc))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_plus v_Voc v_Vsc) 
                                (abst_plus v_Vqc v_Vsc))))))) =>
              zen.Rnotimply 
                (zen.triangle (focal.is_true (abst_equal v_Voc v_Vqc))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus v_Voc v_Vsc) 
                         (abst_plus v_Vqc v_Vsc)))) 
                (v_Vuc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_equal v_Voc v_Vqc)))) =>
                 v_Vvc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_plus v_Voc v_Vsc) 
                                (abst_plus v_Vqc v_Vsc)))))) =>
                 zen.Rall abst_T 
                   (v_Vkc:(zen.term abst_T) =>
                    zen.forall abst_T 
                      (v_Vlc:(zen.term abst_T) =>
                       zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus v_Vkc v_Vlc) 
                               (abst_plus v_Vlc v_Vkc))))) v_Vsc 
                   (v_Vwc:
                    (zen.proof 
                       (zen.forall abst_T 
                          (v_Vlc:(zen.term abst_T) =>
                           zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus v_Vsc v_Vlc) 
                                   (abst_plus v_Vlc v_Vsc)))))) =>
                    zen.Rall abst_T 
                      (v_Vlc:(zen.term abst_T) =>
                       zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus v_Vsc v_Vlc) 
                               (abst_plus v_Vlc v_Vsc)))) v_Vqc 
                      (v_Vxc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus v_Vsc v_Vqc) 
                                   (abst_plus v_Vqc v_Vsc))))) =>
                       zen.Rall abst_T 
                         (v_Vkc:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vlc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vmc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vkc v_Vlc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_plus v_Vmc v_Vkc) 
                                           (abst_plus v_Vmc v_Vlc))))))) 
                         v_Voc 
                         (v_Vyc:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vlc:(zen.term abst_T) =>
                                 zen.forall abst_T 
                                   (v_Vmc:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Voc v_Vlc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus v_Vmc v_Voc) 
                                               (abst_plus v_Vmc v_Vlc)))))))) =>
                          zen.Rall abst_T 
                            (v_Vlc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vmc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Voc v_Vlc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_plus v_Vmc v_Voc) 
                                           (abst_plus v_Vmc v_Vlc)))))) 
                            v_Vqc 
                            (v_Vzc:
                             (zen.proof 
                                (zen.forall abst_T 
                                   (v_Vmc:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Voc v_Vqc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus v_Vmc v_Voc) 
                                               (abst_plus v_Vmc v_Vqc))))))) =>
                             zen.Rall abst_T 
                               (v_Vmc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Voc v_Vqc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_plus v_Vmc v_Voc) 
                                           (abst_plus v_Vmc v_Vqc))))) v_Vsc 
                               (v_Vad:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Voc v_Vqc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus v_Vsc v_Voc) 
                                               (abst_plus v_Vsc v_Vqc)))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Voc v_Vqc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_plus v_Vsc v_Voc) 
                                           (abst_plus v_Vsc v_Vqc)))) 
                                  (v_Vbd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Voc v_Vqc))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Voc v_Vqc))) v_Vuc 
                                     v_Vbd) 
                                  (v_Vcd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus v_Vsc v_Voc) 
                                               (abst_plus v_Vsc v_Vqc))))) =>
                                   zen.Rcut 
                                     (zen.and 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus v_Voc v_Vsc) 
                                                 (abst_plus v_Vsc v_Voc)))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus v_Voc v_Vsc) 
                                                    (abst_plus v_Vsc v_Voc)))))) 
                                     (v_Vdd:
                                      (zen.proof 
                                         (zen.and 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus v_Voc v_Vsc) 
                                                     (abst_plus v_Vsc v_Voc)))) 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus v_Voc 
                                                           v_Vsc) 
                                                        (abst_plus v_Vsc 
                                                           v_Voc))))))) =>
                                      zen.Rand 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus v_Voc v_Vsc) 
                                                 (abst_plus v_Vsc v_Voc)))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus v_Voc v_Vsc) 
                                                    (abst_plus v_Vsc v_Voc))))) 
                                        (v_Ved:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus v_Voc v_Vsc) 
                                                     (abst_plus v_Vsc v_Voc))))) =>
                                         v_Vfd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus v_Voc 
                                                           v_Vsc) 
                                                        (abst_plus v_Vsc 
                                                           v_Voc)))))) =>
                                         zen.Rall abst_T 
                                           (v_Vkc:(zen.term abst_T) =>
                                            zen.forall abst_T 
                                              (v_Vlc:(zen.term abst_T) =>
                                               zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus v_Vkc v_Vlc) 
                                                       (abst_plus v_Vlc v_Vkc))))) 
                                           v_Voc 
                                           (v_Vgd:
                                            (zen.proof 
                                               (zen.forall abst_T 
                                                  (v_Vlc:(zen.term abst_T) =>
                                                   zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus v_Voc 
                                                              v_Vlc) 
                                                           (abst_plus v_Vlc 
                                                              v_Voc)))))) =>
                                            zen.Rall abst_T 
                                              (v_Vlc:(zen.term abst_T) =>
                                               zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus v_Voc v_Vlc) 
                                                       (abst_plus v_Vlc v_Voc)))) 
                                              v_Vsc 
                                              (v_Vhd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus v_Voc 
                                                              v_Vsc) 
                                                           (abst_plus v_Vsc 
                                                              v_Voc))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus v_Voc 
                                                             v_Vsc) 
                                                          (abst_plus v_Vsc 
                                                             v_Voc)))) v_Vhd 
                                                 v_Vfd) v_Vgd) 
                                           abst_plus_commutes) v_Vdd) 
                                     (v_Vid:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.and 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_plus v_Voc 
                                                           v_Vsc) 
                                                        (abst_plus v_Vsc 
                                                           v_Voc)))) 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus v_Voc 
                                                              v_Vsc) 
                                                           (abst_plus v_Vsc 
                                                              v_Voc)))))))) =>
                                      zen.Rcut 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus v_Vsc v_Vqc) 
                                              (abst_plus v_Vqc v_Vsc))) 
                                        (v_Vjd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus v_Vsc v_Vqc) 
                                                  (abst_plus v_Vqc v_Vsc)))) =>
                                         zen.Rsubst basics.bool__t 
                                           (v_Vkd:
                                            (zen.term basics.bool__t) =>
                                            zen.triangle 
                                              (focal.is_true v_Vkd)) 
                                           (abst_equal 
                                              (abst_plus v_Vsc v_Voc) 
                                              (abst_plus v_Vsc v_Vqc)) 
                                           (abst_equal 
                                              (abst_plus v_Voc v_Vsc) 
                                              (abst_plus v_Vqc v_Vsc)) 
                                           (v_Vld:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_plus v_Vsc 
                                                              v_Voc) 
                                                           (abst_plus v_Vsc 
                                                              v_Vqc)) 
                                                        (abst_equal 
                                                           (abst_plus v_Voc 
                                                              v_Vsc) 
                                                           (abst_plus v_Vqc 
                                                              v_Vsc)))))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vmd:(zen.term abst_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal v_Vmd 
                                                          (abst_plus v_Vsc 
                                                             v_Vqc)) 
                                                       (abst_equal 
                                                          (abst_plus v_Voc 
                                                             v_Vsc) 
                                                          (abst_plus v_Vqc 
                                                             v_Vsc))))) 
                                              (abst_plus v_Vsc v_Voc) 
                                              (abst_plus v_Voc v_Vsc) 
                                              (v_Vnd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_plus v_Vsc 
                                                              v_Voc) 
                                                           (abst_plus v_Voc 
                                                              v_Vsc))))) =>
                                               zen.Rnotand 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus v_Voc 
                                                             v_Vsc) 
                                                          (abst_plus v_Vsc 
                                                             v_Voc)))) 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                v_Voc v_Vsc) 
                                                             (abst_plus 
                                                                v_Vsc v_Voc))))) 
                                                 (v_Vod:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                 (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc)))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus v_Voc 
                                                             v_Vsc) 
                                                          (abst_plus v_Vsc 
                                                             v_Voc))) 
                                                    (v_Vpd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_plus 
                                                                 v_Voc v_Vsc) 
                                                              (abst_plus 
                                                                 v_Vsc v_Voc)))) =>
                                                     zen.Rcut 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_plus 
                                                                v_Voc v_Vsc) 
                                                             (abst_plus 
                                                                v_Voc v_Vsc))) 
                                                       (v_Vqd:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                 (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc)))) =>
                                                        zen.Rsubst abst_T 
                                                          (v_Vrd:
                                                           (zen.term abst_T) =>
                                                           zen.triangle 
                                                             (zen.equal 
                                                                abst_T v_Vrd 
                                                                (abst_plus 
                                                                   v_Voc 
                                                                   v_Vsc))) 
                                                          (abst_plus v_Voc 
                                                             v_Vsc) 
                                                          (abst_plus v_Vsc 
                                                             v_Voc) 
                                                          (v_Ved:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                   (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc))) 
                                                             v_Vpd v_Ved) 
                                                          (v_Vsd:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (
                                                                    abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc)))) =>
                                                           zen.Rsubst abst_T 
                                                             (v_Vtd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                   v_Vtd)) 
                                                             (abst_plus 
                                                                v_Voc v_Vsc) 
                                                             (abst_plus 
                                                                v_Voc v_Vsc) 
                                                             (v_Vud:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                              zen.Rnoteq 
                                                                abst_T 
                                                                (abst_plus 
                                                                   v_Voc 
                                                                   v_Vsc) 
                                                                v_Vud) 
                                                             (v_Vsd:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                v_Vsd v_Vnd) 
                                                             v_Vsd) v_Vqd) 
                                                       (v_Vud:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (
                                                                    abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                        zen.Rnoteq abst_T 
                                                          (abst_plus v_Voc 
                                                             v_Vsc) v_Vud)) 
                                                    v_Vod) 
                                                 (v_Vvd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (
                                                                    abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc))))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                v_Voc v_Vsc) 
                                                             (abst_plus 
                                                                v_Vsc v_Voc)))) 
                                                    (v_Vhd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                 (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vkc:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vlc:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vmc:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkc 
                                                                    v_Vlc))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkc 
                                                                    v_Vmc))))))) 
                                                       (abst_plus v_Voc v_Vsc) 
                                                       (v_Vwd:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              abst_T 
                                                              (v_Vlc:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.forall 
                                                                 abst_T 
                                                                 (v_Vmc:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    v_Vlc))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    v_Vmc)))))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vlc:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vmc:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    v_Vlc))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    v_Vmc)))))) 
                                                          (abst_plus v_Vsc 
                                                             v_Voc) 
                                                          (v_Vxd:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 abst_T 
                                                                 (v_Vmc:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc)))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    v_Vmc))))))) =>
                                                           zen.Rall abst_T 
                                                             (v_Vmc:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    v_Vmc))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    v_Vmc))))) 
                                                             (abst_plus 
                                                                v_Vsc v_Vqc) 
                                                             (v_Vyd:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc)))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc))))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc))))) 
                                                                (v_Vfd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc)))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc)))) 
                                                                   v_Vhd 
                                                                   v_Vfd) 
                                                                (v_Vzd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))) 
                                                                   (v_Vae:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))) 
                                                                    v_Vcd 
                                                                    v_Vae) 
                                                                   (v_Vbe:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc))))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vkd:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vkd)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)) 
                                                                    (v_Vce:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vmd 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc))))) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (v_Vud:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    v_Vud) 
                                                                    (v_Vce:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vde:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    v_Vde) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc))))) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc) 
                                                                    (v_Vee:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc))) 
                                                                    v_Vjd 
                                                                    v_Vee) 
                                                                    (v_Vfe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)) 
                                                                    v_Vfe) 
                                                                    v_Vce) 
                                                                    v_Vce) 
                                                                    (v_Vge:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))) 
                                                                    v_Vge 
                                                                    v_Vvc) 
                                                                    v_Vbe) 
                                                                   v_Vzd) 
                                                                v_Vyd) v_Vxd) 
                                                          v_Vwd) 
                                                       abst_equal_transitive) 
                                                    v_Vvd) v_Vid) 
                                              (v_Vce:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 v_Voc v_Vsc) 
                                                              (abst_plus 
                                                                 v_Vsc v_Vqc)) 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 v_Voc v_Vsc) 
                                                              (abst_plus 
                                                                 v_Vqc v_Vsc)))))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Vde:(zen.term abst_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                v_Voc v_Vsc) 
                                                             v_Vde) 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                v_Voc v_Vsc) 
                                                             (abst_plus 
                                                                v_Vqc v_Vsc))))) 
                                                 (abst_plus v_Vsc v_Vqc) 
                                                 (abst_plus v_Vqc v_Vsc) 
                                                 (v_Vee:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_plus 
                                                                 v_Vsc v_Vqc) 
                                                              (abst_plus 
                                                                 v_Vqc v_Vsc))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus v_Vsc 
                                                             v_Vqc) 
                                                          (abst_plus v_Vqc 
                                                             v_Vsc))) v_Vjd 
                                                    v_Vee) 
                                                 (v_Vfe:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                 (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)) 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                 (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))))) =>
                                                  zen.Rnoteq basics.bool__t 
                                                    (abst_equal 
                                                       (abst_plus v_Voc v_Vsc) 
                                                       (abst_plus v_Vqc v_Vsc)) 
                                                    v_Vfe) v_Vce) v_Vld) 
                                           (v_Vge:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus v_Voc 
                                                           v_Vsc) 
                                                        (abst_plus v_Vqc 
                                                           v_Vsc))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus v_Voc v_Vsc) 
                                                       (abst_plus v_Vqc v_Vsc)))) 
                                              v_Vge v_Vvc) v_Vcd) 
                                        (v_Vee:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus v_Vsc v_Vqc) 
                                                     (abst_plus v_Vqc v_Vsc))))) =>
                                         zen.Rcut 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus v_Vsc v_Vqc) 
                                                    (abst_plus v_Vqc v_Vsc)))) 
                                           (v_Vxc:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus v_Vsc 
                                                           v_Vqc) 
                                                        (abst_plus v_Vqc 
                                                           v_Vsc))))) =>
                                            zen.Rall abst_T 
                                              (v_Vkc:(zen.term abst_T) =>
                                               zen.forall abst_T 
                                                 (v_Vlc:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vmc:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                v_Vkc v_Vlc))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vlc 
                                                                   v_Vmc))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vkc 
                                                                   v_Vmc))))))) 
                                              (abst_plus v_Vsc v_Voc) 
                                              (v_Vhe:
                                               (zen.proof 
                                                  (zen.forall abst_T 
                                                     (v_Vlc:
                                                      (zen.term abst_T) =>
                                                      zen.forall abst_T 
                                                        (v_Vmc:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    v_Vlc))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    v_Vmc)))))))) =>
                                               zen.Rall abst_T 
                                                 (v_Vlc:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vmc:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   v_Vsc 
                                                                   v_Voc) 
                                                                v_Vlc))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vlc 
                                                                   v_Vmc))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                   v_Vmc)))))) 
                                                 (abst_plus v_Vsc v_Vqc) 
                                                 (v_Vie:
                                                  (zen.proof 
                                                     (zen.forall abst_T 
                                                        (v_Vmc:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (
                                                                    abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc) 
                                                                    v_Vmc))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    v_Vmc))))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vmc:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   v_Vsc 
                                                                   v_Voc) 
                                                                (abst_plus 
                                                                   v_Vsc 
                                                                   v_Vqc)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc) 
                                                                   v_Vmc))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                   v_Vmc))))) 
                                                    (abst_plus v_Vqc v_Vsc) 
                                                    (v_Vje:
                                                     (zen.proof 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (
                                                                    abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc))))))) =>
                                                     zen.Rimply 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   v_Vsc 
                                                                   v_Voc) 
                                                                (abst_plus 
                                                                   v_Vsc 
                                                                   v_Vqc)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc) 
                                                                   (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                   (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc))))) 
                                                       (v_Vae:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                   (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))) 
                                                          v_Vcd v_Vae) 
                                                       (v_Vke:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc) 
                                                                   (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                   (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))) 
                                                          (v_Vle:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))) 
                                                             v_Vxc v_Vle) 
                                                          (v_Vme:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc))))) =>
                                                           zen.Rsubst 
                                                             basics.bool__t 
                                                             (v_Vkd:
                                                              (zen.term 
                                                                 basics.bool__t) =>
                                                              zen.triangle 
                                                                (focal.is_true 
                                                                   v_Vkd)) 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   v_Vsc 
                                                                   v_Voc) 
                                                                (abst_plus 
                                                                   v_Vqc 
                                                                   v_Vsc)) 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   v_Voc 
                                                                   v_Vsc) 
                                                                (abst_plus 
                                                                   v_Vqc 
                                                                   v_Vsc)) 
                                                             (v_Vne:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))))) =>
                                                              zen.Rsubst 
                                                                abst_T 
                                                                (v_Voe:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Voe 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc))))) 
                                                                (abst_plus 
                                                                   v_Vsc 
                                                                   v_Voc) 
                                                                (abst_plus 
                                                                   v_Voc 
                                                                   v_Vsc) 
                                                                (v_Vnd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                                 zen.Rnotand 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc)))) 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc))))) 
                                                                   (v_Vod:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc))) 
                                                                    (v_Vpd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc)))) =>
                                                                    zen.Reqsym 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    v_Vpd 
                                                                    v_Vnd) 
                                                                    v_Vod) 
                                                                   (v_Vvd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc)))) 
                                                                    (v_Vhd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vkc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vlc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vmc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkc 
                                                                    v_Vlc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkc 
                                                                    v_Vmc))))))) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (v_Vwd:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vlc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vmc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    v_Vlc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    v_Vmc)))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vlc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vmc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    v_Vlc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    v_Vmc)))))) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (v_Vxd:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vmc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    v_Vmc))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vmc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    v_Vmc))))) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc) 
                                                                    (v_Vpe:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc))))) 
                                                                    (v_Vfd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc)))) 
                                                                    v_Vhd 
                                                                    v_Vfd) 
                                                                    (v_Vqe:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))) 
                                                                    (v_Vre:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))) 
                                                                    v_Vme 
                                                                    v_Vre) 
                                                                    (v_Vge:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))) 
                                                                    v_Vge 
                                                                    v_Vvc) 
                                                                    v_Vqe) 
                                                                    v_Vpe) 
                                                                    v_Vxd) 
                                                                    v_Vwd) 
                                                                    abst_equal_transitive) 
                                                                    v_Vvd) 
                                                                   v_Vid) 
                                                                (v_Vfe:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))))) =>
                                                                 zen.Rsubst 
                                                                   abst_T 
                                                                   (v_Vde:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    v_Vde) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc))))) 
                                                                   (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc) 
                                                                   (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc) 
                                                                   (v_Vse:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc))))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc) 
                                                                    v_Vse) 
                                                                   (v_Vfe:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)) 
                                                                    v_Vfe) 
                                                                   v_Vfe) 
                                                                v_Vne) 
                                                             (v_Vge:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))) 
                                                                v_Vge v_Vvc) 
                                                             v_Vme) v_Vke) 
                                                       v_Vje) v_Vie) v_Vhe) 
                                              abst_equal_transitive) 
                                           (v_Vle:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus v_Vsc 
                                                              v_Vqc) 
                                                           (abst_plus v_Vqc 
                                                              v_Vsc)))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus v_Vsc v_Vqc) 
                                                       (abst_plus v_Vqc v_Vsc)))) 
                                              v_Vxc v_Vle)))) v_Vad) v_Vzc) 
                            v_Vyc) abst_plus_right_substitution_rule) v_Vwc) 
                   abst_plus_commutes) v_Vtc) v_Vrc) v_Vpc) v_Vnc).

def Additive_semi_group__plus_substitution_rule :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_plus_right_substitution_rule:(dk_logic.eP 
                                       (dk_logic.forall abst_T 
                                          (x:(cc.eT abst_T) =>
                                           dk_logic.forall abst_T 
                                             (y:(cc.eT abst_T) =>
                                              dk_logic.forall abst_T 
                                                (z:(cc.eT abst_T) =>
                                                 dk_logic.imp 
                                                   (dk_logic.ebP 
                                                      (abst_equal x y)) 
                                                   (dk_logic.ebP 
                                                      (abst_equal 
                                                         (abst_plus z x) 
                                                         (abst_plus z y)))))))) ->
  abst_plus_left_substitution_rule:(dk_logic.eP 
                                      (dk_logic.forall abst_T 
                                         (x:(cc.eT abst_T) =>
                                          dk_logic.forall abst_T 
                                            (y:(cc.eT abst_T) =>
                                             dk_logic.forall abst_T 
                                               (z:(cc.eT abst_T) =>
                                                dk_logic.imp 
                                                  (dk_logic.ebP 
                                                     (abst_equal x y)) 
                                                  (dk_logic.ebP 
                                                     (abst_equal 
                                                        (abst_plus x z) 
                                                        (abst_plus y z)))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x1:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (x2:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (y1:(cc.eT abst_T) =>
              dk_logic.forall abst_T 
                (y2:(cc.eT abst_T) =>
                 dk_logic.imp (dk_logic.ebP (abst_equal x1 x2)) 
                   (dk_logic.imp (dk_logic.ebP (abst_equal y1 y2)) 
                      (dk_logic.ebP 
                         (abst_equal (abst_plus x1 y1) (abst_plus x2 y2)))))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_plus_right_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.ebP (abst_equal (abst_plus z x) (abst_plus z y)))))))) =>
  abst_plus_left_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.ebP (abst_equal (abst_plus x z) (abst_plus y z)))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vkc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vlc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vmc:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vnc:(zen.term abst_T) =>
                 zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vkc v_Vlc))) 
                   (zen.imp 
                      (zen.triangle (focal.is_true (abst_equal v_Vmc v_Vnc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus v_Vkc v_Vmc) 
                               (abst_plus v_Vlc v_Vnc)))))))))) 
    (v_Voc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vkc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vlc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vmc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vnc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vkc v_Vlc))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vmc v_Vnc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_plus v_Vkc v_Vmc) 
                                      (abst_plus v_Vlc v_Vnc)))))))))))) =>
     zen.Rnotall abst_T 
       (v_Vkc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vlc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vmc:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vnc:(zen.term abst_T) =>
                 zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vkc v_Vlc))) 
                   (zen.imp 
                      (zen.triangle (focal.is_true (abst_equal v_Vmc v_Vnc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus v_Vkc v_Vmc) 
                               (abst_plus v_Vlc v_Vnc))))))))) 
       (v_Vpc:(zen.term abst_T) =>
        v_Vqc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vlc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vmc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vnc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vpc v_Vlc))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vmc v_Vnc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_plus v_Vpc v_Vmc) 
                                      (abst_plus v_Vlc v_Vnc))))))))))) =>
        zen.Rnotall abst_T 
          (v_Vlc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vmc:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vnc:(zen.term abst_T) =>
                 zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vpc v_Vlc))) 
                   (zen.imp 
                      (zen.triangle (focal.is_true (abst_equal v_Vmc v_Vnc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus v_Vpc v_Vmc) 
                               (abst_plus v_Vlc v_Vnc)))))))) 
          (v_Vrc:(zen.term abst_T) =>
           v_Vsc:
           (zen.proof 
              (zen.not 
                 (zen.forall abst_T 
                    (v_Vmc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vnc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vpc v_Vrc))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vmc v_Vnc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_plus v_Vpc v_Vmc) 
                                      (abst_plus v_Vrc v_Vnc)))))))))) =>
           zen.Rnotall abst_T 
             (v_Vmc:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vnc:(zen.term abst_T) =>
                 zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vpc v_Vrc))) 
                   (zen.imp 
                      (zen.triangle (focal.is_true (abst_equal v_Vmc v_Vnc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus v_Vpc v_Vmc) 
                               (abst_plus v_Vrc v_Vnc))))))) 
             (v_Vtc:(zen.term abst_T) =>
              v_Vuc:
              (zen.proof 
                 (zen.not 
                    (zen.forall abst_T 
                       (v_Vnc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vpc v_Vrc))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vtc v_Vnc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_plus v_Vpc v_Vtc) 
                                      (abst_plus v_Vrc v_Vnc))))))))) =>
              zen.Rnotall abst_T 
                (v_Vnc:(zen.term abst_T) =>
                 zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vpc v_Vrc))) 
                   (zen.imp 
                      (zen.triangle (focal.is_true (abst_equal v_Vtc v_Vnc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus v_Vpc v_Vtc) 
                               (abst_plus v_Vrc v_Vnc)))))) 
                (v_Vvc:(zen.term abst_T) =>
                 v_Vwc:
                 (zen.proof 
                    (zen.not 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vpc v_Vrc))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vtc v_Vvc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_plus v_Vpc v_Vtc) 
                                      (abst_plus v_Vrc v_Vvc)))))))) =>
                 zen.Rnotimply 
                   (zen.triangle (focal.is_true (abst_equal v_Vpc v_Vrc))) 
                   (zen.imp 
                      (zen.triangle (focal.is_true (abst_equal v_Vtc v_Vvc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus v_Vpc v_Vtc) 
                               (abst_plus v_Vrc v_Vvc))))) 
                   (v_Vxc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_equal v_Vpc v_Vrc)))) =>
                    v_Vyc:
                    (zen.proof 
                       (zen.not 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vtc v_Vvc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_plus v_Vpc v_Vtc) 
                                      (abst_plus v_Vrc v_Vvc))))))) =>
                    zen.Rnotimply 
                      (zen.triangle (focal.is_true (abst_equal v_Vtc v_Vvc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus v_Vpc v_Vtc) 
                               (abst_plus v_Vrc v_Vvc)))) 
                      (v_Vzc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vtc v_Vvc)))) =>
                       v_Vad:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_plus v_Vpc v_Vtc) 
                                      (abst_plus v_Vrc v_Vvc)))))) =>
                       zen.Rall abst_T 
                         (v_Vbd:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vcd:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vdd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vbd v_Vcd))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_plus v_Vdd v_Vbd) 
                                           (abst_plus v_Vdd v_Vcd))))))) 
                         v_Vtc 
                         (v_Ved:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vcd:(zen.term abst_T) =>
                                 zen.forall abst_T 
                                   (v_Vdd:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vtc v_Vcd))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus v_Vdd v_Vtc) 
                                               (abst_plus v_Vdd v_Vcd)))))))) =>
                          zen.Rall abst_T 
                            (v_Vcd:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vdd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vtc v_Vcd))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_plus v_Vdd v_Vtc) 
                                           (abst_plus v_Vdd v_Vcd)))))) 
                            v_Vvc 
                            (v_Vfd:
                             (zen.proof 
                                (zen.forall abst_T 
                                   (v_Vdd:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vtc v_Vvc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus v_Vdd v_Vtc) 
                                               (abst_plus v_Vdd v_Vvc))))))) =>
                             zen.Rall abst_T 
                               (v_Vdd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vtc v_Vvc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_plus v_Vdd v_Vtc) 
                                           (abst_plus v_Vdd v_Vvc))))) v_Vrc 
                               (v_Vgd:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vtc v_Vvc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus v_Vrc v_Vtc) 
                                               (abst_plus v_Vrc v_Vvc)))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vtc v_Vvc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_plus v_Vrc v_Vtc) 
                                           (abst_plus v_Vrc v_Vvc)))) 
                                  (v_Vhd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vtc v_Vvc))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vtc v_Vvc))) v_Vzc 
                                     v_Vhd) 
                                  (v_Vid:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus v_Vrc v_Vtc) 
                                               (abst_plus v_Vrc v_Vvc))))) =>
                                   zen.Rcut 
                                     (zen.and 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus v_Vpc v_Vtc) 
                                                 (abst_plus v_Vrc v_Vtc)))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus v_Vpc v_Vtc) 
                                                    (abst_plus v_Vrc v_Vtc)))))) 
                                     (v_Vjd:
                                      (zen.proof 
                                         (zen.and 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus v_Vpc v_Vtc) 
                                                     (abst_plus v_Vrc v_Vtc)))) 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus v_Vpc 
                                                           v_Vtc) 
                                                        (abst_plus v_Vrc 
                                                           v_Vtc))))))) =>
                                      zen.Rand 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus v_Vpc v_Vtc) 
                                                 (abst_plus v_Vrc v_Vtc)))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus v_Vpc v_Vtc) 
                                                    (abst_plus v_Vrc v_Vtc))))) 
                                        (v_Vkd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus v_Vpc v_Vtc) 
                                                     (abst_plus v_Vrc v_Vtc))))) =>
                                         v_Vld:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus v_Vpc 
                                                           v_Vtc) 
                                                        (abst_plus v_Vrc 
                                                           v_Vtc)))))) =>
                                         zen.Rall abst_T 
                                           (v_Vbd:(zen.term abst_T) =>
                                            zen.forall abst_T 
                                              (v_Vcd:(zen.term abst_T) =>
                                               zen.forall abst_T 
                                                 (v_Vdd:(zen.term abst_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vbd 
                                                             v_Vcd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                v_Vbd v_Vdd) 
                                                             (abst_plus 
                                                                v_Vcd v_Vdd))))))) 
                                           v_Vpc 
                                           (v_Vmd:
                                            (zen.proof 
                                               (zen.forall abst_T 
                                                  (v_Vcd:(zen.term abst_T) =>
                                                   zen.forall abst_T 
                                                     (v_Vdd:
                                                      (zen.term abst_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Vpc v_Vcd))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vdd) 
                                                                 (abst_plus 
                                                                    v_Vcd 
                                                                    v_Vdd)))))))) =>
                                            zen.Rall abst_T 
                                              (v_Vcd:(zen.term abst_T) =>
                                               zen.forall abst_T 
                                                 (v_Vdd:(zen.term abst_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vpc 
                                                             v_Vcd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                v_Vpc v_Vdd) 
                                                             (abst_plus 
                                                                v_Vcd v_Vdd)))))) 
                                              v_Vrc 
                                              (v_Vnd:
                                               (zen.proof 
                                                  (zen.forall abst_T 
                                                     (v_Vdd:
                                                      (zen.term abst_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Vpc v_Vrc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vdd) 
                                                                 (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vdd))))))) =>
                                               zen.Rall abst_T 
                                                 (v_Vdd:(zen.term abst_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vpc 
                                                             v_Vrc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                v_Vpc v_Vdd) 
                                                             (abst_plus 
                                                                v_Vrc v_Vdd))))) 
                                                 v_Vtc 
                                                 (v_Vod:
                                                  (zen.proof 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Vpc v_Vrc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc)))))) =>
                                                  zen.Rimply 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vpc 
                                                             v_Vrc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                v_Vpc v_Vtc) 
                                                             (abst_plus 
                                                                v_Vrc v_Vtc)))) 
                                                    (v_Vpd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    v_Vpc 
                                                                    v_Vrc))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                v_Vpc v_Vrc))) 
                                                       v_Vxc v_Vpd) 
                                                    (v_Vqd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   v_Vpc 
                                                                   v_Vtc) 
                                                                (abst_plus 
                                                                   v_Vrc 
                                                                   v_Vtc)))) 
                                                       v_Vqd v_Vld) v_Vod) 
                                                 v_Vnd) v_Vmd) 
                                           abst_plus_left_substitution_rule) 
                                        v_Vjd) 
                                     (v_Vrd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.and 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_plus v_Vpc 
                                                           v_Vtc) 
                                                        (abst_plus v_Vrc 
                                                           v_Vtc)))) 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus v_Vpc 
                                                              v_Vtc) 
                                                           (abst_plus v_Vrc 
                                                              v_Vtc)))))))) =>
                                      zen.Rcut 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus v_Vrc v_Vvc) 
                                              (abst_plus v_Vrc v_Vvc))) 
                                        (v_Vsd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus v_Vrc v_Vvc) 
                                                  (abst_plus v_Vrc v_Vvc)))) =>
                                         zen.Rsubst basics.bool__t 
                                           (v_Vtd:
                                            (zen.term basics.bool__t) =>
                                            zen.triangle 
                                              (focal.is_true v_Vtd)) 
                                           (abst_equal 
                                              (abst_plus v_Vrc v_Vtc) 
                                              (abst_plus v_Vrc v_Vvc)) 
                                           (abst_equal 
                                              (abst_plus v_Vpc v_Vtc) 
                                              (abst_plus v_Vrc v_Vvc)) 
                                           (v_Vud:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_plus v_Vrc 
                                                              v_Vtc) 
                                                           (abst_plus v_Vrc 
                                                              v_Vvc)) 
                                                        (abst_equal 
                                                           (abst_plus v_Vpc 
                                                              v_Vtc) 
                                                           (abst_plus v_Vrc 
                                                              v_Vvc)))))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vvd:(zen.term abst_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal v_Vvd 
                                                          (abst_plus v_Vrc 
                                                             v_Vvc)) 
                                                       (abst_equal 
                                                          (abst_plus v_Vpc 
                                                             v_Vtc) 
                                                          (abst_plus v_Vrc 
                                                             v_Vvc))))) 
                                              (abst_plus v_Vrc v_Vtc) 
                                              (abst_plus v_Vpc v_Vtc) 
                                              (v_Vwd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_plus v_Vrc 
                                                              v_Vtc) 
                                                           (abst_plus v_Vpc 
                                                              v_Vtc))))) =>
                                               zen.Rnotand 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus v_Vpc 
                                                             v_Vtc) 
                                                          (abst_plus v_Vrc 
                                                             v_Vtc)))) 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                v_Vpc v_Vtc) 
                                                             (abst_plus 
                                                                v_Vrc v_Vtc))))) 
                                                 (v_Vxd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc)))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus v_Vpc 
                                                             v_Vtc) 
                                                          (abst_plus v_Vrc 
                                                             v_Vtc))) 
                                                    (v_Vyd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_plus 
                                                                 v_Vpc v_Vtc) 
                                                              (abst_plus 
                                                                 v_Vrc v_Vtc)))) =>
                                                     zen.Rcut 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_plus 
                                                                v_Vpc v_Vtc) 
                                                             (abst_plus 
                                                                v_Vpc v_Vtc))) 
                                                       (v_Vzd:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc)))) =>
                                                        zen.Rsubst abst_T 
                                                          (v_Vae:
                                                           (zen.term abst_T) =>
                                                           zen.triangle 
                                                             (zen.equal 
                                                                abst_T v_Vae 
                                                                (abst_plus 
                                                                   v_Vpc 
                                                                   v_Vtc))) 
                                                          (abst_plus v_Vpc 
                                                             v_Vtc) 
                                                          (abst_plus v_Vrc 
                                                             v_Vtc) 
                                                          (v_Vkd:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                   (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc))) 
                                                             v_Vyd v_Vkd) 
                                                          (v_Vbe:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (
                                                                    abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc)))) =>
                                                           zen.Rsubst abst_T 
                                                             (v_Vce:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                   v_Vce)) 
                                                             (abst_plus 
                                                                v_Vpc v_Vtc) 
                                                             (abst_plus 
                                                                v_Vpc v_Vtc) 
                                                             (v_Vde:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc))))) =>
                                                              zen.Rnoteq 
                                                                abst_T 
                                                                (abst_plus 
                                                                   v_Vpc 
                                                                   v_Vtc) 
                                                                v_Vde) 
                                                             (v_Vbe:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc))) 
                                                                v_Vbe v_Vwd) 
                                                             v_Vbe) v_Vzd) 
                                                       (v_Vde:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (
                                                                    abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc))))) =>
                                                        zen.Rnoteq abst_T 
                                                          (abst_plus v_Vpc 
                                                             v_Vtc) v_Vde)) 
                                                    v_Vxd) 
                                                 (v_Vee:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (
                                                                    abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc))))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                v_Vpc v_Vtc) 
                                                             (abst_plus 
                                                                v_Vrc v_Vtc)))) 
                                                    (v_Vqd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vbd:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vcd:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vdd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vbd 
                                                                    v_Vcd))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vcd 
                                                                    v_Vdd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vbd 
                                                                    v_Vdd))))))) 
                                                       (abst_plus v_Vpc v_Vtc) 
                                                       (v_Vfe:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              abst_T 
                                                              (v_Vcd:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.forall 
                                                                 abst_T 
                                                                 (v_Vdd:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vcd))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vcd 
                                                                    v_Vdd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vdd)))))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vcd:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vdd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vcd))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vcd 
                                                                    v_Vdd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vdd)))))) 
                                                          (abst_plus v_Vrc 
                                                             v_Vtc) 
                                                          (v_Vge:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 abst_T 
                                                                 (v_Vdd:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vdd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vdd))))))) =>
                                                           zen.Rall abst_T 
                                                             (v_Vdd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vdd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vdd))))) 
                                                             (abst_plus 
                                                                v_Vrc v_Vvc) 
                                                             (v_Vhe:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc))))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                                (v_Vld:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc)))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                   v_Vqd 
                                                                   v_Vld) 
                                                                (v_Vie:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                   (v_Vje:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    v_Vid 
                                                                    v_Vje) 
                                                                   (v_Vke:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vtd:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vtd)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (v_Vle:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vvd 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (v_Vde:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc))))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vde) 
                                                                    (v_Vle:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vme:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vme) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (v_Vne:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc))) 
                                                                    v_Vsd 
                                                                    v_Vne) 
                                                                    (v_Vle:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    v_Vle) 
                                                                    v_Vle) 
                                                                    v_Vle) 
                                                                    (v_Vke:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    v_Vke 
                                                                    v_Vad) 
                                                                    v_Vke) 
                                                                   v_Vie) 
                                                                v_Vhe) v_Vge) 
                                                          v_Vfe) 
                                                       abst_equal_transitive) 
                                                    v_Vee) v_Vrd) 
                                              (v_Vle:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 v_Vpc v_Vtc) 
                                                              (abst_plus 
                                                                 v_Vrc v_Vvc)) 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 v_Vpc v_Vtc) 
                                                              (abst_plus 
                                                                 v_Vrc v_Vvc)))))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Vme:(zen.term abst_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                v_Vpc v_Vtc) 
                                                             v_Vme) 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                v_Vpc v_Vtc) 
                                                             (abst_plus 
                                                                v_Vrc v_Vvc))))) 
                                                 (abst_plus v_Vrc v_Vvc) 
                                                 (abst_plus v_Vrc v_Vvc) 
                                                 (v_Vne:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_plus 
                                                                 v_Vrc v_Vvc) 
                                                              (abst_plus 
                                                                 v_Vrc v_Vvc))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus v_Vrc 
                                                             v_Vvc) 
                                                          (abst_plus v_Vrc 
                                                             v_Vvc))) v_Vsd 
                                                    v_Vne) 
                                                 (v_Vle:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                  zen.Rnoteq basics.bool__t 
                                                    (abst_equal 
                                                       (abst_plus v_Vpc v_Vtc) 
                                                       (abst_plus v_Vrc v_Vvc)) 
                                                    v_Vle) v_Vle) v_Vud) 
                                           (v_Vke:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus v_Vpc 
                                                           v_Vtc) 
                                                        (abst_plus v_Vrc 
                                                           v_Vvc))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus v_Vpc v_Vtc) 
                                                       (abst_plus v_Vrc v_Vvc)))) 
                                              v_Vke v_Vad) v_Vid) 
                                        (v_Vne:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus v_Vrc v_Vvc) 
                                                     (abst_plus v_Vrc v_Vvc))))) =>
                                         zen.Rcut 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus v_Vrc v_Vvc) 
                                                    (abst_plus v_Vrc v_Vvc)))) 
                                           (v_Voe:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus v_Vrc 
                                                           v_Vvc) 
                                                        (abst_plus v_Vrc 
                                                           v_Vvc))))) =>
                                            zen.Rall abst_T 
                                              (v_Vbd:(zen.term abst_T) =>
                                               zen.forall abst_T 
                                                 (v_Vcd:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vdd:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                v_Vbd v_Vcd))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vcd 
                                                                   v_Vdd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vbd 
                                                                   v_Vdd))))))) 
                                              (abst_plus v_Vrc v_Vtc) 
                                              (v_Vpe:
                                               (zen.proof 
                                                  (zen.forall abst_T 
                                                     (v_Vcd:
                                                      (zen.term abst_T) =>
                                                      zen.forall abst_T 
                                                        (v_Vdd:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vcd))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Vcd 
                                                                    v_Vdd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vdd)))))))) =>
                                               zen.Rall abst_T 
                                                 (v_Vcd:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vdd:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   v_Vrc 
                                                                   v_Vtc) 
                                                                v_Vcd))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vcd 
                                                                   v_Vdd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                   v_Vdd)))))) 
                                                 (abst_plus v_Vrc v_Vvc) 
                                                 (v_Vqe:
                                                  (zen.proof 
                                                     (zen.forall abst_T 
                                                        (v_Vdd:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (
                                                                    abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    v_Vdd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vdd))))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vdd:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   v_Vrc 
                                                                   v_Vtc) 
                                                                (abst_plus 
                                                                   v_Vrc 
                                                                   v_Vvc)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                   v_Vdd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                   v_Vdd))))) 
                                                    (abst_plus v_Vrc v_Vvc) 
                                                    (v_Vre:
                                                     (zen.proof 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (
                                                                    abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc))))))) =>
                                                     zen.Rimply 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   v_Vrc 
                                                                   v_Vtc) 
                                                                (abst_plus 
                                                                   v_Vrc 
                                                                   v_Vvc)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                   (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                   (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                       (v_Vje:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                   (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                          v_Vid v_Vje) 
                                                       (v_Vse:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                   (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                   (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                          (v_Vte:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                             v_Voe v_Vte) 
                                                          (v_Vid:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                           zen.Rsubst 
                                                             basics.bool__t 
                                                             (v_Vtd:
                                                              (zen.term 
                                                                 basics.bool__t) =>
                                                              zen.triangle 
                                                                (focal.is_true 
                                                                   v_Vtd)) 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   v_Vrc 
                                                                   v_Vtc) 
                                                                (abst_plus 
                                                                   v_Vrc 
                                                                   v_Vvc)) 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   v_Vpc 
                                                                   v_Vtc) 
                                                                (abst_plus 
                                                                   v_Vrc 
                                                                   v_Vvc)) 
                                                             (v_Vud:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                              zen.Rsubst 
                                                                abst_T 
                                                                (v_Vvd:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vvd 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                                (abst_plus 
                                                                   v_Vrc 
                                                                   v_Vtc) 
                                                                (abst_plus 
                                                                   v_Vpc 
                                                                   v_Vtc) 
                                                                (v_Vwd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc))))) =>
                                                                 zen.Rnotand 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc))))) 
                                                                   (v_Vxd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc))) 
                                                                    (v_Vyd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc)))) =>
                                                                    zen.Reqsym 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vyd 
                                                                    v_Vwd) 
                                                                    v_Vxd) 
                                                                   (v_Vee:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (v_Vqd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vbd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vcd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vdd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vbd 
                                                                    v_Vcd))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vcd 
                                                                    v_Vdd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vbd 
                                                                    v_Vdd))))))) 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (v_Vfe:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vcd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vdd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vcd))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vcd 
                                                                    v_Vdd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vdd)))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vcd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vdd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vcd))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vcd 
                                                                    v_Vdd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vdd)))))) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (v_Vge:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vdd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vdd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vdd))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vdd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vdd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vdd))))) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (v_Vhe:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                                    (v_Vld:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    v_Vqd 
                                                                    v_Vld) 
                                                                    (v_Vie:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (v_Vje:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    v_Vid 
                                                                    v_Vje) 
                                                                    (v_Vke:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    v_Vke 
                                                                    v_Vad) 
                                                                    v_Vie) 
                                                                    v_Vhe) 
                                                                    v_Vge) 
                                                                    v_Vfe) 
                                                                    abst_equal_transitive) 
                                                                    v_Vee) 
                                                                   v_Vrd) 
                                                                (v_Vle:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                 zen.Rsubst 
                                                                   abst_T 
                                                                   (v_Vme:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vme) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                                   (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                   (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                   (v_Vne:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    v_Vne) 
                                                                   (v_Vle:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    v_Vle) 
                                                                   v_Vle) 
                                                                v_Vud) 
                                                             (v_Vke:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_plus 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                v_Vke v_Vad) 
                                                             v_Vid) v_Vse) 
                                                       v_Vre) v_Vqe) v_Vpe) 
                                              abst_equal_transitive) 
                                           (v_Vte:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus v_Vrc 
                                                              v_Vvc) 
                                                           (abst_plus v_Vrc 
                                                              v_Vvc)))))) =>
                                            zen.Rnoteq abst_T 
                                              (abst_plus v_Vrc v_Vvc) v_Vne)))) 
                                  v_Vgd) v_Vfd) v_Ved) 
                         abst_plus_right_substitution_rule) v_Vyc) v_Vwc) 
                v_Vuc) v_Vsc) v_Vqc) v_Voc).

def Additive_monoid__zero_is_unique :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (abst_equal x y)) 
                                   (dk_logic.ebP (abst_equal y x)))))) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_zero_is_neutral:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.and 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus x abst_zero) x)) 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus abst_zero x) x))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (o:(cc.eT abst_T) =>
        dk_logic.imp 
          (dk_logic.forall abst_T 
             (x:(cc.eT abst_T) => dk_logic.ebP (abst_equal x (abst_plus x o)))) 
          (dk_logic.ebP (abst_equal o abst_zero))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal y x)))))) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_zero_is_neutral:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.and (dk_logic.ebP (abst_equal (abst_plus x abst_zero) x)) 
           (dk_logic.ebP (abst_equal (abst_plus abst_zero x) x))))) =>
  (__D_1_LEMMA:
   (o:(cc.eT abst_T) ->
    H1:(dk_logic.eP 
          (dk_logic.forall abst_T 
             (x:(cc.eT abst_T) => dk_logic.ebP (abst_equal x (abst_plus x o))))) ->
    dk_logic.eP (dk_logic.ebP (abst_equal o abst_zero))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.imp 
           (zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.triangle 
                 (focal.is_true (abst_equal v_Vac (abst_plus v_Vac v_Vzb))))) 
           (zen.triangle (focal.is_true (abst_equal v_Vzb abst_zero))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.imp 
                  (zen.forall abst_T 
                     (v_Vac:(zen.term abst_T) =>
                      zen.triangle 
                        (focal.is_true 
                           (abst_equal v_Vac (abst_plus v_Vac v_Vzb))))) 
                  (zen.triangle (focal.is_true (abst_equal v_Vzb abst_zero))))))) =>
      zen.Raxiom 
        (zen.forall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.imp 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.triangle 
                    (focal.is_true (abst_equal v_Vac (abst_plus v_Vac v_Vzb))))) 
              (zen.triangle (focal.is_true (abst_equal v_Vzb abst_zero))))) 
        __D_1_LEMMA v_Vbc)) 
    (o:(cc.eT abst_T) =>
     H1:
     (dk_logic.eP 
        (dk_logic.forall abst_T 
           (x:(cc.eT abst_T) => dk_logic.ebP (abst_equal x (abst_plus x o))))) =>
     (__D_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP (abst_equal abst_zero (abst_plus abst_zero o)))) =>
      (__D_1_3_LEMMA:(dk_logic.eP (dk_logic.ebP (abst_equal o abst_zero))) =>
       zen.nnpp (zen.triangle (focal.is_true (abst_equal o abst_zero))) 
         (v_Vzb:
          (zen.proof 
             (zen.not (zen.triangle (focal.is_true (abst_equal o abst_zero))))) =>
          zen.Raxiom (zen.triangle (focal.is_true (abst_equal o abst_zero))) 
            __D_1_3_LEMMA v_Vzb)) 
        (zen.nnpp (zen.triangle (focal.is_true (abst_equal o abst_zero))) 
           (v_Vkc:
            (zen.proof 
               (zen.not 
                  (zen.triangle (focal.is_true (abst_equal o abst_zero))))) =>
            zen.Rall abst_T 
              (v_Vlc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vmc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vlc v_Vmc))) 
                    (zen.triangle (focal.is_true (abst_equal v_Vmc v_Vlc))))) 
              abst_zero 
              (v_Vnc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vmc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true (abst_equal abst_zero v_Vmc))) 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Vmc abst_zero)))))) =>
               zen.Rall abst_T 
                 (v_Vmc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true (abst_equal abst_zero v_Vmc))) 
                    (zen.triangle 
                       (focal.is_true (abst_equal v_Vmc abst_zero)))) o 
                 (v_Voc:
                  (zen.proof 
                     (zen.imp 
                        (zen.triangle 
                           (focal.is_true (abst_equal abst_zero o))) 
                        (zen.triangle 
                           (focal.is_true (abst_equal o abst_zero))))) =>
                  zen.Rimply 
                    (zen.triangle (focal.is_true (abst_equal abst_zero o))) 
                    (zen.triangle (focal.is_true (abst_equal o abst_zero))) 
                    (v_Vpc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true (abst_equal abst_zero o))))) =>
                     zen.Rcut 
                       (zen.and 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal abst_T abst_zero abst_zero))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal abst_zero abst_zero))))) 
                       (v_Vqc:
                        (zen.proof 
                           (zen.and 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal abst_T abst_zero abst_zero))) 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal abst_zero abst_zero)))))) =>
                        zen.Rand 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal abst_T abst_zero abst_zero))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal abst_zero abst_zero)))) 
                          (v_Vrc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal abst_T abst_zero abst_zero)))) =>
                           v_Vsc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal abst_zero abst_zero))))) =>
                           zen.Rnoteq abst_T abst_zero v_Vrc) v_Vqc) 
                       (v_Vtc:
                        (zen.proof 
                           (zen.not 
                              (zen.and 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal abst_T abst_zero abst_zero))) 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal abst_zero abst_zero))))))) =>
                        zen.Rcut 
                          (zen.triangle 
                             (zen.equal abst_T (abst_plus abst_zero o) o)) 
                          (v_Vuc:
                           (zen.proof 
                              (zen.triangle 
                                 (zen.equal abst_T (abst_plus abst_zero o) o))) =>
                           zen.Rsubst basics.bool__t 
                             (v_Vvc:(zen.term basics.bool__t) =>
                              zen.triangle (focal.is_true v_Vvc)) 
                             (abst_equal abst_zero (abst_plus abst_zero o)) 
                             (abst_equal abst_zero o) 
                             (v_Vwc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal basics.bool__t 
                                          (abst_equal abst_zero 
                                             (abst_plus abst_zero o)) 
                                          (abst_equal abst_zero o))))) =>
                              zen.Rsubst abst_T 
                                (v_Vxc:(zen.term abst_T) =>
                                 zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (abst_equal v_Vxc 
                                            (abst_plus abst_zero o)) 
                                         (abst_equal abst_zero o)))) 
                                abst_zero abst_zero 
                                (v_Vrc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal abst_T abst_zero 
                                             abst_zero)))) =>
                                 zen.Rnotand 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T abst_zero 
                                            abst_zero))) 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal abst_zero abst_zero)))) 
                                   (v_Vyc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal abst_T abst_zero 
                                                   abst_zero))))) =>
                                    zen.Rnotnot 
                                      (zen.triangle 
                                         (zen.equal abst_T abst_zero 
                                            abst_zero)) 
                                      (v_Vzc:
                                       (zen.proof 
                                          (zen.triangle 
                                             (zen.equal abst_T abst_zero 
                                                abst_zero))) =>
                                       zen.Rcut 
                                         (zen.triangle 
                                            (zen.equal abst_T abst_zero 
                                               abst_zero)) 
                                         (v_Vzc:
                                          (zen.proof 
                                             (zen.triangle 
                                                (zen.equal abst_T abst_zero 
                                                   abst_zero))) =>
                                          zen.Rsubst abst_T 
                                            (v_Vad:(zen.term abst_T) =>
                                             zen.triangle 
                                               (zen.equal abst_T v_Vad 
                                                  abst_zero)) abst_zero 
                                            abst_zero 
                                            (v_Vrc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         abst_zero abst_zero)))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     abst_zero abst_zero)) 
                                               v_Vzc v_Vrc) 
                                            (v_Vzc:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      abst_zero abst_zero))) =>
                                             zen.Rsubst abst_T 
                                               (v_Vbd:(zen.term abst_T) =>
                                                zen.triangle 
                                                  (zen.equal abst_T 
                                                     abst_zero v_Vbd)) 
                                               abst_zero abst_zero 
                                               (v_Vrc:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            abst_zero 
                                                            abst_zero)))) =>
                                                zen.Rnoteq abst_T abst_zero 
                                                  v_Vrc) 
                                               (v_Vzc:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         abst_zero abst_zero))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        abst_zero abst_zero)) 
                                                  v_Vzc v_Vrc) v_Vzc) v_Vzc) 
                                         (v_Vrc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      abst_zero abst_zero)))) =>
                                          zen.Rnoteq abst_T abst_zero v_Vrc)) 
                                      v_Vyc) 
                                   (v_Vcd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal abst_zero 
                                                      abst_zero)))))) =>
                                    zen.Rnotnot 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal abst_zero abst_zero))) 
                                      (v_Vdd:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal abst_zero 
                                                   abst_zero)))) =>
                                       zen.Rall abst_T 
                                         (v_Vlc:(zen.term abst_T) =>
                                          zen.forall abst_T 
                                            (v_Vmc:(zen.term abst_T) =>
                                             zen.forall abst_T 
                                               (v_Ved:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vlc 
                                                           v_Vmc))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Vmc 
                                                              v_Ved))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Vlc 
                                                              v_Ved))))))) 
                                         abst_zero 
                                         (v_Vfd:
                                          (zen.proof 
                                             (zen.forall abst_T 
                                                (v_Vmc:(zen.term abst_T) =>
                                                 zen.forall abst_T 
                                                   (v_Ved:
                                                    (zen.term abst_T) =>
                                                    zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               abst_zero 
                                                               v_Vmc))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  v_Vmc v_Ved))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  abst_zero 
                                                                  v_Ved)))))))) =>
                                          zen.Rall abst_T 
                                            (v_Vmc:(zen.term abst_T) =>
                                             zen.forall abst_T 
                                               (v_Ved:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           abst_zero v_Vmc))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Vmc 
                                                              v_Ved))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              abst_zero v_Ved)))))) 
                                            abst_zero 
                                            (v_Vgd:
                                             (zen.proof 
                                                (zen.forall abst_T 
                                                   (v_Ved:
                                                    (zen.term abst_T) =>
                                                    zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               abst_zero 
                                                               abst_zero))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  abst_zero 
                                                                  v_Ved))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  abst_zero 
                                                                  v_Ved))))))) =>
                                             zen.Rall abst_T 
                                               (v_Ved:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           abst_zero 
                                                           abst_zero))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              abst_zero v_Ved))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              abst_zero v_Ved))))) 
                                               (abst_plus abst_zero o) 
                                               (v_Vhd:
                                                (zen.proof 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               abst_zero 
                                                               abst_zero))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  abst_zero 
                                                                  (abst_plus 
                                                                    abst_zero 
                                                                    o)))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  abst_zero 
                                                                  (abst_plus 
                                                                    abst_zero 
                                                                    o))))))) =>
                                                zen.Rimply 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           abst_zero 
                                                           abst_zero))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              abst_zero 
                                                              (abst_plus 
                                                                 abst_zero o)))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              abst_zero 
                                                              (abst_plus 
                                                                 abst_zero o))))) 
                                                  (v_Vsc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  abst_zero 
                                                                  abst_zero))))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              abst_zero 
                                                              abst_zero))) 
                                                     v_Vdd v_Vsc) 
                                                  (v_Vid:
                                                   (zen.proof 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  abst_zero 
                                                                  (abst_plus 
                                                                    abst_zero 
                                                                    o)))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  abst_zero 
                                                                  (abst_plus 
                                                                    abst_zero 
                                                                    o)))))) =>
                                                   zen.Rimply 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              abst_zero 
                                                              (abst_plus 
                                                                 abst_zero o)))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              abst_zero 
                                                              (abst_plus 
                                                                 abst_zero o)))) 
                                                     (v_Vjd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    abst_zero 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    o)))))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 abst_zero 
                                                                 (abst_plus 
                                                                    abst_zero 
                                                                    o)))) 
                                                        __D_1_1_LEMMA v_Vjd) 
                                                     (__D_1_1_LEMMA:
                                                      (zen.proof 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  abst_zero 
                                                                  (abst_plus 
                                                                    abst_zero 
                                                                    o))))) =>
                                                      zen.Rsubst 
                                                        basics.bool__t 
                                                        (v_Vvc:
                                                         (zen.term 
                                                            basics.bool__t) =>
                                                         zen.triangle 
                                                           (focal.is_true 
                                                              v_Vvc)) 
                                                        (abst_equal 
                                                           abst_zero 
                                                           (abst_plus 
                                                              abst_zero o)) 
                                                        (abst_equal 
                                                           abst_zero o) 
                                                        (v_Vwc:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    o)) 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    o))))) =>
                                                         zen.Rsubst abst_T 
                                                           (v_Vxc:
                                                            (zen.term abst_T) =>
                                                            zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    v_Vxc 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    o)) 
                                                                    (
                                                                    abst_equal 
                                                                    abst_zero 
                                                                    o)))) 
                                                           abst_zero 
                                                           abst_zero 
                                                           (v_Vrc:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    abst_zero 
                                                                    abst_zero)))) =>
                                                            zen.Rnoteq 
                                                              abst_T 
                                                              abst_zero v_Vrc) 
                                                           (v_Vwc:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    o)) 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    o))))) =>
                                                            zen.Rsubst 
                                                              abst_T 
                                                              (v_Vkd:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    v_Vkd) 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    o)))) 
                                                              (abst_plus 
                                                                 abst_zero o) 
                                                              o 
                                                              (v_Vld:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    o) o)))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    o) o)) 
                                                                 v_Vuc v_Vld) 
                                                              (v_Vmd:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    o) 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    o))))) =>
                                                               zen.Rnoteq 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    abst_zero 
                                                                    o) v_Vmd) 
                                                              v_Vwc) v_Vwc) 
                                                        (v_Vnd:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    abst_zero 
                                                                    o)))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    abst_zero 
                                                                    o))) 
                                                           v_Vnd v_Vpc) 
                                                        __D_1_1_LEMMA) v_Vid) 
                                                  v_Vhd) v_Vgd) v_Vfd) 
                                         abst_equal_transitive) v_Vcd) v_Vtc) 
                                (v_Vwc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal basics.bool__t 
                                             (abst_equal abst_zero 
                                                (abst_plus abst_zero o)) 
                                             (abst_equal abst_zero o))))) =>
                                 zen.Rsubst abst_T 
                                   (v_Vkd:(zen.term abst_T) =>
                                    zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (abst_equal abst_zero v_Vkd) 
                                            (abst_equal abst_zero o)))) 
                                   (abst_plus abst_zero o) o 
                                   (v_Vld:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_plus abst_zero o) o)))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_plus abst_zero o) o)) 
                                      v_Vuc v_Vld) 
                                   (v_Vmd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal basics.bool__t 
                                                (abst_equal abst_zero o) 
                                                (abst_equal abst_zero o))))) =>
                                    zen.Rnoteq basics.bool__t 
                                      (abst_equal abst_zero o) v_Vmd) v_Vwc) 
                                v_Vwc) 
                             (v_Vnd:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal abst_zero o)))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true (abst_equal abst_zero o))) 
                                v_Vnd v_Vpc) __D_1_1_LEMMA) 
                          (v_Vld:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal abst_T 
                                       (abst_plus abst_zero o) o)))) =>
                           zen.Rcut 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_plus abst_zero o) o))) 
                             (v_Vod:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_plus abst_zero o) o)))) =>
                              zen.Rall abst_T 
                                (v_Vlc:(zen.term abst_T) =>
                                 zen.forall abst_T 
                                   (v_Vmc:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Ved:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vlc v_Vmc))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vmc v_Ved))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vlc v_Ved))))))) 
                                abst_zero 
                                (v_Vfd:
                                 (zen.proof 
                                    (zen.forall abst_T 
                                       (v_Vmc:(zen.term abst_T) =>
                                        zen.forall abst_T 
                                          (v_Ved:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal abst_zero 
                                                      v_Vmc))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vmc v_Ved))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal abst_zero 
                                                         v_Ved)))))))) =>
                                 zen.Rall abst_T 
                                   (v_Vmc:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Ved:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal abst_zero v_Vmc))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vmc v_Ved))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal abst_zero v_Ved)))))) 
                                   (abst_plus abst_zero o) 
                                   (v_Vpd:
                                    (zen.proof 
                                       (zen.forall abst_T 
                                          (v_Ved:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal abst_zero 
                                                      (abst_plus abst_zero o)))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            abst_zero o) 
                                                         v_Ved))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal abst_zero 
                                                         v_Ved))))))) =>
                                    zen.Rall abst_T 
                                      (v_Ved:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal abst_zero 
                                                  (abst_plus abst_zero o)))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus abst_zero o) 
                                                     v_Ved))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal abst_zero v_Ved))))) 
                                      o 
                                      (v_Vqd:
                                       (zen.proof 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal abst_zero 
                                                      (abst_plus abst_zero o)))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            abst_zero o) o))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal abst_zero o)))))) =>
                                       zen.Rimply 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal abst_zero 
                                                  (abst_plus abst_zero o)))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus abst_zero o) 
                                                     o))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal abst_zero o)))) 
                                         (v_Vjd:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal abst_zero 
                                                         (abst_plus 
                                                            abst_zero o)))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal abst_zero 
                                                     (abst_plus abst_zero o)))) 
                                            __D_1_1_LEMMA v_Vjd) 
                                         (v_Vrd:
                                          (zen.proof 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            abst_zero o) o))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal abst_zero o))))) =>
                                          zen.Rimply 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus abst_zero o) 
                                                     o))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal abst_zero o))) 
                                            (v_Vsd:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               abst_zero o) o))))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus abst_zero 
                                                           o) o))) v_Vod 
                                               v_Vsd) 
                                            (v_Vnd:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal abst_zero o)))) =>
                                             zen.Rsubst basics.bool__t 
                                               (v_Vvc:
                                                (zen.term basics.bool__t) =>
                                                zen.triangle 
                                                  (focal.is_true v_Vvc)) 
                                               (abst_equal abst_zero o) 
                                               (abst_equal abst_zero o) 
                                               (v_Vmd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (abst_equal 
                                                               abst_zero o) 
                                                            (abst_equal 
                                                               abst_zero o))))) =>
                                                zen.Rsubst abst_T 
                                                  (v_Vtd:(zen.term abst_T) =>
                                                   zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal v_Vtd 
                                                              o) 
                                                           (abst_equal 
                                                              abst_zero o)))) 
                                                  abst_zero abst_zero 
                                                  (v_Vrc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T 
                                                               abst_zero 
                                                               abst_zero)))) =>
                                                   zen.Rnotand 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              abst_zero 
                                                              abst_zero))) 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 abst_zero 
                                                                 abst_zero)))) 
                                                     (v_Vyc:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    abst_T 
                                                                    abst_zero 
                                                                    abst_zero))))) =>
                                                      zen.Rnotnot 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              abst_zero 
                                                              abst_zero)) 
                                                        (v_Vzc:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T 
                                                                  abst_zero 
                                                                  abst_zero))) =>
                                                         zen.Reqsym abst_T 
                                                           abst_zero 
                                                           abst_zero v_Vzc 
                                                           v_Vrc) v_Vyc) 
                                                     (v_Vcd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    abst_zero)))))) =>
                                                      zen.Rnotnot 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 abst_zero 
                                                                 abst_zero))) 
                                                        (v_Vdd:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    abst_zero 
                                                                    abst_zero)))) =>
                                                         zen.Rall abst_T 
                                                           (v_Vlc:
                                                            (zen.term abst_T) =>
                                                            zen.forall 
                                                              abst_T 
                                                              (v_Vmc:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.forall 
                                                                 abst_T 
                                                                 (v_Ved:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vmc 
                                                                    v_Ved))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Ved))))))) 
                                                           abst_zero 
                                                           (v_Vfd:
                                                            (zen.proof 
                                                               (zen.forall 
                                                                  abst_T 
                                                                  (v_Vmc:
                                                                   (zen.term 
                                                                    abst_T) =>
                                                                   zen.forall 
                                                                    abst_T 
                                                                    (v_Ved:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vmc 
                                                                    v_Ved))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    v_Ved)))))))) =>
                                                            zen.Rall abst_T 
                                                              (v_Vmc:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.forall 
                                                                 abst_T 
                                                                 (v_Ved:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    v_Vmc))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vmc 
                                                                    v_Ved))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    v_Ved)))))) 
                                                              abst_zero 
                                                              (v_Vgd:
                                                               (zen.proof 
                                                                  (zen.forall 
                                                                    abst_T 
                                                                    (v_Ved:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    abst_zero))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    v_Ved))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    v_Ved))))))) =>
                                                               zen.Rall 
                                                                 abst_T 
                                                                 (v_Ved:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    abst_zero))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    v_Ved))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    v_Ved))))) 
                                                                 o 
                                                                 (v_Vud:
                                                                  (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    abst_zero))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    o))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    o)))))) =>
                                                                  zen.Rimply 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    abst_zero))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    o))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    o)))) 
                                                                    (
                                                                    v_Vsc:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    abst_zero))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    abst_zero))) 
                                                                    v_Vdd 
                                                                    v_Vsc) 
                                                                    (
                                                                    v_Vvd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    o))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    o))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    o))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    o))) 
                                                                    (v_Vpc:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    o))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    o))) 
                                                                    v_Vnd 
                                                                    v_Vpc) 
                                                                    (v_Vnd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    o)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    abst_zero 
                                                                    o))) 
                                                                    v_Vnd 
                                                                    v_Vpc) 
                                                                    v_Vvd) 
                                                                    v_Vud) 
                                                                 v_Vgd) v_Vfd) 
                                                           abst_equal_transitive) 
                                                        v_Vcd) v_Vtc) 
                                                  (v_Vmd:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (abst_equal 
                                                                  abst_zero o) 
                                                               (abst_equal 
                                                                  abst_zero o))))) =>
                                                   zen.Rsubst abst_T 
                                                     (v_Vkd:
                                                      (zen.term abst_T) =>
                                                      zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 abst_zero 
                                                                 v_Vkd) 
                                                              (abst_equal 
                                                                 abst_zero o)))) 
                                                     o o 
                                                     (v_Vwd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T o o)))) =>
                                                      zen.Rnoteq abst_T o 
                                                        v_Vwd) 
                                                     (v_Vmd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (abst_equal 
                                                                    abst_zero 
                                                                    o) 
                                                                  (abst_equal 
                                                                    abst_zero 
                                                                    o))))) =>
                                                      zen.Rnoteq 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           abst_zero o) v_Vmd) 
                                                     v_Vmd) v_Vmd) 
                                               (v_Vnd:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            abst_zero o)))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           abst_zero o))) 
                                                  v_Vnd v_Vpc) v_Vnd) v_Vrd) 
                                         v_Vqd) v_Vpd) v_Vfd) 
                                abst_equal_transitive) 
                             (v_Vsd:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus abst_zero o) o))))) =>
                              zen.Rall abst_T 
                                (v_Vlc:(zen.term abst_T) =>
                                 zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus v_Vlc abst_zero) v_Vlc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus abst_zero v_Vlc) v_Vlc)))) 
                                o 
                                (v_Vxd:
                                 (zen.proof 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus o abst_zero) o))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus abst_zero o) o))))) =>
                                 zen.Rand 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_plus o abst_zero) 
                                            o))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_plus abst_zero o) 
                                            o))) 
                                   (v_Vyd:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus o abst_zero) o)))) =>
                                    v_Vod:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus abst_zero o) o)))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus abst_zero o) o))) 
                                      v_Vod v_Vsd) v_Vxd) 
                                abst_zero_is_neutral)))) 
                    (v_Vzd:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true (abst_equal o abst_zero)))) =>
                     zen.Raxiom 
                       (zen.triangle (focal.is_true (abst_equal o abst_zero))) 
                       v_Vzd v_Vkc) v_Voc) v_Vnc) abst_equal_symmetric))) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true (abst_equal abst_zero (abst_plus abst_zero o)))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal abst_zero (abst_plus abst_zero o)))))) =>
           zen.Rall abst_T 
             (v_Vac:(zen.term abst_T) =>
              zen.triangle 
                (focal.is_true (abst_equal v_Vac (abst_plus v_Vac o)))) 
             abst_zero 
             (v_Vbc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal abst_zero (abst_plus abst_zero o))))) =>
              zen.Raxiom 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal abst_zero (abst_plus abst_zero o)))) v_Vbc 
                v_Vzb) H1))).

def Cancellative_additive_semi_group__plus_is_right_regular :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_plus_commutes:(dk_logic.eP 
                        (dk_logic.forall abst_T 
                           (x:(cc.eT abst_T) =>
                            dk_logic.forall abst_T 
                              (y:(cc.eT abst_T) =>
                               dk_logic.ebP 
                                 (abst_equal (abst_plus x y) (abst_plus y x)))))) ->
  abst_plus_is_left_regular:(dk_logic.eP 
                               (dk_logic.forall abst_T 
                                  (x:(cc.eT abst_T) =>
                                   dk_logic.forall abst_T 
                                     (y:(cc.eT abst_T) =>
                                      dk_logic.forall abst_T 
                                        (z:(cc.eT abst_T) =>
                                         dk_logic.imp 
                                           (dk_logic.ebP 
                                              (abst_equal (abst_plus x y) 
                                                 (abst_plus x z))) 
                                           (dk_logic.ebP (abst_equal y z))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp 
                (dk_logic.ebP (abst_equal (abst_plus x z) (abst_plus y z))) 
                (dk_logic.ebP (abst_equal x y))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_plus_commutes:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.ebP (abst_equal (abst_plus x y) (abst_plus y x)))))) =>
  abst_plus_is_left_regular:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp 
                 (dk_logic.ebP (abst_equal (abst_plus x y) (abst_plus x z))) 
                 (dk_logic.ebP (abst_equal y z))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vkc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vlc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vmc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus v_Vkc v_Vmc) 
                         (abst_plus v_Vlc v_Vmc)))) 
                (zen.triangle (focal.is_true (abst_equal v_Vkc v_Vlc))))))) 
    (v_Vnc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vkc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vlc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vmc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_plus v_Vkc v_Vmc) 
                                (abst_plus v_Vlc v_Vmc)))) 
                       (zen.triangle (focal.is_true (abst_equal v_Vkc v_Vlc))))))))) =>
     zen.Rnotall abst_T 
       (v_Vkc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vlc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vmc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus v_Vkc v_Vmc) 
                         (abst_plus v_Vlc v_Vmc)))) 
                (zen.triangle (focal.is_true (abst_equal v_Vkc v_Vlc)))))) 
       (v_Voc:(zen.term abst_T) =>
        v_Vpc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vlc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vmc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_plus v_Voc v_Vmc) 
                                (abst_plus v_Vlc v_Vmc)))) 
                       (zen.triangle (focal.is_true (abst_equal v_Voc v_Vlc)))))))) =>
        zen.Rnotall abst_T 
          (v_Vlc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vmc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus v_Voc v_Vmc) 
                         (abst_plus v_Vlc v_Vmc)))) 
                (zen.triangle (focal.is_true (abst_equal v_Voc v_Vlc))))) 
          (v_Vqc:(zen.term abst_T) =>
           v_Vrc:
           (zen.proof 
              (zen.not 
                 (zen.forall abst_T 
                    (v_Vmc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_plus v_Voc v_Vmc) 
                                (abst_plus v_Vqc v_Vmc)))) 
                       (zen.triangle (focal.is_true (abst_equal v_Voc v_Vqc))))))) =>
           zen.Rnotall abst_T 
             (v_Vmc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus v_Voc v_Vmc) 
                         (abst_plus v_Vqc v_Vmc)))) 
                (zen.triangle (focal.is_true (abst_equal v_Voc v_Vqc)))) 
             (v_Vsc:(zen.term abst_T) =>
              v_Vtc:
              (zen.proof 
                 (zen.not 
                    (zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_plus v_Voc v_Vsc) 
                                (abst_plus v_Vqc v_Vsc)))) 
                       (zen.triangle (focal.is_true (abst_equal v_Voc v_Vqc)))))) =>
              zen.Rnotimply 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus v_Voc v_Vsc) 
                         (abst_plus v_Vqc v_Vsc)))) 
                (zen.triangle (focal.is_true (abst_equal v_Voc v_Vqc))) 
                (v_Vuc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_plus v_Voc v_Vsc) 
                             (abst_plus v_Vqc v_Vsc))))) =>
                 v_Vvc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_equal v_Voc v_Vqc))))) =>
                 zen.Rall abst_T 
                   (v_Vkc:(zen.term abst_T) =>
                    zen.forall abst_T 
                      (v_Vlc:(zen.term abst_T) =>
                       zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus v_Vkc v_Vlc) 
                               (abst_plus v_Vlc v_Vkc))))) v_Vsc 
                   (v_Vwc:
                    (zen.proof 
                       (zen.forall abst_T 
                          (v_Vlc:(zen.term abst_T) =>
                           zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus v_Vsc v_Vlc) 
                                   (abst_plus v_Vlc v_Vsc)))))) =>
                    zen.Rall abst_T 
                      (v_Vkc:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vlc:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vmc:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_plus v_Vkc v_Vlc) 
                                        (abst_plus v_Vkc v_Vmc)))) 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vlc v_Vmc)))))) 
                      v_Vsc 
                      (v_Vxc:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vlc:(zen.term abst_T) =>
                              zen.forall abst_T 
                                (v_Vmc:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_plus v_Vsc v_Vlc) 
                                            (abst_plus v_Vsc v_Vmc)))) 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vlc v_Vmc))))))) =>
                       zen.Rall abst_T 
                         (v_Vkc:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vlc:(zen.term abst_T) =>
                             zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_plus v_Vkc v_Vlc) 
                                     (abst_plus v_Vlc v_Vkc))))) v_Vqc 
                         (v_Vyc:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vlc:(zen.term abst_T) =>
                                 zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus v_Vqc v_Vlc) 
                                         (abst_plus v_Vlc v_Vqc)))))) =>
                          zen.Rall abst_T 
                            (v_Vlc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vmc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_plus v_Vsc v_Vlc) 
                                           (abst_plus v_Vsc v_Vmc)))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vlc v_Vmc))))) 
                            v_Voc 
                            (v_Vzc:
                             (zen.proof 
                                (zen.forall abst_T 
                                   (v_Vmc:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus v_Vsc v_Voc) 
                                               (abst_plus v_Vsc v_Vmc)))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Voc v_Vmc)))))) =>
                             zen.Rall abst_T 
                               (v_Vmc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_plus v_Vsc v_Voc) 
                                           (abst_plus v_Vsc v_Vmc)))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Voc v_Vmc)))) 
                               v_Vqc 
                               (v_Vad:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus v_Vsc v_Voc) 
                                               (abst_plus v_Vsc v_Vqc)))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Voc v_Vqc))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_plus v_Vsc v_Voc) 
                                           (abst_plus v_Vsc v_Vqc)))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Voc v_Vqc))) 
                                  (v_Vbd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus v_Vsc v_Voc) 
                                                  (abst_plus v_Vsc v_Vqc)))))) =>
                                   zen.Rcut 
                                     (zen.and 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus v_Vsc v_Voc) 
                                                 (abst_plus v_Voc v_Vsc)))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus v_Vsc v_Voc) 
                                                    (abst_plus v_Voc v_Vsc)))))) 
                                     (v_Vcd:
                                      (zen.proof 
                                         (zen.and 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus v_Vsc v_Voc) 
                                                     (abst_plus v_Voc v_Vsc)))) 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus v_Vsc 
                                                           v_Voc) 
                                                        (abst_plus v_Voc 
                                                           v_Vsc))))))) =>
                                      zen.Rand 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus v_Vsc v_Voc) 
                                                 (abst_plus v_Voc v_Vsc)))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus v_Vsc v_Voc) 
                                                    (abst_plus v_Voc v_Vsc))))) 
                                        (v_Vdd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus v_Vsc v_Voc) 
                                                     (abst_plus v_Voc v_Vsc))))) =>
                                         v_Ved:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus v_Vsc 
                                                           v_Voc) 
                                                        (abst_plus v_Voc 
                                                           v_Vsc)))))) =>
                                         zen.Rall abst_T 
                                           (v_Vlc:(zen.term abst_T) =>
                                            zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus v_Vsc v_Vlc) 
                                                    (abst_plus v_Vlc v_Vsc)))) 
                                           v_Voc 
                                           (v_Vfd:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus v_Vsc 
                                                           v_Voc) 
                                                        (abst_plus v_Voc 
                                                           v_Vsc))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus v_Vsc v_Voc) 
                                                       (abst_plus v_Voc v_Vsc)))) 
                                              v_Vfd v_Ved) v_Vwc) v_Vcd) 
                                     (v_Vgd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.and 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_plus v_Vsc 
                                                           v_Voc) 
                                                        (abst_plus v_Voc 
                                                           v_Vsc)))) 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus v_Vsc 
                                                              v_Voc) 
                                                           (abst_plus v_Voc 
                                                              v_Vsc)))))))) =>
                                      zen.Rcut 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus v_Vqc v_Vsc) 
                                              (abst_plus v_Vsc v_Vqc))) 
                                        (v_Vhd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus v_Vqc v_Vsc) 
                                                  (abst_plus v_Vsc v_Vqc)))) =>
                                         zen.Rsubst basics.bool__t 
                                           (v_Vid:
                                            (zen.term basics.bool__t) =>
                                            zen.triangle 
                                              (focal.is_true v_Vid)) 
                                           (abst_equal 
                                              (abst_plus v_Voc v_Vsc) 
                                              (abst_plus v_Vqc v_Vsc)) 
                                           (abst_equal 
                                              (abst_plus v_Vsc v_Voc) 
                                              (abst_plus v_Vsc v_Vqc)) 
                                           (v_Vjd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_plus v_Voc 
                                                              v_Vsc) 
                                                           (abst_plus v_Vqc 
                                                              v_Vsc)) 
                                                        (abst_equal 
                                                           (abst_plus v_Vsc 
                                                              v_Voc) 
                                                           (abst_plus v_Vsc 
                                                              v_Vqc)))))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vkd:(zen.term abst_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal v_Vkd 
                                                          (abst_plus v_Vqc 
                                                             v_Vsc)) 
                                                       (abst_equal 
                                                          (abst_plus v_Vsc 
                                                             v_Voc) 
                                                          (abst_plus v_Vsc 
                                                             v_Vqc))))) 
                                              (abst_plus v_Voc v_Vsc) 
                                              (abst_plus v_Vsc v_Voc) 
                                              (v_Vld:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_plus v_Voc 
                                                              v_Vsc) 
                                                           (abst_plus v_Vsc 
                                                              v_Voc))))) =>
                                               zen.Rnotand 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus v_Vsc 
                                                             v_Voc) 
                                                          (abst_plus v_Voc 
                                                             v_Vsc)))) 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                v_Vsc v_Voc) 
                                                             (abst_plus 
                                                                v_Voc v_Vsc))))) 
                                                 (v_Vmd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                 (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc)))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus v_Vsc 
                                                             v_Voc) 
                                                          (abst_plus v_Voc 
                                                             v_Vsc))) 
                                                    (v_Vnd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_plus 
                                                                 v_Vsc v_Voc) 
                                                              (abst_plus 
                                                                 v_Voc v_Vsc)))) =>
                                                     zen.Rcut 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_plus 
                                                                v_Vsc v_Voc) 
                                                             (abst_plus 
                                                                v_Vsc v_Voc))) 
                                                       (v_Vod:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                 (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc)))) =>
                                                        zen.Rsubst abst_T 
                                                          (v_Vpd:
                                                           (zen.term abst_T) =>
                                                           zen.triangle 
                                                             (zen.equal 
                                                                abst_T v_Vpd 
                                                                (abst_plus 
                                                                   v_Vsc 
                                                                   v_Voc))) 
                                                          (abst_plus v_Vsc 
                                                             v_Voc) 
                                                          (abst_plus v_Voc 
                                                             v_Vsc) 
                                                          (v_Vdd:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                   (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                             v_Vnd v_Vdd) 
                                                          (v_Vqd:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (
                                                                    abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc)))) =>
                                                           zen.Rsubst abst_T 
                                                             (v_Vrd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                   v_Vrd)) 
                                                             (abst_plus 
                                                                v_Vsc v_Voc) 
                                                             (abst_plus 
                                                                v_Vsc v_Voc) 
                                                             (v_Vsd:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc))))) =>
                                                              zen.Rnoteq 
                                                                abst_T 
                                                                (abst_plus 
                                                                   v_Vsc 
                                                                   v_Voc) 
                                                                v_Vsd) 
                                                             (v_Vqd:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc))) 
                                                                v_Vqd v_Vld) 
                                                             v_Vqd) v_Vod) 
                                                       (v_Vsd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (
                                                                    abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc))))) =>
                                                        zen.Rnoteq abst_T 
                                                          (abst_plus v_Vsc 
                                                             v_Voc) v_Vsd)) 
                                                    v_Vmd) 
                                                 (v_Vtd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (
                                                                    abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc))))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                v_Vsc v_Voc) 
                                                             (abst_plus 
                                                                v_Voc v_Vsc)))) 
                                                    (v_Vfd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                 (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vkc:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vlc:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vmc:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkc 
                                                                    v_Vlc))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkc 
                                                                    v_Vmc))))))) 
                                                       (abst_plus v_Vsc v_Voc) 
                                                       (v_Vud:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              abst_T 
                                                              (v_Vlc:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.forall 
                                                                 abst_T 
                                                                 (v_Vmc:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    v_Vlc))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    v_Vmc)))))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vlc:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vmc:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    v_Vlc))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    v_Vmc)))))) 
                                                          (abst_plus v_Voc 
                                                             v_Vsc) 
                                                          (v_Vvd:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 abst_T 
                                                                 (v_Vmc:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    v_Vmc))))))) =>
                                                           zen.Rall abst_T 
                                                             (v_Vmc:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    v_Vmc))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    v_Vmc))))) 
                                                             (abst_plus 
                                                                v_Vqc v_Vsc) 
                                                             (v_Vwd:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc))))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc))))) 
                                                                (v_Ved:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc)))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                   v_Vfd 
                                                                   v_Ved) 
                                                                (v_Vxd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))) 
                                                                   (v_Vyd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))) 
                                                                    v_Vuc 
                                                                    v_Vyd) 
                                                                   (v_Vzd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc))))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vid:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vid)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)) 
                                                                    (v_Vae:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vkd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vkd 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc))))) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (v_Vsd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc))))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    v_Vsd) 
                                                                    (v_Vae:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vbe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    v_Vbe) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc))))) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc) 
                                                                    (v_Vce:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc))) 
                                                                    v_Vhd 
                                                                    v_Vce) 
                                                                    (v_Vde:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)) 
                                                                    v_Vde) 
                                                                    v_Vae) 
                                                                    v_Vae) 
                                                                    (v_Vee:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))) 
                                                                    v_Vee 
                                                                    v_Vbd) 
                                                                    v_Vzd) 
                                                                   v_Vxd) 
                                                                v_Vwd) v_Vvd) 
                                                          v_Vud) 
                                                       abst_equal_transitive) 
                                                    v_Vtd) v_Vgd) 
                                              (v_Vae:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 v_Vsc v_Voc) 
                                                              (abst_plus 
                                                                 v_Vqc v_Vsc)) 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 v_Vsc v_Voc) 
                                                              (abst_plus 
                                                                 v_Vsc v_Vqc)))))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Vbe:(zen.term abst_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                v_Vsc v_Voc) 
                                                             v_Vbe) 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                v_Vsc v_Voc) 
                                                             (abst_plus 
                                                                v_Vsc v_Vqc))))) 
                                                 (abst_plus v_Vqc v_Vsc) 
                                                 (abst_plus v_Vsc v_Vqc) 
                                                 (v_Vce:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_plus 
                                                                 v_Vqc v_Vsc) 
                                                              (abst_plus 
                                                                 v_Vsc v_Vqc))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus v_Vqc 
                                                             v_Vsc) 
                                                          (abst_plus v_Vsc 
                                                             v_Vqc))) v_Vhd 
                                                    v_Vce) 
                                                 (v_Vde:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                 (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)) 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                 (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))))) =>
                                                  zen.Rnoteq basics.bool__t 
                                                    (abst_equal 
                                                       (abst_plus v_Vsc v_Voc) 
                                                       (abst_plus v_Vsc v_Vqc)) 
                                                    v_Vde) v_Vae) v_Vjd) 
                                           (v_Vee:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus v_Vsc 
                                                           v_Voc) 
                                                        (abst_plus v_Vsc 
                                                           v_Vqc))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus v_Vsc v_Voc) 
                                                       (abst_plus v_Vsc v_Vqc)))) 
                                              v_Vee v_Vbd) v_Vuc) 
                                        (v_Vce:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus v_Vqc v_Vsc) 
                                                     (abst_plus v_Vsc v_Vqc))))) =>
                                         zen.Rcut 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus v_Vqc v_Vsc) 
                                                    (abst_plus v_Vsc v_Vqc)))) 
                                           (v_Vfe:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus v_Vqc 
                                                           v_Vsc) 
                                                        (abst_plus v_Vsc 
                                                           v_Vqc))))) =>
                                            zen.Rall abst_T 
                                              (v_Vkc:(zen.term abst_T) =>
                                               zen.forall abst_T 
                                                 (v_Vlc:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vmc:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                v_Vkc v_Vlc))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vlc 
                                                                   v_Vmc))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vkc 
                                                                   v_Vmc))))))) 
                                              (abst_plus v_Voc v_Vsc) 
                                              (v_Vge:
                                               (zen.proof 
                                                  (zen.forall abst_T 
                                                     (v_Vlc:
                                                      (zen.term abst_T) =>
                                                      zen.forall abst_T 
                                                        (v_Vmc:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    v_Vlc))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    v_Vmc)))))))) =>
                                               zen.Rall abst_T 
                                                 (v_Vlc:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vmc:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   v_Voc 
                                                                   v_Vsc) 
                                                                v_Vlc))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vlc 
                                                                   v_Vmc))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                   v_Vmc)))))) 
                                                 (abst_plus v_Vqc v_Vsc) 
                                                 (v_Vhe:
                                                  (zen.proof 
                                                     (zen.forall abst_T 
                                                        (v_Vmc:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (
                                                                    abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc) 
                                                                    v_Vmc))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    v_Vmc))))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vmc:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   v_Voc 
                                                                   v_Vsc) 
                                                                (abst_plus 
                                                                   v_Vqc 
                                                                   v_Vsc)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc) 
                                                                   v_Vmc))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                   v_Vmc))))) 
                                                    (abst_plus v_Vsc v_Vqc) 
                                                    (v_Vie:
                                                     (zen.proof 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (
                                                                    abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc))))))) =>
                                                     zen.Rimply 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   v_Voc 
                                                                   v_Vsc) 
                                                                (abst_plus 
                                                                   v_Vqc 
                                                                   v_Vsc)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc) 
                                                                   (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                   (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc))))) 
                                                       (v_Vyd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                   (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc)))) 
                                                          v_Vuc v_Vyd) 
                                                       (v_Vje:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc) 
                                                                   (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                   (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))) 
                                                          (v_Vke:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vqc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))) 
                                                             v_Vfe v_Vke) 
                                                          (v_Vle:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc))))) =>
                                                           zen.Rsubst 
                                                             basics.bool__t 
                                                             (v_Vid:
                                                              (zen.term 
                                                                 basics.bool__t) =>
                                                              zen.triangle 
                                                                (focal.is_true 
                                                                   v_Vid)) 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   v_Voc 
                                                                   v_Vsc) 
                                                                (abst_plus 
                                                                   v_Vsc 
                                                                   v_Vqc)) 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   v_Vsc 
                                                                   v_Voc) 
                                                                (abst_plus 
                                                                   v_Vsc 
                                                                   v_Vqc)) 
                                                             (v_Vme:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))))) =>
                                                              zen.Rsubst 
                                                                abst_T 
                                                                (v_Vne:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vne 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc))))) 
                                                                (abst_plus 
                                                                   v_Voc 
                                                                   v_Vsc) 
                                                                (abst_plus 
                                                                   v_Vsc 
                                                                   v_Voc) 
                                                                (v_Vld:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc))))) =>
                                                                 zen.Rnotand 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc))))) 
                                                                   (v_Vmd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    (v_Vnd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc)))) =>
                                                                    zen.Reqsym 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    v_Vnd 
                                                                    v_Vld) 
                                                                    v_Vmd) 
                                                                   (v_Vtd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                    (v_Vfd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vkc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vlc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vmc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkc 
                                                                    v_Vlc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkc 
                                                                    v_Vmc))))))) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (v_Vud:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vlc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vmc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    v_Vlc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    v_Vmc)))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vlc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vmc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    v_Vlc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    v_Vmc)))))) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (v_Vvd:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vmc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    v_Vmc))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vmc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    v_Vmc))))) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc) 
                                                                    (v_Voe:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc))))) 
                                                                    (v_Ved:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                    v_Vfd 
                                                                    v_Ved) 
                                                                    (v_Vpe:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))) 
                                                                    (v_Vqe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))) 
                                                                    v_Vle 
                                                                    v_Vqe) 
                                                                    (v_Vee:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))) 
                                                                    v_Vee 
                                                                    v_Vbd) 
                                                                    v_Vpe) 
                                                                    v_Voe) 
                                                                    v_Vvd) 
                                                                    v_Vud) 
                                                                    abst_equal_transitive) 
                                                                    v_Vtd) 
                                                                   v_Vgd) 
                                                                (v_Vde:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))))) =>
                                                                 zen.Rsubst 
                                                                   abst_T 
                                                                   (v_Vbe:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    v_Vbe) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc))))) 
                                                                   (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc) 
                                                                   (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc) 
                                                                   (v_Vre:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc))))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc) 
                                                                    v_Vre) 
                                                                   (v_Vde:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)) 
                                                                    v_Vde) 
                                                                   v_Vde) 
                                                                v_Vme) 
                                                             (v_Vee:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Voc) 
                                                                    (abst_plus 
                                                                    v_Vsc 
                                                                    v_Vqc)))) 
                                                                v_Vee v_Vbd) 
                                                             v_Vle) v_Vje) 
                                                       v_Vie) v_Vhe) v_Vge) 
                                              abst_equal_transitive) 
                                           (v_Vke:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus v_Vqc 
                                                              v_Vsc) 
                                                           (abst_plus v_Vsc 
                                                              v_Vqc)))))) =>
                                            zen.Rall abst_T 
                                              (v_Vlc:(zen.term abst_T) =>
                                               zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus v_Vqc v_Vlc) 
                                                       (abst_plus v_Vlc v_Vqc)))) 
                                              v_Vsc 
                                              (v_Vfe:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus v_Vqc 
                                                              v_Vsc) 
                                                           (abst_plus v_Vsc 
                                                              v_Vqc))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus v_Vqc 
                                                             v_Vsc) 
                                                          (abst_plus v_Vsc 
                                                             v_Vqc)))) v_Vfe 
                                                 v_Vke) v_Vyc)))) 
                                  (v_Vse:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Voc v_Vqc)))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Voc v_Vqc))) v_Vse 
                                     v_Vvc) v_Vad) v_Vzc) v_Vxc) 
                         abst_plus_commutes) abst_plus_is_left_regular) 
                   abst_plus_commutes) v_Vtc) v_Vrc) v_Vpc) v_Vnc).

def Cancellative_additive_semi_group__plus_is_regular :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_plus_is_left_regular:(dk_logic.eP 
                               (dk_logic.forall abst_T 
                                  (x:(cc.eT abst_T) =>
                                   dk_logic.forall abst_T 
                                     (y:(cc.eT abst_T) =>
                                      dk_logic.forall abst_T 
                                        (z:(cc.eT abst_T) =>
                                         dk_logic.imp 
                                           (dk_logic.ebP 
                                              (abst_equal (abst_plus x y) 
                                                 (abst_plus x z))) 
                                           (dk_logic.ebP (abst_equal y z))))))) ->
  abst_plus_is_right_regular:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.forall abst_T 
                                         (z:(cc.eT abst_T) =>
                                          dk_logic.imp 
                                            (dk_logic.ebP 
                                               (abst_equal (abst_plus x z) 
                                                  (abst_plus y z))) 
                                            (dk_logic.ebP (abst_equal x y))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.and 
                (dk_logic.imp 
                   (dk_logic.ebP (abst_equal (abst_plus x y) (abst_plus x z))) 
                   (dk_logic.ebP (abst_equal y z))) 
                (dk_logic.imp 
                   (dk_logic.ebP (abst_equal (abst_plus x z) (abst_plus y z))) 
                   (dk_logic.ebP (abst_equal x y)))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_plus_is_left_regular:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp 
                 (dk_logic.ebP (abst_equal (abst_plus x y) (abst_plus x z))) 
                 (dk_logic.ebP (abst_equal y z))))))) =>
  abst_plus_is_right_regular:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp 
                 (dk_logic.ebP (abst_equal (abst_plus x z) (abst_plus y z))) 
                 (dk_logic.ebP (abst_equal x y))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.and 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_plus v_Vzb v_Vac) 
                            (abst_plus v_Vzb v_Vbc)))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc)))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_plus v_Vzb v_Vbc) 
                            (abst_plus v_Vac v_Vbc)))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac)))))))) 
    (v_Vcc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.and 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus v_Vzb v_Vac) 
                                   (abst_plus v_Vzb v_Vbc)))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vac v_Vbc)))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus v_Vzb v_Vbc) 
                                   (abst_plus v_Vac v_Vbc)))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vzb v_Vac)))))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.and 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_plus v_Vzb v_Vac) 
                            (abst_plus v_Vzb v_Vbc)))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc)))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_plus v_Vzb v_Vbc) 
                            (abst_plus v_Vac v_Vbc)))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))))))) 
       (v_Vdc:(zen.term abst_T) =>
        v_Vec:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.and 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus v_Vdc v_Vac) 
                                   (abst_plus v_Vdc v_Vbc)))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vac v_Vbc)))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus v_Vdc v_Vbc) 
                                   (abst_plus v_Vac v_Vbc)))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vdc v_Vac))))))))) =>
        zen.Rnotall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.and 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_plus v_Vdc v_Vac) 
                            (abst_plus v_Vdc v_Vbc)))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc)))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_plus v_Vdc v_Vbc) 
                            (abst_plus v_Vac v_Vbc)))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vac)))))) 
          (v_Vfc:(zen.term abst_T) =>
           v_Vgc:
           (zen.proof 
              (zen.not 
                 (zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.and 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus v_Vdc v_Vfc) 
                                   (abst_plus v_Vdc v_Vbc)))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vfc v_Vbc)))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus v_Vdc v_Vbc) 
                                   (abst_plus v_Vfc v_Vbc)))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vdc v_Vfc)))))))) =>
           zen.Rnotall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.and 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_plus v_Vdc v_Vfc) 
                            (abst_plus v_Vdc v_Vbc)))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vfc v_Vbc)))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_plus v_Vdc v_Vbc) 
                            (abst_plus v_Vfc v_Vbc)))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vfc))))) 
             (v_Vhc:(zen.term abst_T) =>
              v_Vic:
              (zen.proof 
                 (zen.not 
                    (zen.and 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus v_Vdc v_Vfc) 
                                   (abst_plus v_Vdc v_Vhc)))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vfc v_Vhc)))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus v_Vdc v_Vhc) 
                                   (abst_plus v_Vfc v_Vhc)))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vdc v_Vfc))))))) =>
              zen.Rnotand 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_plus v_Vdc v_Vfc) 
                            (abst_plus v_Vdc v_Vhc)))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vfc v_Vhc)))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_plus v_Vdc v_Vhc) 
                            (abst_plus v_Vfc v_Vhc)))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vfc)))) 
                (v_Vjc:
                 (zen.proof 
                    (zen.not 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus v_Vdc v_Vfc) 
                                   (abst_plus v_Vdc v_Vhc)))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vfc v_Vhc)))))) =>
                 zen.Rall abst_T 
                   (v_Vzb:(zen.term abst_T) =>
                    zen.forall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_plus v_Vzb v_Vac) 
                                     (abst_plus v_Vzb v_Vbc)))) 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vac v_Vbc)))))) 
                   v_Vdc 
                   (v_Vkc:
                    (zen.proof 
                       (zen.forall abst_T 
                          (v_Vac:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vbc:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus v_Vdc v_Vac) 
                                         (abst_plus v_Vdc v_Vbc)))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vac v_Vbc))))))) =>
                    zen.Rall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_plus v_Vdc v_Vac) 
                                     (abst_plus v_Vdc v_Vbc)))) 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vac v_Vbc))))) 
                      v_Vfc 
                      (v_Vlc:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vbc:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus v_Vdc v_Vfc) 
                                         (abst_plus v_Vdc v_Vbc)))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vfc v_Vbc)))))) =>
                       zen.Rall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_plus v_Vdc v_Vfc) 
                                     (abst_plus v_Vdc v_Vbc)))) 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vfc v_Vbc)))) 
                         v_Vhc 
                         (v_Vmc:
                          (zen.proof 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus v_Vdc v_Vfc) 
                                         (abst_plus v_Vdc v_Vhc)))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vfc v_Vhc))))) =>
                          zen.Raxiom 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_plus v_Vdc v_Vfc) 
                                        (abst_plus v_Vdc v_Vhc)))) 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vfc v_Vhc)))) 
                            v_Vmc v_Vjc) v_Vlc) v_Vkc) 
                   abst_plus_is_left_regular) 
                (v_Vnc:
                 (zen.proof 
                    (zen.not 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus v_Vdc v_Vhc) 
                                   (abst_plus v_Vfc v_Vhc)))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vdc v_Vfc)))))) =>
                 zen.Rall abst_T 
                   (v_Vzb:(zen.term abst_T) =>
                    zen.forall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_plus v_Vzb v_Vbc) 
                                     (abst_plus v_Vac v_Vbc)))) 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vzb v_Vac)))))) 
                   v_Vdc 
                   (v_Voc:
                    (zen.proof 
                       (zen.forall abst_T 
                          (v_Vac:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vbc:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus v_Vdc v_Vbc) 
                                         (abst_plus v_Vac v_Vbc)))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vdc v_Vac))))))) =>
                    zen.Rall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_plus v_Vdc v_Vbc) 
                                     (abst_plus v_Vac v_Vbc)))) 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vdc v_Vac))))) 
                      v_Vfc 
                      (v_Vpc:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vbc:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus v_Vdc v_Vbc) 
                                         (abst_plus v_Vfc v_Vbc)))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vdc v_Vfc)))))) =>
                       zen.Rall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_plus v_Vdc v_Vbc) 
                                     (abst_plus v_Vfc v_Vbc)))) 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vdc v_Vfc)))) 
                         v_Vhc 
                         (v_Vqc:
                          (zen.proof 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus v_Vdc v_Vhc) 
                                         (abst_plus v_Vfc v_Vhc)))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vdc v_Vfc))))) =>
                          zen.Raxiom 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_plus v_Vdc v_Vhc) 
                                        (abst_plus v_Vfc v_Vhc)))) 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vdc v_Vfc)))) 
                            v_Vqc v_Vnc) v_Vpc) v_Voc) 
                   abst_plus_is_right_regular) v_Vic) v_Vgc) v_Vec) v_Vcc).

def Zero_check_additive_monoid__is_zero_substitution_rule :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_is_zero x)) 
             (dk_logic.imp 
                (dk_logic.or (dk_logic.ebP (abst_equal x y)) 
                   (dk_logic.ebP (abst_equal y x))) 
                (dk_logic.ebP (abst_is_zero y))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_is_zero x)) 
             (dk_logic.imp 
                (dk_logic.or (dk_logic.ebP (abst_equal x y)) 
                   (dk_logic.ebP (abst_equal y x))) 
                (dk_logic.ebP (abst_is_zero y)))))).

def Zero_check_additive_monoid__equal_reflexive :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_plus_is_associative:(dk_logic.eP 
                              (dk_logic.forall abst_T 
                                 (x:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (y:(cc.eT abst_T) =>
                                     dk_logic.forall abst_T 
                                       (z:(cc.eT abst_T) =>
                                        dk_logic.ebP 
                                          (abst_equal 
                                             (abst_plus x (abst_plus y z)) 
                                             (abst_plus (abst_plus x y) z))))))) ->
  abst_zero_simplifies:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.or 
                                      (dk_logic.ebP 
                                         (abst_equal (abst_plus x abst_zero) 
                                            y)) 
                                      (dk_logic.or 
                                         (dk_logic.ebP 
                                            (abst_equal x 
                                               (abst_plus abst_zero y))) 
                                         (dk_logic.or 
                                            (dk_logic.ebP 
                                               (abst_equal x 
                                                  (abst_plus y abst_zero))) 
                                            (dk_logic.ebP 
                                               (abst_equal 
                                                  (abst_plus abst_zero x) y))))) 
                                   (dk_logic.ebP (abst_equal x y)))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) => dk_logic.ebP (abst_equal x x)))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_plus_is_associative:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.ebP 
                 (abst_equal (abst_plus x (abst_plus y z)) 
                    (abst_plus (abst_plus x y) z))))))) =>
  abst_zero_simplifies:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp 
              (dk_logic.or 
                 (dk_logic.ebP (abst_equal (abst_plus x abst_zero) y)) 
                 (dk_logic.or 
                    (dk_logic.ebP (abst_equal x (abst_plus abst_zero y))) 
                    (dk_logic.or 
                       (dk_logic.ebP (abst_equal x (abst_plus y abst_zero))) 
                       (dk_logic.ebP (abst_equal (abst_plus abst_zero x) y))))) 
              (dk_logic.ebP (abst_equal x y)))))) =>
  (__G_1_LEMMA:
   (x:(cc.eT abst_T) -> dk_logic.eP (dk_logic.ebP (abst_equal x x))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.triangle (focal.is_true (abst_equal v_Vzb v_Vzb)))) 
     (v_Vac:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.triangle (focal.is_true (abst_equal v_Vzb v_Vzb)))))) =>
      zen.Rnotall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.triangle (focal.is_true (abst_equal v_Vzb v_Vzb))) 
        (v_Vbc:(zen.term abst_T) =>
         v_Vcc:
         (zen.proof 
            (zen.not (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vbc))))) =>
         zen.Rall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.triangle (focal.is_true (abst_equal v_Vzb v_Vzb))) v_Vbc 
           (v_Vdc:
            (zen.proof 
               (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vbc)))) =>
            zen.Raxiom 
              (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vbc))) v_Vdc 
              v_Vcc) __G_1_LEMMA) v_Vac)) 
    (x:(cc.eT abst_T) =>
     (__G_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (abst_equal (abst_plus abst_zero (abst_plus x abst_zero)) 
               (abst_plus (abst_plus abst_zero x) abst_zero)))) =>
      (__G_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP 
             (abst_equal (abst_plus x abst_zero) (abst_plus abst_zero x)))) =>
       zen.nnpp (zen.triangle (focal.is_true (abst_equal x x))) 
         (v_Vzb:
          (zen.proof 
             (zen.not (zen.triangle (focal.is_true (abst_equal x x))))) =>
          zen.Rall abst_T 
            (v_Vac:(zen.term abst_T) =>
             zen.forall abst_T 
               (v_Vbc:(zen.term abst_T) =>
                zen.imp 
                  (zen.or 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_plus v_Vac abst_zero) v_Vbc))) 
                     (zen.or 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal v_Vac (abst_plus abst_zero v_Vbc)))) 
                        (zen.or 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal v_Vac 
                                    (abst_plus v_Vbc abst_zero)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_plus abst_zero v_Vac) 
                                    v_Vbc)))))) 
                  (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))))) 
            x 
            (v_Vcc:
             (zen.proof 
                (zen.forall abst_T 
                   (v_Vbc:(zen.term abst_T) =>
                    zen.imp 
                      (zen.or 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_plus x abst_zero) v_Vbc))) 
                         (zen.or 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal x (abst_plus abst_zero v_Vbc)))) 
                            (zen.or 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal x 
                                        (abst_plus v_Vbc abst_zero)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_plus abst_zero x) 
                                        v_Vbc)))))) 
                      (zen.triangle (focal.is_true (abst_equal x v_Vbc)))))) =>
             zen.Rall abst_T 
               (v_Vbc:(zen.term abst_T) =>
                zen.imp 
                  (zen.or 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_plus x abst_zero) v_Vbc))) 
                     (zen.or 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal x (abst_plus abst_zero v_Vbc)))) 
                        (zen.or 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal x (abst_plus v_Vbc abst_zero)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_plus abst_zero x) v_Vbc)))))) 
                  (zen.triangle (focal.is_true (abst_equal x v_Vbc)))) x 
               (v_Vdc:
                (zen.proof 
                   (zen.imp 
                      (zen.or 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_plus x abst_zero) x))) 
                         (zen.or 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal x (abst_plus abst_zero x)))) 
                            (zen.or 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal x (abst_plus x abst_zero)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_plus abst_zero x) x)))))) 
                      (zen.triangle (focal.is_true (abst_equal x x))))) =>
                zen.Rimply 
                  (zen.or 
                     (zen.triangle 
                        (focal.is_true (abst_equal (abst_plus x abst_zero) x))) 
                     (zen.or 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal x (abst_plus abst_zero x)))) 
                        (zen.or 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal x (abst_plus x abst_zero)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_plus abst_zero x) x)))))) 
                  (zen.triangle (focal.is_true (abst_equal x x))) 
                  (v_Vec:
                   (zen.proof 
                      (zen.not 
                         (zen.or 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_plus x abst_zero) x))) 
                            (zen.or 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal x (abst_plus abst_zero x)))) 
                               (zen.or 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal x (abst_plus x abst_zero)))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_plus abst_zero x) x)))))))) =>
                   zen.Rnotor 
                     (zen.triangle 
                        (focal.is_true (abst_equal (abst_plus x abst_zero) x))) 
                     (zen.or 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal x (abst_plus abst_zero x)))) 
                        (zen.or 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal x (abst_plus x abst_zero)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_plus abst_zero x) x))))) 
                     (v_Vfc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_plus x abst_zero) x))))) =>
                      v_Vgc:
                      (zen.proof 
                         (zen.not 
                            (zen.or 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal x (abst_plus abst_zero x)))) 
                               (zen.or 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal x (abst_plus x abst_zero)))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_plus abst_zero x) x))))))) =>
                      zen.Rnotor 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal x (abst_plus abst_zero x)))) 
                        (zen.or 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal x (abst_plus x abst_zero)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_plus abst_zero x) x)))) 
                        (v_Vhc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal x (abst_plus abst_zero x)))))) =>
                         v_Vic:
                         (zen.proof 
                            (zen.not 
                               (zen.or 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal x (abst_plus x abst_zero)))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_plus abst_zero x) x)))))) =>
                         zen.Rnotor 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal x (abst_plus x abst_zero)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_plus abst_zero x) x))) 
                           (v_Vjc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal x (abst_plus x abst_zero)))))) =>
                            v_Vkc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_plus abst_zero x) x))))) =>
                            zen.Rall abst_T 
                              (v_Vbc:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.or 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus x abst_zero) v_Vbc))) 
                                    (zen.or 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_plus abst_zero v_Vbc)))) 
                                       (zen.or 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal x 
                                                   (abst_plus v_Vbc abst_zero)))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus abst_zero x) 
                                                   v_Vbc)))))) 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal x v_Vbc)))) 
                              (abst_plus abst_zero x) 
                              (v_Vlc:
                               (zen.proof 
                                  (zen.imp 
                                     (zen.or 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus x abst_zero) 
                                                 (abst_plus abst_zero x)))) 
                                        (zen.or 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal x 
                                                    (abst_plus abst_zero 
                                                       (abst_plus abst_zero x))))) 
                                           (zen.or 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal x 
                                                       (abst_plus 
                                                          (abst_plus 
                                                             abst_zero x) 
                                                          abst_zero)))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus abst_zero x) 
                                                       (abst_plus abst_zero x))))))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal x 
                                              (abst_plus abst_zero x)))))) =>
                               zen.Rimply 
                                 (zen.or 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus x abst_zero) 
                                             (abst_plus abst_zero x)))) 
                                    (zen.or 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_plus abst_zero 
                                                   (abst_plus abst_zero x))))) 
                                       (zen.or 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal x 
                                                   (abst_plus 
                                                      (abst_plus abst_zero x) 
                                                      abst_zero)))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus abst_zero x) 
                                                   (abst_plus abst_zero x))))))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal x (abst_plus abst_zero x)))) 
                                 (v_Vmc:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.or 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus x abst_zero) 
                                                    (abst_plus abst_zero x)))) 
                                           (zen.or 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal x 
                                                       (abst_plus abst_zero 
                                                          (abst_plus 
                                                             abst_zero x))))) 
                                              (zen.or 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal x 
                                                          (abst_plus 
                                                             (abst_plus 
                                                                abst_zero x) 
                                                             abst_zero)))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             abst_zero x) 
                                                          (abst_plus 
                                                             abst_zero x))))))))) =>
                                  zen.Rnotor 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus x abst_zero) 
                                             (abst_plus abst_zero x)))) 
                                    (zen.or 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_plus abst_zero 
                                                   (abst_plus abst_zero x))))) 
                                       (zen.or 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal x 
                                                   (abst_plus 
                                                      (abst_plus abst_zero x) 
                                                      abst_zero)))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus abst_zero x) 
                                                   (abst_plus abst_zero x)))))) 
                                    (v_Vnc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus x abst_zero) 
                                                    (abst_plus abst_zero x)))))) =>
                                     v_Voc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.or 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal x 
                                                       (abst_plus abst_zero 
                                                          (abst_plus 
                                                             abst_zero x))))) 
                                              (zen.or 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal x 
                                                          (abst_plus 
                                                             (abst_plus 
                                                                abst_zero x) 
                                                             abst_zero)))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             abst_zero x) 
                                                          (abst_plus 
                                                             abst_zero x)))))))) =>
                                     zen.Rnotor 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_plus abst_zero 
                                                   (abst_plus abst_zero x))))) 
                                       (zen.or 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal x 
                                                   (abst_plus 
                                                      (abst_plus abst_zero x) 
                                                      abst_zero)))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus abst_zero x) 
                                                   (abst_plus abst_zero x))))) 
                                       (v_Vpc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal x 
                                                       (abst_plus abst_zero 
                                                          (abst_plus 
                                                             abst_zero x))))))) =>
                                        v_Vqc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.or 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal x 
                                                          (abst_plus 
                                                             (abst_plus 
                                                                abst_zero x) 
                                                             abst_zero)))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             abst_zero x) 
                                                          (abst_plus 
                                                             abst_zero x))))))) =>
                                        zen.Rnotor 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal x 
                                                   (abst_plus 
                                                      (abst_plus abst_zero x) 
                                                      abst_zero)))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus abst_zero x) 
                                                   (abst_plus abst_zero x)))) 
                                          (v_Vrc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal x 
                                                          (abst_plus 
                                                             (abst_plus 
                                                                abst_zero x) 
                                                             abst_zero)))))) =>
                                           v_Vsc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             abst_zero x) 
                                                          (abst_plus 
                                                             abst_zero x)))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus x abst_zero) 
                                                      (abst_plus abst_zero x)))) 
                                             __G_1_2_LEMMA v_Vnc) v_Vqc) 
                                       v_Voc) v_Vmc) 
                                 (v_Vtc:
                                  (zen.proof 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal x 
                                              (abst_plus abst_zero x))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal x 
                                             (abst_plus abst_zero x)))) 
                                    v_Vtc v_Vhc) v_Vlc) v_Vcc) v_Vic) v_Vgc) 
                     v_Vec) 
                  (v_Vuc:
                   (zen.proof (zen.triangle (focal.is_true (abst_equal x x)))) =>
                   zen.Raxiom 
                     (zen.triangle (focal.is_true (abst_equal x x))) v_Vuc 
                     v_Vzb) v_Vdc) v_Vcc) abst_zero_simplifies)) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true 
                 (abst_equal (abst_plus x abst_zero) (abst_plus abst_zero x)))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_plus x abst_zero) 
                           (abst_plus abst_zero x)))))) =>
            zen.Rall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.or 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_plus v_Vac abst_zero) v_Vbc))) 
                       (zen.or 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal v_Vac (abst_plus abst_zero v_Vbc)))) 
                          (zen.or 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal v_Vac 
                                      (abst_plus v_Vbc abst_zero)))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_plus abst_zero v_Vac) 
                                      v_Vbc)))))) 
                    (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))))) 
              (abst_plus x abst_zero) 
              (v_Vcc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.or 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_plus (abst_plus x abst_zero) 
                                       abst_zero) v_Vbc))) 
                           (zen.or 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_plus x abst_zero) 
                                       (abst_plus abst_zero v_Vbc)))) 
                              (zen.or 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_plus x abst_zero) 
                                          (abst_plus v_Vbc abst_zero)))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus abst_zero 
                                             (abst_plus x abst_zero)) v_Vbc)))))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_plus x abst_zero) v_Vbc)))))) =>
               zen.Rall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.or 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus (abst_plus x abst_zero) abst_zero) 
                                v_Vbc))) 
                       (zen.or 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus x abst_zero) 
                                   (abst_plus abst_zero v_Vbc)))) 
                          (zen.or 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_plus x abst_zero) 
                                      (abst_plus v_Vbc abst_zero)))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus abst_zero 
                                         (abst_plus x abst_zero)) v_Vbc)))))) 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_plus x abst_zero) v_Vbc)))) 
                 (abst_plus abst_zero x) 
                 (v_Vdc:
                  (zen.proof 
                     (zen.imp 
                        (zen.or 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_plus (abst_plus x abst_zero) 
                                       abst_zero) (abst_plus abst_zero x)))) 
                           (zen.or 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_plus x abst_zero) 
                                       (abst_plus abst_zero 
                                          (abst_plus abst_zero x))))) 
                              (zen.or 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_plus x abst_zero) 
                                          (abst_plus (abst_plus abst_zero x) 
                                             abst_zero)))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus abst_zero 
                                             (abst_plus x abst_zero)) 
                                          (abst_plus abst_zero x))))))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_plus x abst_zero) 
                                 (abst_plus abst_zero x)))))) =>
                  zen.Rimply 
                    (zen.or 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus (abst_plus x abst_zero) abst_zero) 
                                (abst_plus abst_zero x)))) 
                       (zen.or 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus x abst_zero) 
                                   (abst_plus abst_zero 
                                      (abst_plus abst_zero x))))) 
                          (zen.or 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_plus x abst_zero) 
                                      (abst_plus (abst_plus abst_zero x) 
                                         abst_zero)))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus abst_zero 
                                         (abst_plus x abst_zero)) 
                                      (abst_plus abst_zero x))))))) 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_plus x abst_zero) 
                             (abst_plus abst_zero x)))) 
                    (v_Vec:
                     (zen.proof 
                        (zen.not 
                           (zen.or 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_plus x abst_zero) 
                                          abst_zero) (abst_plus abst_zero x)))) 
                              (zen.or 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_plus x abst_zero) 
                                          (abst_plus abst_zero 
                                             (abst_plus abst_zero x))))) 
                                 (zen.or 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus x abst_zero) 
                                             (abst_plus 
                                                (abst_plus abst_zero x) 
                                                abst_zero)))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus abst_zero 
                                                (abst_plus x abst_zero)) 
                                             (abst_plus abst_zero x))))))))) =>
                     zen.Rnotor 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus (abst_plus x abst_zero) abst_zero) 
                                (abst_plus abst_zero x)))) 
                       (zen.or 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus x abst_zero) 
                                   (abst_plus abst_zero 
                                      (abst_plus abst_zero x))))) 
                          (zen.or 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_plus x abst_zero) 
                                      (abst_plus (abst_plus abst_zero x) 
                                         abst_zero)))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus abst_zero 
                                         (abst_plus x abst_zero)) 
                                      (abst_plus abst_zero x)))))) 
                       (v_Vfc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_plus x abst_zero) 
                                          abst_zero) (abst_plus abst_zero x)))))) =>
                        v_Vgc:
                        (zen.proof 
                           (zen.not 
                              (zen.or 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_plus x abst_zero) 
                                          (abst_plus abst_zero 
                                             (abst_plus abst_zero x))))) 
                                 (zen.or 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus x abst_zero) 
                                             (abst_plus 
                                                (abst_plus abst_zero x) 
                                                abst_zero)))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus abst_zero 
                                                (abst_plus x abst_zero)) 
                                             (abst_plus abst_zero x)))))))) =>
                        zen.Rnotor 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus x abst_zero) 
                                   (abst_plus abst_zero 
                                      (abst_plus abst_zero x))))) 
                          (zen.or 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_plus x abst_zero) 
                                      (abst_plus (abst_plus abst_zero x) 
                                         abst_zero)))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus abst_zero 
                                         (abst_plus x abst_zero)) 
                                      (abst_plus abst_zero x))))) 
                          (v_Vhc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_plus x abst_zero) 
                                          (abst_plus abst_zero 
                                             (abst_plus abst_zero x))))))) =>
                           v_Vic:
                           (zen.proof 
                              (zen.not 
                                 (zen.or 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus x abst_zero) 
                                             (abst_plus 
                                                (abst_plus abst_zero x) 
                                                abst_zero)))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus abst_zero 
                                                (abst_plus x abst_zero)) 
                                             (abst_plus abst_zero x))))))) =>
                           zen.Rnotor 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_plus x abst_zero) 
                                      (abst_plus (abst_plus abst_zero x) 
                                         abst_zero)))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus abst_zero 
                                         (abst_plus x abst_zero)) 
                                      (abst_plus abst_zero x)))) 
                             (v_Vjc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus x abst_zero) 
                                             (abst_plus 
                                                (abst_plus abst_zero x) 
                                                abst_zero)))))) =>
                              v_Vkc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus abst_zero 
                                                (abst_plus x abst_zero)) 
                                             (abst_plus abst_zero x)))))) =>
                              zen.Rall abst_T 
                                (v_Vbc:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.or 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_plus x abst_zero) 
                                                  abst_zero) v_Vbc))) 
                                      (zen.or 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus x abst_zero) 
                                                  (abst_plus abst_zero v_Vbc)))) 
                                         (zen.or 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus x abst_zero) 
                                                     (abst_plus v_Vbc 
                                                        abst_zero)))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus abst_zero 
                                                        (abst_plus x 
                                                           abst_zero)) v_Vbc)))))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_plus x abst_zero) 
                                            v_Vbc)))) 
                                (abst_plus (abst_plus abst_zero x) abst_zero) 
                                (v_Vlc:
                                 (zen.proof 
                                    (zen.imp 
                                       (zen.or 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_plus x abst_zero) 
                                                      abst_zero) 
                                                   (abst_plus 
                                                      (abst_plus abst_zero x) 
                                                      abst_zero)))) 
                                          (zen.or 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus x abst_zero) 
                                                      (abst_plus abst_zero 
                                                         (abst_plus 
                                                            (abst_plus 
                                                               abst_zero x) 
                                                            abst_zero))))) 
                                             (zen.or 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus x 
                                                            abst_zero) 
                                                         (abst_plus 
                                                            (abst_plus 
                                                               (abst_plus 
                                                                  abst_zero x) 
                                                               abst_zero) 
                                                            abst_zero)))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            abst_zero 
                                                            (abst_plus x 
                                                               abst_zero)) 
                                                         (abst_plus 
                                                            (abst_plus 
                                                               abst_zero x) 
                                                            abst_zero))))))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus x abst_zero) 
                                                (abst_plus 
                                                   (abst_plus abst_zero x) 
                                                   abst_zero)))))) =>
                                 zen.Rimply 
                                   (zen.or 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_plus x abst_zero) 
                                                  abst_zero) 
                                               (abst_plus 
                                                  (abst_plus abst_zero x) 
                                                  abst_zero)))) 
                                      (zen.or 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus x abst_zero) 
                                                  (abst_plus abst_zero 
                                                     (abst_plus 
                                                        (abst_plus abst_zero 
                                                           x) abst_zero))))) 
                                         (zen.or 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus x abst_zero) 
                                                     (abst_plus 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              abst_zero x) 
                                                           abst_zero) 
                                                        abst_zero)))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus abst_zero 
                                                        (abst_plus x 
                                                           abst_zero)) 
                                                     (abst_plus 
                                                        (abst_plus abst_zero 
                                                           x) abst_zero))))))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_plus x abst_zero) 
                                            (abst_plus 
                                               (abst_plus abst_zero x) 
                                               abst_zero)))) 
                                   (v_Vmc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.or 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_plus x 
                                                            abst_zero) 
                                                         abst_zero) 
                                                      (abst_plus 
                                                         (abst_plus 
                                                            abst_zero x) 
                                                         abst_zero)))) 
                                             (zen.or 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus x 
                                                            abst_zero) 
                                                         (abst_plus 
                                                            abst_zero 
                                                            (abst_plus 
                                                               (abst_plus 
                                                                  abst_zero x) 
                                                               abst_zero))))) 
                                                (zen.or 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus x 
                                                               abst_zero) 
                                                            (abst_plus 
                                                               (abst_plus 
                                                                  (abst_plus 
                                                                    abst_zero 
                                                                    x) 
                                                                  abst_zero) 
                                                               abst_zero)))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               abst_zero 
                                                               (abst_plus x 
                                                                  abst_zero)) 
                                                            (abst_plus 
                                                               (abst_plus 
                                                                  abst_zero x) 
                                                               abst_zero))))))))) =>
                                    zen.Rnotor 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_plus x abst_zero) 
                                                  abst_zero) 
                                               (abst_plus 
                                                  (abst_plus abst_zero x) 
                                                  abst_zero)))) 
                                      (zen.or 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus x abst_zero) 
                                                  (abst_plus abst_zero 
                                                     (abst_plus 
                                                        (abst_plus abst_zero 
                                                           x) abst_zero))))) 
                                         (zen.or 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus x abst_zero) 
                                                     (abst_plus 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              abst_zero x) 
                                                           abst_zero) 
                                                        abst_zero)))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus abst_zero 
                                                        (abst_plus x 
                                                           abst_zero)) 
                                                     (abst_plus 
                                                        (abst_plus abst_zero 
                                                           x) abst_zero)))))) 
                                      (v_Vnc:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_plus x 
                                                            abst_zero) 
                                                         abst_zero) 
                                                      (abst_plus 
                                                         (abst_plus 
                                                            abst_zero x) 
                                                         abst_zero)))))) =>
                                       v_Voc:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.or 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus x 
                                                            abst_zero) 
                                                         (abst_plus 
                                                            abst_zero 
                                                            (abst_plus 
                                                               (abst_plus 
                                                                  abst_zero x) 
                                                               abst_zero))))) 
                                                (zen.or 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus x 
                                                               abst_zero) 
                                                            (abst_plus 
                                                               (abst_plus 
                                                                  (abst_plus 
                                                                    abst_zero 
                                                                    x) 
                                                                  abst_zero) 
                                                               abst_zero)))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               abst_zero 
                                                               (abst_plus x 
                                                                  abst_zero)) 
                                                            (abst_plus 
                                                               (abst_plus 
                                                                  abst_zero x) 
                                                               abst_zero)))))))) =>
                                       zen.Rnotor 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus x abst_zero) 
                                                  (abst_plus abst_zero 
                                                     (abst_plus 
                                                        (abst_plus abst_zero 
                                                           x) abst_zero))))) 
                                         (zen.or 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus x abst_zero) 
                                                     (abst_plus 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              abst_zero x) 
                                                           abst_zero) 
                                                        abst_zero)))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus abst_zero 
                                                        (abst_plus x 
                                                           abst_zero)) 
                                                     (abst_plus 
                                                        (abst_plus abst_zero 
                                                           x) abst_zero))))) 
                                         (v_Vpc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus x 
                                                            abst_zero) 
                                                         (abst_plus 
                                                            abst_zero 
                                                            (abst_plus 
                                                               (abst_plus 
                                                                  abst_zero x) 
                                                               abst_zero))))))) =>
                                          v_Vqc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.or 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus x 
                                                               abst_zero) 
                                                            (abst_plus 
                                                               (abst_plus 
                                                                  (abst_plus 
                                                                    abst_zero 
                                                                    x) 
                                                                  abst_zero) 
                                                               abst_zero)))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               abst_zero 
                                                               (abst_plus x 
                                                                  abst_zero)) 
                                                            (abst_plus 
                                                               (abst_plus 
                                                                  abst_zero x) 
                                                               abst_zero))))))) =>
                                          zen.Rnotor 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus x abst_zero) 
                                                     (abst_plus 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              abst_zero x) 
                                                           abst_zero) 
                                                        abst_zero)))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus abst_zero 
                                                        (abst_plus x 
                                                           abst_zero)) 
                                                     (abst_plus 
                                                        (abst_plus abst_zero 
                                                           x) abst_zero)))) 
                                            (v_Vrc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus x 
                                                               abst_zero) 
                                                            (abst_plus 
                                                               (abst_plus 
                                                                  (abst_plus 
                                                                    abst_zero 
                                                                    x) 
                                                                  abst_zero) 
                                                               abst_zero)))))) =>
                                             v_Vsc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               abst_zero 
                                                               (abst_plus x 
                                                                  abst_zero)) 
                                                            (abst_plus 
                                                               (abst_plus 
                                                                  abst_zero x) 
                                                               abst_zero)))))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus abst_zero 
                                                           (abst_plus x 
                                                              abst_zero)) 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              abst_zero x) 
                                                           abst_zero)))) 
                                               __G_1_1_LEMMA v_Vsc) v_Vqc) 
                                         v_Voc) v_Vmc) 
                                   (v_Vtc:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus x abst_zero) 
                                                (abst_plus 
                                                   (abst_plus abst_zero x) 
                                                   abst_zero))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus x abst_zero) 
                                               (abst_plus 
                                                  (abst_plus abst_zero x) 
                                                  abst_zero)))) v_Vtc v_Vjc) 
                                   v_Vlc) v_Vcc) v_Vic) v_Vgc) v_Vec) 
                    (v_Vuc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_plus x abst_zero) 
                                 (abst_plus abst_zero x))))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_plus x abst_zero) 
                                (abst_plus abst_zero x)))) v_Vuc v_Vzb) v_Vdc) 
                 v_Vcc) abst_zero_simplifies))) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (abst_equal (abst_plus abst_zero (abst_plus x abst_zero)) 
                   (abst_plus (abst_plus abst_zero x) abst_zero)))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal 
                          (abst_plus abst_zero (abst_plus x abst_zero)) 
                          (abst_plus (abst_plus abst_zero x) abst_zero)))))) =>
           zen.Rall abst_T 
             (v_Vac:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.triangle 
                      (focal.is_true 
                         (abst_equal 
                            (abst_plus v_Vac (abst_plus v_Vbc v_Vcc)) 
                            (abst_plus (abst_plus v_Vac v_Vbc) v_Vcc)))))) 
             abst_zero 
             (v_Vdc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus abst_zero (abst_plus v_Vbc v_Vcc)) 
                                (abst_plus (abst_plus abst_zero v_Vbc) v_Vcc))))))) =>
              zen.Rall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.triangle 
                      (focal.is_true 
                         (abst_equal 
                            (abst_plus abst_zero (abst_plus v_Vbc v_Vcc)) 
                            (abst_plus (abst_plus abst_zero v_Vbc) v_Vcc))))) 
                x 
                (v_Vec:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus abst_zero (abst_plus x v_Vcc)) 
                                (abst_plus (abst_plus abst_zero x) v_Vcc)))))) =>
                 zen.Rall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.triangle 
                      (focal.is_true 
                         (abst_equal 
                            (abst_plus abst_zero (abst_plus x v_Vcc)) 
                            (abst_plus (abst_plus abst_zero x) v_Vcc)))) 
                   abst_zero 
                   (v_Vfc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus abst_zero (abst_plus x abst_zero)) 
                                (abst_plus (abst_plus abst_zero x) abst_zero))))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_plus abst_zero (abst_plus x abst_zero)) 
                               (abst_plus (abst_plus abst_zero x) abst_zero)))) 
                      v_Vfc v_Vzb) v_Vec) v_Vdc) abst_plus_is_associative))).

def Zero_check_additive_monoid__is_zero_defines_unique :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_zero:(cc.eT abst_T) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_is_zero_checks_to_zero:(dk_logic.eP 
                                 (dk_logic.forall abst_T 
                                    (x:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_is_zero x)) 
                                       (dk_logic.and 
                                          (dk_logic.ebP 
                                             (abst_equal x abst_zero)) 
                                          (dk_logic.ebP 
                                             (abst_equal abst_zero x)))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp 
             (dk_logic.and (dk_logic.ebP (abst_is_zero x)) 
                (dk_logic.ebP (abst_is_zero y))) 
             (dk_logic.ebP (abst_equal x y)))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_zero:(cc.eT abst_T) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_is_zero_checks_to_zero:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.imp (dk_logic.ebP (abst_is_zero x)) 
           (dk_logic.and (dk_logic.ebP (abst_equal x abst_zero)) 
              (dk_logic.ebP (abst_equal abst_zero x)))))) =>
  (__H_1_LEMMA:
   (x:(cc.eT abst_T) ->
    y:(cc.eT abst_T) ->
    H1:(dk_logic.eP (dk_logic.ebP (abst_is_zero x))) ->
    H2:(dk_logic.eP (dk_logic.ebP (abst_is_zero y))) ->
    dk_logic.eP (dk_logic.ebP (abst_equal x y))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.imp 
              (zen.and (zen.triangle (focal.is_true (abst_is_zero v_Vzb))) 
                 (zen.triangle (focal.is_true (abst_is_zero v_Vac)))) 
              (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac)))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.imp 
                     (zen.and 
                        (zen.triangle (focal.is_true (abst_is_zero v_Vzb))) 
                        (zen.triangle (focal.is_true (abst_is_zero v_Vac)))) 
                     (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac)))))))) =>
      zen.Rnotall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.imp 
              (zen.and (zen.triangle (focal.is_true (abst_is_zero v_Vzb))) 
                 (zen.triangle (focal.is_true (abst_is_zero v_Vac)))) 
              (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))))) 
        (v_Vcc:(zen.term abst_T) =>
         v_Vdc:
         (zen.proof 
            (zen.not 
               (zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.imp 
                     (zen.and 
                        (zen.triangle (focal.is_true (abst_is_zero v_Vcc))) 
                        (zen.triangle (focal.is_true (abst_is_zero v_Vac)))) 
                     (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vac))))))) =>
         zen.Rnotall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.imp 
              (zen.and (zen.triangle (focal.is_true (abst_is_zero v_Vcc))) 
                 (zen.triangle (focal.is_true (abst_is_zero v_Vac)))) 
              (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vac)))) 
           (v_Vec:(zen.term abst_T) =>
            v_Vfc:
            (zen.proof 
               (zen.not 
                  (zen.imp 
                     (zen.and 
                        (zen.triangle (focal.is_true (abst_is_zero v_Vcc))) 
                        (zen.triangle (focal.is_true (abst_is_zero v_Vec)))) 
                     (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec)))))) =>
            zen.Rnotimply 
              (zen.and (zen.triangle (focal.is_true (abst_is_zero v_Vcc))) 
                 (zen.triangle (focal.is_true (abst_is_zero v_Vec)))) 
              (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec))) 
              (v_Vgc:
               (zen.proof 
                  (zen.and 
                     (zen.triangle (focal.is_true (abst_is_zero v_Vcc))) 
                     (zen.triangle (focal.is_true (abst_is_zero v_Vec))))) =>
               v_Vhc:
               (zen.proof 
                  (zen.not 
                     (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec))))) =>
               zen.Rand (zen.triangle (focal.is_true (abst_is_zero v_Vcc))) 
                 (zen.triangle (focal.is_true (abst_is_zero v_Vec))) 
                 (v_Vic:
                  (zen.proof 
                     (zen.triangle (focal.is_true (abst_is_zero v_Vcc)))) =>
                  v_Vjc:
                  (zen.proof 
                     (zen.triangle (focal.is_true (abst_is_zero v_Vec)))) =>
                  zen.Rall abst_T 
                    (v_Vzb:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vac:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle (focal.is_true (abst_is_zero v_Vzb))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_is_zero v_Vac))) 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vzb v_Vac)))))) 
                    v_Vcc 
                    (v_Vkc:
                     (zen.proof 
                        (zen.forall abst_T 
                           (v_Vac:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_is_zero v_Vcc))) 
                              (zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (abst_is_zero v_Vac))) 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal v_Vcc v_Vac))))))) =>
                     zen.Rall abst_T 
                       (v_Vac:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle (focal.is_true (abst_is_zero v_Vcc))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_is_zero v_Vac))) 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vcc v_Vac))))) 
                       v_Vec 
                       (v_Vlc:
                        (zen.proof 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_is_zero v_Vcc))) 
                              (zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (abst_is_zero v_Vec))) 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal v_Vcc v_Vec)))))) =>
                        zen.Rimply 
                          (zen.triangle (focal.is_true (abst_is_zero v_Vcc))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_is_zero v_Vec))) 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vcc v_Vec)))) 
                          (v_Vmc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true (abst_is_zero v_Vcc))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true (abst_is_zero v_Vcc))) v_Vic 
                             v_Vmc) 
                          (v_Vnc:
                           (zen.proof 
                              (zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (abst_is_zero v_Vec))) 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal v_Vcc v_Vec))))) =>
                           zen.Rimply 
                             (zen.triangle 
                                (focal.is_true (abst_is_zero v_Vec))) 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vcc v_Vec))) 
                             (v_Voc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true (abst_is_zero v_Vec))))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true (abst_is_zero v_Vec))) 
                                v_Vjc v_Voc) 
                             (v_Vpc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal v_Vcc v_Vec)))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vcc v_Vec))) 
                                v_Vpc v_Vhc) v_Vnc) v_Vlc) v_Vkc) __H_1_LEMMA) 
                 v_Vgc) v_Vfc) v_Vdc) v_Vbc)) 
    (x:(cc.eT abst_T) =>
     y:(cc.eT abst_T) =>
     H1:(dk_logic.eP (dk_logic.ebP (abst_is_zero x))) =>
     H2:(dk_logic.eP (dk_logic.ebP (abst_is_zero y))) =>
     (__H_1_1_LEMMA:(dk_logic.eP (dk_logic.ebP (abst_equal x abst_zero))) =>
      (__H_1_2_LEMMA:(dk_logic.eP (dk_logic.ebP (abst_equal abst_zero y))) =>
       zen.nnpp (zen.triangle (focal.is_true (abst_equal x y))) 
         (v_Vkc:
          (zen.proof 
             (zen.not (zen.triangle (focal.is_true (abst_equal x y))))) =>
          zen.Rcut 
            (zen.and (zen.not (zen.triangle (zen.equal abst_T x x))) 
               (zen.not (zen.triangle (focal.is_true (abst_equal x x))))) 
            (v_Vlc:
             (zen.proof 
                (zen.and (zen.not (zen.triangle (zen.equal abst_T x x))) 
                   (zen.not (zen.triangle (focal.is_true (abst_equal x x)))))) =>
             zen.Rand (zen.not (zen.triangle (zen.equal abst_T x x))) 
               (zen.not (zen.triangle (focal.is_true (abst_equal x x)))) 
               (v_Vmc:
                (zen.proof (zen.not (zen.triangle (zen.equal abst_T x x)))) =>
                v_Vnc:
                (zen.proof 
                   (zen.not (zen.triangle (focal.is_true (abst_equal x x))))) =>
                zen.Rnoteq abst_T x v_Vmc) v_Vlc) 
            (v_Voc:
             (zen.proof 
                (zen.not 
                   (zen.and (zen.not (zen.triangle (zen.equal abst_T x x))) 
                      (zen.not 
                         (zen.triangle (focal.is_true (abst_equal x x))))))) =>
             zen.Rcut (zen.triangle (zen.equal abst_T abst_zero y)) 
               (v_Vpc:
                (zen.proof (zen.triangle (zen.equal abst_T abst_zero y))) =>
                zen.Rsubst basics.bool__t 
                  (v_Vqc:(zen.term basics.bool__t) =>
                   zen.triangle (focal.is_true v_Vqc)) 
                  (abst_equal x abst_zero) (abst_equal x y) 
                  (v_Vrc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal basics.bool__t 
                               (abst_equal x abst_zero) (abst_equal x y))))) =>
                   zen.Rsubst abst_T 
                     (v_Vsc:(zen.term abst_T) =>
                      zen.not 
                        (zen.triangle 
                           (zen.equal basics.bool__t 
                              (abst_equal v_Vsc abst_zero) (abst_equal x y)))) 
                     x x 
                     (v_Vmc:
                      (zen.proof 
                         (zen.not (zen.triangle (zen.equal abst_T x x)))) =>
                      zen.Rnotand 
                        (zen.not (zen.triangle (zen.equal abst_T x x))) 
                        (zen.not 
                           (zen.triangle (focal.is_true (abst_equal x x)))) 
                        (v_Vtc:
                         (zen.proof 
                            (zen.not 
                               (zen.not (zen.triangle (zen.equal abst_T x x))))) =>
                         zen.Rnotnot (zen.triangle (zen.equal abst_T x x)) 
                           (v_Vuc:
                            (zen.proof (zen.triangle (zen.equal abst_T x x))) =>
                            zen.Rcut (zen.triangle (zen.equal abst_T x x)) 
                              (v_Vuc:
                               (zen.proof 
                                  (zen.triangle (zen.equal abst_T x x))) =>
                               zen.Rsubst abst_T 
                                 (v_Vvc:(zen.term abst_T) =>
                                  zen.triangle (zen.equal abst_T v_Vvc x)) x 
                                 x 
                                 (v_Vmc:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle (zen.equal abst_T x x)))) =>
                                  zen.Raxiom 
                                    (zen.triangle (zen.equal abst_T x x)) 
                                    v_Vuc v_Vmc) 
                                 (v_Vuc:
                                  (zen.proof 
                                     (zen.triangle (zen.equal abst_T x x))) =>
                                  zen.Rsubst abst_T 
                                    (v_Vwc:(zen.term abst_T) =>
                                     zen.triangle (zen.equal abst_T x v_Vwc)) 
                                    x x 
                                    (v_Vmc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T x x)))) =>
                                     zen.Rnoteq abst_T x v_Vmc) 
                                    (v_Vuc:
                                     (zen.proof 
                                        (zen.triangle (zen.equal abst_T x x))) =>
                                     zen.Raxiom 
                                       (zen.triangle (zen.equal abst_T x x)) 
                                       v_Vuc v_Vmc) v_Vuc) v_Vuc) 
                              (v_Vmc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle (zen.equal abst_T x x)))) =>
                               zen.Rnoteq abst_T x v_Vmc)) v_Vtc) 
                        (v_Vxc:
                         (zen.proof 
                            (zen.not 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal x x)))))) =>
                         zen.Rnotnot 
                           (zen.triangle (focal.is_true (abst_equal x x))) 
                           (v_Vyc:
                            (zen.proof 
                               (zen.triangle (focal.is_true (abst_equal x x)))) =>
                            zen.Rall abst_T 
                              (v_Vzc:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vad:(zen.term abst_T) =>
                                  zen.forall abst_T 
                                    (v_Vbd:(zen.term abst_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vzc v_Vad))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal v_Vad v_Vbd))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal v_Vzc v_Vbd))))))) 
                              x 
                              (v_Vcd:
                               (zen.proof 
                                  (zen.forall abst_T 
                                     (v_Vad:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vbd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal x v_Vad))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vad v_Vbd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal x v_Vbd)))))))) =>
                               zen.Rall abst_T 
                                 (v_Vad:(zen.term abst_T) =>
                                  zen.forall abst_T 
                                    (v_Vbd:(zen.term abst_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true (abst_equal x v_Vad))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal v_Vad v_Vbd))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal x v_Vbd)))))) x 
                                 (v_Vdd:
                                  (zen.proof 
                                     (zen.forall abst_T 
                                        (v_Vbd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true (abst_equal x x))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal x v_Vbd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal x v_Vbd))))))) =>
                                  zen.Rall abst_T 
                                    (v_Vbd:(zen.term abst_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true (abst_equal x x))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal x v_Vbd))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal x v_Vbd))))) 
                                    abst_zero 
                                    (v_Ved:
                                     (zen.proof 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true (abst_equal x x))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal x abst_zero))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal x abst_zero)))))) =>
                                     zen.Rimply 
                                       (zen.triangle 
                                          (focal.is_true (abst_equal x x))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal x abst_zero))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal x abst_zero)))) 
                                       (v_Vnc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal x x))))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (focal.is_true (abst_equal x x))) 
                                          v_Vyc v_Vnc) 
                                       (v_Vfd:
                                        (zen.proof 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal x abst_zero))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal x abst_zero))))) =>
                                        zen.Rimply 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal x abst_zero))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal x abst_zero))) 
                                          (v_Vgd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal x 
                                                          abst_zero))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal x abst_zero))) 
                                             __H_1_1_LEMMA v_Vgd) 
                                          (__H_1_1_LEMMA:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal x abst_zero)))) =>
                                           zen.Rsubst basics.bool__t 
                                             (v_Vqc:
                                              (zen.term basics.bool__t) =>
                                              zen.triangle 
                                                (focal.is_true v_Vqc)) 
                                             (abst_equal x abst_zero) 
                                             (abst_equal x y) 
                                             (v_Vrc:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal x 
                                                             abst_zero) 
                                                          (abst_equal x y))))) =>
                                              zen.Rsubst abst_T 
                                                (v_Vsc:(zen.term abst_T) =>
                                                 zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         basics.bool__t 
                                                         (abst_equal v_Vsc 
                                                            abst_zero) 
                                                         (abst_equal x y)))) 
                                                x x 
                                                (v_Vmc:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             x x)))) =>
                                                 zen.Rnoteq abst_T x v_Vmc) 
                                                (v_Vrc:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal x 
                                                                abst_zero) 
                                                             (abst_equal x y))))) =>
                                                 zen.Rsubst abst_T 
                                                   (v_Vhd:
                                                    (zen.term abst_T) =>
                                                    zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (abst_equal x 
                                                               v_Vhd) 
                                                            (abst_equal x y)))) 
                                                   abst_zero y 
                                                   (v_Vid:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T 
                                                                abst_zero y)))) =>
                                                    zen.Raxiom 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            abst_zero y)) 
                                                      v_Vpc v_Vid) 
                                                   (v_Vjd:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   x y) 
                                                                (abst_equal 
                                                                   x y))))) =>
                                                    zen.Rnoteq 
                                                      basics.bool__t 
                                                      (abst_equal x y) v_Vjd) 
                                                   v_Vrc) v_Vrc) 
                                             (v_Vkd:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal x y)))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x y))) 
                                                v_Vkd v_Vkc) __H_1_1_LEMMA) 
                                          v_Vfd) v_Ved) v_Vdd) v_Vcd) 
                              abst_equal_transitive) v_Vxc) v_Voc) 
                     (v_Vrc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (abst_equal x abst_zero) (abst_equal x y))))) =>
                      zen.Rsubst abst_T 
                        (v_Vhd:(zen.term abst_T) =>
                         zen.not 
                           (zen.triangle 
                              (zen.equal basics.bool__t (abst_equal x v_Vhd) 
                                 (abst_equal x y)))) abst_zero y 
                        (v_Vid:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle (zen.equal abst_T abst_zero y)))) =>
                         zen.Raxiom 
                           (zen.triangle (zen.equal abst_T abst_zero y)) 
                           v_Vpc v_Vid) 
                        (v_Vjd:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t (abst_equal x y) 
                                     (abst_equal x y))))) =>
                         zen.Rnoteq basics.bool__t (abst_equal x y) v_Vjd) 
                        v_Vrc) v_Vrc) 
                  (v_Vkd:
                   (zen.proof (zen.triangle (focal.is_true (abst_equal x y)))) =>
                   zen.Raxiom 
                     (zen.triangle (focal.is_true (abst_equal x y))) v_Vkd 
                     v_Vkc) __H_1_1_LEMMA) 
               (v_Vid:
                (zen.proof 
                   (zen.not (zen.triangle (zen.equal abst_T abst_zero y)))) =>
                zen.Rcut 
                  (zen.triangle (focal.is_true (abst_equal abst_zero y))) 
                  (__H_1_2_LEMMA:
                   (zen.proof 
                      (zen.triangle (focal.is_true (abst_equal abst_zero y)))) =>
                   zen.Rall abst_T 
                     (v_Vzc:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vad:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vbd:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_equal v_Vzc v_Vad))) 
                              (zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal v_Vad v_Vbd))) 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal v_Vzc v_Vbd))))))) 
                     x 
                     (v_Vcd:
                      (zen.proof 
                         (zen.forall abst_T 
                            (v_Vad:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vbd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal x v_Vad))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vad v_Vbd))) 
                                     (zen.triangle 
                                        (focal.is_true (abst_equal x v_Vbd)))))))) =>
                      zen.Rall abst_T 
                        (v_Vad:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vbd:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_equal x v_Vad))) 
                              (zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal v_Vad v_Vbd))) 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal x v_Vbd)))))) 
                        abst_zero 
                        (v_Vld:
                         (zen.proof 
                            (zen.forall abst_T 
                               (v_Vbd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal x abst_zero))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal abst_zero v_Vbd))) 
                                     (zen.triangle 
                                        (focal.is_true (abst_equal x v_Vbd))))))) =>
                         zen.Rall abst_T 
                           (v_Vbd:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_equal x abst_zero))) 
                              (zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal abst_zero v_Vbd))) 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal x v_Vbd))))) 
                           y 
                           (v_Vmd:
                            (zen.proof 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal x abst_zero))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal abst_zero y))) 
                                     (zen.triangle 
                                        (focal.is_true (abst_equal x y)))))) =>
                            zen.Rimply 
                              (zen.triangle 
                                 (focal.is_true (abst_equal x abst_zero))) 
                              (zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal abst_zero y))) 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal x y)))) 
                              (v_Vgd:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal x abst_zero))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal x abst_zero))) 
                                 __H_1_1_LEMMA v_Vgd) 
                              (v_Vnd:
                               (zen.proof 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal abst_zero y))) 
                                     (zen.triangle 
                                        (focal.is_true (abst_equal x y))))) =>
                               zen.Rimply 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal abst_zero y))) 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal x y))) 
                                 (v_Vod:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal abst_zero y))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal abst_zero y))) 
                                    __H_1_2_LEMMA v_Vod) 
                                 (v_Vkd:
                                  (zen.proof 
                                     (zen.triangle 
                                        (focal.is_true (abst_equal x y)))) =>
                                  zen.Rsubst basics.bool__t 
                                    (v_Vqc:(zen.term basics.bool__t) =>
                                     zen.triangle (focal.is_true v_Vqc)) 
                                    (abst_equal x y) (abst_equal x y) 
                                    (v_Vjd:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (abst_equal x y) 
                                                 (abst_equal x y))))) =>
                                     zen.Rsubst abst_T 
                                       (v_Vpd:(zen.term abst_T) =>
                                        zen.not 
                                          (zen.triangle 
                                             (zen.equal basics.bool__t 
                                                (abst_equal v_Vpd y) 
                                                (abst_equal x y)))) x x 
                                       (v_Vmc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T x x)))) =>
                                        zen.Rnotand 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal abst_T x x))) 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal x x)))) 
                                          (v_Vtc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T x x))))) =>
                                           zen.Rnotnot 
                                             (zen.triangle 
                                                (zen.equal abst_T x x)) 
                                             (v_Vuc:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (zen.equal abst_T x x))) =>
                                              zen.Reqsym abst_T x x v_Vuc 
                                                v_Vmc) v_Vtc) 
                                          (v_Vxc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal x x)))))) =>
                                           zen.Rnotnot 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal x x))) 
                                             (v_Vyc:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal x x)))) =>
                                              zen.Rall abst_T 
                                                (v_Vzc:(zen.term abst_T) =>
                                                 zen.forall abst_T 
                                                   (v_Vad:
                                                    (zen.term abst_T) =>
                                                    zen.forall abst_T 
                                                      (v_Vbd:
                                                       (zen.term abst_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  v_Vzc v_Vad))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vbd))))))) 
                                                x 
                                                (v_Vcd:
                                                 (zen.proof 
                                                    (zen.forall abst_T 
                                                       (v_Vad:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vbd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    x v_Vad))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    x v_Vbd)))))))) =>
                                                 zen.Rall abst_T 
                                                   (v_Vad:
                                                    (zen.term abst_T) =>
                                                    zen.forall abst_T 
                                                      (v_Vbd:
                                                       (zen.term abst_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal x 
                                                                  v_Vad))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    x v_Vbd)))))) 
                                                   x 
                                                   (v_Vdd:
                                                    (zen.proof 
                                                       (zen.forall abst_T 
                                                          (v_Vbd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    x x))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    x v_Vbd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    x v_Vbd))))))) =>
                                                    zen.Rall abst_T 
                                                      (v_Vbd:
                                                       (zen.term abst_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal x 
                                                                  x))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    x v_Vbd))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    x v_Vbd))))) 
                                                      y 
                                                      (v_Vqd:
                                                       (zen.proof 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    x x))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    x y))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    x y)))))) =>
                                                       zen.Rimply 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal x 
                                                                  x))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    x y))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    x y)))) 
                                                         (v_Vnc:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    x x))))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    x x))) 
                                                            v_Vyc v_Vnc) 
                                                         (v_Vrd:
                                                          (zen.proof 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    x y))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    x y))))) =>
                                                          zen.Rimply 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    x y))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    x y))) 
                                                            (v_Vkc:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x y))))) =>
                                                             zen.Raxiom 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    x y))) 
                                                               v_Vkd v_Vkc) 
                                                            (v_Vkd:
                                                             (zen.proof 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    x y)))) =>
                                                             zen.Raxiom 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    x y))) 
                                                               v_Vkd v_Vkc) 
                                                            v_Vrd) v_Vqd) 
                                                      v_Vdd) v_Vcd) 
                                                abst_equal_transitive) v_Vxc) 
                                          v_Voc) 
                                       (v_Vjd:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal x y) 
                                                    (abst_equal x y))))) =>
                                        zen.Rsubst abst_T 
                                          (v_Vhd:(zen.term abst_T) =>
                                           zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (abst_equal x v_Vhd) 
                                                   (abst_equal x y)))) y y 
                                          (v_Vsd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T y y)))) =>
                                           zen.Rnoteq abst_T y v_Vsd) 
                                          (v_Vjd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal x y) 
                                                       (abst_equal x y))))) =>
                                           zen.Rnoteq basics.bool__t 
                                             (abst_equal x y) v_Vjd) v_Vjd) 
                                       v_Vjd) 
                                    (v_Vkd:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true (abst_equal x y)))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true (abst_equal x y))) 
                                       v_Vkd v_Vkc) v_Vkd) v_Vnd) v_Vmd) 
                           v_Vld) v_Vcd) abst_equal_transitive) 
                  (v_Vod:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true (abst_equal abst_zero y))))) =>
                   zen.Raxiom 
                     (zen.triangle (focal.is_true (abst_equal abst_zero y))) 
                     __H_1_2_LEMMA v_Vod))))) 
        (zen.nnpp (zen.triangle (focal.is_true (abst_equal abst_zero y))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle (focal.is_true (abst_equal abst_zero y))))) =>
            zen.Rall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.imp (zen.triangle (focal.is_true (abst_is_zero v_Vac))) 
                 (zen.and 
                    (zen.triangle 
                       (focal.is_true (abst_equal v_Vac abst_zero))) 
                    (zen.triangle 
                       (focal.is_true (abst_equal abst_zero v_Vac))))) y 
              (v_Vbc:
               (zen.proof 
                  (zen.imp (zen.triangle (focal.is_true (abst_is_zero y))) 
                     (zen.and 
                        (zen.triangle 
                           (focal.is_true (abst_equal y abst_zero))) 
                        (zen.triangle 
                           (focal.is_true (abst_equal abst_zero y)))))) =>
               zen.Rimply (zen.triangle (focal.is_true (abst_is_zero y))) 
                 (zen.and 
                    (zen.triangle (focal.is_true (abst_equal y abst_zero))) 
                    (zen.triangle (focal.is_true (abst_equal abst_zero y)))) 
                 (v_Vcc:
                  (zen.proof 
                     (zen.not (zen.triangle (focal.is_true (abst_is_zero y))))) =>
                  zen.Raxiom (zen.triangle (focal.is_true (abst_is_zero y))) 
                    H2 v_Vcc) 
                 (v_Vdc:
                  (zen.proof 
                     (zen.and 
                        (zen.triangle 
                           (focal.is_true (abst_equal y abst_zero))) 
                        (zen.triangle 
                           (focal.is_true (abst_equal abst_zero y))))) =>
                  zen.Rand 
                    (zen.triangle (focal.is_true (abst_equal y abst_zero))) 
                    (zen.triangle (focal.is_true (abst_equal abst_zero y))) 
                    (v_Vec:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true (abst_equal y abst_zero)))) =>
                     v_Vfc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true (abst_equal abst_zero y)))) =>
                     zen.Raxiom 
                       (zen.triangle (focal.is_true (abst_equal abst_zero y))) 
                       v_Vfc v_Vzb) v_Vdc) v_Vbc) abst_is_zero_checks_to_zero))) 
       (zen.nnpp (zen.triangle (focal.is_true (abst_equal x abst_zero))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle (focal.is_true (abst_equal x abst_zero))))) =>
           zen.Rall abst_T 
             (v_Vac:(zen.term abst_T) =>
              zen.imp (zen.triangle (focal.is_true (abst_is_zero v_Vac))) 
                (zen.and 
                   (zen.triangle (focal.is_true (abst_equal v_Vac abst_zero))) 
                   (zen.triangle (focal.is_true (abst_equal abst_zero v_Vac))))) 
             x 
             (v_Vbc:
              (zen.proof 
                 (zen.imp (zen.triangle (focal.is_true (abst_is_zero x))) 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_equal x abst_zero))) 
                       (zen.triangle (focal.is_true (abst_equal abst_zero x)))))) =>
              zen.Rimply (zen.triangle (focal.is_true (abst_is_zero x))) 
                (zen.and 
                   (zen.triangle (focal.is_true (abst_equal x abst_zero))) 
                   (zen.triangle (focal.is_true (abst_equal abst_zero x)))) 
                (v_Vcc:
                 (zen.proof 
                    (zen.not (zen.triangle (focal.is_true (abst_is_zero x))))) =>
                 zen.Raxiom (zen.triangle (focal.is_true (abst_is_zero x))) 
                   H1 v_Vcc) 
                (v_Vdc:
                 (zen.proof 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_equal x abst_zero))) 
                       (zen.triangle (focal.is_true (abst_equal abst_zero x))))) =>
                 zen.Rand 
                   (zen.triangle (focal.is_true (abst_equal x abst_zero))) 
                   (zen.triangle (focal.is_true (abst_equal abst_zero x))) 
                   (v_Vec:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_equal x abst_zero)))) =>
                    v_Vfc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_equal abst_zero x)))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (abst_equal x abst_zero))) 
                      v_Vec v_Vzb) v_Vdc) v_Vbc) abst_is_zero_checks_to_zero))).

def Zero_check_additive_monoid__zero_is_neutral :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_is_zero_defines_neutral:(dk_logic.eP 
                                  (dk_logic.forall abst_T 
                                     (x:(cc.eT abst_T) =>
                                      dk_logic.forall abst_T 
                                        (y:(cc.eT abst_T) =>
                                         dk_logic.forall abst_T 
                                           (o:(cc.eT abst_T) =>
                                            dk_logic.imp 
                                              (dk_logic.ebP (abst_is_zero o)) 
                                              (dk_logic.imp 
                                                 (dk_logic.ebP 
                                                    (abst_equal x y)) 
                                                 (dk_logic.and 
                                                    (dk_logic.ebP 
                                                       (abst_equal x 
                                                          (abst_plus o y))) 
                                                    (dk_logic.and 
                                                       (dk_logic.ebP 
                                                          (abst_equal 
                                                             (abst_plus o x) 
                                                             y)) 
                                                       (dk_logic.and 
                                                          (dk_logic.ebP 
                                                             (abst_equal 
                                                                (abst_plus x 
                                                                   o) y)) 
                                                          (dk_logic.ebP 
                                                             (abst_equal x 
                                                                (abst_plus y 
                                                                   o)))))))))))) ->
  abst_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.ebP (abst_equal x x)))) ->
  abst_zero_checks_to_zero:(dk_logic.eP 
                              (dk_logic.ebP (abst_is_zero abst_zero))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.and (dk_logic.ebP (abst_equal (abst_plus x abst_zero) x)) 
          (dk_logic.ebP (abst_equal (abst_plus abst_zero x) x))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_is_zero_defines_neutral:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (o:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_is_zero o)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                    (dk_logic.and 
                       (dk_logic.ebP (abst_equal x (abst_plus o y))) 
                       (dk_logic.and 
                          (dk_logic.ebP (abst_equal (abst_plus o x) y)) 
                          (dk_logic.and 
                             (dk_logic.ebP (abst_equal (abst_plus x o) y)) 
                             (dk_logic.ebP (abst_equal x (abst_plus y o)))))))))))) =>
  abst_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) => dk_logic.ebP (abst_equal x x)))) =>
  abst_zero_checks_to_zero:
  (dk_logic.eP (dk_logic.ebP (abst_is_zero abst_zero))) =>
  (__I_1_LEMMA:
   (x:(cc.eT abst_T) ->
    dk_logic.eP 
      (dk_logic.and (dk_logic.ebP (abst_equal (abst_plus x abst_zero) x)) 
         (dk_logic.ebP (abst_equal (abst_plus abst_zero x) x)))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.and 
           (zen.triangle 
              (focal.is_true (abst_equal (abst_plus v_Vzb abst_zero) v_Vzb))) 
           (zen.triangle 
              (focal.is_true (abst_equal (abst_plus abst_zero v_Vzb) v_Vzb))))) 
     (v_Vac:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.and 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_plus v_Vzb abst_zero) v_Vzb))) 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_plus abst_zero v_Vzb) v_Vzb))))))) =>
      zen.Raxiom 
        (zen.forall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.and 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal (abst_plus v_Vzb abst_zero) v_Vzb))) 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal (abst_plus abst_zero v_Vzb) v_Vzb))))) 
        __I_1_LEMMA v_Vac)) 
    (x:(cc.eT abst_T) =>
     (__I_1_0_LEMMA:(dk_logic.eP (dk_logic.ebP (abst_equal x x))) =>
      (__I_1_1_LEMMA:
       (dk_logic.eP (dk_logic.ebP (abst_equal (abst_plus x abst_zero) x))) =>
       (__I_1_2_LEMMA:
        (dk_logic.eP (dk_logic.ebP (abst_equal (abst_plus abst_zero x) x))) =>
        zen.nnpp 
          (zen.and 
             (zen.triangle 
                (focal.is_true (abst_equal (abst_plus x abst_zero) x))) 
             (zen.triangle 
                (focal.is_true (abst_equal (abst_plus abst_zero x) x)))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.and 
                    (zen.triangle 
                       (focal.is_true (abst_equal (abst_plus x abst_zero) x))) 
                    (zen.triangle 
                       (focal.is_true (abst_equal (abst_plus abst_zero x) x)))))) =>
           zen.Rnotand 
             (zen.triangle 
                (focal.is_true (abst_equal (abst_plus x abst_zero) x))) 
             (zen.triangle 
                (focal.is_true (abst_equal (abst_plus abst_zero x) x))) 
             (v_Vac:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true (abst_equal (abst_plus x abst_zero) x))))) =>
              zen.Raxiom 
                (zen.triangle 
                   (focal.is_true (abst_equal (abst_plus x abst_zero) x))) 
                __I_1_1_LEMMA v_Vac) 
             (v_Vbc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true (abst_equal (abst_plus abst_zero x) x))))) =>
              zen.Raxiom 
                (zen.triangle 
                   (focal.is_true (abst_equal (abst_plus abst_zero x) x))) 
                __I_1_2_LEMMA v_Vbc) v_Vzb)) 
         (zen.nnpp 
            (zen.triangle 
               (focal.is_true (abst_equal (abst_plus abst_zero x) x))) 
            (v_Vzb:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true (abst_equal (abst_plus abst_zero x) x))))) =>
             zen.Rall abst_T 
               (v_Vac:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vbc:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vcc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle (focal.is_true (abst_is_zero v_Vcc))) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Vac v_Vbc))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal v_Vac (abst_plus v_Vcc v_Vbc)))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_plus v_Vcc v_Vac) 
                                          v_Vbc))) 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus v_Vac v_Vcc) v_Vbc))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vac 
                                             (abst_plus v_Vbc v_Vcc))))))))))) 
               x 
               (v_Vdc:
                (zen.proof 
                   (zen.forall abst_T 
                      (v_Vbc:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vcc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true (abst_is_zero v_Vcc))) 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_equal x v_Vbc))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal x (abst_plus v_Vcc v_Vbc)))) 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal (abst_plus v_Vcc x) 
                                              v_Vbc))) 
                                     (zen.and 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus x v_Vcc) v_Vbc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x 
                                                 (abst_plus v_Vbc v_Vcc)))))))))))) =>
                zen.Rall abst_T 
                  (v_Vbc:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vcc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle (focal.is_true (abst_is_zero v_Vcc))) 
                        (zen.imp 
                           (zen.triangle (focal.is_true (abst_equal x v_Vbc))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal x (abst_plus v_Vcc v_Vbc)))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_plus v_Vcc x) v_Vbc))) 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_plus x v_Vcc) 
                                             v_Vbc))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal x 
                                             (abst_plus v_Vbc v_Vcc)))))))))) 
                  x 
                  (v_Vec:
                   (zen.proof 
                      (zen.forall abst_T 
                         (v_Vcc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true (abst_is_zero v_Vcc))) 
                            (zen.imp 
                               (zen.triangle (focal.is_true (abst_equal x x))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal x (abst_plus v_Vcc x)))) 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal (abst_plus v_Vcc x) x))) 
                                     (zen.and 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus x v_Vcc) x))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x 
                                                 (abst_plus x v_Vcc))))))))))) =>
                   zen.Rall abst_T 
                     (v_Vcc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle (focal.is_true (abst_is_zero v_Vcc))) 
                        (zen.imp 
                           (zen.triangle (focal.is_true (abst_equal x x))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal x (abst_plus v_Vcc x)))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_plus v_Vcc x) x))) 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_plus x v_Vcc) x))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal x (abst_plus x v_Vcc))))))))) 
                     abst_zero 
                     (v_Vfc:
                      (zen.proof 
                         (zen.imp 
                            (zen.triangle 
                               (focal.is_true (abst_is_zero abst_zero))) 
                            (zen.imp 
                               (zen.triangle (focal.is_true (abst_equal x x))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal x (abst_plus abst_zero x)))) 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus abst_zero x) x))) 
                                     (zen.and 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus x abst_zero) x))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x 
                                                 (abst_plus x abst_zero)))))))))) =>
                      zen.Rimply 
                        (zen.triangle 
                           (focal.is_true (abst_is_zero abst_zero))) 
                        (zen.imp 
                           (zen.triangle (focal.is_true (abst_equal x x))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal x (abst_plus abst_zero x)))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_plus abst_zero x) x))) 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus x abst_zero) x))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal x 
                                             (abst_plus x abst_zero)))))))) 
                        (v_Vgc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true (abst_is_zero abst_zero))))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true (abst_is_zero abst_zero))) 
                           abst_zero_checks_to_zero v_Vgc) 
                        (v_Vhc:
                         (zen.proof 
                            (zen.imp 
                               (zen.triangle (focal.is_true (abst_equal x x))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal x (abst_plus abst_zero x)))) 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus abst_zero x) x))) 
                                     (zen.and 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus x abst_zero) x))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x 
                                                 (abst_plus x abst_zero))))))))) =>
                         zen.Rimply 
                           (zen.triangle (focal.is_true (abst_equal x x))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal x (abst_plus abst_zero x)))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_plus abst_zero x) x))) 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus x abst_zero) x))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal x 
                                             (abst_plus x abst_zero))))))) 
                           (v_Vic:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal x x))))) =>
                            zen.Raxiom 
                              (zen.triangle (focal.is_true (abst_equal x x))) 
                              __I_1_0_LEMMA v_Vic) 
                           (v_Vjc:
                            (zen.proof 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal x (abst_plus abst_zero x)))) 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus abst_zero x) x))) 
                                     (zen.and 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus x abst_zero) x))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x 
                                                 (abst_plus x abst_zero)))))))) =>
                            zen.Rand 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal x (abst_plus abst_zero x)))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_plus abst_zero x) x))) 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus x abst_zero) x))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal x 
                                             (abst_plus x abst_zero)))))) 
                              (v_Vkc:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal x (abst_plus abst_zero x))))) =>
                               v_Vlc:
                               (zen.proof 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus abst_zero x) x))) 
                                     (zen.and 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus x abst_zero) x))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x 
                                                 (abst_plus x abst_zero))))))) =>
                               zen.Rand 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_plus abst_zero x) x))) 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus x abst_zero) x))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal x 
                                             (abst_plus x abst_zero))))) 
                                 (v_Vmc:
                                  (zen.proof 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus abst_zero x) x)))) =>
                                  v_Vnc:
                                  (zen.proof 
                                     (zen.and 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus x abst_zero) x))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x 
                                                 (abst_plus x abst_zero)))))) =>
                                  zen.Rand 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus x abst_zero) x))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal x 
                                             (abst_plus x abst_zero)))) 
                                    (v_Voc:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus x abst_zero) x)))) =>
                                     v_Vpc:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x 
                                                 (abst_plus x abst_zero))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus abst_zero x) x))) 
                                       v_Vmc v_Vzb) v_Vnc) v_Vlc) v_Vjc) 
                           v_Vhc) v_Vfc) v_Vec) v_Vdc) 
               abst_is_zero_defines_neutral))) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true (abst_equal (abst_plus x abst_zero) x))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true (abst_equal (abst_plus x abst_zero) x))))) =>
            zen.Rall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_is_zero v_Vcc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vac v_Vbc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal v_Vac (abst_plus v_Vcc v_Vbc)))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus v_Vcc v_Vac) 
                                         v_Vbc))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_plus v_Vac v_Vcc) 
                                            v_Vbc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal v_Vac 
                                            (abst_plus v_Vbc v_Vcc))))))))))) 
              x 
              (v_Vdc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.imp 
                           (zen.triangle (focal.is_true (abst_is_zero v_Vcc))) 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_equal x v_Vbc))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal x (abst_plus v_Vcc v_Vbc)))) 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_plus v_Vcc x) 
                                             v_Vbc))) 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal (abst_plus x v_Vcc) 
                                                v_Vbc))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_plus v_Vbc v_Vcc)))))))))))) =>
               zen.Rall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_is_zero v_Vcc))) 
                       (zen.imp 
                          (zen.triangle (focal.is_true (abst_equal x v_Vbc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal x (abst_plus v_Vcc v_Vbc)))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus v_Vcc x) v_Vbc))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_plus x v_Vcc) 
                                            v_Vbc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal x 
                                            (abst_plus v_Vbc v_Vcc)))))))))) 
                 x 
                 (v_Vec:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.imp 
                           (zen.triangle (focal.is_true (abst_is_zero v_Vcc))) 
                           (zen.imp 
                              (zen.triangle (focal.is_true (abst_equal x x))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal x (abst_plus v_Vcc x)))) 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_plus v_Vcc x) x))) 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal (abst_plus x v_Vcc) 
                                                x))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_plus x v_Vcc))))))))))) =>
                  zen.Rall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_is_zero v_Vcc))) 
                       (zen.imp 
                          (zen.triangle (focal.is_true (abst_equal x x))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal x (abst_plus v_Vcc x)))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus v_Vcc x) x))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_plus x v_Vcc) x))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal x (abst_plus x v_Vcc))))))))) 
                    abst_zero 
                    (v_Vfc:
                     (zen.proof 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_is_zero abst_zero))) 
                           (zen.imp 
                              (zen.triangle (focal.is_true (abst_equal x x))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal x (abst_plus abst_zero x)))) 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus abst_zero x) x))) 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus x abst_zero) x))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_plus x abst_zero)))))))))) =>
                     zen.Rimply 
                       (zen.triangle (focal.is_true (abst_is_zero abst_zero))) 
                       (zen.imp 
                          (zen.triangle (focal.is_true (abst_equal x x))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal x (abst_plus abst_zero x)))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus abst_zero x) x))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_plus x abst_zero) 
                                            x))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal x 
                                            (abst_plus x abst_zero)))))))) 
                       (v_Vgc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true (abst_is_zero abst_zero))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true (abst_is_zero abst_zero))) 
                          abst_zero_checks_to_zero v_Vgc) 
                       (v_Vhc:
                        (zen.proof 
                           (zen.imp 
                              (zen.triangle (focal.is_true (abst_equal x x))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal x (abst_plus abst_zero x)))) 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus abst_zero x) x))) 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus x abst_zero) x))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_plus x abst_zero))))))))) =>
                        zen.Rimply 
                          (zen.triangle (focal.is_true (abst_equal x x))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal x (abst_plus abst_zero x)))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus abst_zero x) x))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_plus x abst_zero) 
                                            x))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal x 
                                            (abst_plus x abst_zero))))))) 
                          (v_Vic:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal x x))))) =>
                           zen.Raxiom 
                             (zen.triangle (focal.is_true (abst_equal x x))) 
                             __I_1_0_LEMMA v_Vic) 
                          (v_Vjc:
                           (zen.proof 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal x (abst_plus abst_zero x)))) 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus abst_zero x) x))) 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus x abst_zero) x))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_plus x abst_zero)))))))) =>
                           zen.Rand 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal x (abst_plus abst_zero x)))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus abst_zero x) x))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_plus x abst_zero) 
                                            x))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal x 
                                            (abst_plus x abst_zero)))))) 
                             (v_Vkc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal x (abst_plus abst_zero x))))) =>
                              v_Vlc:
                              (zen.proof 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus abst_zero x) x))) 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus x abst_zero) x))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_plus x abst_zero))))))) =>
                              zen.Rand 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus abst_zero x) x))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_plus x abst_zero) 
                                            x))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal x 
                                            (abst_plus x abst_zero))))) 
                                (v_Vmc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus abst_zero x) x)))) =>
                                 v_Vnc:
                                 (zen.proof 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus x abst_zero) x))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_plus x abst_zero)))))) =>
                                 zen.Rand 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_plus x abst_zero) 
                                            x))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal x 
                                            (abst_plus x abst_zero)))) 
                                   (v_Voc:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus x abst_zero) x)))) =>
                                    v_Vpc:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_plus x abst_zero))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus x abst_zero) x))) 
                                      v_Voc v_Vzb) v_Vnc) v_Vlc) v_Vjc) v_Vhc) 
                       v_Vfc) v_Vec) v_Vdc) abst_is_zero_defines_neutral))) 
       (zen.nnpp (zen.triangle (focal.is_true (abst_equal x x))) 
          (v_Vzb:
           (zen.proof 
              (zen.not (zen.triangle (focal.is_true (abst_equal x x))))) =>
           zen.Rall abst_T 
             (v_Vac:(zen.term abst_T) =>
              zen.triangle (focal.is_true (abst_equal v_Vac v_Vac))) x 
             (v_Vbc:
              (zen.proof (zen.triangle (focal.is_true (abst_equal x x)))) =>
              zen.Raxiom (zen.triangle (focal.is_true (abst_equal x x))) 
                v_Vbc v_Vzb) abst_equal_reflexive))).

def Zero_check_additive_monoid__is_zero_is_addditive :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (abst_equal x y)) 
                                   (dk_logic.ebP (abst_equal y x)))))) ->
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_is_zero_checks_to_zero:(dk_logic.eP 
                                 (dk_logic.forall abst_T 
                                    (x:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_is_zero x)) 
                                       (dk_logic.and 
                                          (dk_logic.ebP 
                                             (abst_equal x abst_zero)) 
                                          (dk_logic.ebP 
                                             (abst_equal abst_zero x)))))) ->
  abst_is_zero_defines_neutral:(dk_logic.eP 
                                  (dk_logic.forall abst_T 
                                     (x:(cc.eT abst_T) =>
                                      dk_logic.forall abst_T 
                                        (y:(cc.eT abst_T) =>
                                         dk_logic.forall abst_T 
                                           (o:(cc.eT abst_T) =>
                                            dk_logic.imp 
                                              (dk_logic.ebP (abst_is_zero o)) 
                                              (dk_logic.imp 
                                                 (dk_logic.ebP 
                                                    (abst_equal x y)) 
                                                 (dk_logic.and 
                                                    (dk_logic.ebP 
                                                       (abst_equal x 
                                                          (abst_plus o y))) 
                                                    (dk_logic.and 
                                                       (dk_logic.ebP 
                                                          (abst_equal 
                                                             (abst_plus o x) 
                                                             y)) 
                                                       (dk_logic.and 
                                                          (dk_logic.ebP 
                                                             (abst_equal 
                                                                (abst_plus x 
                                                                   o) y)) 
                                                          (dk_logic.ebP 
                                                             (abst_equal x 
                                                                (abst_plus y 
                                                                   o)))))))))))) ->
  abst_equals_zero_is_zero_check:(dk_logic.eP 
                                    (dk_logic.forall abst_T 
                                       (x:(cc.eT abst_T) =>
                                        dk_logic.imp 
                                          (dk_logic.or 
                                             (dk_logic.ebP 
                                                (abst_equal abst_zero x)) 
                                             (dk_logic.ebP 
                                                (abst_equal x abst_zero))) 
                                          (dk_logic.ebP (abst_is_zero x))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_is_zero x)) 
             (dk_logic.imp (dk_logic.ebP (abst_is_zero y)) 
                (dk_logic.ebP (abst_is_zero (abst_plus x y)))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal y x)))))) =>
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_is_zero_checks_to_zero:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.imp (dk_logic.ebP (abst_is_zero x)) 
           (dk_logic.and (dk_logic.ebP (abst_equal x abst_zero)) 
              (dk_logic.ebP (abst_equal abst_zero x)))))) =>
  abst_is_zero_defines_neutral:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (o:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_is_zero o)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                    (dk_logic.and 
                       (dk_logic.ebP (abst_equal x (abst_plus o y))) 
                       (dk_logic.and 
                          (dk_logic.ebP (abst_equal (abst_plus o x) y)) 
                          (dk_logic.and 
                             (dk_logic.ebP (abst_equal (abst_plus x o) y)) 
                             (dk_logic.ebP (abst_equal x (abst_plus y o)))))))))))) =>
  abst_equals_zero_is_zero_check:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.imp 
           (dk_logic.or (dk_logic.ebP (abst_equal abst_zero x)) 
              (dk_logic.ebP (abst_equal x abst_zero))) 
           (dk_logic.ebP (abst_is_zero x))))) =>
  (__J_1_LEMMA:
   (x:(cc.eT abst_T) ->
    y:(cc.eT abst_T) ->
    Zx:(dk_logic.eP (dk_logic.ebP (abst_is_zero x))) ->
    Zy:(dk_logic.eP (dk_logic.ebP (abst_is_zero y))) ->
    dk_logic.eP (dk_logic.ebP (abst_equal abst_zero (abst_plus x y)))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.imp (zen.triangle (focal.is_true (abst_is_zero v_Vzb))) 
              (zen.imp (zen.triangle (focal.is_true (abst_is_zero v_Vac))) 
                 (zen.triangle 
                    (focal.is_true (abst_is_zero (abst_plus v_Vzb v_Vac)))))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle (focal.is_true (abst_is_zero v_Vzb))) 
                     (zen.imp 
                        (zen.triangle (focal.is_true (abst_is_zero v_Vac))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_is_zero (abst_plus v_Vzb v_Vac)))))))))) =>
      zen.Rnotall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.imp (zen.triangle (focal.is_true (abst_is_zero v_Vzb))) 
              (zen.imp (zen.triangle (focal.is_true (abst_is_zero v_Vac))) 
                 (zen.triangle 
                    (focal.is_true (abst_is_zero (abst_plus v_Vzb v_Vac))))))) 
        (v_Vcc:(zen.term abst_T) =>
         v_Vdc:
         (zen.proof 
            (zen.not 
               (zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle (focal.is_true (abst_is_zero v_Vcc))) 
                     (zen.imp 
                        (zen.triangle (focal.is_true (abst_is_zero v_Vac))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_is_zero (abst_plus v_Vcc v_Vac))))))))) =>
         zen.Rnotall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.imp (zen.triangle (focal.is_true (abst_is_zero v_Vcc))) 
              (zen.imp (zen.triangle (focal.is_true (abst_is_zero v_Vac))) 
                 (zen.triangle 
                    (focal.is_true (abst_is_zero (abst_plus v_Vcc v_Vac)))))) 
           (v_Vec:(zen.term abst_T) =>
            v_Vfc:
            (zen.proof 
               (zen.not 
                  (zen.imp 
                     (zen.triangle (focal.is_true (abst_is_zero v_Vcc))) 
                     (zen.imp 
                        (zen.triangle (focal.is_true (abst_is_zero v_Vec))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_is_zero (abst_plus v_Vcc v_Vec)))))))) =>
            zen.Rnotimply 
              (zen.triangle (focal.is_true (abst_is_zero v_Vcc))) 
              (zen.imp (zen.triangle (focal.is_true (abst_is_zero v_Vec))) 
                 (zen.triangle 
                    (focal.is_true (abst_is_zero (abst_plus v_Vcc v_Vec))))) 
              (v_Vgc:
               (zen.proof (zen.triangle (focal.is_true (abst_is_zero v_Vcc)))) =>
               v_Vhc:
               (zen.proof 
                  (zen.not 
                     (zen.imp 
                        (zen.triangle (focal.is_true (abst_is_zero v_Vec))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_is_zero (abst_plus v_Vcc v_Vec))))))) =>
               zen.Rnotimply 
                 (zen.triangle (focal.is_true (abst_is_zero v_Vec))) 
                 (zen.triangle 
                    (focal.is_true (abst_is_zero (abst_plus v_Vcc v_Vec)))) 
                 (v_Vic:
                  (zen.proof 
                     (zen.triangle (focal.is_true (abst_is_zero v_Vec)))) =>
                  v_Vjc:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_is_zero (abst_plus v_Vcc v_Vec)))))) =>
                  zen.Rall abst_T 
                    (v_Vzb:(zen.term abst_T) =>
                     zen.imp 
                       (zen.or 
                          (zen.triangle 
                             (focal.is_true (abst_equal abst_zero v_Vzb))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vzb abst_zero)))) 
                       (zen.triangle (focal.is_true (abst_is_zero v_Vzb)))) 
                    (abst_plus v_Vcc v_Vec) 
                    (v_Vkc:
                     (zen.proof 
                        (zen.imp 
                           (zen.or 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal abst_zero 
                                       (abst_plus v_Vcc v_Vec)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_plus v_Vcc v_Vec) 
                                       abst_zero)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_is_zero (abst_plus v_Vcc v_Vec)))))) =>
                     zen.Rimply 
                       (zen.or 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal abst_zero (abst_plus v_Vcc v_Vec)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus v_Vcc v_Vec) abst_zero)))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_is_zero (abst_plus v_Vcc v_Vec)))) 
                       (v_Vlc:
                        (zen.proof 
                           (zen.not 
                              (zen.or 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal abst_zero 
                                          (abst_plus v_Vcc v_Vec)))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_plus v_Vcc v_Vec) 
                                          abst_zero)))))) =>
                        zen.Rnotor 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal abst_zero (abst_plus v_Vcc v_Vec)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus v_Vcc v_Vec) abst_zero))) 
                          (v_Vmc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal abst_zero 
                                          (abst_plus v_Vcc v_Vec)))))) =>
                           v_Vnc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_plus v_Vcc v_Vec) 
                                          abst_zero))))) =>
                           zen.Rall abst_T 
                             (v_Vzb:(zen.term abst_T) =>
                              zen.forall abst_T 
                                (v_Vac:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_is_zero v_Vzb))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true (abst_is_zero v_Vac))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal abst_zero 
                                               (abst_plus v_Vzb v_Vac))))))) 
                             v_Vcc 
                             (v_Voc:
                              (zen.proof 
                                 (zen.forall abst_T 
                                    (v_Vac:(zen.term abst_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true (abst_is_zero v_Vcc))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_is_zero v_Vac))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal abst_zero 
                                                   (abst_plus v_Vcc v_Vac)))))))) =>
                              zen.Rall abst_T 
                                (v_Vac:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_is_zero v_Vcc))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true (abst_is_zero v_Vac))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal abst_zero 
                                               (abst_plus v_Vcc v_Vac)))))) 
                                v_Vec 
                                (v_Vpc:
                                 (zen.proof 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true (abst_is_zero v_Vcc))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_is_zero v_Vec))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal abst_zero 
                                                   (abst_plus v_Vcc v_Vec))))))) =>
                                 zen.Rimply 
                                   (zen.triangle 
                                      (focal.is_true (abst_is_zero v_Vcc))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true (abst_is_zero v_Vec))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal abst_zero 
                                               (abst_plus v_Vcc v_Vec))))) 
                                   (v_Vqc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_is_zero v_Vcc))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true (abst_is_zero v_Vcc))) 
                                      v_Vgc v_Vqc) 
                                   (v_Vrc:
                                    (zen.proof 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_is_zero v_Vec))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal abst_zero 
                                                   (abst_plus v_Vcc v_Vec)))))) =>
                                    zen.Rimply 
                                      (zen.triangle 
                                         (focal.is_true (abst_is_zero v_Vec))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal abst_zero 
                                               (abst_plus v_Vcc v_Vec)))) 
                                      (v_Vsc:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_is_zero v_Vec))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_is_zero v_Vec))) v_Vic 
                                         v_Vsc) 
                                      (v_Vtc:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal abst_zero 
                                                   (abst_plus v_Vcc v_Vec))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal abst_zero 
                                                  (abst_plus v_Vcc v_Vec)))) 
                                         v_Vtc v_Vmc) v_Vrc) v_Vpc) v_Voc) 
                             __J_1_LEMMA) v_Vlc) 
                       (v_Vuc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_is_zero (abst_plus v_Vcc v_Vec))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_is_zero (abst_plus v_Vcc v_Vec)))) 
                          v_Vuc v_Vjc) v_Vkc) abst_equals_zero_is_zero_check) 
                 v_Vhc) v_Vfc) v_Vdc) v_Vbc)) 
    (x:(cc.eT abst_T) =>
     y:(cc.eT abst_T) =>
     Zx:(dk_logic.eP (dk_logic.ebP (abst_is_zero x))) =>
     Zy:(dk_logic.eP (dk_logic.ebP (abst_is_zero y))) =>
     (__J_1_1_LEMMA:(dk_logic.eP (dk_logic.ebP (abst_equal x abst_zero))) =>
      (__J_1_2_LEMMA:
       (dk_logic.eP (dk_logic.ebP (abst_equal (abst_plus x y) abst_zero))) =>
       zen.nnpp 
         (zen.triangle (focal.is_true (abst_equal abst_zero (abst_plus x y)))) 
         (v_Vzb:
          (zen.proof 
             (zen.not 
                (zen.triangle 
                   (focal.is_true (abst_equal abst_zero (abst_plus x y)))))) =>
          zen.Rall abst_T 
            (v_Vac:(zen.term abst_T) =>
             zen.forall abst_T 
               (v_Vbc:(zen.term abst_T) =>
                zen.imp 
                  (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
                  (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vac))))) 
            (abst_plus x y) 
            (v_Vcc:
             (zen.proof 
                (zen.forall abst_T 
                   (v_Vbc:(zen.term abst_T) =>
                    zen.imp 
                      (zen.triangle 
                         (focal.is_true (abst_equal (abst_plus x y) v_Vbc))) 
                      (zen.triangle 
                         (focal.is_true (abst_equal v_Vbc (abst_plus x y))))))) =>
             zen.Rall abst_T 
               (v_Vbc:(zen.term abst_T) =>
                zen.imp 
                  (zen.triangle 
                     (focal.is_true (abst_equal (abst_plus x y) v_Vbc))) 
                  (zen.triangle 
                     (focal.is_true (abst_equal v_Vbc (abst_plus x y))))) 
               abst_zero 
               (v_Vdc:
                (zen.proof 
                   (zen.imp 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus x y) abst_zero))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal abst_zero (abst_plus x y)))))) =>
                zen.Rimply 
                  (zen.triangle 
                     (focal.is_true (abst_equal (abst_plus x y) abst_zero))) 
                  (zen.triangle 
                     (focal.is_true (abst_equal abst_zero (abst_plus x y)))) 
                  (v_Vec:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_plus x y) abst_zero))))) =>
                   zen.Raxiom 
                     (zen.triangle 
                        (focal.is_true (abst_equal (abst_plus x y) abst_zero))) 
                     __J_1_2_LEMMA v_Vec) 
                  (v_Vfc:
                   (zen.proof 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal abst_zero (abst_plus x y))))) =>
                   zen.Raxiom 
                     (zen.triangle 
                        (focal.is_true (abst_equal abst_zero (abst_plus x y)))) 
                     v_Vfc v_Vzb) v_Vdc) v_Vcc) abst_equal_symmetric)) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true (abst_equal (abst_plus x y) abst_zero))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true (abst_equal (abst_plus x y) abst_zero))))) =>
            zen.Rall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_is_zero v_Vcc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vac v_Vbc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal v_Vac (abst_plus v_Vcc v_Vbc)))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus v_Vcc v_Vac) 
                                         v_Vbc))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_plus v_Vac v_Vcc) 
                                            v_Vbc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal v_Vac 
                                            (abst_plus v_Vbc v_Vcc))))))))))) 
              x 
              (v_Vdc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.imp 
                           (zen.triangle (focal.is_true (abst_is_zero v_Vcc))) 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_equal x v_Vbc))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal x (abst_plus v_Vcc v_Vbc)))) 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_plus v_Vcc x) 
                                             v_Vbc))) 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal (abst_plus x v_Vcc) 
                                                v_Vbc))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_plus v_Vbc v_Vcc)))))))))))) =>
               zen.Rall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_is_zero v_Vcc))) 
                       (zen.imp 
                          (zen.triangle (focal.is_true (abst_equal x v_Vbc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal x (abst_plus v_Vcc v_Vbc)))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus v_Vcc x) v_Vbc))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_plus x v_Vcc) 
                                            v_Vbc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal x 
                                            (abst_plus v_Vbc v_Vcc)))))))))) 
                 abst_zero 
                 (v_Vec:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.imp 
                           (zen.triangle (focal.is_true (abst_is_zero v_Vcc))) 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_equal x abst_zero))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal x 
                                          (abst_plus v_Vcc abst_zero)))) 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_plus v_Vcc x) 
                                             abst_zero))) 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal (abst_plus x v_Vcc) 
                                                abst_zero))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_plus abst_zero v_Vcc))))))))))) =>
                  zen.Rall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_is_zero v_Vcc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal x abst_zero))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal x (abst_plus v_Vcc abst_zero)))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus v_Vcc x) 
                                         abst_zero))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_plus x v_Vcc) 
                                            abst_zero))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal x 
                                            (abst_plus abst_zero v_Vcc))))))))) 
                    y 
                    (v_Vfc:
                     (zen.proof 
                        (zen.imp 
                           (zen.triangle (focal.is_true (abst_is_zero y))) 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_equal x abst_zero))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal x (abst_plus y abst_zero)))) 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_plus y x) 
                                             abst_zero))) 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal (abst_plus x y) 
                                                abst_zero))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_plus abst_zero y)))))))))) =>
                     zen.Rimply 
                       (zen.triangle (focal.is_true (abst_is_zero y))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal x abst_zero))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal x (abst_plus y abst_zero)))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus y x) abst_zero))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_plus x y) 
                                            abst_zero))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal x 
                                            (abst_plus abst_zero y)))))))) 
                       (v_Vgc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle (focal.is_true (abst_is_zero y))))) =>
                        zen.Raxiom 
                          (zen.triangle (focal.is_true (abst_is_zero y))) Zy 
                          v_Vgc) 
                       (v_Vhc:
                        (zen.proof 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_equal x abst_zero))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal x (abst_plus y abst_zero)))) 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_plus y x) 
                                             abst_zero))) 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal (abst_plus x y) 
                                                abst_zero))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_plus abst_zero y))))))))) =>
                        zen.Rimply 
                          (zen.triangle 
                             (focal.is_true (abst_equal x abst_zero))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal x (abst_plus y abst_zero)))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus y x) abst_zero))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_plus x y) 
                                            abst_zero))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal x 
                                            (abst_plus abst_zero y))))))) 
                          (v_Vic:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal x abst_zero))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true (abst_equal x abst_zero))) 
                             __J_1_1_LEMMA v_Vic) 
                          (v_Vjc:
                           (zen.proof 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal x (abst_plus y abst_zero)))) 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_plus y x) 
                                             abst_zero))) 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal (abst_plus x y) 
                                                abst_zero))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_plus abst_zero y)))))))) =>
                           zen.Rand 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal x (abst_plus y abst_zero)))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus y x) abst_zero))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_plus x y) 
                                            abst_zero))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal x 
                                            (abst_plus abst_zero y)))))) 
                             (v_Vkc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal x (abst_plus y abst_zero))))) =>
                              v_Vlc:
                              (zen.proof 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_plus y x) 
                                             abst_zero))) 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal (abst_plus x y) 
                                                abst_zero))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_plus abst_zero y))))))) =>
                              zen.Rand 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus y x) abst_zero))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_plus x y) 
                                            abst_zero))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal x 
                                            (abst_plus abst_zero y))))) 
                                (v_Vmc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_plus y x) 
                                             abst_zero)))) =>
                                 v_Vnc:
                                 (zen.proof 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal (abst_plus x y) 
                                                abst_zero))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_plus abst_zero y)))))) =>
                                 zen.Rand 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_plus x y) 
                                            abst_zero))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal x 
                                            (abst_plus abst_zero y)))) 
                                   (v_Voc:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal (abst_plus x y) 
                                                abst_zero)))) =>
                                    v_Vpc:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_plus abst_zero y))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal (abst_plus x y) 
                                               abst_zero))) v_Voc v_Vzb) 
                                   v_Vnc) v_Vlc) v_Vjc) v_Vhc) v_Vfc) v_Vec) 
                 v_Vdc) abst_is_zero_defines_neutral))) 
       (zen.nnpp (zen.triangle (focal.is_true (abst_equal x abst_zero))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle (focal.is_true (abst_equal x abst_zero))))) =>
           zen.Rall abst_T 
             (v_Vac:(zen.term abst_T) =>
              zen.imp (zen.triangle (focal.is_true (abst_is_zero v_Vac))) 
                (zen.and 
                   (zen.triangle (focal.is_true (abst_equal v_Vac abst_zero))) 
                   (zen.triangle (focal.is_true (abst_equal abst_zero v_Vac))))) 
             x 
             (v_Vbc:
              (zen.proof 
                 (zen.imp (zen.triangle (focal.is_true (abst_is_zero x))) 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_equal x abst_zero))) 
                       (zen.triangle (focal.is_true (abst_equal abst_zero x)))))) =>
              zen.Rimply (zen.triangle (focal.is_true (abst_is_zero x))) 
                (zen.and 
                   (zen.triangle (focal.is_true (abst_equal x abst_zero))) 
                   (zen.triangle (focal.is_true (abst_equal abst_zero x)))) 
                (v_Vcc:
                 (zen.proof 
                    (zen.not (zen.triangle (focal.is_true (abst_is_zero x))))) =>
                 zen.Raxiom (zen.triangle (focal.is_true (abst_is_zero x))) 
                   Zx v_Vcc) 
                (v_Vdc:
                 (zen.proof 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_equal x abst_zero))) 
                       (zen.triangle (focal.is_true (abst_equal abst_zero x))))) =>
                 zen.Rand 
                   (zen.triangle (focal.is_true (abst_equal x abst_zero))) 
                   (zen.triangle (focal.is_true (abst_equal abst_zero x))) 
                   (v_Vec:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_equal x abst_zero)))) =>
                    v_Vfc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_equal abst_zero x)))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (abst_equal x abst_zero))) 
                      v_Vec v_Vzb) v_Vdc) v_Vbc) abst_is_zero_checks_to_zero))).

def Zero_check_additive_monoid__zero_is_additive :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_zero_simplifies:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.or 
                                      (dk_logic.ebP 
                                         (abst_equal (abst_plus x abst_zero) 
                                            y)) 
                                      (dk_logic.or 
                                         (dk_logic.ebP 
                                            (abst_equal x 
                                               (abst_plus abst_zero y))) 
                                         (dk_logic.or 
                                            (dk_logic.ebP 
                                               (abst_equal x 
                                                  (abst_plus y abst_zero))) 
                                            (dk_logic.ebP 
                                               (abst_equal 
                                                  (abst_plus abst_zero x) y))))) 
                                   (dk_logic.ebP (abst_equal x y)))))) ->
  abst_plus_left_substitution_rule:(dk_logic.eP 
                                      (dk_logic.forall abst_T 
                                         (x:(cc.eT abst_T) =>
                                          dk_logic.forall abst_T 
                                            (y:(cc.eT abst_T) =>
                                             dk_logic.forall abst_T 
                                               (z:(cc.eT abst_T) =>
                                                dk_logic.imp 
                                                  (dk_logic.ebP 
                                                     (abst_equal x y)) 
                                                  (dk_logic.ebP 
                                                     (abst_equal 
                                                        (abst_plus x z) 
                                                        (abst_plus y z)))))))) ->
  abst_is_zero_checks_to_zero:(dk_logic.eP 
                                 (dk_logic.forall abst_T 
                                    (x:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_is_zero x)) 
                                       (dk_logic.and 
                                          (dk_logic.ebP 
                                             (abst_equal x abst_zero)) 
                                          (dk_logic.ebP 
                                             (abst_equal abst_zero x)))))) ->
  abst_zero_checks_to_zero:(dk_logic.eP 
                              (dk_logic.ebP (abst_is_zero abst_zero))) ->
  abst_equals_zero_is_zero_check:(dk_logic.eP 
                                    (dk_logic.forall abst_T 
                                       (x:(cc.eT abst_T) =>
                                        dk_logic.imp 
                                          (dk_logic.or 
                                             (dk_logic.ebP 
                                                (abst_equal abst_zero x)) 
                                             (dk_logic.ebP 
                                                (abst_equal x abst_zero))) 
                                          (dk_logic.ebP (abst_is_zero x))))) ->
  dk_logic.eP (dk_logic.ebP (abst_is_zero (abst_plus abst_zero abst_zero)))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_zero_simplifies:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp 
              (dk_logic.or 
                 (dk_logic.ebP (abst_equal (abst_plus x abst_zero) y)) 
                 (dk_logic.or 
                    (dk_logic.ebP (abst_equal x (abst_plus abst_zero y))) 
                    (dk_logic.or 
                       (dk_logic.ebP (abst_equal x (abst_plus y abst_zero))) 
                       (dk_logic.ebP (abst_equal (abst_plus abst_zero x) y))))) 
              (dk_logic.ebP (abst_equal x y)))))) =>
  abst_plus_left_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.ebP (abst_equal (abst_plus x z) (abst_plus y z)))))))) =>
  abst_is_zero_checks_to_zero:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.imp (dk_logic.ebP (abst_is_zero x)) 
           (dk_logic.and (dk_logic.ebP (abst_equal x abst_zero)) 
              (dk_logic.ebP (abst_equal abst_zero x)))))) =>
  abst_zero_checks_to_zero:
  (dk_logic.eP (dk_logic.ebP (abst_is_zero abst_zero))) =>
  abst_equals_zero_is_zero_check:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.imp 
           (dk_logic.or (dk_logic.ebP (abst_equal abst_zero x)) 
              (dk_logic.ebP (abst_equal x abst_zero))) 
           (dk_logic.ebP (abst_is_zero x))))) =>
  (__K_1_LEMMA:
   (dk_logic.eP 
      (dk_logic.ebP (abst_equal abst_zero (abst_plus abst_zero abst_zero)))) =>
   zen.nnpp 
     (zen.triangle 
        (focal.is_true (abst_is_zero (abst_plus abst_zero abst_zero)))) 
     (v_Vzb:
      (zen.proof 
         (zen.not 
            (zen.triangle 
               (focal.is_true (abst_is_zero (abst_plus abst_zero abst_zero)))))) =>
      zen.Rall abst_T 
        (v_Vac:(zen.term abst_T) =>
         zen.imp 
           (zen.or 
              (zen.triangle (focal.is_true (abst_equal abst_zero v_Vac))) 
              (zen.triangle (focal.is_true (abst_equal v_Vac abst_zero)))) 
           (zen.triangle (focal.is_true (abst_is_zero v_Vac)))) 
        (abst_plus abst_zero abst_zero) 
        (v_Vbc:
         (zen.proof 
            (zen.imp 
               (zen.or 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal abst_zero (abst_plus abst_zero abst_zero)))) 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_plus abst_zero abst_zero) abst_zero)))) 
               (zen.triangle 
                  (focal.is_true 
                     (abst_is_zero (abst_plus abst_zero abst_zero)))))) =>
         zen.Rimply 
           (zen.or 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal abst_zero (abst_plus abst_zero abst_zero)))) 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal (abst_plus abst_zero abst_zero) abst_zero)))) 
           (zen.triangle 
              (focal.is_true (abst_is_zero (abst_plus abst_zero abst_zero)))) 
           (v_Vcc:
            (zen.proof 
               (zen.not 
                  (zen.or 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal abst_zero 
                              (abst_plus abst_zero abst_zero)))) 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_plus abst_zero abst_zero) 
                              abst_zero)))))) =>
            zen.Rnotor 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal abst_zero (abst_plus abst_zero abst_zero)))) 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal (abst_plus abst_zero abst_zero) abst_zero))) 
              (v_Vdc:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal abst_zero 
                              (abst_plus abst_zero abst_zero)))))) =>
               v_Vec:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_plus abst_zero abst_zero) 
                              abst_zero))))) =>
               zen.Raxiom 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal abst_zero (abst_plus abst_zero abst_zero)))) 
                 __K_1_LEMMA v_Vdc) v_Vcc) 
           (v_Vfc:
            (zen.proof 
               (zen.triangle 
                  (focal.is_true 
                     (abst_is_zero (abst_plus abst_zero abst_zero))))) =>
            zen.Raxiom 
              (zen.triangle 
                 (focal.is_true 
                    (abst_is_zero (abst_plus abst_zero abst_zero)))) v_Vfc 
              v_Vzb) v_Vbc) abst_equals_zero_is_zero_check)) 
    ((__K_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (abst_equal (abst_plus abst_zero abst_zero) 
               (abst_plus abst_zero abst_zero)))) =>
      zen.nnpp 
        (zen.triangle 
           (focal.is_true 
              (abst_equal abst_zero (abst_plus abst_zero abst_zero)))) 
        (v_Vzb:
         (zen.proof 
            (zen.not 
               (zen.triangle 
                  (focal.is_true 
                     (abst_equal abst_zero (abst_plus abst_zero abst_zero)))))) =>
         zen.Rall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.imp 
                 (zen.or 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_plus v_Vac abst_zero) v_Vbc))) 
                    (zen.or 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal v_Vac (abst_plus abst_zero v_Vbc)))) 
                       (zen.or 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal v_Vac (abst_plus v_Vbc abst_zero)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus abst_zero v_Vac) v_Vbc)))))) 
                 (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))))) 
           abst_zero 
           (v_Vcc:
            (zen.proof 
               (zen.forall abst_T 
                  (v_Vbc:(zen.term abst_T) =>
                   zen.imp 
                     (zen.or 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_plus abst_zero abst_zero) 
                                 v_Vbc))) 
                        (zen.or 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal abst_zero 
                                    (abst_plus abst_zero v_Vbc)))) 
                           (zen.or 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal abst_zero 
                                       (abst_plus v_Vbc abst_zero)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus abst_zero abst_zero) v_Vbc)))))) 
                     (zen.triangle 
                        (focal.is_true (abst_equal abst_zero v_Vbc)))))) =>
            zen.Rall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.imp 
                 (zen.or 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_plus abst_zero abst_zero) v_Vbc))) 
                    (zen.or 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal abst_zero 
                                (abst_plus abst_zero v_Vbc)))) 
                       (zen.or 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal abst_zero 
                                   (abst_plus v_Vbc abst_zero)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus abst_zero abst_zero) 
                                   v_Vbc)))))) 
                 (zen.triangle (focal.is_true (abst_equal abst_zero v_Vbc)))) 
              (abst_plus abst_zero abst_zero) 
              (v_Vdc:
               (zen.proof 
                  (zen.imp 
                     (zen.or 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_plus abst_zero abst_zero) 
                                 (abst_plus abst_zero abst_zero)))) 
                        (zen.or 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal abst_zero 
                                    (abst_plus abst_zero 
                                       (abst_plus abst_zero abst_zero))))) 
                           (zen.or 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal abst_zero 
                                       (abst_plus 
                                          (abst_plus abst_zero abst_zero) 
                                          abst_zero)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus abst_zero abst_zero) 
                                       (abst_plus abst_zero abst_zero))))))) 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal abst_zero 
                              (abst_plus abst_zero abst_zero)))))) =>
               zen.Rimply 
                 (zen.or 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_plus abst_zero abst_zero) 
                             (abst_plus abst_zero abst_zero)))) 
                    (zen.or 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal abst_zero 
                                (abst_plus abst_zero 
                                   (abst_plus abst_zero abst_zero))))) 
                       (zen.or 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal abst_zero 
                                   (abst_plus 
                                      (abst_plus abst_zero abst_zero) 
                                      abst_zero)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus abst_zero abst_zero) 
                                   (abst_plus abst_zero abst_zero))))))) 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal abst_zero (abst_plus abst_zero abst_zero)))) 
                 (v_Vec:
                  (zen.proof 
                     (zen.not 
                        (zen.or 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_plus abst_zero abst_zero) 
                                    (abst_plus abst_zero abst_zero)))) 
                           (zen.or 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal abst_zero 
                                       (abst_plus abst_zero 
                                          (abst_plus abst_zero abst_zero))))) 
                              (zen.or 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal abst_zero 
                                          (abst_plus 
                                             (abst_plus abst_zero abst_zero) 
                                             abst_zero)))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus abst_zero abst_zero) 
                                          (abst_plus abst_zero abst_zero))))))))) =>
                  zen.Rnotor 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_plus abst_zero abst_zero) 
                             (abst_plus abst_zero abst_zero)))) 
                    (zen.or 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal abst_zero 
                                (abst_plus abst_zero 
                                   (abst_plus abst_zero abst_zero))))) 
                       (zen.or 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal abst_zero 
                                   (abst_plus 
                                      (abst_plus abst_zero abst_zero) 
                                      abst_zero)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus abst_zero abst_zero) 
                                   (abst_plus abst_zero abst_zero)))))) 
                    (v_Vfc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_plus abst_zero abst_zero) 
                                    (abst_plus abst_zero abst_zero)))))) =>
                     v_Vgc:
                     (zen.proof 
                        (zen.not 
                           (zen.or 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal abst_zero 
                                       (abst_plus abst_zero 
                                          (abst_plus abst_zero abst_zero))))) 
                              (zen.or 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal abst_zero 
                                          (abst_plus 
                                             (abst_plus abst_zero abst_zero) 
                                             abst_zero)))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus abst_zero abst_zero) 
                                          (abst_plus abst_zero abst_zero)))))))) =>
                     zen.Rnotor 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal abst_zero 
                                (abst_plus abst_zero 
                                   (abst_plus abst_zero abst_zero))))) 
                       (zen.or 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal abst_zero 
                                   (abst_plus 
                                      (abst_plus abst_zero abst_zero) 
                                      abst_zero)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus abst_zero abst_zero) 
                                   (abst_plus abst_zero abst_zero))))) 
                       (v_Vhc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal abst_zero 
                                       (abst_plus abst_zero 
                                          (abst_plus abst_zero abst_zero))))))) =>
                        v_Vic:
                        (zen.proof 
                           (zen.not 
                              (zen.or 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal abst_zero 
                                          (abst_plus 
                                             (abst_plus abst_zero abst_zero) 
                                             abst_zero)))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus abst_zero abst_zero) 
                                          (abst_plus abst_zero abst_zero))))))) =>
                        zen.Rnotor 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal abst_zero 
                                   (abst_plus 
                                      (abst_plus abst_zero abst_zero) 
                                      abst_zero)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus abst_zero abst_zero) 
                                   (abst_plus abst_zero abst_zero)))) 
                          (v_Vjc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal abst_zero 
                                          (abst_plus 
                                             (abst_plus abst_zero abst_zero) 
                                             abst_zero)))))) =>
                           v_Vfc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus abst_zero abst_zero) 
                                          (abst_plus abst_zero abst_zero)))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus abst_zero abst_zero) 
                                      (abst_plus abst_zero abst_zero)))) 
                             __K_1_1_LEMMA v_Vfc) v_Vic) v_Vgc) v_Vec) 
                 (v_Vkc:
                  (zen.proof 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal abst_zero 
                              (abst_plus abst_zero abst_zero))))) =>
                  zen.Raxiom 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal abst_zero 
                             (abst_plus abst_zero abst_zero)))) v_Vkc v_Vzb) 
                 v_Vdc) v_Vcc) abst_zero_simplifies)) 
       ((__K_1_1_1_LEMMA:
         (dk_logic.eP (dk_logic.ebP (abst_equal abst_zero abst_zero))) =>
         zen.nnpp 
           (zen.triangle 
              (focal.is_true 
                 (abst_equal (abst_plus abst_zero abst_zero) 
                    (abst_plus abst_zero abst_zero)))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_plus abst_zero abst_zero) 
                           (abst_plus abst_zero abst_zero)))))) =>
            zen.Rall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_plus v_Vac v_Vcc) 
                                (abst_plus v_Vbc v_Vcc))))))) abst_zero 
              (v_Vdc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_equal abst_zero v_Vbc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_plus abst_zero v_Vcc) 
                                    (abst_plus v_Vbc v_Vcc)))))))) =>
               zen.Rall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true (abst_equal abst_zero v_Vbc))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_plus abst_zero v_Vcc) 
                                (abst_plus v_Vbc v_Vcc)))))) abst_zero 
                 (v_Vec:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_equal abst_zero abst_zero))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_plus abst_zero v_Vcc) 
                                    (abst_plus abst_zero v_Vcc))))))) =>
                  zen.Rall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true (abst_equal abst_zero abst_zero))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_plus abst_zero v_Vcc) 
                                (abst_plus abst_zero v_Vcc))))) abst_zero 
                    (v_Vfc:
                     (zen.proof 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_equal abst_zero abst_zero))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_plus abst_zero abst_zero) 
                                    (abst_plus abst_zero abst_zero)))))) =>
                     zen.Rimply 
                       (zen.triangle 
                          (focal.is_true (abst_equal abst_zero abst_zero))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_plus abst_zero abst_zero) 
                                (abst_plus abst_zero abst_zero)))) 
                       (v_Vgc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal abst_zero abst_zero))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true (abst_equal abst_zero abst_zero))) 
                          __K_1_1_1_LEMMA v_Vgc) 
                       (v_Vhc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_plus abst_zero abst_zero) 
                                    (abst_plus abst_zero abst_zero))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus abst_zero abst_zero) 
                                   (abst_plus abst_zero abst_zero)))) v_Vhc 
                          v_Vzb) v_Vfc) v_Vec) v_Vdc) 
              abst_plus_left_substitution_rule)) 
          (zen.nnpp 
             (zen.triangle (focal.is_true (abst_equal abst_zero abst_zero))) 
             (v_Vzb:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true (abst_equal abst_zero abst_zero))))) =>
              zen.Rall abst_T 
                (v_Vac:(zen.term abst_T) =>
                 zen.imp (zen.triangle (focal.is_true (abst_is_zero v_Vac))) 
                   (zen.and 
                      (zen.triangle 
                         (focal.is_true (abst_equal v_Vac abst_zero))) 
                      (zen.triangle 
                         (focal.is_true (abst_equal abst_zero v_Vac))))) 
                abst_zero 
                (v_Vbc:
                 (zen.proof 
                    (zen.imp 
                       (zen.triangle (focal.is_true (abst_is_zero abst_zero))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_equal abst_zero abst_zero))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal abst_zero abst_zero)))))) =>
                 zen.Rimply 
                   (zen.triangle (focal.is_true (abst_is_zero abst_zero))) 
                   (zen.and 
                      (zen.triangle 
                         (focal.is_true (abst_equal abst_zero abst_zero))) 
                      (zen.triangle 
                         (focal.is_true (abst_equal abst_zero abst_zero)))) 
                   (v_Vcc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_is_zero abst_zero))))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (abst_is_zero abst_zero))) 
                      abst_zero_checks_to_zero v_Vcc) 
                   (v_Vdc:
                    (zen.proof 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_equal abst_zero abst_zero))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal abst_zero abst_zero))))) =>
                    zen.Rand 
                      (zen.triangle 
                         (focal.is_true (abst_equal abst_zero abst_zero))) 
                      (zen.triangle 
                         (focal.is_true (abst_equal abst_zero abst_zero))) 
                      (v_Vec:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_equal abst_zero abst_zero)))) =>
                       v_Vec:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_equal abst_zero abst_zero)))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true (abst_equal abst_zero abst_zero))) 
                         v_Vec v_Vzb) v_Vdc) v_Vbc) 
                abst_is_zero_checks_to_zero)))).

def Regular_additive_monoid__zero_is_right_neutral_for_minus :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_minus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (abst_equal x y)) 
                                   (dk_logic.ebP (abst_equal y x)))))) ->
  abst_minus_is_well_defined:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.forall abst_T 
                                         (z:(cc.eT abst_T) =>
                                          dk_logic.imp 
                                            (dk_logic.ebP 
                                               (abst_equal x (abst_plus z y))) 
                                            (dk_logic.and 
                                               (dk_logic.ebP 
                                                  (abst_equal 
                                                     (abst_minus x y) z)) 
                                               (dk_logic.ebP 
                                                  (abst_equal 
                                                     (abst_minus x z) y)))))))) ->
  abst_zero_is_neutral:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.and 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus x abst_zero) x)) 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus abst_zero x) x))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.ebP (abst_equal (abst_minus x abst_zero) x)))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_minus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal y x)))))) =>
  abst_minus_is_well_defined:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x (abst_plus z y))) 
                 (dk_logic.and 
                    (dk_logic.ebP (abst_equal (abst_minus x y) z)) 
                    (dk_logic.ebP (abst_equal (abst_minus x z) y)))))))) =>
  abst_zero_is_neutral:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.and (dk_logic.ebP (abst_equal (abst_plus x abst_zero) x)) 
           (dk_logic.ebP (abst_equal (abst_plus abst_zero x) x))))) =>
  (__L_1_LEMMA:
   (x:(cc.eT abst_T) ->
    dk_logic.eP (dk_logic.ebP (abst_equal (abst_minus x abst_zero) x))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.triangle 
           (focal.is_true (abst_equal (abst_minus v_Vzb abst_zero) v_Vzb)))) 
     (v_Vac:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.triangle 
                  (focal.is_true 
                     (abst_equal (abst_minus v_Vzb abst_zero) v_Vzb)))))) =>
      zen.Raxiom 
        (zen.forall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.triangle 
              (focal.is_true (abst_equal (abst_minus v_Vzb abst_zero) v_Vzb)))) 
        __L_1_LEMMA v_Vac)) 
    (x:(cc.eT abst_T) =>
     (__L_1_1_LEMMA:
      (dk_logic.eP (dk_logic.ebP (abst_equal x (abst_plus x abst_zero)))) =>
      zen.nnpp 
        (zen.triangle (focal.is_true (abst_equal (abst_minus x abst_zero) x))) 
        (v_Vzb:
         (zen.proof 
            (zen.not 
               (zen.triangle 
                  (focal.is_true (abst_equal (abst_minus x abst_zero) x))))) =>
         zen.Rall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal v_Vac (abst_plus v_Vcc v_Vbc)))) 
                    (zen.and 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_minus v_Vac v_Vbc) v_Vcc))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_minus v_Vac v_Vcc) v_Vbc))))))) 
           x 
           (v_Vdc:
            (zen.proof 
               (zen.forall abst_T 
                  (v_Vbc:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vcc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal x (abst_plus v_Vcc v_Vbc)))) 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_minus x v_Vbc) v_Vcc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_minus x v_Vcc) v_Vbc)))))))) =>
            zen.Rall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true (abst_equal x (abst_plus v_Vcc v_Vbc)))) 
                    (zen.and 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_minus x v_Vbc) v_Vcc))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_minus x v_Vcc) v_Vbc)))))) 
              abst_zero 
              (v_Vec:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vcc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal x (abst_plus v_Vcc abst_zero)))) 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_minus x abst_zero) v_Vcc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_minus x v_Vcc) abst_zero))))))) =>
               zen.Rall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal x (abst_plus v_Vcc abst_zero)))) 
                    (zen.and 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_minus x abst_zero) v_Vcc))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_minus x v_Vcc) abst_zero))))) 
                 x 
                 (v_Vfc:
                  (zen.proof 
                     (zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal x (abst_plus x abst_zero)))) 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_minus x abst_zero) x))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_minus x x) abst_zero)))))) =>
                  zen.Rimply 
                    (zen.triangle 
                       (focal.is_true (abst_equal x (abst_plus x abst_zero)))) 
                    (zen.and 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_minus x abst_zero) x))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_minus x x) abst_zero)))) 
                    (v_Vgc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal x (abst_plus x abst_zero)))))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal x (abst_plus x abst_zero)))) 
                       __L_1_1_LEMMA v_Vgc) 
                    (v_Vhc:
                     (zen.proof 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_minus x abst_zero) x))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_minus x x) abst_zero))))) =>
                     zen.Rand 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_minus x abst_zero) x))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_minus x x) abst_zero))) 
                       (v_Vic:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_minus x abst_zero) x)))) =>
                        v_Vjc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_minus x x) abst_zero)))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_minus x abst_zero) x))) 
                          v_Vic v_Vzb) v_Vhc) v_Vfc) v_Vec) v_Vdc) 
           abst_minus_is_well_defined)) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true (abst_equal x (abst_plus x abst_zero)))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true (abst_equal x (abst_plus x abst_zero)))))) =>
           zen.Rall abst_T 
             (v_Vac:(zen.term abst_T) =>
              zen.and 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus v_Vac abst_zero) v_Vac))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus abst_zero v_Vac) v_Vac)))) x 
             (v_Vbc:
              (zen.proof 
                 (zen.and 
                    (zen.triangle 
                       (focal.is_true (abst_equal (abst_plus x abst_zero) x))) 
                    (zen.triangle 
                       (focal.is_true (abst_equal (abst_plus abst_zero x) x))))) =>
              zen.Rand 
                (zen.triangle 
                   (focal.is_true (abst_equal (abst_plus x abst_zero) x))) 
                (zen.triangle 
                   (focal.is_true (abst_equal (abst_plus abst_zero x) x))) 
                (v_Vcc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true (abst_equal (abst_plus x abst_zero) x)))) =>
                 v_Vdc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true (abst_equal (abst_plus abst_zero x) x)))) =>
                 zen.Rall abst_T 
                   (v_Vac:(zen.term abst_T) =>
                    zen.forall abst_T 
                      (v_Vec:(zen.term abst_T) =>
                       zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vac v_Vec))) 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vec v_Vac))))) 
                   (abst_plus x abst_zero) 
                   (v_Vfc:
                    (zen.proof 
                       (zen.forall abst_T 
                          (v_Vec:(zen.term abst_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_plus x abst_zero) v_Vec))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal v_Vec (abst_plus x abst_zero))))))) =>
                    zen.Rall abst_T 
                      (v_Vec:(zen.term abst_T) =>
                       zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_plus x abst_zero) v_Vec))) 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal v_Vec (abst_plus x abst_zero))))) 
                      x 
                      (v_Vgc:
                       (zen.proof 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_plus x abst_zero) x))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal x (abst_plus x abst_zero)))))) =>
                       zen.Rimply 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_plus x abst_zero) x))) 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal x (abst_plus x abst_zero)))) 
                         (v_Vhc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus x abst_zero) x))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_plus x abst_zero) x))) 
                            v_Vcc v_Vhc) 
                         (v_Vic:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal x (abst_plus x abst_zero))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal x (abst_plus x abst_zero)))) 
                            v_Vic v_Vzb) v_Vgc) v_Vfc) abst_equal_symmetric) 
                v_Vbc) abst_zero_is_neutral))).

def Additive_monoid_with_infimum__min :
  abst_T:cc.uT -> abst_zero:(cc.eT abst_T) -> cc.eT abst_T
  :=
  abst_T:cc.uT => abst_zero:(cc.eT abst_T) => abst_zero.

def Additive_monoid_with_infimum__add_distributes_on_inf :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_inf:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_add_left_distributes_on_inf:(dk_logic.eP 
                                      (dk_logic.forall abst_T 
                                         (x:(cc.eT abst_T) =>
                                          dk_logic.forall abst_T 
                                            (y:(cc.eT abst_T) =>
                                             dk_logic.forall abst_T 
                                               (z:(cc.eT abst_T) =>
                                                dk_logic.ebP 
                                                  (abst_equal 
                                                     (abst_plus x 
                                                        (abst_inf y z)) 
                                                     (abst_inf 
                                                        (abst_plus x y) 
                                                        (abst_plus x z)))))))) ->
  abst_add_right_distributes_on_inf:(dk_logic.eP 
                                       (dk_logic.forall abst_T 
                                          (x:(cc.eT abst_T) =>
                                           dk_logic.forall abst_T 
                                             (y:(cc.eT abst_T) =>
                                              dk_logic.forall abst_T 
                                                (z:(cc.eT abst_T) =>
                                                 dk_logic.ebP 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_inf x y) z) 
                                                      (abst_inf 
                                                         (abst_plus x z) 
                                                         (abst_plus y z)))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.and 
                (dk_logic.ebP 
                   (abst_equal (abst_plus x (abst_inf y z)) 
                      (abst_inf (abst_plus x y) (abst_plus x z)))) 
                (dk_logic.ebP 
                   (abst_equal (abst_plus (abst_inf x y) z) 
                      (abst_inf (abst_plus x z) (abst_plus y z))))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_inf:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_add_left_distributes_on_inf:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.ebP 
                 (abst_equal (abst_plus x (abst_inf y z)) 
                    (abst_inf (abst_plus x y) (abst_plus x z)))))))) =>
  abst_add_right_distributes_on_inf:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.ebP 
                 (abst_equal (abst_plus (abst_inf x y) z) 
                    (abst_inf (abst_plus x z) (abst_plus y z)))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.and 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus v_Vzb (abst_inf v_Vac v_Vbc)) 
                         (abst_inf (abst_plus v_Vzb v_Vac) 
                            (abst_plus v_Vzb v_Vbc))))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus (abst_inf v_Vzb v_Vac) v_Vbc) 
                         (abst_inf (abst_plus v_Vzb v_Vbc) 
                            (abst_plus v_Vac v_Vbc))))))))) 
    (v_Vcc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.and 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus v_Vzb (abst_inf v_Vac v_Vbc)) 
                                (abst_inf (abst_plus v_Vzb v_Vac) 
                                   (abst_plus v_Vzb v_Vbc))))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus (abst_inf v_Vzb v_Vac) v_Vbc) 
                                (abst_inf (abst_plus v_Vzb v_Vbc) 
                                   (abst_plus v_Vac v_Vbc))))))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.and 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus v_Vzb (abst_inf v_Vac v_Vbc)) 
                         (abst_inf (abst_plus v_Vzb v_Vac) 
                            (abst_plus v_Vzb v_Vbc))))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus (abst_inf v_Vzb v_Vac) v_Vbc) 
                         (abst_inf (abst_plus v_Vzb v_Vbc) 
                            (abst_plus v_Vac v_Vbc)))))))) 
       (v_Vdc:(zen.term abst_T) =>
        v_Vec:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.and 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus v_Vdc (abst_inf v_Vac v_Vbc)) 
                                (abst_inf (abst_plus v_Vdc v_Vac) 
                                   (abst_plus v_Vdc v_Vbc))))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus (abst_inf v_Vdc v_Vac) v_Vbc) 
                                (abst_inf (abst_plus v_Vdc v_Vbc) 
                                   (abst_plus v_Vac v_Vbc)))))))))) =>
        zen.Rnotall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.and 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus v_Vdc (abst_inf v_Vac v_Vbc)) 
                         (abst_inf (abst_plus v_Vdc v_Vac) 
                            (abst_plus v_Vdc v_Vbc))))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus (abst_inf v_Vdc v_Vac) v_Vbc) 
                         (abst_inf (abst_plus v_Vdc v_Vbc) 
                            (abst_plus v_Vac v_Vbc))))))) 
          (v_Vfc:(zen.term abst_T) =>
           v_Vgc:
           (zen.proof 
              (zen.not 
                 (zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.and 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus v_Vdc (abst_inf v_Vfc v_Vbc)) 
                                (abst_inf (abst_plus v_Vdc v_Vfc) 
                                   (abst_plus v_Vdc v_Vbc))))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus (abst_inf v_Vdc v_Vfc) v_Vbc) 
                                (abst_inf (abst_plus v_Vdc v_Vbc) 
                                   (abst_plus v_Vfc v_Vbc))))))))) =>
           zen.Rnotall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.and 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus v_Vdc (abst_inf v_Vfc v_Vbc)) 
                         (abst_inf (abst_plus v_Vdc v_Vfc) 
                            (abst_plus v_Vdc v_Vbc))))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus (abst_inf v_Vdc v_Vfc) v_Vbc) 
                         (abst_inf (abst_plus v_Vdc v_Vbc) 
                            (abst_plus v_Vfc v_Vbc)))))) 
             (v_Vhc:(zen.term abst_T) =>
              v_Vic:
              (zen.proof 
                 (zen.not 
                    (zen.and 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus v_Vdc (abst_inf v_Vfc v_Vhc)) 
                                (abst_inf (abst_plus v_Vdc v_Vfc) 
                                   (abst_plus v_Vdc v_Vhc))))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus (abst_inf v_Vdc v_Vfc) v_Vhc) 
                                (abst_inf (abst_plus v_Vdc v_Vhc) 
                                   (abst_plus v_Vfc v_Vhc)))))))) =>
              zen.Rnotand 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus v_Vdc (abst_inf v_Vfc v_Vhc)) 
                         (abst_inf (abst_plus v_Vdc v_Vfc) 
                            (abst_plus v_Vdc v_Vhc))))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus (abst_inf v_Vdc v_Vfc) v_Vhc) 
                         (abst_inf (abst_plus v_Vdc v_Vhc) 
                            (abst_plus v_Vfc v_Vhc))))) 
                (v_Vjc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus v_Vdc (abst_inf v_Vfc v_Vhc)) 
                                (abst_inf (abst_plus v_Vdc v_Vfc) 
                                   (abst_plus v_Vdc v_Vhc))))))) =>
                 zen.Rall abst_T 
                   (v_Vzb:(zen.term abst_T) =>
                    zen.forall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus v_Vzb (abst_inf v_Vac v_Vbc)) 
                                  (abst_inf (abst_plus v_Vzb v_Vac) 
                                     (abst_plus v_Vzb v_Vbc))))))) v_Vdc 
                   (v_Vkc:
                    (zen.proof 
                       (zen.forall abst_T 
                          (v_Vac:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vbc:(zen.term abst_T) =>
                              zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus v_Vdc (abst_inf v_Vac v_Vbc)) 
                                      (abst_inf (abst_plus v_Vdc v_Vac) 
                                         (abst_plus v_Vdc v_Vbc)))))))) =>
                    zen.Rall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus v_Vdc (abst_inf v_Vac v_Vbc)) 
                                  (abst_inf (abst_plus v_Vdc v_Vac) 
                                     (abst_plus v_Vdc v_Vbc)))))) v_Vfc 
                      (v_Vlc:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vbc:(zen.term abst_T) =>
                              zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus v_Vdc (abst_inf v_Vfc v_Vbc)) 
                                      (abst_inf (abst_plus v_Vdc v_Vfc) 
                                         (abst_plus v_Vdc v_Vbc))))))) =>
                       zen.Rall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus v_Vdc (abst_inf v_Vfc v_Vbc)) 
                                  (abst_inf (abst_plus v_Vdc v_Vfc) 
                                     (abst_plus v_Vdc v_Vbc))))) v_Vhc 
                         (v_Vmc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus v_Vdc (abst_inf v_Vfc v_Vhc)) 
                                      (abst_inf (abst_plus v_Vdc v_Vfc) 
                                         (abst_plus v_Vdc v_Vhc)))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus v_Vdc (abst_inf v_Vfc v_Vhc)) 
                                     (abst_inf (abst_plus v_Vdc v_Vfc) 
                                        (abst_plus v_Vdc v_Vhc))))) v_Vmc 
                            v_Vjc) v_Vlc) v_Vkc) 
                   abst_add_left_distributes_on_inf) 
                (v_Vnc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus (abst_inf v_Vdc v_Vfc) v_Vhc) 
                                (abst_inf (abst_plus v_Vdc v_Vhc) 
                                   (abst_plus v_Vfc v_Vhc))))))) =>
                 zen.Rall abst_T 
                   (v_Vzb:(zen.term abst_T) =>
                    zen.forall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_inf v_Vzb v_Vac) v_Vbc) 
                                  (abst_inf (abst_plus v_Vzb v_Vbc) 
                                     (abst_plus v_Vac v_Vbc))))))) v_Vdc 
                   (v_Voc:
                    (zen.proof 
                       (zen.forall abst_T 
                          (v_Vac:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vbc:(zen.term abst_T) =>
                              zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_inf v_Vdc v_Vac) v_Vbc) 
                                      (abst_inf (abst_plus v_Vdc v_Vbc) 
                                         (abst_plus v_Vac v_Vbc)))))))) =>
                    zen.Rall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_inf v_Vdc v_Vac) v_Vbc) 
                                  (abst_inf (abst_plus v_Vdc v_Vbc) 
                                     (abst_plus v_Vac v_Vbc)))))) v_Vfc 
                      (v_Vpc:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vbc:(zen.term abst_T) =>
                              zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_inf v_Vdc v_Vfc) v_Vbc) 
                                      (abst_inf (abst_plus v_Vdc v_Vbc) 
                                         (abst_plus v_Vfc v_Vbc))))))) =>
                       zen.Rall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_inf v_Vdc v_Vfc) v_Vbc) 
                                  (abst_inf (abst_plus v_Vdc v_Vbc) 
                                     (abst_plus v_Vfc v_Vbc))))) v_Vhc 
                         (v_Vqc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_inf v_Vdc v_Vfc) v_Vhc) 
                                      (abst_inf (abst_plus v_Vdc v_Vhc) 
                                         (abst_plus v_Vfc v_Vhc)))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus (abst_inf v_Vdc v_Vfc) v_Vhc) 
                                     (abst_inf (abst_plus v_Vdc v_Vhc) 
                                        (abst_plus v_Vfc v_Vhc))))) v_Vqc 
                            v_Vnc) v_Vpc) v_Voc) 
                   abst_add_right_distributes_on_inf) v_Vic) v_Vgc) v_Vec) 
       v_Vcc).

def Additive_monoid_with_infimum__is_min :
  abst_T:cc.uT ->
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  x:(cc.eT abst_T) -> cc.eT basics.bool__t
  :=
  abst_T:cc.uT =>
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  x:(cc.eT abst_T) => abst_is_zero x.

def Additive_monoid_with_infimum__min_spec :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_zero:(cc.eT abst_T) ->
  abst_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.ebP (abst_equal x x)))) ->
  dk_logic.eP 
    (dk_logic.ebP 
       (abst_equal (Additive_monoid_with_infimum__min abst_T abst_zero) 
          abst_zero))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_zero:(cc.eT abst_T) =>
  abst_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) => dk_logic.ebP (abst_equal x x)))) =>
  zen.nnpp 
    (zen.triangle 
       (focal.is_true 
          (abst_equal (Additive_monoid_with_infimum__min abst_T abst_zero) 
             abst_zero))) 
    (v_Vzb:
     (zen.proof 
        (zen.not 
           (zen.triangle (focal.is_true (abst_equal abst_zero abst_zero))))) =>
     zen.Rall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.triangle (focal.is_true (abst_equal v_Vac v_Vac))) abst_zero 
       (v_Vbc:
        (zen.proof 
           (zen.triangle (focal.is_true (abst_equal abst_zero abst_zero)))) =>
        zen.Raxiom 
          (zen.triangle (focal.is_true (abst_equal abst_zero abst_zero))) 
          v_Vbc v_Vzb) abst_equal_reflexive).

def Additive_monoid_with_infimum__min_right_absorbes :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_inf:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (abst_equal x y)) 
                                   (dk_logic.ebP (abst_equal y x)))))) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_inf_commutes:(dk_logic.eP 
                       (dk_logic.forall abst_T 
                          (x:(cc.eT abst_T) =>
                           dk_logic.forall abst_T 
                             (y:(cc.eT abst_T) =>
                              dk_logic.ebP 
                                (abst_equal (abst_inf x y) (abst_inf y x)))))) ->
  abst_min:(cc.eT abst_T) ->
  abst_zero_is_neutral:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.and 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus x abst_zero) x)) 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus abst_zero x) x))))) ->
  abst_inf_absorbes_add:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.ebP 
                                    (lattices.Meet_semi_lattice__order_inf 
                                       abst_T abst_equal abst_inf x 
                                       (abst_plus x y)))))) ->
  abst_order_inf_is_reflexive:(dk_logic.eP 
                                 (dk_logic.forall abst_T 
                                    (x:(cc.eT abst_T) =>
                                     dk_logic.forall abst_T 
                                       (y:(cc.eT abst_T) =>
                                        dk_logic.imp 
                                          (dk_logic.ebP (abst_equal x y)) 
                                          (dk_logic.ebP 
                                             (lattices.Meet_semi_lattice__order_inf 
                                                abst_T abst_equal abst_inf x 
                                                y)))))) ->
  abst_min_spec:(dk_logic.eP (dk_logic.ebP (abst_equal abst_min abst_zero))) ->
  abst_order_inf_is_transitive:(dk_logic.eP 
                                  (dk_logic.forall abst_T 
                                     (x:(cc.eT abst_T) =>
                                      dk_logic.forall abst_T 
                                        (y:(cc.eT abst_T) =>
                                         dk_logic.forall abst_T 
                                           (z:(cc.eT abst_T) =>
                                            dk_logic.imp 
                                              (dk_logic.ebP 
                                                 (lattices.Meet_semi_lattice__order_inf 
                                                    abst_T abst_equal 
                                                    abst_inf x y)) 
                                              (dk_logic.imp 
                                                 (dk_logic.ebP 
                                                    (lattices.Meet_semi_lattice__order_inf 
                                                       abst_T abst_equal 
                                                       abst_inf y z)) 
                                                 (dk_logic.ebP 
                                                    (lattices.Meet_semi_lattice__order_inf 
                                                       abst_T abst_equal 
                                                       abst_inf x z)))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.ebP (abst_equal (abst_inf x abst_min) abst_min)))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_inf:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal y x)))))) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_inf_commutes:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.ebP (abst_equal (abst_inf x y) (abst_inf y x)))))) =>
  abst_min:(cc.eT abst_T) =>
  abst_zero_is_neutral:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.and (dk_logic.ebP (abst_equal (abst_plus x abst_zero) x)) 
           (dk_logic.ebP (abst_equal (abst_plus abst_zero x) x))))) =>
  abst_inf_absorbes_add:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.ebP 
              (lattices.Meet_semi_lattice__order_inf abst_T abst_equal 
                 abst_inf x (abst_plus x y)))))) =>
  abst_order_inf_is_reflexive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP 
                 (lattices.Meet_semi_lattice__order_inf abst_T abst_equal 
                    abst_inf x y)))))) =>
  abst_min_spec:
  (dk_logic.eP (dk_logic.ebP (abst_equal abst_min abst_zero))) =>
  abst_order_inf_is_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp 
                 (dk_logic.ebP 
                    (lattices.Meet_semi_lattice__order_inf abst_T abst_equal 
                       abst_inf x y)) 
                 (dk_logic.imp 
                    (dk_logic.ebP 
                       (lattices.Meet_semi_lattice__order_inf abst_T 
                          abst_equal abst_inf y z)) 
                    (dk_logic.ebP 
                       (lattices.Meet_semi_lattice__order_inf abst_T 
                          abst_equal abst_inf x z)))))))) =>
  (__O_1_LEMMA:
   (x:(cc.eT abst_T) ->
    dk_logic.eP 
      (dk_logic.ebP 
         (lattices.Meet_semi_lattice__order_inf abst_T abst_equal abst_inf 
            abst_min x))) =>
   (__O_2_LEMMA:
    (x:(cc.eT abst_T) ->
     dk_logic.eP (dk_logic.ebP (abst_equal (abst_inf abst_min x) abst_min))) =>
    (__O_3_LEMMA:
     (x:(cc.eT abst_T) ->
      dk_logic.eP (dk_logic.ebP (abst_equal (abst_inf x abst_min) abst_min))) =>
     zen.nnpp 
       (zen.forall abst_T 
          (v_Vzb:(zen.term abst_T) =>
           zen.triangle 
             (focal.is_true (abst_equal (abst_inf v_Vzb abst_min) abst_min)))) 
       (v_Vac:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vzb:(zen.term abst_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_inf v_Vzb abst_min) abst_min)))))) =>
        zen.Raxiom 
          (zen.forall abst_T 
             (v_Vzb:(zen.term abst_T) =>
              zen.triangle 
                (focal.is_true 
                   (abst_equal (abst_inf v_Vzb abst_min) abst_min)))) 
          __O_3_LEMMA v_Vac)) 
      (x:(cc.eT abst_T) =>
       zen.nnpp 
         (zen.triangle 
            (focal.is_true (abst_equal (abst_inf x abst_min) abst_min))) 
         (v_Vkc:
          (zen.proof 
             (zen.not 
                (zen.triangle 
                   (focal.is_true (abst_equal (abst_inf x abst_min) abst_min))))) =>
          zen.Rall abst_T 
            (v_Vlc:(zen.term abst_T) =>
             zen.forall abst_T 
               (v_Vmc:(zen.term abst_T) =>
                zen.triangle 
                  (focal.is_true 
                     (abst_equal (abst_inf v_Vlc v_Vmc) 
                        (abst_inf v_Vmc v_Vlc))))) x 
            (v_Vnc:
             (zen.proof 
                (zen.forall abst_T 
                   (v_Vmc:(zen.term abst_T) =>
                    zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_inf x v_Vmc) (abst_inf v_Vmc x)))))) =>
             zen.Rall abst_T 
               (v_Vlc:(zen.term abst_T) =>
                zen.triangle 
                  (focal.is_true 
                     (abst_equal (abst_inf abst_min v_Vlc) abst_min))) x 
               (v_Voc:
                (zen.proof 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_inf abst_min x) abst_min)))) =>
                zen.Rcut 
                  (zen.and 
                     (zen.not 
                        (zen.triangle 
                           (zen.equal abst_T (abst_inf x abst_min) 
                              (abst_inf abst_min x)))) 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_inf x abst_min) 
                                 (abst_inf abst_min x)))))) 
                  (v_Vpc:
                   (zen.proof 
                      (zen.and 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T (abst_inf x abst_min) 
                                  (abst_inf abst_min x)))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_inf x abst_min) 
                                     (abst_inf abst_min x))))))) =>
                   zen.Rand 
                     (zen.not 
                        (zen.triangle 
                           (zen.equal abst_T (abst_inf x abst_min) 
                              (abst_inf abst_min x)))) 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_inf x abst_min) 
                                 (abst_inf abst_min x))))) 
                     (v_Vqc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T (abst_inf x abst_min) 
                                  (abst_inf abst_min x))))) =>
                      v_Vrc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_inf x abst_min) 
                                     (abst_inf abst_min x)))))) =>
                      zen.Rall abst_T 
                        (v_Vmc:(zen.term abst_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_inf x v_Vmc) 
                                 (abst_inf v_Vmc x)))) abst_min 
                        (v_Vsc:
                         (zen.proof 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_inf x abst_min) 
                                     (abst_inf abst_min x))))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_inf x abst_min) 
                                    (abst_inf abst_min x)))) v_Vsc v_Vrc) 
                        v_Vnc) v_Vpc) 
                  (v_Vtc:
                   (zen.proof 
                      (zen.not 
                         (zen.and 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal abst_T (abst_inf x abst_min) 
                                     (abst_inf abst_min x)))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_inf x abst_min) 
                                        (abst_inf abst_min x)))))))) =>
                   zen.Rcut 
                     (zen.triangle (zen.equal abst_T abst_min abst_min)) 
                     (v_Vuc:
                      (zen.proof 
                         (zen.triangle (zen.equal abst_T abst_min abst_min))) =>
                      zen.Rsubst basics.bool__t 
                        (v_Vvc:(zen.term basics.bool__t) =>
                         zen.triangle (focal.is_true v_Vvc)) 
                        (abst_equal (abst_inf abst_min x) abst_min) 
                        (abst_equal (abst_inf x abst_min) abst_min) 
                        (v_Vwc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (abst_equal (abst_inf abst_min x) 
                                        abst_min) 
                                     (abst_equal (abst_inf x abst_min) 
                                        abst_min))))) =>
                         zen.Rsubst abst_T 
                           (v_Vxc:(zen.term abst_T) =>
                            zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (abst_equal v_Vxc abst_min) 
                                    (abst_equal (abst_inf x abst_min) 
                                       abst_min)))) (abst_inf abst_min x) 
                           (abst_inf x abst_min) 
                           (v_Vyc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal abst_T (abst_inf abst_min x) 
                                        (abst_inf x abst_min))))) =>
                            zen.Rnotand 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal abst_T (abst_inf x abst_min) 
                                       (abst_inf abst_min x)))) 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_inf x abst_min) 
                                          (abst_inf abst_min x))))) 
                              (v_Vzc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_inf x abst_min) 
                                              (abst_inf abst_min x)))))) =>
                               zen.Rnotnot 
                                 (zen.triangle 
                                    (zen.equal abst_T (abst_inf x abst_min) 
                                       (abst_inf abst_min x))) 
                                 (v_Vad:
                                  (zen.proof 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_inf x abst_min) 
                                           (abst_inf abst_min x)))) =>
                                  zen.Rcut 
                                    (zen.triangle 
                                       (zen.equal abst_T 
                                          (abst_inf x abst_min) 
                                          (abst_inf x abst_min))) 
                                    (v_Vbd:
                                     (zen.proof 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_inf x abst_min) 
                                              (abst_inf x abst_min)))) =>
                                     zen.Rsubst abst_T 
                                       (v_Vcd:(zen.term abst_T) =>
                                        zen.triangle 
                                          (zen.equal abst_T v_Vcd 
                                             (abst_inf x abst_min))) 
                                       (abst_inf x abst_min) 
                                       (abst_inf abst_min x) 
                                       (v_Vqc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_inf x abst_min) 
                                                    (abst_inf abst_min x))))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_inf x abst_min) 
                                                (abst_inf abst_min x))) 
                                          v_Vad v_Vqc) 
                                       (v_Vdd:
                                        (zen.proof 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_inf abst_min x) 
                                                 (abst_inf x abst_min)))) =>
                                        zen.Rsubst abst_T 
                                          (v_Ved:(zen.term abst_T) =>
                                           zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_inf abst_min x) v_Ved)) 
                                          (abst_inf x abst_min) 
                                          (abst_inf x abst_min) 
                                          (v_Vfd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_inf x abst_min) 
                                                       (abst_inf x abst_min))))) =>
                                           zen.Rnoteq abst_T 
                                             (abst_inf x abst_min) v_Vfd) 
                                          (v_Vdd0:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_inf abst_min x) 
                                                    (abst_inf x abst_min)))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (zen.equal abst_T 
                                                   (abst_inf abst_min x) 
                                                   (abst_inf x abst_min))) 
                                             v_Vdd0 v_Vyc) v_Vdd) v_Vbd) 
                                    (v_Vfd:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_inf x abst_min) 
                                                 (abst_inf x abst_min))))) =>
                                     zen.Rnoteq abst_T (abst_inf x abst_min) 
                                       v_Vfd)) v_Vzc) 
                              (v_Vgd:
                               (zen.proof 
                                  (zen.not 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_inf x abst_min) 
                                                 (abst_inf abst_min x))))))) =>
                               zen.Rnotnot 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_inf x abst_min) 
                                          (abst_inf abst_min x)))) 
                                 (v_Vsc:
                                  (zen.proof 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal (abst_inf x abst_min) 
                                              (abst_inf abst_min x))))) =>
                                  zen.Rall abst_T 
                                    (v_Vlc:(zen.term abst_T) =>
                                     zen.forall abst_T 
                                       (v_Vmc:(zen.term abst_T) =>
                                        zen.forall abst_T 
                                          (v_Vhd:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Vlc v_Vmc))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vmc v_Vhd))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vlc v_Vhd))))))) 
                                    (abst_inf x abst_min) 
                                    (v_Vid:
                                     (zen.proof 
                                        (zen.forall abst_T 
                                           (v_Vmc:(zen.term abst_T) =>
                                            zen.forall abst_T 
                                              (v_Vhd:(zen.term abst_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_inf x 
                                                             abst_min) v_Vmc))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vmc 
                                                             v_Vhd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_inf x 
                                                                abst_min) 
                                                             v_Vhd)))))))) =>
                                     zen.Rall abst_T 
                                       (v_Vmc:(zen.term abst_T) =>
                                        zen.forall abst_T 
                                          (v_Vhd:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_inf x abst_min) 
                                                      v_Vmc))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vmc v_Vhd))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_inf x abst_min) 
                                                         v_Vhd)))))) 
                                       (abst_inf abst_min x) 
                                       (v_Vjd:
                                        (zen.proof 
                                           (zen.forall abst_T 
                                              (v_Vhd:(zen.term abst_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_inf x 
                                                             abst_min) 
                                                          (abst_inf abst_min 
                                                             x)))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_inf 
                                                                abst_min x) 
                                                             v_Vhd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_inf x 
                                                                abst_min) 
                                                             v_Vhd))))))) =>
                                        zen.Rall abst_T 
                                          (v_Vhd:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_inf x abst_min) 
                                                      (abst_inf abst_min x)))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_inf abst_min x) 
                                                         v_Vhd))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_inf x abst_min) 
                                                         v_Vhd))))) abst_min 
                                          (v_Vkd:
                                           (zen.proof 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_inf x 
                                                             abst_min) 
                                                          (abst_inf abst_min 
                                                             x)))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_inf 
                                                                abst_min x) 
                                                             abst_min))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_inf x 
                                                                abst_min) 
                                                             abst_min)))))) =>
                                           zen.Rimply 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_inf x abst_min) 
                                                      (abst_inf abst_min x)))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_inf abst_min x) 
                                                         abst_min))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_inf x abst_min) 
                                                         abst_min)))) 
                                             (v_Vrc:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_inf x 
                                                                abst_min) 
                                                             (abst_inf 
                                                                abst_min x)))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_inf x abst_min) 
                                                         (abst_inf abst_min x)))) 
                                                v_Vsc v_Vrc) 
                                             (v_Vld:
                                              (zen.proof 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_inf 
                                                                abst_min x) 
                                                             abst_min))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_inf x 
                                                                abst_min) 
                                                             abst_min))))) =>
                                              zen.Rimply 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_inf abst_min x) 
                                                         abst_min))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_inf x abst_min) 
                                                         abst_min))) 
                                                (v_Vmd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_inf 
                                                                   abst_min x) 
                                                                abst_min))))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_inf 
                                                               abst_min x) 
                                                            abst_min))) 
                                                   v_Voc v_Vmd) 
                                                (v_Vnd:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_inf x 
                                                                abst_min) 
                                                             abst_min)))) =>
                                                 zen.Rsubst basics.bool__t 
                                                   (v_Vvc:
                                                    (zen.term basics.bool__t) =>
                                                    zen.triangle 
                                                      (focal.is_true v_Vvc)) 
                                                   (abst_equal 
                                                      (abst_inf x abst_min) 
                                                      abst_min) 
                                                   (abst_equal 
                                                      (abst_inf x abst_min) 
                                                      abst_min) 
                                                   (v_Vod:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                   abst_min) 
                                                                (abst_equal 
                                                                   (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                   abst_min))))) =>
                                                    zen.Rsubst abst_T 
                                                      (v_Vxc:
                                                       (zen.term abst_T) =>
                                                       zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (abst_equal 
                                                                  v_Vxc 
                                                                  abst_min) 
                                                               (abst_equal 
                                                                  (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                  abst_min)))) 
                                                      (abst_inf x abst_min) 
                                                      (abst_inf x abst_min) 
                                                      (v_Vfd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                   (abst_inf 
                                                                    x 
                                                                    abst_min))))) =>
                                                       zen.Rnoteq abst_T 
                                                         (abst_inf x abst_min) 
                                                         v_Vfd) 
                                                      (v_Vod0:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_equal 
                                                                    (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                    abst_min) 
                                                                   (abst_equal 
                                                                    (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                    abst_min))))) =>
                                                       zen.Rsubst abst_T 
                                                         (v_Vpd:
                                                          (zen.term abst_T) =>
                                                          zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (abst_equal 
                                                                    (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                    v_Vpd) 
                                                                  (abst_equal 
                                                                    (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                    abst_min)))) 
                                                         abst_min abst_min 
                                                         (v_Vqd:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    abst_min 
                                                                    abst_min)))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T 
                                                                  abst_min 
                                                                  abst_min)) 
                                                            v_Vuc v_Vqd) 
                                                         (v_Vod0:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                    abst_min) 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                    abst_min))))) =>
                                                          zen.Rnoteq 
                                                            basics.bool__t 
                                                            (abst_equal 
                                                               (abst_inf x 
                                                                  abst_min) 
                                                               abst_min) 
                                                            v_Vod0) v_Vod0) 
                                                      v_Vod) 
                                                   (v_Vnd0:
                                                    (zen.proof 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_inf x 
                                                                   abst_min) 
                                                                abst_min)))) =>
                                                    zen.Raxiom 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_inf x 
                                                                  abst_min) 
                                                               abst_min))) 
                                                      v_Vnd0 v_Vkc) v_Vnd) 
                                                v_Vld) v_Vkd) v_Vjd) v_Vid) 
                                    abst_equal_transitive) v_Vgd) v_Vtc) 
                           (v_Vod:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (abst_equal (abst_inf x abst_min) 
                                           abst_min) 
                                        (abst_equal (abst_inf x abst_min) 
                                           abst_min))))) =>
                            zen.Rsubst abst_T 
                              (v_Vpd:(zen.term abst_T) =>
                               zen.not 
                                 (zen.triangle 
                                    (zen.equal basics.bool__t 
                                       (abst_equal (abst_inf x abst_min) 
                                          v_Vpd) 
                                       (abst_equal (abst_inf x abst_min) 
                                          abst_min)))) abst_min abst_min 
                              (v_Vqd:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal abst_T abst_min abst_min)))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (zen.equal abst_T abst_min abst_min)) 
                                 v_Vuc v_Vqd) 
                              (v_Vod0:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (abst_equal (abst_inf x abst_min) 
                                              abst_min) 
                                           (abst_equal (abst_inf x abst_min) 
                                              abst_min))))) =>
                               zen.Rnoteq basics.bool__t 
                                 (abst_equal (abst_inf x abst_min) abst_min) 
                                 v_Vod0) v_Vod) v_Vwc) 
                        (v_Vnd:
                         (zen.proof 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_inf x abst_min) abst_min)))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_inf x abst_min) abst_min))) 
                           v_Vnd v_Vkc) v_Voc) 
                     (v_Vqd:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T abst_min abst_min)))) =>
                      zen.Rcut 
                        (zen.triangle 
                           (focal.is_true (abst_equal abst_min abst_min))) 
                        (v_Vrd:
                         (zen.proof 
                            (zen.triangle 
                               (focal.is_true (abst_equal abst_min abst_min)))) =>
                         zen.Rall abst_T 
                           (v_Vlc:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vmc:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vhd:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vlc v_Vmc))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vmc v_Vhd))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vlc v_Vhd))))))) 
                           (abst_inf abst_min x) 
                           (v_Vsd:
                            (zen.proof 
                               (zen.forall abst_T 
                                  (v_Vmc:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vhd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_inf abst_min x) v_Vmc))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vmc v_Vhd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_inf abst_min x) 
                                                    v_Vhd)))))))) =>
                            zen.Rall abst_T 
                              (v_Vmc:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vhd:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_inf abst_min x) 
                                             v_Vmc))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vmc v_Vhd))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_inf abst_min x) v_Vhd)))))) 
                              abst_min 
                              (v_Vtd:
                               (zen.proof 
                                  (zen.forall abst_T 
                                     (v_Vhd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_inf abst_min x) 
                                                 abst_min))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal abst_min v_Vhd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_inf abst_min x) 
                                                    v_Vhd))))))) =>
                               zen.Rall abst_T 
                                 (v_Vhd:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_inf abst_min x) 
                                             abst_min))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal abst_min v_Vhd))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_inf abst_min x) v_Vhd))))) 
                                 abst_min 
                                 (v_Vud:
                                  (zen.proof 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_inf abst_min x) 
                                                 abst_min))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal abst_min 
                                                    abst_min))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_inf abst_min x) 
                                                    abst_min)))))) =>
                                  zen.Rimply 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_inf abst_min x) 
                                             abst_min))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal abst_min abst_min))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_inf abst_min x) 
                                                abst_min)))) 
                                    (v_Vmd:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_inf abst_min x) 
                                                    abst_min))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_inf abst_min x) 
                                                abst_min))) v_Voc v_Vmd) 
                                    (v_Vvd:
                                     (zen.proof 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal abst_min 
                                                    abst_min))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_inf abst_min x) 
                                                    abst_min))))) =>
                                     zen.Rimply 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal abst_min abst_min))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_inf abst_min x) 
                                                abst_min))) 
                                       (v_Vwd:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal abst_min 
                                                       abst_min))))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal abst_min abst_min))) 
                                          v_Vrd v_Vwd) 
                                       (v_Voc0:
                                        (zen.proof 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_inf abst_min x) 
                                                    abst_min)))) =>
                                        zen.Rsubst basics.bool__t 
                                          (v_Vvc:(zen.term basics.bool__t) =>
                                           zen.triangle (focal.is_true v_Vvc)) 
                                          (abst_equal (abst_inf abst_min x) 
                                             abst_min) 
                                          (abst_equal (abst_inf x abst_min) 
                                             abst_min) 
                                          (v_Vwc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_inf abst_min 
                                                             x) abst_min) 
                                                       (abst_equal 
                                                          (abst_inf x 
                                                             abst_min) 
                                                          abst_min))))) =>
                                           zen.Rsubst abst_T 
                                             (v_Vxc:(zen.term abst_T) =>
                                              zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (abst_equal v_Vxc 
                                                         abst_min) 
                                                      (abst_equal 
                                                         (abst_inf x abst_min) 
                                                         abst_min)))) 
                                             (abst_inf abst_min x) 
                                             (abst_inf x abst_min) 
                                             (v_Vyc:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_inf abst_min 
                                                             x) 
                                                          (abst_inf x 
                                                             abst_min))))) =>
                                              zen.Rnotand 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         (abst_inf x abst_min) 
                                                         (abst_inf abst_min x)))) 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_inf x 
                                                               abst_min) 
                                                            (abst_inf 
                                                               abst_min x))))) 
                                                (v_Vzc:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T 
                                                                (abst_inf x 
                                                                   abst_min) 
                                                                (abst_inf 
                                                                   abst_min x)))))) =>
                                                 zen.Rnotnot 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         (abst_inf x abst_min) 
                                                         (abst_inf abst_min x))) 
                                                   (v_Vad:
                                                    (zen.proof 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_inf x 
                                                                abst_min) 
                                                             (abst_inf 
                                                                abst_min x)))) =>
                                                    zen.Reqsym abst_T 
                                                      (abst_inf x abst_min) 
                                                      (abst_inf abst_min x) 
                                                      v_Vad v_Vyc) v_Vzc) 
                                                (v_Vgd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                   (abst_inf 
                                                                    abst_min 
                                                                    x))))))) =>
                                                 zen.Rnotnot 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_inf x 
                                                               abst_min) 
                                                            (abst_inf 
                                                               abst_min x)))) 
                                                   (v_Vsc:
                                                    (zen.proof 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_inf x 
                                                                   abst_min) 
                                                                (abst_inf 
                                                                   abst_min x))))) =>
                                                    zen.Rall abst_T 
                                                      (v_Vlc:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vmc:
                                                          (zen.term abst_T) =>
                                                          zen.forall abst_T 
                                                            (v_Vhd:
                                                             (zen.term abst_T) =>
                                                             zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vmc 
                                                                    v_Vhd))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vhd))))))) 
                                                      (abst_inf x abst_min) 
                                                      (v_Vid:
                                                       (zen.proof 
                                                          (zen.forall abst_T 
                                                             (v_Vmc:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.forall 
                                                                abst_T 
                                                                (v_Vhd:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                    v_Vmc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vmc 
                                                                    v_Vhd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                    v_Vhd)))))))) =>
                                                       zen.Rall abst_T 
                                                         (v_Vmc:
                                                          (zen.term abst_T) =>
                                                          zen.forall abst_T 
                                                            (v_Vhd:
                                                             (zen.term abst_T) =>
                                                             zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                    v_Vmc))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vmc 
                                                                    v_Vhd))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                    v_Vhd)))))) 
                                                         (abst_inf abst_min x) 
                                                         (v_Vjd:
                                                          (zen.proof 
                                                             (zen.forall 
                                                                abst_T 
                                                                (v_Vhd:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                    (abst_inf 
                                                                    abst_min 
                                                                    x)))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    abst_min 
                                                                    x) v_Vhd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                    v_Vhd))))))) =>
                                                          zen.Rall abst_T 
                                                            (v_Vhd:
                                                             (zen.term abst_T) =>
                                                             zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                    (abst_inf 
                                                                    abst_min 
                                                                    x)))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    abst_min 
                                                                    x) v_Vhd))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                    v_Vhd))))) 
                                                            abst_min 
                                                            (v_Vkd:
                                                             (zen.proof 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                    (abst_inf 
                                                                    abst_min 
                                                                    x)))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    abst_min 
                                                                    x) 
                                                                    abst_min))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                    abst_min)))))) =>
                                                             zen.Rimply 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                    (abst_inf 
                                                                    abst_min 
                                                                    x)))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    abst_min 
                                                                    x) 
                                                                    abst_min))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                    abst_min)))) 
                                                               (v_Vrc:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                    (abst_inf 
                                                                    abst_min 
                                                                    x)))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                    (abst_inf 
                                                                    abst_min 
                                                                    x)))) 
                                                                  v_Vsc v_Vrc) 
                                                               (v_Vld:
                                                                (zen.proof 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    abst_min 
                                                                    x) 
                                                                    abst_min))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                    abst_min))))) =>
                                                                zen.Rimply 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    abst_min 
                                                                    x) 
                                                                    abst_min))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                    abst_min))) 
                                                                  (v_Vmd:
                                                                   (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    abst_min 
                                                                    x) 
                                                                    abst_min))))) =>
                                                                   zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    abst_min 
                                                                    x) 
                                                                    abst_min))) 
                                                                    v_Voc0 
                                                                    v_Vmd) 
                                                                  (v_Vnd:
                                                                   (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                    abst_min)))) =>
                                                                   zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_inf 
                                                                    x 
                                                                    abst_min) 
                                                                    abst_min))) 
                                                                    v_Vnd 
                                                                    v_Vkc) 
                                                                  v_Vld) 
                                                               v_Vkd) v_Vjd) 
                                                         v_Vid) 
                                                      abst_equal_transitive) 
                                                   v_Vgd) v_Vtc) 
                                             (v_Vod:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_inf x 
                                                                abst_min) 
                                                             abst_min) 
                                                          (abst_equal 
                                                             (abst_inf x 
                                                                abst_min) 
                                                             abst_min))))) =>
                                              zen.Rsubst abst_T 
                                                (v_Vpd:(zen.term abst_T) =>
                                                 zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         basics.bool__t 
                                                         (abst_equal 
                                                            (abst_inf x 
                                                               abst_min) 
                                                            v_Vpd) 
                                                         (abst_equal 
                                                            (abst_inf x 
                                                               abst_min) 
                                                            abst_min)))) 
                                                abst_min abst_min 
                                                (v_Vqd0:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             abst_min 
                                                             abst_min)))) =>
                                                 zen.Rnoteq abst_T abst_min 
                                                   v_Vqd0) 
                                                (v_Vod0:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                (abst_inf x 
                                                                   abst_min) 
                                                                abst_min) 
                                                             (abst_equal 
                                                                (abst_inf x 
                                                                   abst_min) 
                                                                abst_min))))) =>
                                                 zen.Rnoteq basics.bool__t 
                                                   (abst_equal 
                                                      (abst_inf x abst_min) 
                                                      abst_min) v_Vod0) v_Vod) 
                                             v_Vwc) 
                                          (v_Vnd:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_inf x abst_min) 
                                                       abst_min)))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_inf x abst_min) 
                                                      abst_min))) v_Vnd v_Vkc) 
                                          v_Voc0) v_Vvd) v_Vud) v_Vtd) v_Vsd) 
                           abst_equal_transitive) 
                        (v_Vwd:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal abst_min abst_min))))) =>
                         zen.Rnoteq abst_T abst_min v_Vqd)))) __O_2_LEMMA) 
            abst_inf_commutes))) 
     (x:(cc.eT abst_T) =>
      zen.nnpp 
        (zen.triangle 
           (focal.is_true (abst_equal (abst_inf abst_min x) abst_min))) 
        (v_Vzb:
         (zen.proof 
            (zen.not 
               (zen.triangle 
                  (focal.is_true (abst_equal (abst_inf abst_min x) abst_min))))) =>
         zen.Rall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.triangle 
              (focal.is_true 
                 (lattices.Meet_semi_lattice__order_inf abst_T abst_equal 
                    abst_inf abst_min v_Vac))) x 
           (v_Vbc:
            (zen.proof 
               (zen.triangle 
                  (focal.is_true (abst_equal abst_min (abst_inf abst_min x))))) =>
            zen.Rall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vac v_Vcc))) 
                    (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vac))))) 
              abst_min 
              (v_Vdc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vcc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true (abst_equal abst_min v_Vcc))) 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Vcc abst_min)))))) =>
               zen.Rall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_equal abst_min v_Vcc))) 
                    (zen.triangle (focal.is_true (abst_equal v_Vcc abst_min)))) 
                 (abst_inf abst_min x) 
                 (v_Vec:
                  (zen.proof 
                     (zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal abst_min (abst_inf abst_min x)))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_inf abst_min x) abst_min))))) =>
                  zen.Rimply 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal abst_min (abst_inf abst_min x)))) 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_inf abst_min x) abst_min))) 
                    (v_Vfc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal abst_min (abst_inf abst_min x)))))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal abst_min (abst_inf abst_min x)))) 
                       v_Vbc v_Vfc) 
                    (v_Vgc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_inf abst_min x) abst_min)))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_inf abst_min x) abst_min))) 
                       v_Vgc v_Vzb) v_Vec) v_Vdc) abst_equal_symmetric) 
           __O_1_LEMMA))) 
    (x:(cc.eT abst_T) =>
     (__O_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (lattices.Meet_semi_lattice__order_inf abst_T abst_equal 
               abst_inf abst_zero (abst_plus abst_zero x)))) =>
      (__O_1_2_LEMMA:
       (dk_logic.eP (dk_logic.ebP (abst_equal (abst_plus abst_zero x) x))) =>
       (__O_1_3_LEMMA:
        (dk_logic.eP 
           (dk_logic.ebP 
              (lattices.Meet_semi_lattice__order_inf abst_T abst_equal 
                 abst_inf abst_zero x))) =>
        zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (lattices.Meet_semi_lattice__order_inf abst_T abst_equal 
                   abst_inf abst_min x))) 
          (v_Vkc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (lattices.Meet_semi_lattice__order_inf abst_T 
                          abst_equal abst_inf abst_min x))))) =>
           zen.Rcut 
             (zen.and 
                (zen.not (zen.triangle (zen.equal abst_T abst_min abst_zero))) 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (lattices.Meet_semi_lattice__order_inf abst_T 
                            abst_equal abst_inf abst_min abst_zero))))) 
             (v_Vlc:
              (zen.proof 
                 (zen.and 
                    (zen.not 
                       (zen.triangle (zen.equal abst_T abst_min abst_zero))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (lattices.Meet_semi_lattice__order_inf abst_T 
                                abst_equal abst_inf abst_min abst_zero)))))) =>
              zen.Rand 
                (zen.not (zen.triangle (zen.equal abst_T abst_min abst_zero))) 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (lattices.Meet_semi_lattice__order_inf abst_T 
                            abst_equal abst_inf abst_min abst_zero)))) 
                (v_Vmc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle (zen.equal abst_T abst_min abst_zero)))) =>
                 v_Vnc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (lattices.Meet_semi_lattice__order_inf abst_T 
                                abst_equal abst_inf abst_min abst_zero))))) =>
                 zen.Rall abst_T 
                   (v_Voc:(zen.term abst_T) =>
                    zen.forall abst_T 
                      (v_Vpc:(zen.term abst_T) =>
                       zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Voc v_Vpc))) 
                         (zen.triangle 
                            (focal.is_true 
                               (lattices.Meet_semi_lattice__order_inf abst_T 
                                  abst_equal abst_inf v_Voc v_Vpc))))) 
                   abst_min 
                   (v_Vqc:
                    (zen.proof 
                       (zen.forall abst_T 
                          (v_Vpc:(zen.term abst_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal abst_min v_Vpc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (lattices.Meet_semi_lattice__order_inf 
                                      abst_T abst_equal abst_inf abst_min 
                                      v_Vpc)))))) =>
                    zen.Rall abst_T 
                      (v_Vpc:(zen.term abst_T) =>
                       zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_equal abst_min v_Vpc))) 
                         (zen.triangle 
                            (focal.is_true 
                               (lattices.Meet_semi_lattice__order_inf abst_T 
                                  abst_equal abst_inf abst_min v_Vpc)))) 
                      abst_zero 
                      (v_Vrc:
                       (zen.proof 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal abst_min abst_zero))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (lattices.Meet_semi_lattice__order_inf 
                                      abst_T abst_equal abst_inf abst_min 
                                      abst_zero))))) =>
                       zen.Rimply 
                         (zen.triangle 
                            (focal.is_true (abst_equal abst_min abst_zero))) 
                         (zen.triangle 
                            (focal.is_true 
                               (lattices.Meet_semi_lattice__order_inf abst_T 
                                  abst_equal abst_inf abst_min abst_zero))) 
                         (v_Vsc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal abst_min abst_zero))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true (abst_equal abst_min abst_zero))) 
                            abst_min_spec v_Vsc) 
                         (v_Vtc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (lattices.Meet_semi_lattice__order_inf 
                                      abst_T abst_equal abst_inf abst_min 
                                      abst_zero)))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (lattices.Meet_semi_lattice__order_inf 
                                     abst_T abst_equal abst_inf abst_min 
                                     abst_zero))) v_Vtc v_Vnc) v_Vrc) v_Vqc) 
                   abst_order_inf_is_reflexive) v_Vlc) 
             (v_Vuc:
              (zen.proof 
                 (zen.not 
                    (zen.and 
                       (zen.not 
                          (zen.triangle (zen.equal abst_T abst_min abst_zero))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (lattices.Meet_semi_lattice__order_inf 
                                   abst_T abst_equal abst_inf abst_min 
                                   abst_zero))))))) =>
              zen.Rcut (zen.triangle (zen.equal abst_T x x)) 
                (v_Vvc:(zen.proof (zen.triangle (zen.equal abst_T x x))) =>
                 zen.Rsubst basics.bool__t 
                   (v_Vwc:(zen.term basics.bool__t) =>
                    zen.triangle (focal.is_true v_Vwc)) 
                   (lattices.Meet_semi_lattice__order_inf abst_T abst_equal 
                      abst_inf abst_zero x) 
                   (lattices.Meet_semi_lattice__order_inf abst_T abst_equal 
                      abst_inf abst_min x) 
                   (v_Vxc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal basics.bool__t 
                                (lattices.Meet_semi_lattice__order_inf 
                                   abst_T abst_equal abst_inf abst_zero x) 
                                (lattices.Meet_semi_lattice__order_inf 
                                   abst_T abst_equal abst_inf abst_min x))))) =>
                    zen.Rsubst abst_T 
                      (v_Vyc:(zen.term abst_T) =>
                       zen.not 
                         (zen.triangle 
                            (zen.equal basics.bool__t 
                               (lattices.Meet_semi_lattice__order_inf abst_T 
                                  abst_equal abst_inf v_Vyc x) 
                               (lattices.Meet_semi_lattice__order_inf abst_T 
                                  abst_equal abst_inf abst_min x)))) 
                      abst_zero abst_min 
                      (v_Vzc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal abst_T abst_zero abst_min)))) =>
                       zen.Rnotand 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T abst_min abst_zero))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (lattices.Meet_semi_lattice__order_inf 
                                     abst_T abst_equal abst_inf abst_min 
                                     abst_zero)))) 
                         (v_Vad:
                          (zen.proof 
                             (zen.not 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T abst_min abst_zero))))) =>
                          zen.Rnotnot 
                            (zen.triangle 
                               (zen.equal abst_T abst_min abst_zero)) 
                            (v_Vbd:
                             (zen.proof 
                                (zen.triangle 
                                   (zen.equal abst_T abst_min abst_zero))) =>
                             zen.Rcut 
                               (zen.triangle 
                                  (zen.equal abst_T abst_min abst_min)) 
                               (v_Vcd:
                                (zen.proof 
                                   (zen.triangle 
                                      (zen.equal abst_T abst_min abst_min))) =>
                                zen.Rsubst abst_T 
                                  (v_Vdd:(zen.term abst_T) =>
                                   zen.triangle 
                                     (zen.equal abst_T v_Vdd abst_min)) 
                                  abst_min abst_zero 
                                  (v_Vmc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T abst_min 
                                               abst_zero)))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (zen.equal abst_T abst_min abst_zero)) 
                                     v_Vbd v_Vmc) 
                                  (v_Ved:
                                   (zen.proof 
                                      (zen.triangle 
                                         (zen.equal abst_T abst_zero abst_min))) =>
                                   zen.Rsubst abst_T 
                                     (v_Vfd:(zen.term abst_T) =>
                                      zen.triangle 
                                        (zen.equal abst_T abst_zero v_Vfd)) 
                                     abst_min abst_min 
                                     (v_Vgd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T abst_min 
                                                  abst_min)))) =>
                                      zen.Rnoteq abst_T abst_min v_Vgd) 
                                     (v_Ved0:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal abst_T abst_zero 
                                               abst_min))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (zen.equal abst_T abst_zero 
                                              abst_min)) v_Ved0 v_Vzc) v_Ved) 
                                  v_Vcd) 
                               (v_Vgd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T abst_min abst_min)))) =>
                                zen.Rnoteq abst_T abst_min v_Vgd)) v_Vad) 
                         (v_Vhd:
                          (zen.proof 
                             (zen.not 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (lattices.Meet_semi_lattice__order_inf 
                                            abst_T abst_equal abst_inf 
                                            abst_min abst_zero)))))) =>
                          zen.Rnotnot 
                            (zen.triangle 
                               (focal.is_true 
                                  (lattices.Meet_semi_lattice__order_inf 
                                     abst_T abst_equal abst_inf abst_min 
                                     abst_zero))) 
                            (v_Vtc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (lattices.Meet_semi_lattice__order_inf 
                                         abst_T abst_equal abst_inf abst_min 
                                         abst_zero)))) =>
                             zen.Rall abst_T 
                               (v_Voc:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vpc:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vid:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (lattices.Meet_semi_lattice__order_inf 
                                                 abst_T abst_equal abst_inf 
                                                 v_Voc v_Vpc))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (lattices.Meet_semi_lattice__order_inf 
                                                    abst_T abst_equal 
                                                    abst_inf v_Vpc v_Vid))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (lattices.Meet_semi_lattice__order_inf 
                                                    abst_T abst_equal 
                                                    abst_inf v_Voc v_Vid))))))) 
                               abst_min 
                               (v_Vjd:
                                (zen.proof 
                                   (zen.forall abst_T 
                                      (v_Vpc:(zen.term abst_T) =>
                                       zen.forall abst_T 
                                         (v_Vid:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (lattices.Meet_semi_lattice__order_inf 
                                                     abst_T abst_equal 
                                                     abst_inf abst_min v_Vpc))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (lattices.Meet_semi_lattice__order_inf 
                                                        abst_T abst_equal 
                                                        abst_inf v_Vpc v_Vid))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (lattices.Meet_semi_lattice__order_inf 
                                                        abst_T abst_equal 
                                                        abst_inf abst_min 
                                                        v_Vid)))))))) =>
                                zen.Rall abst_T 
                                  (v_Vpc:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vid:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (lattices.Meet_semi_lattice__order_inf 
                                                 abst_T abst_equal abst_inf 
                                                 abst_min v_Vpc))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (lattices.Meet_semi_lattice__order_inf 
                                                    abst_T abst_equal 
                                                    abst_inf v_Vpc v_Vid))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (lattices.Meet_semi_lattice__order_inf 
                                                    abst_T abst_equal 
                                                    abst_inf abst_min v_Vid)))))) 
                                  abst_zero 
                                  (v_Vkd:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vid:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (lattices.Meet_semi_lattice__order_inf 
                                                     abst_T abst_equal 
                                                     abst_inf abst_min 
                                                     abst_zero))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (lattices.Meet_semi_lattice__order_inf 
                                                        abst_T abst_equal 
                                                        abst_inf abst_zero 
                                                        v_Vid))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (lattices.Meet_semi_lattice__order_inf 
                                                        abst_T abst_equal 
                                                        abst_inf abst_min 
                                                        v_Vid))))))) =>
                                   zen.Rall abst_T 
                                     (v_Vid:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (lattices.Meet_semi_lattice__order_inf 
                                                 abst_T abst_equal abst_inf 
                                                 abst_min abst_zero))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (lattices.Meet_semi_lattice__order_inf 
                                                    abst_T abst_equal 
                                                    abst_inf abst_zero v_Vid))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (lattices.Meet_semi_lattice__order_inf 
                                                    abst_T abst_equal 
                                                    abst_inf abst_min v_Vid))))) 
                                     x 
                                     (v_Vld:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (lattices.Meet_semi_lattice__order_inf 
                                                     abst_T abst_equal 
                                                     abst_inf abst_min 
                                                     abst_zero))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (lattices.Meet_semi_lattice__order_inf 
                                                        abst_T abst_equal 
                                                        abst_inf abst_zero x))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (lattices.Meet_semi_lattice__order_inf 
                                                        abst_T abst_equal 
                                                        abst_inf abst_min x)))))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (lattices.Meet_semi_lattice__order_inf 
                                                 abst_T abst_equal abst_inf 
                                                 abst_min abst_zero))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (lattices.Meet_semi_lattice__order_inf 
                                                    abst_T abst_equal 
                                                    abst_inf abst_zero x))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (lattices.Meet_semi_lattice__order_inf 
                                                    abst_T abst_equal 
                                                    abst_inf abst_min x)))) 
                                        (v_Vnc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (lattices.Meet_semi_lattice__order_inf 
                                                        abst_T abst_equal 
                                                        abst_inf abst_min 
                                                        abst_zero))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (lattices.Meet_semi_lattice__order_inf 
                                                    abst_T abst_equal 
                                                    abst_inf abst_min 
                                                    abst_zero))) v_Vtc v_Vnc) 
                                        (v_Vmd:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (lattices.Meet_semi_lattice__order_inf 
                                                        abst_T abst_equal 
                                                        abst_inf abst_zero x))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (lattices.Meet_semi_lattice__order_inf 
                                                        abst_T abst_equal 
                                                        abst_inf abst_min x))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (lattices.Meet_semi_lattice__order_inf 
                                                    abst_T abst_equal 
                                                    abst_inf abst_zero x))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (lattices.Meet_semi_lattice__order_inf 
                                                    abst_T abst_equal 
                                                    abst_inf abst_min x))) 
                                           (v_Vnd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (lattices.Meet_semi_lattice__order_inf 
                                                           abst_T abst_equal 
                                                           abst_inf 
                                                           abst_zero x))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (lattices.Meet_semi_lattice__order_inf 
                                                       abst_T abst_equal 
                                                       abst_inf abst_zero x))) 
                                              __O_1_3_LEMMA v_Vnd) 
                                           (v_Vod:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (lattices.Meet_semi_lattice__order_inf 
                                                        abst_T abst_equal 
                                                        abst_inf abst_min x)))) =>
                                            zen.Rsubst basics.bool__t 
                                              (v_Vwc:
                                               (zen.term basics.bool__t) =>
                                               zen.triangle 
                                                 (focal.is_true v_Vwc)) 
                                              (lattices.Meet_semi_lattice__order_inf 
                                                 abst_T abst_equal abst_inf 
                                                 abst_min x) 
                                              (lattices.Meet_semi_lattice__order_inf 
                                                 abst_T abst_equal abst_inf 
                                                 abst_min x) 
                                              (v_Vpd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (lattices.Meet_semi_lattice__order_inf 
                                                              abst_T 
                                                              abst_equal 
                                                              abst_inf 
                                                              abst_min x) 
                                                           (lattices.Meet_semi_lattice__order_inf 
                                                              abst_T 
                                                              abst_equal 
                                                              abst_inf 
                                                              abst_min x))))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Vyc:(zen.term abst_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (lattices.Meet_semi_lattice__order_inf 
                                                             abst_T 
                                                             abst_equal 
                                                             abst_inf v_Vyc x) 
                                                          (lattices.Meet_semi_lattice__order_inf 
                                                             abst_T 
                                                             abst_equal 
                                                             abst_inf 
                                                             abst_min x)))) 
                                                 abst_min abst_min 
                                                 (v_Vgd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              abst_min 
                                                              abst_min)))) =>
                                                  zen.Rnoteq abst_T abst_min 
                                                    v_Vgd) 
                                                 (v_Vpd0:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (lattices.Meet_semi_lattice__order_inf 
                                                                 abst_T 
                                                                 abst_equal 
                                                                 abst_inf 
                                                                 abst_min x) 
                                                              (lattices.Meet_semi_lattice__order_inf 
                                                                 abst_T 
                                                                 abst_equal 
                                                                 abst_inf 
                                                                 abst_min x))))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Vqd:
                                                     (zen.term abst_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (lattices.Meet_semi_lattice__order_inf 
                                                                abst_T 
                                                                abst_equal 
                                                                abst_inf 
                                                                abst_min 
                                                                v_Vqd) 
                                                             (lattices.Meet_semi_lattice__order_inf 
                                                                abst_T 
                                                                abst_equal 
                                                                abst_inf 
                                                                abst_min x)))) 
                                                    x x 
                                                    (v_Vrd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T x x)))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             x x)) v_Vvc 
                                                       v_Vrd) 
                                                    (v_Vpd0:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_min 
                                                                    x) 
                                                                 (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_min 
                                                                    x))))) =>
                                                     zen.Rnoteq 
                                                       basics.bool__t 
                                                       (lattices.Meet_semi_lattice__order_inf 
                                                          abst_T abst_equal 
                                                          abst_inf abst_min x) 
                                                       v_Vpd0) v_Vpd0) v_Vpd) 
                                              (v_Vod0:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (lattices.Meet_semi_lattice__order_inf 
                                                           abst_T abst_equal 
                                                           abst_inf abst_min 
                                                           x)))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (lattices.Meet_semi_lattice__order_inf 
                                                          abst_T abst_equal 
                                                          abst_inf abst_min x))) 
                                                 v_Vod0 v_Vkc) v_Vod) v_Vmd) 
                                        v_Vld) v_Vkd) v_Vjd) 
                               abst_order_inf_is_transitive) v_Vhd) v_Vuc) 
                      (v_Vpd:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (lattices.Meet_semi_lattice__order_inf 
                                      abst_T abst_equal abst_inf abst_min x) 
                                   (lattices.Meet_semi_lattice__order_inf 
                                      abst_T abst_equal abst_inf abst_min x))))) =>
                       zen.Rsubst abst_T 
                         (v_Vqd:(zen.term abst_T) =>
                          zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (lattices.Meet_semi_lattice__order_inf 
                                     abst_T abst_equal abst_inf abst_min 
                                     v_Vqd) 
                                  (lattices.Meet_semi_lattice__order_inf 
                                     abst_T abst_equal abst_inf abst_min x)))) 
                         x x 
                         (v_Vrd:
                          (zen.proof 
                             (zen.not (zen.triangle (zen.equal abst_T x x)))) =>
                          zen.Raxiom (zen.triangle (zen.equal abst_T x x)) 
                            v_Vvc v_Vrd) 
                         (v_Vpd0:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (lattices.Meet_semi_lattice__order_inf 
                                         abst_T abst_equal abst_inf abst_min 
                                         x) 
                                      (lattices.Meet_semi_lattice__order_inf 
                                         abst_T abst_equal abst_inf abst_min 
                                         x))))) =>
                          zen.Rnoteq basics.bool__t 
                            (lattices.Meet_semi_lattice__order_inf abst_T 
                               abst_equal abst_inf abst_min x) v_Vpd0) v_Vpd) 
                      v_Vxc) 
                   (v_Vod:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (lattices.Meet_semi_lattice__order_inf abst_T 
                                abst_equal abst_inf abst_min x)))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (lattices.Meet_semi_lattice__order_inf abst_T 
                               abst_equal abst_inf abst_min x))) v_Vod v_Vkc) 
                   __O_1_3_LEMMA) 
                (v_Vrd:
                 (zen.proof (zen.not (zen.triangle (zen.equal abst_T x x)))) =>
                 zen.Rcut 
                   (zen.triangle 
                      (focal.is_true 
                         (lattices.Meet_semi_lattice__order_inf abst_T 
                            abst_equal abst_inf x x))) 
                   (v_Vsd:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (lattices.Meet_semi_lattice__order_inf abst_T 
                                abst_equal abst_inf x x)))) =>
                    zen.Rall abst_T 
                      (v_Voc:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vpc:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vid:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (lattices.Meet_semi_lattice__order_inf 
                                        abst_T abst_equal abst_inf v_Voc 
                                        v_Vpc))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (lattices.Meet_semi_lattice__order_inf 
                                           abst_T abst_equal abst_inf v_Vpc 
                                           v_Vid))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (lattices.Meet_semi_lattice__order_inf 
                                           abst_T abst_equal abst_inf v_Voc 
                                           v_Vid))))))) abst_zero 
                      (v_Vtd:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vpc:(zen.term abst_T) =>
                              zen.forall abst_T 
                                (v_Vid:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (lattices.Meet_semi_lattice__order_inf 
                                            abst_T abst_equal abst_inf 
                                            abst_zero v_Vpc))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (lattices.Meet_semi_lattice__order_inf 
                                               abst_T abst_equal abst_inf 
                                               v_Vpc v_Vid))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (lattices.Meet_semi_lattice__order_inf 
                                               abst_T abst_equal abst_inf 
                                               abst_zero v_Vid)))))))) =>
                       zen.Rall abst_T 
                         (v_Vpc:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vid:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (lattices.Meet_semi_lattice__order_inf 
                                        abst_T abst_equal abst_inf abst_zero 
                                        v_Vpc))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (lattices.Meet_semi_lattice__order_inf 
                                           abst_T abst_equal abst_inf v_Vpc 
                                           v_Vid))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (lattices.Meet_semi_lattice__order_inf 
                                           abst_T abst_equal abst_inf 
                                           abst_zero v_Vid)))))) x 
                         (v_Vud:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vid:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (lattices.Meet_semi_lattice__order_inf 
                                            abst_T abst_equal abst_inf 
                                            abst_zero x))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (lattices.Meet_semi_lattice__order_inf 
                                               abst_T abst_equal abst_inf x 
                                               v_Vid))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (lattices.Meet_semi_lattice__order_inf 
                                               abst_T abst_equal abst_inf 
                                               abst_zero v_Vid))))))) =>
                          zen.Rall abst_T 
                            (v_Vid:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (lattices.Meet_semi_lattice__order_inf 
                                        abst_T abst_equal abst_inf abst_zero 
                                        x))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (lattices.Meet_semi_lattice__order_inf 
                                           abst_T abst_equal abst_inf x v_Vid))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (lattices.Meet_semi_lattice__order_inf 
                                           abst_T abst_equal abst_inf 
                                           abst_zero v_Vid))))) x 
                            (v_Vvd:
                             (zen.proof 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (lattices.Meet_semi_lattice__order_inf 
                                            abst_T abst_equal abst_inf 
                                            abst_zero x))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (lattices.Meet_semi_lattice__order_inf 
                                               abst_T abst_equal abst_inf x x))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (lattices.Meet_semi_lattice__order_inf 
                                               abst_T abst_equal abst_inf 
                                               abst_zero x)))))) =>
                             zen.Rimply 
                               (zen.triangle 
                                  (focal.is_true 
                                     (lattices.Meet_semi_lattice__order_inf 
                                        abst_T abst_equal abst_inf abst_zero 
                                        x))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (lattices.Meet_semi_lattice__order_inf 
                                           abst_T abst_equal abst_inf x x))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (lattices.Meet_semi_lattice__order_inf 
                                           abst_T abst_equal abst_inf 
                                           abst_zero x)))) 
                               (v_Vnd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (lattices.Meet_semi_lattice__order_inf 
                                               abst_T abst_equal abst_inf 
                                               abst_zero x))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (lattices.Meet_semi_lattice__order_inf 
                                           abst_T abst_equal abst_inf 
                                           abst_zero x))) __O_1_3_LEMMA v_Vnd) 
                               (v_Vwd:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (lattices.Meet_semi_lattice__order_inf 
                                               abst_T abst_equal abst_inf x x))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (lattices.Meet_semi_lattice__order_inf 
                                               abst_T abst_equal abst_inf 
                                               abst_zero x))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (lattices.Meet_semi_lattice__order_inf 
                                           abst_T abst_equal abst_inf x x))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (lattices.Meet_semi_lattice__order_inf 
                                           abst_T abst_equal abst_inf 
                                           abst_zero x))) 
                                  (v_Vxd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (lattices.Meet_semi_lattice__order_inf 
                                                  abst_T abst_equal abst_inf 
                                                  x x))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (lattices.Meet_semi_lattice__order_inf 
                                              abst_T abst_equal abst_inf x x))) 
                                     v_Vsd v_Vxd) 
                                  (__O_1_3_LEMMA0:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (lattices.Meet_semi_lattice__order_inf 
                                               abst_T abst_equal abst_inf 
                                               abst_zero x)))) =>
                                   zen.Rsubst basics.bool__t 
                                     (v_Vwc:(zen.term basics.bool__t) =>
                                      zen.triangle (focal.is_true v_Vwc)) 
                                     (lattices.Meet_semi_lattice__order_inf 
                                        abst_T abst_equal abst_inf abst_zero 
                                        x) 
                                     (lattices.Meet_semi_lattice__order_inf 
                                        abst_T abst_equal abst_inf abst_min x) 
                                     (v_Vxc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (lattices.Meet_semi_lattice__order_inf 
                                                     abst_T abst_equal 
                                                     abst_inf abst_zero x) 
                                                  (lattices.Meet_semi_lattice__order_inf 
                                                     abst_T abst_equal 
                                                     abst_inf abst_min x))))) =>
                                      zen.Rsubst abst_T 
                                        (v_Vyc:(zen.term abst_T) =>
                                         zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (lattices.Meet_semi_lattice__order_inf 
                                                    abst_T abst_equal 
                                                    abst_inf v_Vyc x) 
                                                 (lattices.Meet_semi_lattice__order_inf 
                                                    abst_T abst_equal 
                                                    abst_inf abst_min x)))) 
                                        abst_zero abst_min 
                                        (v_Vzc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     abst_zero abst_min)))) =>
                                         zen.Rnotand 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T abst_min 
                                                    abst_zero))) 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (lattices.Meet_semi_lattice__order_inf 
                                                       abst_T abst_equal 
                                                       abst_inf abst_min 
                                                       abst_zero)))) 
                                           (v_Vad:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           abst_min abst_zero))))) =>
                                            zen.Rnotnot 
                                              (zen.triangle 
                                                 (zen.equal abst_T abst_min 
                                                    abst_zero)) 
                                              (v_Vbd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        abst_min abst_zero))) =>
                                               zen.Reqsym abst_T abst_min 
                                                 abst_zero v_Vbd v_Vzc) v_Vad) 
                                           (v_Vhd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (lattices.Meet_semi_lattice__order_inf 
                                                              abst_T 
                                                              abst_equal 
                                                              abst_inf 
                                                              abst_min 
                                                              abst_zero)))))) =>
                                            zen.Rnotnot 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (lattices.Meet_semi_lattice__order_inf 
                                                       abst_T abst_equal 
                                                       abst_inf abst_min 
                                                       abst_zero))) 
                                              (v_Vtc:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (lattices.Meet_semi_lattice__order_inf 
                                                           abst_T abst_equal 
                                                           abst_inf abst_min 
                                                           abst_zero)))) =>
                                               zen.Rall abst_T 
                                                 (v_Voc:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vpc:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vid:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (lattices.Meet_semi_lattice__order_inf 
                                                                   abst_T 
                                                                   abst_equal 
                                                                   abst_inf 
                                                                   v_Voc 
                                                                   v_Vpc))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    v_Vpc 
                                                                    v_Vid))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    v_Voc 
                                                                    v_Vid))))))) 
                                                 abst_min 
                                                 (v_Vjd:
                                                  (zen.proof 
                                                     (zen.forall abst_T 
                                                        (v_Vpc:
                                                         (zen.term abst_T) =>
                                                         zen.forall abst_T 
                                                           (v_Vid:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_min 
                                                                    v_Vpc))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    v_Vpc 
                                                                    v_Vid))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_min 
                                                                    v_Vid)))))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vpc:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vid:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (lattices.Meet_semi_lattice__order_inf 
                                                                   abst_T 
                                                                   abst_equal 
                                                                   abst_inf 
                                                                   abst_min 
                                                                   v_Vpc))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    v_Vpc 
                                                                    v_Vid))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_min 
                                                                    v_Vid)))))) 
                                                    abst_zero 
                                                    (v_Vkd:
                                                     (zen.proof 
                                                        (zen.forall abst_T 
                                                           (v_Vid:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_min 
                                                                    abst_zero))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    v_Vid))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_min 
                                                                    v_Vid))))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vid:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (lattices.Meet_semi_lattice__order_inf 
                                                                   abst_T 
                                                                   abst_equal 
                                                                   abst_inf 
                                                                   abst_min 
                                                                   abst_zero))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    v_Vid))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_min 
                                                                    v_Vid))))) 
                                                       x 
                                                       (v_Vld:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_min 
                                                                    abst_zero))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    x))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_min 
                                                                    x)))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (lattices.Meet_semi_lattice__order_inf 
                                                                   abst_T 
                                                                   abst_equal 
                                                                   abst_inf 
                                                                   abst_min 
                                                                   abst_zero))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    x))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_min 
                                                                    x)))) 
                                                          (v_Vnc:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_min 
                                                                    abst_zero))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_min 
                                                                    abst_zero))) 
                                                             v_Vtc v_Vnc) 
                                                          (v_Vmd:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    x))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_min 
                                                                    x))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    x))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_min 
                                                                    x))) 
                                                             (v_Vnd:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    x))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    x))) 
                                                                __O_1_3_LEMMA0 
                                                                v_Vnd) 
                                                             (v_Vod:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_min 
                                                                    x)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_min 
                                                                    x))) 
                                                                v_Vod v_Vkc) 
                                                             v_Vmd) v_Vld) 
                                                       v_Vkd) v_Vjd) 
                                                 abst_order_inf_is_transitive) 
                                              v_Vhd) v_Vuc) 
                                        (v_Vpd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (lattices.Meet_semi_lattice__order_inf 
                                                        abst_T abst_equal 
                                                        abst_inf abst_min x) 
                                                     (lattices.Meet_semi_lattice__order_inf 
                                                        abst_T abst_equal 
                                                        abst_inf abst_min x))))) =>
                                         zen.Rsubst abst_T 
                                           (v_Vqd:(zen.term abst_T) =>
                                            zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (lattices.Meet_semi_lattice__order_inf 
                                                       abst_T abst_equal 
                                                       abst_inf abst_min 
                                                       v_Vqd) 
                                                    (lattices.Meet_semi_lattice__order_inf 
                                                       abst_T abst_equal 
                                                       abst_inf abst_min x)))) 
                                           x x 
                                           (v_Vrd0:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T x x)))) =>
                                            zen.Rnoteq abst_T x v_Vrd0) 
                                           (v_Vpd0:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (lattices.Meet_semi_lattice__order_inf 
                                                           abst_T abst_equal 
                                                           abst_inf abst_min 
                                                           x) 
                                                        (lattices.Meet_semi_lattice__order_inf 
                                                           abst_T abst_equal 
                                                           abst_inf abst_min 
                                                           x))))) =>
                                            zen.Rnoteq basics.bool__t 
                                              (lattices.Meet_semi_lattice__order_inf 
                                                 abst_T abst_equal abst_inf 
                                                 abst_min x) v_Vpd0) v_Vpd) 
                                        v_Vxc) 
                                     (v_Vod:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (lattices.Meet_semi_lattice__order_inf 
                                                  abst_T abst_equal abst_inf 
                                                  abst_min x)))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (lattices.Meet_semi_lattice__order_inf 
                                                 abst_T abst_equal abst_inf 
                                                 abst_min x))) v_Vod v_Vkc) 
                                     __O_1_3_LEMMA0) v_Vwd) v_Vvd) v_Vud) 
                         v_Vtd) abst_order_inf_is_transitive) 
                   (v_Vxd:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (lattices.Meet_semi_lattice__order_inf 
                                   abst_T abst_equal abst_inf x x))))) =>
                    zen.Rnoteq abst_T x v_Vrd))))) 
         (zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (lattices.Meet_semi_lattice__order_inf abst_T abst_equal 
                     abst_inf abst_zero x))) 
            (v_Vkc:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (lattices.Meet_semi_lattice__order_inf abst_T 
                            abst_equal abst_inf abst_zero x))))) =>
             zen.Rcut 
               (zen.and 
                  (zen.not 
                     (zen.triangle (zen.equal abst_T abst_zero abst_zero))) 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (lattices.Meet_semi_lattice__order_inf abst_T 
                              abst_equal abst_inf abst_zero abst_zero))))) 
               (v_Vlc:
                (zen.proof 
                   (zen.and 
                      (zen.not 
                         (zen.triangle (zen.equal abst_T abst_zero abst_zero))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (lattices.Meet_semi_lattice__order_inf abst_T 
                                  abst_equal abst_inf abst_zero abst_zero)))))) =>
                zen.Rand 
                  (zen.not 
                     (zen.triangle (zen.equal abst_T abst_zero abst_zero))) 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (lattices.Meet_semi_lattice__order_inf abst_T 
                              abst_equal abst_inf abst_zero abst_zero)))) 
                  (v_Vmc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle (zen.equal abst_T abst_zero abst_zero)))) =>
                   v_Vnc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (lattices.Meet_semi_lattice__order_inf abst_T 
                                  abst_equal abst_inf abst_zero abst_zero))))) =>
                   zen.Rnoteq abst_T abst_zero v_Vmc) v_Vlc) 
               (v_Voc:
                (zen.proof 
                   (zen.not 
                      (zen.and 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T abst_zero abst_zero))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (lattices.Meet_semi_lattice__order_inf 
                                     abst_T abst_equal abst_inf abst_zero 
                                     abst_zero))))))) =>
                zen.Rcut 
                  (zen.triangle (zen.equal abst_T (abst_plus abst_zero x) x)) 
                  (v_Vpc:
                   (zen.proof 
                      (zen.triangle 
                         (zen.equal abst_T (abst_plus abst_zero x) x))) =>
                   zen.Rsubst basics.bool__t 
                     (v_Vqc:(zen.term basics.bool__t) =>
                      zen.triangle (focal.is_true v_Vqc)) 
                     (lattices.Meet_semi_lattice__order_inf abst_T 
                        abst_equal abst_inf abst_zero (abst_plus abst_zero x)) 
                     (lattices.Meet_semi_lattice__order_inf abst_T 
                        abst_equal abst_inf abst_zero x) 
                     (v_Vrc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (lattices.Meet_semi_lattice__order_inf 
                                     abst_T abst_equal abst_inf abst_zero 
                                     (abst_plus abst_zero x)) 
                                  (lattices.Meet_semi_lattice__order_inf 
                                     abst_T abst_equal abst_inf abst_zero x))))) =>
                      zen.Rsubst abst_T 
                        (v_Vsc:(zen.term abst_T) =>
                         zen.not 
                           (zen.triangle 
                              (zen.equal basics.bool__t 
                                 (lattices.Meet_semi_lattice__order_inf 
                                    abst_T abst_equal abst_inf v_Vsc 
                                    (abst_plus abst_zero x)) 
                                 (lattices.Meet_semi_lattice__order_inf 
                                    abst_T abst_equal abst_inf abst_zero x)))) 
                        abst_zero abst_zero 
                        (v_Vmc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal abst_T abst_zero abst_zero)))) =>
                         zen.Rnotand 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal abst_T abst_zero abst_zero))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (lattices.Meet_semi_lattice__order_inf 
                                       abst_T abst_equal abst_inf abst_zero 
                                       abst_zero)))) 
                           (v_Vtc:
                            (zen.proof 
                               (zen.not 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal abst_T abst_zero abst_zero))))) =>
                            zen.Rnotnot 
                              (zen.triangle 
                                 (zen.equal abst_T abst_zero abst_zero)) 
                              (v_Vuc:
                               (zen.proof 
                                  (zen.triangle 
                                     (zen.equal abst_T abst_zero abst_zero))) =>
                               zen.Rcut 
                                 (zen.triangle 
                                    (zen.equal abst_T abst_zero abst_zero)) 
                                 (v_Vuc0:
                                  (zen.proof 
                                     (zen.triangle 
                                        (zen.equal abst_T abst_zero abst_zero))) =>
                                  zen.Rsubst abst_T 
                                    (v_Vvc:(zen.term abst_T) =>
                                     zen.triangle 
                                       (zen.equal abst_T v_Vvc abst_zero)) 
                                    abst_zero abst_zero 
                                    (v_Vmc0:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T abst_zero 
                                                 abst_zero)))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (zen.equal abst_T abst_zero 
                                             abst_zero)) v_Vuc0 v_Vmc0) 
                                    (v_Vuc0:
                                     (zen.proof 
                                        (zen.triangle 
                                           (zen.equal abst_T abst_zero 
                                              abst_zero))) =>
                                     zen.Rsubst abst_T 
                                       (v_Vwc:(zen.term abst_T) =>
                                        zen.triangle 
                                          (zen.equal abst_T abst_zero v_Vwc)) 
                                       abst_zero abst_zero 
                                       (v_Vmc0:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T abst_zero 
                                                    abst_zero)))) =>
                                        zen.Rnoteq abst_T abst_zero v_Vmc0) 
                                       (v_Vuc0:
                                        (zen.proof 
                                           (zen.triangle 
                                              (zen.equal abst_T abst_zero 
                                                 abst_zero))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (zen.equal abst_T abst_zero 
                                                abst_zero)) v_Vuc0 v_Vmc) 
                                       v_Vuc0) v_Vuc0) 
                                 (v_Vmc0:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal abst_T abst_zero 
                                              abst_zero)))) =>
                                  zen.Rnoteq abst_T abst_zero v_Vmc0)) v_Vtc) 
                           (v_Vxc:
                            (zen.proof 
                               (zen.not 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (lattices.Meet_semi_lattice__order_inf 
                                              abst_T abst_equal abst_inf 
                                              abst_zero abst_zero)))))) =>
                            zen.Rnotnot 
                              (zen.triangle 
                                 (focal.is_true 
                                    (lattices.Meet_semi_lattice__order_inf 
                                       abst_T abst_equal abst_inf abst_zero 
                                       abst_zero))) 
                              (v_Vyc:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (lattices.Meet_semi_lattice__order_inf 
                                           abst_T abst_equal abst_inf 
                                           abst_zero abst_zero)))) =>
                               zen.Rall abst_T 
                                 (v_Vzc:(zen.term abst_T) =>
                                  zen.forall abst_T 
                                    (v_Vad:(zen.term abst_T) =>
                                     zen.forall abst_T 
                                       (v_Vbd:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (lattices.Meet_semi_lattice__order_inf 
                                                   abst_T abst_equal 
                                                   abst_inf v_Vzc v_Vad))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (lattices.Meet_semi_lattice__order_inf 
                                                      abst_T abst_equal 
                                                      abst_inf v_Vad v_Vbd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (lattices.Meet_semi_lattice__order_inf 
                                                      abst_T abst_equal 
                                                      abst_inf v_Vzc v_Vbd))))))) 
                                 abst_zero 
                                 (v_Vcd:
                                  (zen.proof 
                                     (zen.forall abst_T 
                                        (v_Vad:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vbd:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (lattices.Meet_semi_lattice__order_inf 
                                                       abst_T abst_equal 
                                                       abst_inf abst_zero 
                                                       v_Vad))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (lattices.Meet_semi_lattice__order_inf 
                                                          abst_T abst_equal 
                                                          abst_inf v_Vad 
                                                          v_Vbd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (lattices.Meet_semi_lattice__order_inf 
                                                          abst_T abst_equal 
                                                          abst_inf abst_zero 
                                                          v_Vbd)))))))) =>
                                  zen.Rall abst_T 
                                    (v_Vad:(zen.term abst_T) =>
                                     zen.forall abst_T 
                                       (v_Vbd:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (lattices.Meet_semi_lattice__order_inf 
                                                   abst_T abst_equal 
                                                   abst_inf abst_zero v_Vad))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (lattices.Meet_semi_lattice__order_inf 
                                                      abst_T abst_equal 
                                                      abst_inf v_Vad v_Vbd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (lattices.Meet_semi_lattice__order_inf 
                                                      abst_T abst_equal 
                                                      abst_inf abst_zero 
                                                      v_Vbd)))))) abst_zero 
                                    (v_Vdd:
                                     (zen.proof 
                                        (zen.forall abst_T 
                                           (v_Vbd:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (lattices.Meet_semi_lattice__order_inf 
                                                       abst_T abst_equal 
                                                       abst_inf abst_zero 
                                                       abst_zero))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (lattices.Meet_semi_lattice__order_inf 
                                                          abst_T abst_equal 
                                                          abst_inf abst_zero 
                                                          v_Vbd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (lattices.Meet_semi_lattice__order_inf 
                                                          abst_T abst_equal 
                                                          abst_inf abst_zero 
                                                          v_Vbd))))))) =>
                                     zen.Rall abst_T 
                                       (v_Vbd:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (lattices.Meet_semi_lattice__order_inf 
                                                   abst_T abst_equal 
                                                   abst_inf abst_zero 
                                                   abst_zero))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (lattices.Meet_semi_lattice__order_inf 
                                                      abst_T abst_equal 
                                                      abst_inf abst_zero 
                                                      v_Vbd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (lattices.Meet_semi_lattice__order_inf 
                                                      abst_T abst_equal 
                                                      abst_inf abst_zero 
                                                      v_Vbd))))) 
                                       (abst_plus abst_zero x) 
                                       (v_Ved:
                                        (zen.proof 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (lattices.Meet_semi_lattice__order_inf 
                                                       abst_T abst_equal 
                                                       abst_inf abst_zero 
                                                       abst_zero))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (lattices.Meet_semi_lattice__order_inf 
                                                          abst_T abst_equal 
                                                          abst_inf abst_zero 
                                                          (abst_plus 
                                                             abst_zero x)))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (lattices.Meet_semi_lattice__order_inf 
                                                          abst_T abst_equal 
                                                          abst_inf abst_zero 
                                                          (abst_plus 
                                                             abst_zero x))))))) =>
                                        zen.Rimply 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (lattices.Meet_semi_lattice__order_inf 
                                                   abst_T abst_equal 
                                                   abst_inf abst_zero 
                                                   abst_zero))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (lattices.Meet_semi_lattice__order_inf 
                                                      abst_T abst_equal 
                                                      abst_inf abst_zero 
                                                      (abst_plus abst_zero x)))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (lattices.Meet_semi_lattice__order_inf 
                                                      abst_T abst_equal 
                                                      abst_inf abst_zero 
                                                      (abst_plus abst_zero x))))) 
                                          (v_Vnc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (lattices.Meet_semi_lattice__order_inf 
                                                          abst_T abst_equal 
                                                          abst_inf abst_zero 
                                                          abst_zero))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (lattices.Meet_semi_lattice__order_inf 
                                                      abst_T abst_equal 
                                                      abst_inf abst_zero 
                                                      abst_zero))) v_Vyc 
                                             v_Vnc) 
                                          (v_Vfd:
                                           (zen.proof 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (lattices.Meet_semi_lattice__order_inf 
                                                          abst_T abst_equal 
                                                          abst_inf abst_zero 
                                                          (abst_plus 
                                                             abst_zero x)))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (lattices.Meet_semi_lattice__order_inf 
                                                          abst_T abst_equal 
                                                          abst_inf abst_zero 
                                                          (abst_plus 
                                                             abst_zero x)))))) =>
                                           zen.Rimply 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (lattices.Meet_semi_lattice__order_inf 
                                                      abst_T abst_equal 
                                                      abst_inf abst_zero 
                                                      (abst_plus abst_zero x)))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (lattices.Meet_semi_lattice__order_inf 
                                                      abst_T abst_equal 
                                                      abst_inf abst_zero 
                                                      (abst_plus abst_zero x)))) 
                                             (v_Vgd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (lattices.Meet_semi_lattice__order_inf 
                                                             abst_T 
                                                             abst_equal 
                                                             abst_inf 
                                                             abst_zero 
                                                             (abst_plus 
                                                                abst_zero x)))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (lattices.Meet_semi_lattice__order_inf 
                                                         abst_T abst_equal 
                                                         abst_inf abst_zero 
                                                         (abst_plus 
                                                            abst_zero x)))) 
                                                __O_1_1_LEMMA v_Vgd) 
                                             (__O_1_1_LEMMA0:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (lattices.Meet_semi_lattice__order_inf 
                                                          abst_T abst_equal 
                                                          abst_inf abst_zero 
                                                          (abst_plus 
                                                             abst_zero x))))) =>
                                              zen.Rsubst basics.bool__t 
                                                (v_Vqc:
                                                 (zen.term basics.bool__t) =>
                                                 zen.triangle 
                                                   (focal.is_true v_Vqc)) 
                                                (lattices.Meet_semi_lattice__order_inf 
                                                   abst_T abst_equal 
                                                   abst_inf abst_zero 
                                                   (abst_plus abst_zero x)) 
                                                (lattices.Meet_semi_lattice__order_inf 
                                                   abst_T abst_equal 
                                                   abst_inf abst_zero x) 
                                                (v_Vrc0:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (lattices.Meet_semi_lattice__order_inf 
                                                                abst_T 
                                                                abst_equal 
                                                                abst_inf 
                                                                abst_zero 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   x)) 
                                                             (lattices.Meet_semi_lattice__order_inf 
                                                                abst_T 
                                                                abst_equal 
                                                                abst_inf 
                                                                abst_zero x))))) =>
                                                 zen.Rsubst abst_T 
                                                   (v_Vsc:
                                                    (zen.term abst_T) =>
                                                    zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (lattices.Meet_semi_lattice__order_inf 
                                                               abst_T 
                                                               abst_equal 
                                                               abst_inf 
                                                               v_Vsc 
                                                               (abst_plus 
                                                                  abst_zero x)) 
                                                            (lattices.Meet_semi_lattice__order_inf 
                                                               abst_T 
                                                               abst_equal 
                                                               abst_inf 
                                                               abst_zero x)))) 
                                                   abst_zero abst_zero 
                                                   (v_Vmc0:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T 
                                                                abst_zero 
                                                                abst_zero)))) =>
                                                    zen.Rnoteq abst_T 
                                                      abst_zero v_Vmc0) 
                                                   (v_Vrc0:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (lattices.Meet_semi_lattice__order_inf 
                                                                   abst_T 
                                                                   abst_equal 
                                                                   abst_inf 
                                                                   abst_zero 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    x)) 
                                                                (lattices.Meet_semi_lattice__order_inf 
                                                                   abst_T 
                                                                   abst_equal 
                                                                   abst_inf 
                                                                   abst_zero 
                                                                   x))))) =>
                                                    zen.Rsubst abst_T 
                                                      (v_Vhd:
                                                       (zen.term abst_T) =>
                                                       zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (lattices.Meet_semi_lattice__order_inf 
                                                                  abst_T 
                                                                  abst_equal 
                                                                  abst_inf 
                                                                  abst_zero 
                                                                  v_Vhd) 
                                                               (lattices.Meet_semi_lattice__order_inf 
                                                                  abst_T 
                                                                  abst_equal 
                                                                  abst_inf 
                                                                  abst_zero x)))) 
                                                      (abst_plus abst_zero x) 
                                                      x 
                                                      (v_Vid:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    x) x)))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T 
                                                               (abst_plus 
                                                                  abst_zero x) 
                                                               x)) v_Vpc 
                                                         v_Vid) 
                                                      (v_Vjd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    x) 
                                                                   (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    x))))) =>
                                                       zen.Rnoteq 
                                                         basics.bool__t 
                                                         (lattices.Meet_semi_lattice__order_inf 
                                                            abst_T 
                                                            abst_equal 
                                                            abst_inf 
                                                            abst_zero x) 
                                                         v_Vjd) v_Vrc0) 
                                                   v_Vrc0) 
                                                (v_Vkd:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (lattices.Meet_semi_lattice__order_inf 
                                                             abst_T 
                                                             abst_equal 
                                                             abst_inf 
                                                             abst_zero x)))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (lattices.Meet_semi_lattice__order_inf 
                                                            abst_T 
                                                            abst_equal 
                                                            abst_inf 
                                                            abst_zero x))) 
                                                   v_Vkd v_Vkc) 
                                                __O_1_1_LEMMA0) v_Vfd) v_Ved) 
                                       v_Vdd) v_Vcd) 
                                 abst_order_inf_is_transitive) v_Vxc) v_Voc) 
                        (v_Vrc0:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (lattices.Meet_semi_lattice__order_inf 
                                        abst_T abst_equal abst_inf abst_zero 
                                        (abst_plus abst_zero x)) 
                                     (lattices.Meet_semi_lattice__order_inf 
                                        abst_T abst_equal abst_inf abst_zero 
                                        x))))) =>
                         zen.Rsubst abst_T 
                           (v_Vhd:(zen.term abst_T) =>
                            zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (lattices.Meet_semi_lattice__order_inf 
                                       abst_T abst_equal abst_inf abst_zero 
                                       v_Vhd) 
                                    (lattices.Meet_semi_lattice__order_inf 
                                       abst_T abst_equal abst_inf abst_zero x)))) 
                           (abst_plus abst_zero x) x 
                           (v_Vid:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_plus abst_zero x) x)))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (zen.equal abst_T (abst_plus abst_zero x) x)) 
                              v_Vpc v_Vid) 
                           (v_Vjd:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (lattices.Meet_semi_lattice__order_inf 
                                           abst_T abst_equal abst_inf 
                                           abst_zero x) 
                                        (lattices.Meet_semi_lattice__order_inf 
                                           abst_T abst_equal abst_inf 
                                           abst_zero x))))) =>
                            zen.Rnoteq basics.bool__t 
                              (lattices.Meet_semi_lattice__order_inf abst_T 
                                 abst_equal abst_inf abst_zero x) v_Vjd) 
                           v_Vrc0) v_Vrc) 
                     (v_Vkd:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (lattices.Meet_semi_lattice__order_inf abst_T 
                                  abst_equal abst_inf abst_zero x)))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (lattices.Meet_semi_lattice__order_inf abst_T 
                                 abst_equal abst_inf abst_zero x))) v_Vkd 
                        v_Vkc) __O_1_1_LEMMA) 
                  (v_Vid:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal abst_T (abst_plus abst_zero x) x)))) =>
                   zen.Rcut 
                     (zen.triangle 
                        (focal.is_true 
                           (lattices.Meet_semi_lattice__order_inf abst_T 
                              abst_equal abst_inf (abst_plus abst_zero x) x))) 
                     (v_Vld:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (lattices.Meet_semi_lattice__order_inf abst_T 
                                  abst_equal abst_inf 
                                  (abst_plus abst_zero x) x)))) =>
                      zen.Rall abst_T 
                        (v_Vzc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vad:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vbd:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (lattices.Meet_semi_lattice__order_inf 
                                          abst_T abst_equal abst_inf v_Vzc 
                                          v_Vad))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (lattices.Meet_semi_lattice__order_inf 
                                             abst_T abst_equal abst_inf 
                                             v_Vad v_Vbd))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (lattices.Meet_semi_lattice__order_inf 
                                             abst_T abst_equal abst_inf 
                                             v_Vzc v_Vbd))))))) abst_zero 
                        (v_Vcd:
                         (zen.proof 
                            (zen.forall abst_T 
                               (v_Vad:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vbd:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (lattices.Meet_semi_lattice__order_inf 
                                              abst_T abst_equal abst_inf 
                                              abst_zero v_Vad))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (lattices.Meet_semi_lattice__order_inf 
                                                 abst_T abst_equal abst_inf 
                                                 v_Vad v_Vbd))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (lattices.Meet_semi_lattice__order_inf 
                                                 abst_T abst_equal abst_inf 
                                                 abst_zero v_Vbd)))))))) =>
                         zen.Rall abst_T 
                           (v_Vad:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vbd:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (lattices.Meet_semi_lattice__order_inf 
                                          abst_T abst_equal abst_inf 
                                          abst_zero v_Vad))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (lattices.Meet_semi_lattice__order_inf 
                                             abst_T abst_equal abst_inf 
                                             v_Vad v_Vbd))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (lattices.Meet_semi_lattice__order_inf 
                                             abst_T abst_equal abst_inf 
                                             abst_zero v_Vbd)))))) 
                           (abst_plus abst_zero x) 
                           (v_Vmd:
                            (zen.proof 
                               (zen.forall abst_T 
                                  (v_Vbd:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (lattices.Meet_semi_lattice__order_inf 
                                              abst_T abst_equal abst_inf 
                                              abst_zero 
                                              (abst_plus abst_zero x)))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (lattices.Meet_semi_lattice__order_inf 
                                                 abst_T abst_equal abst_inf 
                                                 (abst_plus abst_zero x) 
                                                 v_Vbd))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (lattices.Meet_semi_lattice__order_inf 
                                                 abst_T abst_equal abst_inf 
                                                 abst_zero v_Vbd))))))) =>
                            zen.Rall abst_T 
                              (v_Vbd:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (lattices.Meet_semi_lattice__order_inf 
                                          abst_T abst_equal abst_inf 
                                          abst_zero (abst_plus abst_zero x)))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (lattices.Meet_semi_lattice__order_inf 
                                             abst_T abst_equal abst_inf 
                                             (abst_plus abst_zero x) v_Vbd))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (lattices.Meet_semi_lattice__order_inf 
                                             abst_T abst_equal abst_inf 
                                             abst_zero v_Vbd))))) x 
                              (v_Vnd:
                               (zen.proof 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (lattices.Meet_semi_lattice__order_inf 
                                              abst_T abst_equal abst_inf 
                                              abst_zero 
                                              (abst_plus abst_zero x)))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (lattices.Meet_semi_lattice__order_inf 
                                                 abst_T abst_equal abst_inf 
                                                 (abst_plus abst_zero x) x))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (lattices.Meet_semi_lattice__order_inf 
                                                 abst_T abst_equal abst_inf 
                                                 abst_zero x)))))) =>
                               zen.Rimply 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (lattices.Meet_semi_lattice__order_inf 
                                          abst_T abst_equal abst_inf 
                                          abst_zero (abst_plus abst_zero x)))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (lattices.Meet_semi_lattice__order_inf 
                                             abst_T abst_equal abst_inf 
                                             (abst_plus abst_zero x) x))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (lattices.Meet_semi_lattice__order_inf 
                                             abst_T abst_equal abst_inf 
                                             abst_zero x)))) 
                                 (v_Vgd:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (lattices.Meet_semi_lattice__order_inf 
                                                 abst_T abst_equal abst_inf 
                                                 abst_zero 
                                                 (abst_plus abst_zero x)))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (lattices.Meet_semi_lattice__order_inf 
                                             abst_T abst_equal abst_inf 
                                             abst_zero 
                                             (abst_plus abst_zero x)))) 
                                    __O_1_1_LEMMA v_Vgd) 
                                 (v_Vod:
                                  (zen.proof 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (lattices.Meet_semi_lattice__order_inf 
                                                 abst_T abst_equal abst_inf 
                                                 (abst_plus abst_zero x) x))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (lattices.Meet_semi_lattice__order_inf 
                                                 abst_T abst_equal abst_inf 
                                                 abst_zero x))))) =>
                                  zen.Rimply 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (lattices.Meet_semi_lattice__order_inf 
                                             abst_T abst_equal abst_inf 
                                             (abst_plus abst_zero x) x))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (lattices.Meet_semi_lattice__order_inf 
                                             abst_T abst_equal abst_inf 
                                             abst_zero x))) 
                                    (v_Vpd:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (lattices.Meet_semi_lattice__order_inf 
                                                    abst_T abst_equal 
                                                    abst_inf 
                                                    (abst_plus abst_zero x) x))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (lattices.Meet_semi_lattice__order_inf 
                                                abst_T abst_equal abst_inf 
                                                (abst_plus abst_zero x) x))) 
                                       v_Vld v_Vpd) 
                                    (v_Vkd:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (lattices.Meet_semi_lattice__order_inf 
                                                 abst_T abst_equal abst_inf 
                                                 abst_zero x)))) =>
                                     zen.Rsubst basics.bool__t 
                                       (v_Vqc:(zen.term basics.bool__t) =>
                                        zen.triangle (focal.is_true v_Vqc)) 
                                       (lattices.Meet_semi_lattice__order_inf 
                                          abst_T abst_equal abst_inf 
                                          abst_zero x) 
                                       (lattices.Meet_semi_lattice__order_inf 
                                          abst_T abst_equal abst_inf 
                                          abst_zero x) 
                                       (v_Vjd:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (lattices.Meet_semi_lattice__order_inf 
                                                       abst_T abst_equal 
                                                       abst_inf abst_zero x) 
                                                    (lattices.Meet_semi_lattice__order_inf 
                                                       abst_T abst_equal 
                                                       abst_inf abst_zero x))))) =>
                                        zen.Rsubst abst_T 
                                          (v_Vqd:(zen.term abst_T) =>
                                           zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (lattices.Meet_semi_lattice__order_inf 
                                                      abst_T abst_equal 
                                                      abst_inf v_Vqd x) 
                                                   (lattices.Meet_semi_lattice__order_inf 
                                                      abst_T abst_equal 
                                                      abst_inf abst_zero x)))) 
                                          abst_zero abst_zero 
                                          (v_Vmc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       abst_zero abst_zero)))) =>
                                           zen.Rnotand 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      abst_zero abst_zero))) 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (lattices.Meet_semi_lattice__order_inf 
                                                         abst_T abst_equal 
                                                         abst_inf abst_zero 
                                                         abst_zero)))) 
                                             (v_Vtc:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             abst_zero 
                                                             abst_zero))))) =>
                                              zen.Rnotnot 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      abst_zero abst_zero)) 
                                                (v_Vuc:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          abst_zero abst_zero))) =>
                                                 zen.Reqsym abst_T abst_zero 
                                                   abst_zero v_Vuc v_Vmc) 
                                                v_Vtc) 
                                             (v_Vxc:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (lattices.Meet_semi_lattice__order_inf 
                                                                abst_T 
                                                                abst_equal 
                                                                abst_inf 
                                                                abst_zero 
                                                                abst_zero)))))) =>
                                              zen.Rnotnot 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (lattices.Meet_semi_lattice__order_inf 
                                                         abst_T abst_equal 
                                                         abst_inf abst_zero 
                                                         abst_zero))) 
                                                (v_Vyc:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (lattices.Meet_semi_lattice__order_inf 
                                                             abst_T 
                                                             abst_equal 
                                                             abst_inf 
                                                             abst_zero 
                                                             abst_zero)))) =>
                                                 zen.Rall abst_T 
                                                   (v_Vzc:
                                                    (zen.term abst_T) =>
                                                    zen.forall abst_T 
                                                      (v_Vad:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vbd:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    v_Vzc 
                                                                    v_Vbd))))))) 
                                                   abst_zero 
                                                   (v_Vcd0:
                                                    (zen.proof 
                                                       (zen.forall abst_T 
                                                          (v_Vad:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vbd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    v_Vad))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    v_Vbd)))))))) =>
                                                    zen.Rall abst_T 
                                                      (v_Vad:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vbd:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    v_Vad))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    v_Vbd)))))) 
                                                      abst_zero 
                                                      (v_Vdd:
                                                       (zen.proof 
                                                          (zen.forall abst_T 
                                                             (v_Vbd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    abst_zero))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    v_Vbd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    v_Vbd))))))) =>
                                                       zen.Rall abst_T 
                                                         (v_Vbd:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    abst_zero))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    v_Vbd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    v_Vbd))))) 
                                                         x 
                                                         (v_Vrd:
                                                          (zen.proof 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    abst_zero))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    x))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    x)))))) =>
                                                          zen.Rimply 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    abst_zero))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    x))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    x)))) 
                                                            (v_Vnc:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    abst_zero))))) =>
                                                             zen.Raxiom 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    abst_zero))) 
                                                               v_Vyc v_Vnc) 
                                                            (v_Vsd:
                                                             (zen.proof 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    x))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    x))))) =>
                                                             zen.Rimply 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    x))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    x))) 
                                                               (v_Vkc0:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    x))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    x))) 
                                                                  v_Vkd 
                                                                  v_Vkc0) 
                                                               (v_Vkd0:
                                                                (zen.proof 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    x)))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (lattices.Meet_semi_lattice__order_inf 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_inf 
                                                                    abst_zero 
                                                                    x))) 
                                                                  v_Vkd0 
                                                                  v_Vkc) 
                                                               v_Vsd) v_Vrd) 
                                                         v_Vdd) v_Vcd0) 
                                                   abst_order_inf_is_transitive) 
                                                v_Vxc) v_Voc) 
                                          (v_Vjd0:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (lattices.Meet_semi_lattice__order_inf 
                                                          abst_T abst_equal 
                                                          abst_inf abst_zero 
                                                          x) 
                                                       (lattices.Meet_semi_lattice__order_inf 
                                                          abst_T abst_equal 
                                                          abst_inf abst_zero 
                                                          x))))) =>
                                           zen.Rsubst abst_T 
                                             (v_Vhd:(zen.term abst_T) =>
                                              zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (lattices.Meet_semi_lattice__order_inf 
                                                         abst_T abst_equal 
                                                         abst_inf abst_zero 
                                                         v_Vhd) 
                                                      (lattices.Meet_semi_lattice__order_inf 
                                                         abst_T abst_equal 
                                                         abst_inf abst_zero x)))) 
                                             x x 
                                             (v_Vtd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T x x)))) =>
                                              zen.Rnoteq abst_T x v_Vtd) 
                                             (v_Vjd0:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (lattices.Meet_semi_lattice__order_inf 
                                                             abst_T 
                                                             abst_equal 
                                                             abst_inf 
                                                             abst_zero x) 
                                                          (lattices.Meet_semi_lattice__order_inf 
                                                             abst_T 
                                                             abst_equal 
                                                             abst_inf 
                                                             abst_zero x))))) =>
                                              zen.Rnoteq basics.bool__t 
                                                (lattices.Meet_semi_lattice__order_inf 
                                                   abst_T abst_equal 
                                                   abst_inf abst_zero x) 
                                                v_Vjd0) v_Vjd0) v_Vjd) 
                                       (v_Vkd0:
                                        (zen.proof 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (lattices.Meet_semi_lattice__order_inf 
                                                    abst_T abst_equal 
                                                    abst_inf abst_zero x)))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (lattices.Meet_semi_lattice__order_inf 
                                                   abst_T abst_equal 
                                                   abst_inf abst_zero x))) 
                                          v_Vkd0 v_Vkc) v_Vkd) v_Vod) v_Vnd) 
                              v_Vmd) v_Vcd) abst_order_inf_is_transitive) 
                     (v_Vpd:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (lattices.Meet_semi_lattice__order_inf 
                                     abst_T abst_equal abst_inf 
                                     (abst_plus abst_zero x) x))))) =>
                      zen.Rall abst_T 
                        (v_Vzc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vad:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_equal v_Vzc v_Vad))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (lattices.Meet_semi_lattice__order_inf 
                                       abst_T abst_equal abst_inf v_Vzc v_Vad))))) 
                        (abst_plus abst_zero x) 
                        (v_Vud:
                         (zen.proof 
                            (zen.forall abst_T 
                               (v_Vad:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_plus abst_zero x) 
                                           v_Vad))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (lattices.Meet_semi_lattice__order_inf 
                                           abst_T abst_equal abst_inf 
                                           (abst_plus abst_zero x) v_Vad)))))) =>
                         zen.Rall abst_T 
                           (v_Vad:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_plus abst_zero x) v_Vad))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (lattices.Meet_semi_lattice__order_inf 
                                       abst_T abst_equal abst_inf 
                                       (abst_plus abst_zero x) v_Vad)))) x 
                           (v_Vvd:
                            (zen.proof 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_plus abst_zero x) x))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (lattices.Meet_semi_lattice__order_inf 
                                           abst_T abst_equal abst_inf 
                                           (abst_plus abst_zero x) x))))) =>
                            zen.Rimply 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_plus abst_zero x) x))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (lattices.Meet_semi_lattice__order_inf 
                                       abst_T abst_equal abst_inf 
                                       (abst_plus abst_zero x) x))) 
                              (v_Vwd:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus abst_zero x) x))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_plus abst_zero x) x))) 
                                 __O_1_2_LEMMA v_Vwd) 
                              (v_Vld:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (lattices.Meet_semi_lattice__order_inf 
                                           abst_T abst_equal abst_inf 
                                           (abst_plus abst_zero x) x)))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (lattices.Meet_semi_lattice__order_inf 
                                          abst_T abst_equal abst_inf 
                                          (abst_plus abst_zero x) x))) v_Vld 
                                 v_Vpd) v_Vvd) v_Vud) 
                        abst_order_inf_is_reflexive)))))) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true (abst_equal (abst_plus abst_zero x) x))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true (abst_equal (abst_plus abst_zero x) x))))) =>
            zen.Rall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.and 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_plus v_Vac abst_zero) v_Vac))) 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_plus abst_zero v_Vac) v_Vac)))) x 
              (v_Vbc:
               (zen.proof 
                  (zen.and 
                     (zen.triangle 
                        (focal.is_true (abst_equal (abst_plus x abst_zero) x))) 
                     (zen.triangle 
                        (focal.is_true (abst_equal (abst_plus abst_zero x) x))))) =>
               zen.Rand 
                 (zen.triangle 
                    (focal.is_true (abst_equal (abst_plus x abst_zero) x))) 
                 (zen.triangle 
                    (focal.is_true (abst_equal (abst_plus abst_zero x) x))) 
                 (v_Vcc:
                  (zen.proof 
                     (zen.triangle 
                        (focal.is_true (abst_equal (abst_plus x abst_zero) x)))) =>
                  v_Vdc:
                  (zen.proof 
                     (zen.triangle 
                        (focal.is_true (abst_equal (abst_plus abst_zero x) x)))) =>
                  zen.Raxiom 
                    (zen.triangle 
                       (focal.is_true (abst_equal (abst_plus abst_zero x) x))) 
                    v_Vdc v_Vzb) v_Vbc) abst_zero_is_neutral))) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (lattices.Meet_semi_lattice__order_inf abst_T abst_equal 
                   abst_inf abst_zero (abst_plus abst_zero x)))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (lattices.Meet_semi_lattice__order_inf abst_T 
                          abst_equal abst_inf abst_zero 
                          (abst_plus abst_zero x)))))) =>
           zen.Rall abst_T 
             (v_Vac:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.triangle 
                   (focal.is_true 
                      (lattices.Meet_semi_lattice__order_inf abst_T 
                         abst_equal abst_inf v_Vac (abst_plus v_Vac v_Vbc))))) 
             abst_zero 
             (v_Vcc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (lattices.Meet_semi_lattice__order_inf abst_T 
                             abst_equal abst_inf abst_zero 
                             (abst_plus abst_zero v_Vbc)))))) =>
              zen.Rall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.triangle 
                   (focal.is_true 
                      (lattices.Meet_semi_lattice__order_inf abst_T 
                         abst_equal abst_inf abst_zero 
                         (abst_plus abst_zero v_Vbc)))) x 
                (v_Vdc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (lattices.Meet_semi_lattice__order_inf abst_T 
                             abst_equal abst_inf abst_zero 
                             (abst_plus abst_zero x))))) =>
                 zen.Raxiom 
                   (zen.triangle 
                      (focal.is_true 
                         (lattices.Meet_semi_lattice__order_inf abst_T 
                            abst_equal abst_inf abst_zero 
                            (abst_plus abst_zero x)))) v_Vdc v_Vzb) v_Vcc) 
             abst_inf_absorbes_add))).

def Additive_monoid_with_supremum__min :
  abst_T:cc.uT -> abst_zero:(cc.eT abst_T) -> cc.eT abst_T
  :=
  abst_T:cc.uT => abst_zero:(cc.eT abst_T) => abst_zero.

def Additive_monoid_with_supremum__add_distributes_on_sup :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_sup:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_add_left_distributes_on_sup:(dk_logic.eP 
                                      (dk_logic.forall abst_T 
                                         (x:(cc.eT abst_T) =>
                                          dk_logic.forall abst_T 
                                            (y:(cc.eT abst_T) =>
                                             dk_logic.forall abst_T 
                                               (z:(cc.eT abst_T) =>
                                                dk_logic.ebP 
                                                  (abst_equal 
                                                     (abst_plus x 
                                                        (abst_sup y z)) 
                                                     (abst_sup 
                                                        (abst_plus x y) 
                                                        (abst_plus x z)))))))) ->
  abst_add_right_distributes_on_sup:(dk_logic.eP 
                                       (dk_logic.forall abst_T 
                                          (x:(cc.eT abst_T) =>
                                           dk_logic.forall abst_T 
                                             (y:(cc.eT abst_T) =>
                                              dk_logic.forall abst_T 
                                                (z:(cc.eT abst_T) =>
                                                 dk_logic.ebP 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_sup x y) z) 
                                                      (abst_sup 
                                                         (abst_plus x z) 
                                                         (abst_plus y z)))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.and 
                (dk_logic.ebP 
                   (abst_equal (abst_plus x (abst_sup y z)) 
                      (abst_sup (abst_plus x y) (abst_plus x z)))) 
                (dk_logic.ebP 
                   (abst_equal (abst_plus (abst_sup x y) z) 
                      (abst_sup (abst_plus x z) (abst_plus y z))))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_sup:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_add_left_distributes_on_sup:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.ebP 
                 (abst_equal (abst_plus x (abst_sup y z)) 
                    (abst_sup (abst_plus x y) (abst_plus x z)))))))) =>
  abst_add_right_distributes_on_sup:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.ebP 
                 (abst_equal (abst_plus (abst_sup x y) z) 
                    (abst_sup (abst_plus x z) (abst_plus y z)))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.and 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus v_Vzb (abst_sup v_Vac v_Vbc)) 
                         (abst_sup (abst_plus v_Vzb v_Vac) 
                            (abst_plus v_Vzb v_Vbc))))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus (abst_sup v_Vzb v_Vac) v_Vbc) 
                         (abst_sup (abst_plus v_Vzb v_Vbc) 
                            (abst_plus v_Vac v_Vbc))))))))) 
    (v_Vcc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.and 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus v_Vzb (abst_sup v_Vac v_Vbc)) 
                                (abst_sup (abst_plus v_Vzb v_Vac) 
                                   (abst_plus v_Vzb v_Vbc))))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus (abst_sup v_Vzb v_Vac) v_Vbc) 
                                (abst_sup (abst_plus v_Vzb v_Vbc) 
                                   (abst_plus v_Vac v_Vbc))))))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.and 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus v_Vzb (abst_sup v_Vac v_Vbc)) 
                         (abst_sup (abst_plus v_Vzb v_Vac) 
                            (abst_plus v_Vzb v_Vbc))))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus (abst_sup v_Vzb v_Vac) v_Vbc) 
                         (abst_sup (abst_plus v_Vzb v_Vbc) 
                            (abst_plus v_Vac v_Vbc)))))))) 
       (v_Vdc:(zen.term abst_T) =>
        v_Vec:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.and 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus v_Vdc (abst_sup v_Vac v_Vbc)) 
                                (abst_sup (abst_plus v_Vdc v_Vac) 
                                   (abst_plus v_Vdc v_Vbc))))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus (abst_sup v_Vdc v_Vac) v_Vbc) 
                                (abst_sup (abst_plus v_Vdc v_Vbc) 
                                   (abst_plus v_Vac v_Vbc)))))))))) =>
        zen.Rnotall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.and 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus v_Vdc (abst_sup v_Vac v_Vbc)) 
                         (abst_sup (abst_plus v_Vdc v_Vac) 
                            (abst_plus v_Vdc v_Vbc))))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus (abst_sup v_Vdc v_Vac) v_Vbc) 
                         (abst_sup (abst_plus v_Vdc v_Vbc) 
                            (abst_plus v_Vac v_Vbc))))))) 
          (v_Vfc:(zen.term abst_T) =>
           v_Vgc:
           (zen.proof 
              (zen.not 
                 (zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.and 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus v_Vdc (abst_sup v_Vfc v_Vbc)) 
                                (abst_sup (abst_plus v_Vdc v_Vfc) 
                                   (abst_plus v_Vdc v_Vbc))))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus (abst_sup v_Vdc v_Vfc) v_Vbc) 
                                (abst_sup (abst_plus v_Vdc v_Vbc) 
                                   (abst_plus v_Vfc v_Vbc))))))))) =>
           zen.Rnotall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.and 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus v_Vdc (abst_sup v_Vfc v_Vbc)) 
                         (abst_sup (abst_plus v_Vdc v_Vfc) 
                            (abst_plus v_Vdc v_Vbc))))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus (abst_sup v_Vdc v_Vfc) v_Vbc) 
                         (abst_sup (abst_plus v_Vdc v_Vbc) 
                            (abst_plus v_Vfc v_Vbc)))))) 
             (v_Vhc:(zen.term abst_T) =>
              v_Vic:
              (zen.proof 
                 (zen.not 
                    (zen.and 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus v_Vdc (abst_sup v_Vfc v_Vhc)) 
                                (abst_sup (abst_plus v_Vdc v_Vfc) 
                                   (abst_plus v_Vdc v_Vhc))))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus (abst_sup v_Vdc v_Vfc) v_Vhc) 
                                (abst_sup (abst_plus v_Vdc v_Vhc) 
                                   (abst_plus v_Vfc v_Vhc)))))))) =>
              zen.Rnotand 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus v_Vdc (abst_sup v_Vfc v_Vhc)) 
                         (abst_sup (abst_plus v_Vdc v_Vfc) 
                            (abst_plus v_Vdc v_Vhc))))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus (abst_sup v_Vdc v_Vfc) v_Vhc) 
                         (abst_sup (abst_plus v_Vdc v_Vhc) 
                            (abst_plus v_Vfc v_Vhc))))) 
                (v_Vjc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus v_Vdc (abst_sup v_Vfc v_Vhc)) 
                                (abst_sup (abst_plus v_Vdc v_Vfc) 
                                   (abst_plus v_Vdc v_Vhc))))))) =>
                 zen.Rall abst_T 
                   (v_Vzb:(zen.term abst_T) =>
                    zen.forall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus v_Vzb (abst_sup v_Vac v_Vbc)) 
                                  (abst_sup (abst_plus v_Vzb v_Vac) 
                                     (abst_plus v_Vzb v_Vbc))))))) v_Vdc 
                   (v_Vkc:
                    (zen.proof 
                       (zen.forall abst_T 
                          (v_Vac:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vbc:(zen.term abst_T) =>
                              zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus v_Vdc (abst_sup v_Vac v_Vbc)) 
                                      (abst_sup (abst_plus v_Vdc v_Vac) 
                                         (abst_plus v_Vdc v_Vbc)))))))) =>
                    zen.Rall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus v_Vdc (abst_sup v_Vac v_Vbc)) 
                                  (abst_sup (abst_plus v_Vdc v_Vac) 
                                     (abst_plus v_Vdc v_Vbc)))))) v_Vfc 
                      (v_Vlc:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vbc:(zen.term abst_T) =>
                              zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus v_Vdc (abst_sup v_Vfc v_Vbc)) 
                                      (abst_sup (abst_plus v_Vdc v_Vfc) 
                                         (abst_plus v_Vdc v_Vbc))))))) =>
                       zen.Rall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus v_Vdc (abst_sup v_Vfc v_Vbc)) 
                                  (abst_sup (abst_plus v_Vdc v_Vfc) 
                                     (abst_plus v_Vdc v_Vbc))))) v_Vhc 
                         (v_Vmc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus v_Vdc (abst_sup v_Vfc v_Vhc)) 
                                      (abst_sup (abst_plus v_Vdc v_Vfc) 
                                         (abst_plus v_Vdc v_Vhc)))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus v_Vdc (abst_sup v_Vfc v_Vhc)) 
                                     (abst_sup (abst_plus v_Vdc v_Vfc) 
                                        (abst_plus v_Vdc v_Vhc))))) v_Vmc 
                            v_Vjc) v_Vlc) v_Vkc) 
                   abst_add_left_distributes_on_sup) 
                (v_Vnc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus (abst_sup v_Vdc v_Vfc) v_Vhc) 
                                (abst_sup (abst_plus v_Vdc v_Vhc) 
                                   (abst_plus v_Vfc v_Vhc))))))) =>
                 zen.Rall abst_T 
                   (v_Vzb:(zen.term abst_T) =>
                    zen.forall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_sup v_Vzb v_Vac) v_Vbc) 
                                  (abst_sup (abst_plus v_Vzb v_Vbc) 
                                     (abst_plus v_Vac v_Vbc))))))) v_Vdc 
                   (v_Voc:
                    (zen.proof 
                       (zen.forall abst_T 
                          (v_Vac:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vbc:(zen.term abst_T) =>
                              zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_sup v_Vdc v_Vac) v_Vbc) 
                                      (abst_sup (abst_plus v_Vdc v_Vbc) 
                                         (abst_plus v_Vac v_Vbc)))))))) =>
                    zen.Rall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_sup v_Vdc v_Vac) v_Vbc) 
                                  (abst_sup (abst_plus v_Vdc v_Vbc) 
                                     (abst_plus v_Vac v_Vbc)))))) v_Vfc 
                      (v_Vpc:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vbc:(zen.term abst_T) =>
                              zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_sup v_Vdc v_Vfc) v_Vbc) 
                                      (abst_sup (abst_plus v_Vdc v_Vbc) 
                                         (abst_plus v_Vfc v_Vbc))))))) =>
                       zen.Rall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_sup v_Vdc v_Vfc) v_Vbc) 
                                  (abst_sup (abst_plus v_Vdc v_Vbc) 
                                     (abst_plus v_Vfc v_Vbc))))) v_Vhc 
                         (v_Vqc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_sup v_Vdc v_Vfc) v_Vhc) 
                                      (abst_sup (abst_plus v_Vdc v_Vhc) 
                                         (abst_plus v_Vfc v_Vhc)))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus (abst_sup v_Vdc v_Vfc) v_Vhc) 
                                     (abst_sup (abst_plus v_Vdc v_Vhc) 
                                        (abst_plus v_Vfc v_Vhc))))) v_Vqc 
                            v_Vnc) v_Vpc) v_Voc) 
                   abst_add_right_distributes_on_sup) v_Vic) v_Vgc) v_Vec) 
       v_Vcc).

def Additive_monoid_with_supremum__is_min :
  abst_T:cc.uT ->
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  (cc.eT abst_T) -> cc.eT basics.bool__t
  :=
  abst_T:cc.uT =>
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) => abst_is_zero.

def Additive_monoid_with_supremum__min_spec :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_zero:(cc.eT abst_T) ->
  abst_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.ebP (abst_equal x x)))) ->
  dk_logic.eP 
    (dk_logic.ebP 
       (abst_equal (Additive_monoid_with_supremum__min abst_T abst_zero) 
          abst_zero))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_zero:(cc.eT abst_T) =>
  abst_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) => dk_logic.ebP (abst_equal x x)))) =>
  zen.nnpp 
    (zen.triangle 
       (focal.is_true 
          (abst_equal (Additive_monoid_with_supremum__min abst_T abst_zero) 
             abst_zero))) 
    (v_Vzb:
     (zen.proof 
        (zen.not 
           (zen.triangle (focal.is_true (abst_equal abst_zero abst_zero))))) =>
     zen.Rall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.triangle (focal.is_true (abst_equal v_Vac v_Vac))) abst_zero 
       (v_Vbc:
        (zen.proof 
           (zen.triangle (focal.is_true (abst_equal abst_zero abst_zero)))) =>
        zen.Raxiom 
          (zen.triangle (focal.is_true (abst_equal abst_zero abst_zero))) 
          v_Vbc v_Vzb) abst_equal_reflexive).

def Additive_monoid_with_supremum__min_is_right_neutral :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_sup:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (abst_equal x y)) 
                                   (dk_logic.ebP (abst_equal y x)))))) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_zero_is_neutral:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.and 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus x abst_zero) x)) 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus abst_zero x) x))))) ->
  abst_sup_absorbes_add:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.ebP 
                                    (lattices.Join_semi_lattice__order_sup 
                                       abst_T abst_equal abst_sup 
                                       (abst_plus x y) x))))) ->
  abst_order_sup_is_reflexive:(dk_logic.eP 
                                 (dk_logic.forall abst_T 
                                    (x:(cc.eT abst_T) =>
                                     dk_logic.forall abst_T 
                                       (y:(cc.eT abst_T) =>
                                        dk_logic.imp 
                                          (dk_logic.ebP (abst_equal x y)) 
                                          (dk_logic.ebP 
                                             (lattices.Join_semi_lattice__order_sup 
                                                abst_T abst_equal abst_sup x 
                                                y)))))) ->
  abst_order_sup_is_transitive:(dk_logic.eP 
                                  (dk_logic.forall abst_T 
                                     (x:(cc.eT abst_T) =>
                                      dk_logic.forall abst_T 
                                        (y:(cc.eT abst_T) =>
                                         dk_logic.forall abst_T 
                                           (z:(cc.eT abst_T) =>
                                            dk_logic.imp 
                                              (dk_logic.ebP 
                                                 (lattices.Join_semi_lattice__order_sup 
                                                    abst_T abst_equal 
                                                    abst_sup x y)) 
                                              (dk_logic.imp 
                                                 (dk_logic.ebP 
                                                    (lattices.Join_semi_lattice__order_sup 
                                                       abst_T abst_equal 
                                                       abst_sup y z)) 
                                                 (dk_logic.ebP 
                                                    (lattices.Join_semi_lattice__order_sup 
                                                       abst_T abst_equal 
                                                       abst_sup x z)))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.ebP 
          (abst_equal 
             (abst_sup x 
                (Additive_monoid_with_supremum__min abst_T abst_zero)) x)))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_sup:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal y x)))))) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_zero_is_neutral:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.and (dk_logic.ebP (abst_equal (abst_plus x abst_zero) x)) 
           (dk_logic.ebP (abst_equal (abst_plus abst_zero x) x))))) =>
  abst_sup_absorbes_add:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.ebP 
              (lattices.Join_semi_lattice__order_sup abst_T abst_equal 
                 abst_sup (abst_plus x y) x))))) =>
  abst_order_sup_is_reflexive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP 
                 (lattices.Join_semi_lattice__order_sup abst_T abst_equal 
                    abst_sup x y)))))) =>
  abst_order_sup_is_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp 
                 (dk_logic.ebP 
                    (lattices.Join_semi_lattice__order_sup abst_T abst_equal 
                       abst_sup x y)) 
                 (dk_logic.imp 
                    (dk_logic.ebP 
                       (lattices.Join_semi_lattice__order_sup abst_T 
                          abst_equal abst_sup y z)) 
                    (dk_logic.ebP 
                       (lattices.Join_semi_lattice__order_sup abst_T 
                          abst_equal abst_sup x z)))))))) =>
  (__R_1_LEMMA:
   (x:(cc.eT abst_T) ->
    dk_logic.eP 
      (dk_logic.ebP 
         (abst_equal 
            (abst_sup x (Additive_monoid_with_supremum__min abst_T abst_zero)) 
            x))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.triangle 
           (focal.is_true 
              (abst_equal 
                 (abst_sup v_Vzb 
                    (Additive_monoid_with_supremum__min abst_T abst_zero)) 
                 v_Vzb)))) 
     (v_Vac:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.triangle 
                  (focal.is_true 
                     (abst_equal 
                        (abst_sup v_Vzb 
                           (Additive_monoid_with_supremum__min abst_T 
                              abst_zero)) v_Vzb)))))) =>
      zen.Raxiom 
        (zen.forall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.triangle 
              (focal.is_true 
                 (abst_equal 
                    (abst_sup v_Vzb 
                       (Additive_monoid_with_supremum__min abst_T abst_zero)) 
                    v_Vzb)))) __R_1_LEMMA v_Vac)) 
    (x:(cc.eT abst_T) =>
     (__R_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (abst_equal x 
               (abst_plus 
                  (Additive_monoid_with_supremum__min abst_T abst_zero) x)))) =>
      (__R_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP 
             (lattices.Join_semi_lattice__order_sup abst_T abst_equal 
                abst_sup 
                (abst_plus 
                   (Additive_monoid_with_supremum__min abst_T abst_zero) x) 
                (Additive_monoid_with_supremum__min abst_T abst_zero)))) =>
       (__R_1_3_LEMMA:
        (dk_logic.eP 
           (dk_logic.ebP 
              (lattices.Join_semi_lattice__order_sup abst_T abst_equal 
                 abst_sup x 
                 (Additive_monoid_with_supremum__min abst_T abst_zero)))) =>
        zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (abst_equal 
                   (abst_sup x 
                      (Additive_monoid_with_supremum__min abst_T abst_zero)) 
                   x))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal 
                          (abst_sup x 
                             (Additive_monoid_with_supremum__min abst_T 
                                abst_zero)) x))))) =>
           zen.Rall abst_T 
             (v_Vac:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vac))))) 
             x 
             (v_Vcc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_equal x v_Vbc))) 
                       (zen.triangle (focal.is_true (abst_equal v_Vbc x)))))) =>
              zen.Rall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.imp (zen.triangle (focal.is_true (abst_equal x v_Vbc))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vbc x)))) 
                (abst_sup x 
                   (Additive_monoid_with_supremum__min abst_T abst_zero)) 
                (v_Vdc:
                 (zen.proof 
                    (zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal x 
                                (abst_sup x 
                                   (Additive_monoid_with_supremum__min 
                                      abst_T abst_zero))))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_sup x 
                                   (Additive_monoid_with_supremum__min 
                                      abst_T abst_zero)) x))))) =>
                 zen.Rimply 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal x 
                            (abst_sup x 
                               (Additive_monoid_with_supremum__min abst_T 
                                  abst_zero))))) 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal 
                            (abst_sup x 
                               (Additive_monoid_with_supremum__min abst_T 
                                  abst_zero)) x))) 
                   (v_Vec:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal x 
                                   (abst_sup x 
                                      (Additive_monoid_with_supremum__min 
                                         abst_T abst_zero))))))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal x 
                               (abst_sup x 
                                  (Additive_monoid_with_supremum__min abst_T 
                                     abst_zero))))) __R_1_3_LEMMA v_Vec) 
                   (v_Vfc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_sup x 
                                   (Additive_monoid_with_supremum__min 
                                      abst_T abst_zero)) x)))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_sup x 
                                  (Additive_monoid_with_supremum__min abst_T 
                                     abst_zero)) x))) v_Vfc v_Vzb) v_Vdc) 
                v_Vcc) abst_equal_symmetric)) 
         (zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (lattices.Join_semi_lattice__order_sup abst_T abst_equal 
                     abst_sup x 
                     (Additive_monoid_with_supremum__min abst_T abst_zero)))) 
            (v_Vkc:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (lattices.Join_semi_lattice__order_sup abst_T 
                            abst_equal abst_sup x 
                            (Additive_monoid_with_supremum__min abst_T 
                               abst_zero)))))) =>
             zen.Rcut 
               (zen.and 
                  (zen.not 
                     (zen.triangle 
                        (zen.equal abst_T x 
                           (abst_plus 
                              (Additive_monoid_with_supremum__min abst_T 
                                 abst_zero) x)))) 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (lattices.Join_semi_lattice__order_sup abst_T 
                              abst_equal abst_sup x 
                              (abst_plus 
                                 (Additive_monoid_with_supremum__min abst_T 
                                    abst_zero) x)))))) 
               (v_Vlc:
                (zen.proof 
                   (zen.and 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal abst_T x 
                               (abst_plus 
                                  (Additive_monoid_with_supremum__min abst_T 
                                     abst_zero) x)))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (lattices.Join_semi_lattice__order_sup abst_T 
                                  abst_equal abst_sup x 
                                  (abst_plus 
                                     (Additive_monoid_with_supremum__min 
                                        abst_T abst_zero) x))))))) =>
                zen.Rand 
                  (zen.not 
                     (zen.triangle 
                        (zen.equal abst_T x 
                           (abst_plus 
                              (Additive_monoid_with_supremum__min abst_T 
                                 abst_zero) x)))) 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (lattices.Join_semi_lattice__order_sup abst_T 
                              abst_equal abst_sup x 
                              (abst_plus 
                                 (Additive_monoid_with_supremum__min abst_T 
                                    abst_zero) x))))) 
                  (v_Vmc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal abst_T x 
                               (abst_plus 
                                  (Additive_monoid_with_supremum__min abst_T 
                                     abst_zero) x))))) =>
                   v_Vnc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (lattices.Join_semi_lattice__order_sup abst_T 
                                  abst_equal abst_sup x 
                                  (abst_plus 
                                     (Additive_monoid_with_supremum__min 
                                        abst_T abst_zero) x)))))) =>
                   zen.Rall abst_T 
                     (v_Voc:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vpc:(zen.term abst_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Voc v_Vpc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (lattices.Join_semi_lattice__order_sup 
                                    abst_T abst_equal abst_sup v_Voc v_Vpc))))) 
                     x 
                     (v_Vqc:
                      (zen.proof 
                         (zen.forall abst_T 
                            (v_Vpc:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_equal x v_Vpc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (lattices.Join_semi_lattice__order_sup 
                                        abst_T abst_equal abst_sup x v_Vpc)))))) =>
                      zen.Rall abst_T 
                        (v_Vpc:(zen.term abst_T) =>
                         zen.imp 
                           (zen.triangle (focal.is_true (abst_equal x v_Vpc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (lattices.Join_semi_lattice__order_sup 
                                    abst_T abst_equal abst_sup x v_Vpc)))) 
                        (abst_plus 
                           (Additive_monoid_with_supremum__min abst_T 
                              abst_zero) x) 
                        (v_Vrc:
                         (zen.proof 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal x 
                                        (abst_plus 
                                           (Additive_monoid_with_supremum__min 
                                              abst_T abst_zero) x)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (lattices.Join_semi_lattice__order_sup 
                                        abst_T abst_equal abst_sup x 
                                        (abst_plus 
                                           (Additive_monoid_with_supremum__min 
                                              abst_T abst_zero) x)))))) =>
                         zen.Rimply 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal x 
                                    (abst_plus 
                                       (Additive_monoid_with_supremum__min 
                                          abst_T abst_zero) x)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (lattices.Join_semi_lattice__order_sup 
                                    abst_T abst_equal abst_sup x 
                                    (abst_plus 
                                       (Additive_monoid_with_supremum__min 
                                          abst_T abst_zero) x)))) 
                           (v_Vsc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal x 
                                           (abst_plus 
                                              (Additive_monoid_with_supremum__min 
                                                 abst_T abst_zero) x)))))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal x 
                                       (abst_plus 
                                          (Additive_monoid_with_supremum__min 
                                             abst_T abst_zero) x)))) 
                              __R_1_1_LEMMA v_Vsc) 
                           (v_Vtc:
                            (zen.proof 
                               (zen.triangle 
                                  (focal.is_true 
                                     (lattices.Join_semi_lattice__order_sup 
                                        abst_T abst_equal abst_sup x 
                                        (abst_plus 
                                           (Additive_monoid_with_supremum__min 
                                              abst_T abst_zero) x))))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (focal.is_true 
                                    (lattices.Join_semi_lattice__order_sup 
                                       abst_T abst_equal abst_sup x 
                                       (abst_plus 
                                          (Additive_monoid_with_supremum__min 
                                             abst_T abst_zero) x)))) v_Vtc 
                              v_Vnc) v_Vrc) v_Vqc) 
                     abst_order_sup_is_reflexive) v_Vlc) 
               (v_Vuc:
                (zen.proof 
                   (zen.not 
                      (zen.and 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T x 
                                  (abst_plus 
                                     (Additive_monoid_with_supremum__min 
                                        abst_T abst_zero) x)))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (lattices.Join_semi_lattice__order_sup 
                                     abst_T abst_equal abst_sup x 
                                     (abst_plus 
                                        (Additive_monoid_with_supremum__min 
                                           abst_T abst_zero) x)))))))) =>
                zen.Rcut 
                  (zen.triangle 
                     (zen.equal abst_T 
                        (Additive_monoid_with_supremum__min abst_T abst_zero) 
                        (Additive_monoid_with_supremum__min abst_T abst_zero))) 
                  (v_Vvc:
                   (zen.proof 
                      (zen.triangle 
                         (zen.equal abst_T 
                            (Additive_monoid_with_supremum__min abst_T 
                               abst_zero) 
                            (Additive_monoid_with_supremum__min abst_T 
                               abst_zero)))) =>
                   zen.Rsubst basics.bool__t 
                     (v_Vwc:(zen.term basics.bool__t) =>
                      zen.triangle (focal.is_true v_Vwc)) 
                     (lattices.Join_semi_lattice__order_sup abst_T 
                        abst_equal abst_sup 
                        (abst_plus 
                           (Additive_monoid_with_supremum__min abst_T 
                              abst_zero) x) 
                        (Additive_monoid_with_supremum__min abst_T abst_zero)) 
                     (lattices.Join_semi_lattice__order_sup abst_T 
                        abst_equal abst_sup x 
                        (Additive_monoid_with_supremum__min abst_T abst_zero)) 
                     (v_Vxc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (lattices.Join_semi_lattice__order_sup 
                                     abst_T abst_equal abst_sup 
                                     (abst_plus 
                                        (Additive_monoid_with_supremum__min 
                                           abst_T abst_zero) x) 
                                     (Additive_monoid_with_supremum__min 
                                        abst_T abst_zero)) 
                                  (lattices.Join_semi_lattice__order_sup 
                                     abst_T abst_equal abst_sup x 
                                     (Additive_monoid_with_supremum__min 
                                        abst_T abst_zero)))))) =>
                      zen.Rsubst abst_T 
                        (v_Vyc:(zen.term abst_T) =>
                         zen.not 
                           (zen.triangle 
                              (zen.equal basics.bool__t 
                                 (lattices.Join_semi_lattice__order_sup 
                                    abst_T abst_equal abst_sup v_Vyc 
                                    (Additive_monoid_with_supremum__min 
                                       abst_T abst_zero)) 
                                 (lattices.Join_semi_lattice__order_sup 
                                    abst_T abst_equal abst_sup x 
                                    (Additive_monoid_with_supremum__min 
                                       abst_T abst_zero))))) 
                        (abst_plus 
                           (Additive_monoid_with_supremum__min abst_T 
                              abst_zero) x) x 
                        (v_Vzc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_plus 
                                        (Additive_monoid_with_supremum__min 
                                           abst_T abst_zero) x) x)))) =>
                         zen.Rnotand 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal abst_T x 
                                    (abst_plus 
                                       (Additive_monoid_with_supremum__min 
                                          abst_T abst_zero) x)))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (lattices.Join_semi_lattice__order_sup 
                                       abst_T abst_equal abst_sup x 
                                       (abst_plus 
                                          (Additive_monoid_with_supremum__min 
                                             abst_T abst_zero) x))))) 
                           (v_Vad:
                            (zen.proof 
                               (zen.not 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal abst_T x 
                                           (abst_plus 
                                              (Additive_monoid_with_supremum__min 
                                                 abst_T abst_zero) x)))))) =>
                            zen.Rnotnot 
                              (zen.triangle 
                                 (zen.equal abst_T x 
                                    (abst_plus 
                                       (Additive_monoid_with_supremum__min 
                                          abst_T abst_zero) x))) 
                              (v_Vbd:
                               (zen.proof 
                                  (zen.triangle 
                                     (zen.equal abst_T x 
                                        (abst_plus 
                                           (Additive_monoid_with_supremum__min 
                                              abst_T abst_zero) x)))) =>
                               zen.Rcut 
                                 (zen.triangle (zen.equal abst_T x x)) 
                                 (v_Vcd:
                                  (zen.proof 
                                     (zen.triangle (zen.equal abst_T x x))) =>
                                  zen.Rsubst abst_T 
                                    (v_Vdd:(zen.term abst_T) =>
                                     zen.triangle (zen.equal abst_T v_Vdd x)) 
                                    x 
                                    (abst_plus 
                                       (Additive_monoid_with_supremum__min 
                                          abst_T abst_zero) x) 
                                    (v_Vmc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T x 
                                                 (abst_plus 
                                                    (Additive_monoid_with_supremum__min 
                                                       abst_T abst_zero) x))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (zen.equal abst_T x 
                                             (abst_plus 
                                                (Additive_monoid_with_supremum__min 
                                                   abst_T abst_zero) x))) 
                                       v_Vbd v_Vmc) 
                                    (v_Ved:
                                     (zen.proof 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus 
                                                 (Additive_monoid_with_supremum__min 
                                                    abst_T abst_zero) x) x))) =>
                                     zen.Rsubst abst_T 
                                       (v_Vfd:(zen.term abst_T) =>
                                        zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_plus 
                                                (Additive_monoid_with_supremum__min 
                                                   abst_T abst_zero) x) v_Vfd)) 
                                       x x 
                                       (v_Vgd:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T x x)))) =>
                                        zen.Rnoteq abst_T x v_Vgd) 
                                       (v_Ved0:
                                        (zen.proof 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus 
                                                    (Additive_monoid_with_supremum__min 
                                                       abst_T abst_zero) x) x))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_plus 
                                                   (Additive_monoid_with_supremum__min 
                                                      abst_T abst_zero) x) x)) 
                                          v_Ved0 v_Vzc) v_Ved) v_Vcd) 
                                 (v_Vgd:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle (zen.equal abst_T x x)))) =>
                                  zen.Rnoteq abst_T x v_Vgd)) v_Vad) 
                           (v_Vhd:
                            (zen.proof 
                               (zen.not 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (lattices.Join_semi_lattice__order_sup 
                                              abst_T abst_equal abst_sup x 
                                              (abst_plus 
                                                 (Additive_monoid_with_supremum__min 
                                                    abst_T abst_zero) x))))))) =>
                            zen.Rnotnot 
                              (zen.triangle 
                                 (focal.is_true 
                                    (lattices.Join_semi_lattice__order_sup 
                                       abst_T abst_equal abst_sup x 
                                       (abst_plus 
                                          (Additive_monoid_with_supremum__min 
                                             abst_T abst_zero) x)))) 
                              (v_Vtc:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (lattices.Join_semi_lattice__order_sup 
                                           abst_T abst_equal abst_sup x 
                                           (abst_plus 
                                              (Additive_monoid_with_supremum__min 
                                                 abst_T abst_zero) x))))) =>
                               zen.Rall abst_T 
                                 (v_Voc:(zen.term abst_T) =>
                                  zen.forall abst_T 
                                    (v_Vpc:(zen.term abst_T) =>
                                     zen.forall abst_T 
                                       (v_Vid:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (lattices.Join_semi_lattice__order_sup 
                                                   abst_T abst_equal 
                                                   abst_sup v_Voc v_Vpc))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (lattices.Join_semi_lattice__order_sup 
                                                      abst_T abst_equal 
                                                      abst_sup v_Vpc v_Vid))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (lattices.Join_semi_lattice__order_sup 
                                                      abst_T abst_equal 
                                                      abst_sup v_Voc v_Vid))))))) 
                                 x 
                                 (v_Vjd:
                                  (zen.proof 
                                     (zen.forall abst_T 
                                        (v_Vpc:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vid:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (lattices.Join_semi_lattice__order_sup 
                                                       abst_T abst_equal 
                                                       abst_sup x v_Vpc))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (lattices.Join_semi_lattice__order_sup 
                                                          abst_T abst_equal 
                                                          abst_sup v_Vpc 
                                                          v_Vid))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (lattices.Join_semi_lattice__order_sup 
                                                          abst_T abst_equal 
                                                          abst_sup x v_Vid)))))))) =>
                                  zen.Rall abst_T 
                                    (v_Vpc:(zen.term abst_T) =>
                                     zen.forall abst_T 
                                       (v_Vid:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (lattices.Join_semi_lattice__order_sup 
                                                   abst_T abst_equal 
                                                   abst_sup x v_Vpc))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (lattices.Join_semi_lattice__order_sup 
                                                      abst_T abst_equal 
                                                      abst_sup v_Vpc v_Vid))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (lattices.Join_semi_lattice__order_sup 
                                                      abst_T abst_equal 
                                                      abst_sup x v_Vid)))))) 
                                    (abst_plus 
                                       (Additive_monoid_with_supremum__min 
                                          abst_T abst_zero) x) 
                                    (v_Vkd:
                                     (zen.proof 
                                        (zen.forall abst_T 
                                           (v_Vid:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (lattices.Join_semi_lattice__order_sup 
                                                       abst_T abst_equal 
                                                       abst_sup x 
                                                       (abst_plus 
                                                          (Additive_monoid_with_supremum__min 
                                                             abst_T abst_zero) 
                                                          x)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (lattices.Join_semi_lattice__order_sup 
                                                          abst_T abst_equal 
                                                          abst_sup 
                                                          (abst_plus 
                                                             (Additive_monoid_with_supremum__min 
                                                                abst_T 
                                                                abst_zero) x) 
                                                          v_Vid))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (lattices.Join_semi_lattice__order_sup 
                                                          abst_T abst_equal 
                                                          abst_sup x v_Vid))))))) =>
                                     zen.Rall abst_T 
                                       (v_Vid:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (lattices.Join_semi_lattice__order_sup 
                                                   abst_T abst_equal 
                                                   abst_sup x 
                                                   (abst_plus 
                                                      (Additive_monoid_with_supremum__min 
                                                         abst_T abst_zero) x)))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (lattices.Join_semi_lattice__order_sup 
                                                      abst_T abst_equal 
                                                      abst_sup 
                                                      (abst_plus 
                                                         (Additive_monoid_with_supremum__min 
                                                            abst_T abst_zero) 
                                                         x) v_Vid))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (lattices.Join_semi_lattice__order_sup 
                                                      abst_T abst_equal 
                                                      abst_sup x v_Vid))))) 
                                       (Additive_monoid_with_supremum__min 
                                          abst_T abst_zero) 
                                       (v_Vld:
                                        (zen.proof 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (lattices.Join_semi_lattice__order_sup 
                                                       abst_T abst_equal 
                                                       abst_sup x 
                                                       (abst_plus 
                                                          (Additive_monoid_with_supremum__min 
                                                             abst_T abst_zero) 
                                                          x)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (lattices.Join_semi_lattice__order_sup 
                                                          abst_T abst_equal 
                                                          abst_sup 
                                                          (abst_plus 
                                                             (Additive_monoid_with_supremum__min 
                                                                abst_T 
                                                                abst_zero) x) 
                                                          (Additive_monoid_with_supremum__min 
                                                             abst_T abst_zero)))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (lattices.Join_semi_lattice__order_sup 
                                                          abst_T abst_equal 
                                                          abst_sup x 
                                                          (Additive_monoid_with_supremum__min 
                                                             abst_T abst_zero))))))) =>
                                        zen.Rimply 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (lattices.Join_semi_lattice__order_sup 
                                                   abst_T abst_equal 
                                                   abst_sup x 
                                                   (abst_plus 
                                                      (Additive_monoid_with_supremum__min 
                                                         abst_T abst_zero) x)))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (lattices.Join_semi_lattice__order_sup 
                                                      abst_T abst_equal 
                                                      abst_sup 
                                                      (abst_plus 
                                                         (Additive_monoid_with_supremum__min 
                                                            abst_T abst_zero) 
                                                         x) 
                                                      (Additive_monoid_with_supremum__min 
                                                         abst_T abst_zero)))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (lattices.Join_semi_lattice__order_sup 
                                                      abst_T abst_equal 
                                                      abst_sup x 
                                                      (Additive_monoid_with_supremum__min 
                                                         abst_T abst_zero))))) 
                                          (v_Vnc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (lattices.Join_semi_lattice__order_sup 
                                                          abst_T abst_equal 
                                                          abst_sup x 
                                                          (abst_plus 
                                                             (Additive_monoid_with_supremum__min 
                                                                abst_T 
                                                                abst_zero) x)))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (lattices.Join_semi_lattice__order_sup 
                                                      abst_T abst_equal 
                                                      abst_sup x 
                                                      (abst_plus 
                                                         (Additive_monoid_with_supremum__min 
                                                            abst_T abst_zero) 
                                                         x)))) v_Vtc v_Vnc) 
                                          (v_Vmd:
                                           (zen.proof 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (lattices.Join_semi_lattice__order_sup 
                                                          abst_T abst_equal 
                                                          abst_sup 
                                                          (abst_plus 
                                                             (Additive_monoid_with_supremum__min 
                                                                abst_T 
                                                                abst_zero) x) 
                                                          (Additive_monoid_with_supremum__min 
                                                             abst_T abst_zero)))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (lattices.Join_semi_lattice__order_sup 
                                                          abst_T abst_equal 
                                                          abst_sup x 
                                                          (Additive_monoid_with_supremum__min 
                                                             abst_T abst_zero)))))) =>
                                           zen.Rimply 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (lattices.Join_semi_lattice__order_sup 
                                                      abst_T abst_equal 
                                                      abst_sup 
                                                      (abst_plus 
                                                         (Additive_monoid_with_supremum__min 
                                                            abst_T abst_zero) 
                                                         x) 
                                                      (Additive_monoid_with_supremum__min 
                                                         abst_T abst_zero)))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (lattices.Join_semi_lattice__order_sup 
                                                      abst_T abst_equal 
                                                      abst_sup x 
                                                      (Additive_monoid_with_supremum__min 
                                                         abst_T abst_zero)))) 
                                             (v_Vnd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (lattices.Join_semi_lattice__order_sup 
                                                             abst_T 
                                                             abst_equal 
                                                             abst_sup 
                                                             (abst_plus 
                                                                (Additive_monoid_with_supremum__min 
                                                                   abst_T 
                                                                   abst_zero) 
                                                                x) 
                                                             (Additive_monoid_with_supremum__min 
                                                                abst_T 
                                                                abst_zero)))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (lattices.Join_semi_lattice__order_sup 
                                                         abst_T abst_equal 
                                                         abst_sup 
                                                         (abst_plus 
                                                            (Additive_monoid_with_supremum__min 
                                                               abst_T 
                                                               abst_zero) x) 
                                                         (Additive_monoid_with_supremum__min 
                                                            abst_T abst_zero)))) 
                                                __R_1_2_LEMMA v_Vnd) 
                                             (v_Vod:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (lattices.Join_semi_lattice__order_sup 
                                                          abst_T abst_equal 
                                                          abst_sup x 
                                                          (Additive_monoid_with_supremum__min 
                                                             abst_T abst_zero))))) =>
                                              zen.Rsubst basics.bool__t 
                                                (v_Vwc:
                                                 (zen.term basics.bool__t) =>
                                                 zen.triangle 
                                                   (focal.is_true v_Vwc)) 
                                                (lattices.Join_semi_lattice__order_sup 
                                                   abst_T abst_equal 
                                                   abst_sup x 
                                                   (Additive_monoid_with_supremum__min 
                                                      abst_T abst_zero)) 
                                                (lattices.Join_semi_lattice__order_sup 
                                                   abst_T abst_equal 
                                                   abst_sup x 
                                                   (Additive_monoid_with_supremum__min 
                                                      abst_T abst_zero)) 
                                                (v_Vpd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (lattices.Join_semi_lattice__order_sup 
                                                                abst_T 
                                                                abst_equal 
                                                                abst_sup x 
                                                                (Additive_monoid_with_supremum__min 
                                                                   abst_T 
                                                                   abst_zero)) 
                                                             (lattices.Join_semi_lattice__order_sup 
                                                                abst_T 
                                                                abst_equal 
                                                                abst_sup x 
                                                                (Additive_monoid_with_supremum__min 
                                                                   abst_T 
                                                                   abst_zero)))))) =>
                                                 zen.Rsubst abst_T 
                                                   (v_Vyc:
                                                    (zen.term abst_T) =>
                                                    zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (lattices.Join_semi_lattice__order_sup 
                                                               abst_T 
                                                               abst_equal 
                                                               abst_sup 
                                                               v_Vyc 
                                                               (Additive_monoid_with_supremum__min 
                                                                  abst_T 
                                                                  abst_zero)) 
                                                            (lattices.Join_semi_lattice__order_sup 
                                                               abst_T 
                                                               abst_equal 
                                                               abst_sup x 
                                                               (Additive_monoid_with_supremum__min 
                                                                  abst_T 
                                                                  abst_zero))))) 
                                                   x x 
                                                   (v_Vgd:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T x x)))) =>
                                                    zen.Rnoteq abst_T x v_Vgd) 
                                                   (v_Vpd0:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (lattices.Join_semi_lattice__order_sup 
                                                                   abst_T 
                                                                   abst_equal 
                                                                   abst_sup 
                                                                   x 
                                                                   (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero)) 
                                                                (lattices.Join_semi_lattice__order_sup 
                                                                   abst_T 
                                                                   abst_equal 
                                                                   abst_sup 
                                                                   x 
                                                                   (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero)))))) =>
                                                    zen.Rsubst abst_T 
                                                      (v_Vqd:
                                                       (zen.term abst_T) =>
                                                       zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (lattices.Join_semi_lattice__order_sup 
                                                                  abst_T 
                                                                  abst_equal 
                                                                  abst_sup x 
                                                                  v_Vqd) 
                                                               (lattices.Join_semi_lattice__order_sup 
                                                                  abst_T 
                                                                  abst_equal 
                                                                  abst_sup x 
                                                                  (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero))))) 
                                                      (Additive_monoid_with_supremum__min 
                                                         abst_T abst_zero) 
                                                      (Additive_monoid_with_supremum__min 
                                                         abst_T abst_zero) 
                                                      (v_Vrd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero) 
                                                                   (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero))))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T 
                                                               (Additive_monoid_with_supremum__min 
                                                                  abst_T 
                                                                  abst_zero) 
                                                               (Additive_monoid_with_supremum__min 
                                                                  abst_T 
                                                                  abst_zero))) 
                                                         v_Vvc v_Vrd) 
                                                      (v_Vpd1:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    x 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero)) 
                                                                   (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    x 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero)))))) =>
                                                       zen.Rnoteq 
                                                         basics.bool__t 
                                                         (lattices.Join_semi_lattice__order_sup 
                                                            abst_T 
                                                            abst_equal 
                                                            abst_sup x 
                                                            (Additive_monoid_with_supremum__min 
                                                               abst_T 
                                                               abst_zero)) 
                                                         v_Vpd1) v_Vpd0) 
                                                   v_Vpd) 
                                                (v_Vod0:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (lattices.Join_semi_lattice__order_sup 
                                                             abst_T 
                                                             abst_equal 
                                                             abst_sup x 
                                                             (Additive_monoid_with_supremum__min 
                                                                abst_T 
                                                                abst_zero))))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (lattices.Join_semi_lattice__order_sup 
                                                            abst_T 
                                                            abst_equal 
                                                            abst_sup x 
                                                            (Additive_monoid_with_supremum__min 
                                                               abst_T 
                                                               abst_zero)))) 
                                                   v_Vod0 v_Vkc) v_Vod) v_Vmd) 
                                          v_Vld) v_Vkd) v_Vjd) 
                                 abst_order_sup_is_transitive) v_Vhd) v_Vuc) 
                        (v_Vpd:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (lattices.Join_semi_lattice__order_sup 
                                        abst_T abst_equal abst_sup x 
                                        (Additive_monoid_with_supremum__min 
                                           abst_T abst_zero)) 
                                     (lattices.Join_semi_lattice__order_sup 
                                        abst_T abst_equal abst_sup x 
                                        (Additive_monoid_with_supremum__min 
                                           abst_T abst_zero)))))) =>
                         zen.Rsubst abst_T 
                           (v_Vqd:(zen.term abst_T) =>
                            zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (lattices.Join_semi_lattice__order_sup 
                                       abst_T abst_equal abst_sup x v_Vqd) 
                                    (lattices.Join_semi_lattice__order_sup 
                                       abst_T abst_equal abst_sup x 
                                       (Additive_monoid_with_supremum__min 
                                          abst_T abst_zero))))) 
                           (Additive_monoid_with_supremum__min abst_T 
                              abst_zero) 
                           (Additive_monoid_with_supremum__min abst_T 
                              abst_zero) 
                           (v_Vrd:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (Additive_monoid_with_supremum__min 
                                           abst_T abst_zero) 
                                        (Additive_monoid_with_supremum__min 
                                           abst_T abst_zero))))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (zen.equal abst_T 
                                    (Additive_monoid_with_supremum__min 
                                       abst_T abst_zero) 
                                    (Additive_monoid_with_supremum__min 
                                       abst_T abst_zero))) v_Vvc v_Vrd) 
                           (v_Vpd0:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (lattices.Join_semi_lattice__order_sup 
                                           abst_T abst_equal abst_sup x 
                                           (Additive_monoid_with_supremum__min 
                                              abst_T abst_zero)) 
                                        (lattices.Join_semi_lattice__order_sup 
                                           abst_T abst_equal abst_sup x 
                                           (Additive_monoid_with_supremum__min 
                                              abst_T abst_zero)))))) =>
                            zen.Rnoteq basics.bool__t 
                              (lattices.Join_semi_lattice__order_sup abst_T 
                                 abst_equal abst_sup x 
                                 (Additive_monoid_with_supremum__min abst_T 
                                    abst_zero)) v_Vpd0) v_Vpd) v_Vxc) 
                     (v_Vod:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (lattices.Join_semi_lattice__order_sup abst_T 
                                  abst_equal abst_sup x 
                                  (Additive_monoid_with_supremum__min abst_T 
                                     abst_zero))))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (lattices.Join_semi_lattice__order_sup abst_T 
                                 abst_equal abst_sup x 
                                 (Additive_monoid_with_supremum__min abst_T 
                                    abst_zero)))) v_Vod v_Vkc) __R_1_2_LEMMA) 
                  (v_Vrd:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal abst_T 
                               (Additive_monoid_with_supremum__min abst_T 
                                  abst_zero) 
                               (Additive_monoid_with_supremum__min abst_T 
                                  abst_zero))))) =>
                   zen.Rcut 
                     (zen.triangle 
                        (focal.is_true 
                           (lattices.Join_semi_lattice__order_sup abst_T 
                              abst_equal abst_sup 
                              (Additive_monoid_with_supremum__min abst_T 
                                 abst_zero) 
                              (Additive_monoid_with_supremum__min abst_T 
                                 abst_zero)))) 
                     (v_Vsd:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (lattices.Join_semi_lattice__order_sup abst_T 
                                  abst_equal abst_sup 
                                  (Additive_monoid_with_supremum__min abst_T 
                                     abst_zero) 
                                  (Additive_monoid_with_supremum__min abst_T 
                                     abst_zero))))) =>
                      zen.Rall abst_T 
                        (v_Voc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vpc:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vid:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (lattices.Join_semi_lattice__order_sup 
                                          abst_T abst_equal abst_sup v_Voc 
                                          v_Vpc))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (lattices.Join_semi_lattice__order_sup 
                                             abst_T abst_equal abst_sup 
                                             v_Vpc v_Vid))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (lattices.Join_semi_lattice__order_sup 
                                             abst_T abst_equal abst_sup 
                                             v_Voc v_Vid))))))) 
                        (abst_plus 
                           (Additive_monoid_with_supremum__min abst_T 
                              abst_zero) x) 
                        (v_Vtd:
                         (zen.proof 
                            (zen.forall abst_T 
                               (v_Vpc:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vid:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (lattices.Join_semi_lattice__order_sup 
                                              abst_T abst_equal abst_sup 
                                              (abst_plus 
                                                 (Additive_monoid_with_supremum__min 
                                                    abst_T abst_zero) x) 
                                              v_Vpc))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (lattices.Join_semi_lattice__order_sup 
                                                 abst_T abst_equal abst_sup 
                                                 v_Vpc v_Vid))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (lattices.Join_semi_lattice__order_sup 
                                                 abst_T abst_equal abst_sup 
                                                 (abst_plus 
                                                    (Additive_monoid_with_supremum__min 
                                                       abst_T abst_zero) x) 
                                                 v_Vid)))))))) =>
                         zen.Rall abst_T 
                           (v_Vpc:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vid:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (lattices.Join_semi_lattice__order_sup 
                                          abst_T abst_equal abst_sup 
                                          (abst_plus 
                                             (Additive_monoid_with_supremum__min 
                                                abst_T abst_zero) x) v_Vpc))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (lattices.Join_semi_lattice__order_sup 
                                             abst_T abst_equal abst_sup 
                                             v_Vpc v_Vid))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (lattices.Join_semi_lattice__order_sup 
                                             abst_T abst_equal abst_sup 
                                             (abst_plus 
                                                (Additive_monoid_with_supremum__min 
                                                   abst_T abst_zero) x) v_Vid)))))) 
                           (Additive_monoid_with_supremum__min abst_T 
                              abst_zero) 
                           (v_Vud:
                            (zen.proof 
                               (zen.forall abst_T 
                                  (v_Vid:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (lattices.Join_semi_lattice__order_sup 
                                              abst_T abst_equal abst_sup 
                                              (abst_plus 
                                                 (Additive_monoid_with_supremum__min 
                                                    abst_T abst_zero) x) 
                                              (Additive_monoid_with_supremum__min 
                                                 abst_T abst_zero)))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (lattices.Join_semi_lattice__order_sup 
                                                 abst_T abst_equal abst_sup 
                                                 (Additive_monoid_with_supremum__min 
                                                    abst_T abst_zero) v_Vid))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (lattices.Join_semi_lattice__order_sup 
                                                 abst_T abst_equal abst_sup 
                                                 (abst_plus 
                                                    (Additive_monoid_with_supremum__min 
                                                       abst_T abst_zero) x) 
                                                 v_Vid))))))) =>
                            zen.Rall abst_T 
                              (v_Vid:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (lattices.Join_semi_lattice__order_sup 
                                          abst_T abst_equal abst_sup 
                                          (abst_plus 
                                             (Additive_monoid_with_supremum__min 
                                                abst_T abst_zero) x) 
                                          (Additive_monoid_with_supremum__min 
                                             abst_T abst_zero)))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (lattices.Join_semi_lattice__order_sup 
                                             abst_T abst_equal abst_sup 
                                             (Additive_monoid_with_supremum__min 
                                                abst_T abst_zero) v_Vid))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (lattices.Join_semi_lattice__order_sup 
                                             abst_T abst_equal abst_sup 
                                             (abst_plus 
                                                (Additive_monoid_with_supremum__min 
                                                   abst_T abst_zero) x) v_Vid))))) 
                              (Additive_monoid_with_supremum__min abst_T 
                                 abst_zero) 
                              (v_Vvd:
                               (zen.proof 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (lattices.Join_semi_lattice__order_sup 
                                              abst_T abst_equal abst_sup 
                                              (abst_plus 
                                                 (Additive_monoid_with_supremum__min 
                                                    abst_T abst_zero) x) 
                                              (Additive_monoid_with_supremum__min 
                                                 abst_T abst_zero)))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (lattices.Join_semi_lattice__order_sup 
                                                 abst_T abst_equal abst_sup 
                                                 (Additive_monoid_with_supremum__min 
                                                    abst_T abst_zero) 
                                                 (Additive_monoid_with_supremum__min 
                                                    abst_T abst_zero)))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (lattices.Join_semi_lattice__order_sup 
                                                 abst_T abst_equal abst_sup 
                                                 (abst_plus 
                                                    (Additive_monoid_with_supremum__min 
                                                       abst_T abst_zero) x) 
                                                 (Additive_monoid_with_supremum__min 
                                                    abst_T abst_zero))))))) =>
                               zen.Rimply 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (lattices.Join_semi_lattice__order_sup 
                                          abst_T abst_equal abst_sup 
                                          (abst_plus 
                                             (Additive_monoid_with_supremum__min 
                                                abst_T abst_zero) x) 
                                          (Additive_monoid_with_supremum__min 
                                             abst_T abst_zero)))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (lattices.Join_semi_lattice__order_sup 
                                             abst_T abst_equal abst_sup 
                                             (Additive_monoid_with_supremum__min 
                                                abst_T abst_zero) 
                                             (Additive_monoid_with_supremum__min 
                                                abst_T abst_zero)))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (lattices.Join_semi_lattice__order_sup 
                                             abst_T abst_equal abst_sup 
                                             (abst_plus 
                                                (Additive_monoid_with_supremum__min 
                                                   abst_T abst_zero) x) 
                                             (Additive_monoid_with_supremum__min 
                                                abst_T abst_zero))))) 
                                 (v_Vnd:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (lattices.Join_semi_lattice__order_sup 
                                                 abst_T abst_equal abst_sup 
                                                 (abst_plus 
                                                    (Additive_monoid_with_supremum__min 
                                                       abst_T abst_zero) x) 
                                                 (Additive_monoid_with_supremum__min 
                                                    abst_T abst_zero)))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (lattices.Join_semi_lattice__order_sup 
                                             abst_T abst_equal abst_sup 
                                             (abst_plus 
                                                (Additive_monoid_with_supremum__min 
                                                   abst_T abst_zero) x) 
                                             (Additive_monoid_with_supremum__min 
                                                abst_T abst_zero)))) 
                                    __R_1_2_LEMMA v_Vnd) 
                                 (v_Vwd:
                                  (zen.proof 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (lattices.Join_semi_lattice__order_sup 
                                                 abst_T abst_equal abst_sup 
                                                 (Additive_monoid_with_supremum__min 
                                                    abst_T abst_zero) 
                                                 (Additive_monoid_with_supremum__min 
                                                    abst_T abst_zero)))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (lattices.Join_semi_lattice__order_sup 
                                                 abst_T abst_equal abst_sup 
                                                 (abst_plus 
                                                    (Additive_monoid_with_supremum__min 
                                                       abst_T abst_zero) x) 
                                                 (Additive_monoid_with_supremum__min 
                                                    abst_T abst_zero)))))) =>
                                  zen.Rimply 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (lattices.Join_semi_lattice__order_sup 
                                             abst_T abst_equal abst_sup 
                                             (Additive_monoid_with_supremum__min 
                                                abst_T abst_zero) 
                                             (Additive_monoid_with_supremum__min 
                                                abst_T abst_zero)))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (lattices.Join_semi_lattice__order_sup 
                                             abst_T abst_equal abst_sup 
                                             (abst_plus 
                                                (Additive_monoid_with_supremum__min 
                                                   abst_T abst_zero) x) 
                                             (Additive_monoid_with_supremum__min 
                                                abst_T abst_zero)))) 
                                    (v_Vxd:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (lattices.Join_semi_lattice__order_sup 
                                                    abst_T abst_equal 
                                                    abst_sup 
                                                    (Additive_monoid_with_supremum__min 
                                                       abst_T abst_zero) 
                                                    (Additive_monoid_with_supremum__min 
                                                       abst_T abst_zero)))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (lattices.Join_semi_lattice__order_sup 
                                                abst_T abst_equal abst_sup 
                                                (Additive_monoid_with_supremum__min 
                                                   abst_T abst_zero) 
                                                (Additive_monoid_with_supremum__min 
                                                   abst_T abst_zero)))) 
                                       v_Vsd v_Vxd) 
                                    (__R_1_2_LEMMA0:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (lattices.Join_semi_lattice__order_sup 
                                                 abst_T abst_equal abst_sup 
                                                 (abst_plus 
                                                    (Additive_monoid_with_supremum__min 
                                                       abst_T abst_zero) x) 
                                                 (Additive_monoid_with_supremum__min 
                                                    abst_T abst_zero))))) =>
                                     zen.Rsubst basics.bool__t 
                                       (v_Vwc:(zen.term basics.bool__t) =>
                                        zen.triangle (focal.is_true v_Vwc)) 
                                       (lattices.Join_semi_lattice__order_sup 
                                          abst_T abst_equal abst_sup 
                                          (abst_plus 
                                             (Additive_monoid_with_supremum__min 
                                                abst_T abst_zero) x) 
                                          (Additive_monoid_with_supremum__min 
                                             abst_T abst_zero)) 
                                       (lattices.Join_semi_lattice__order_sup 
                                          abst_T abst_equal abst_sup x 
                                          (Additive_monoid_with_supremum__min 
                                             abst_T abst_zero)) 
                                       (v_Vxc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (lattices.Join_semi_lattice__order_sup 
                                                       abst_T abst_equal 
                                                       abst_sup 
                                                       (abst_plus 
                                                          (Additive_monoid_with_supremum__min 
                                                             abst_T abst_zero) 
                                                          x) 
                                                       (Additive_monoid_with_supremum__min 
                                                          abst_T abst_zero)) 
                                                    (lattices.Join_semi_lattice__order_sup 
                                                       abst_T abst_equal 
                                                       abst_sup x 
                                                       (Additive_monoid_with_supremum__min 
                                                          abst_T abst_zero)))))) =>
                                        zen.Rsubst abst_T 
                                          (v_Vyc:(zen.term abst_T) =>
                                           zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (lattices.Join_semi_lattice__order_sup 
                                                      abst_T abst_equal 
                                                      abst_sup v_Vyc 
                                                      (Additive_monoid_with_supremum__min 
                                                         abst_T abst_zero)) 
                                                   (lattices.Join_semi_lattice__order_sup 
                                                      abst_T abst_equal 
                                                      abst_sup x 
                                                      (Additive_monoid_with_supremum__min 
                                                         abst_T abst_zero))))) 
                                          (abst_plus 
                                             (Additive_monoid_with_supremum__min 
                                                abst_T abst_zero) x) x 
                                          (v_Vzc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_plus 
                                                          (Additive_monoid_with_supremum__min 
                                                             abst_T abst_zero) 
                                                          x) x)))) =>
                                           zen.Rnotand 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T x 
                                                      (abst_plus 
                                                         (Additive_monoid_with_supremum__min 
                                                            abst_T abst_zero) 
                                                         x)))) 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (lattices.Join_semi_lattice__order_sup 
                                                         abst_T abst_equal 
                                                         abst_sup x 
                                                         (abst_plus 
                                                            (Additive_monoid_with_supremum__min 
                                                               abst_T 
                                                               abst_zero) x))))) 
                                             (v_Vad:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             x 
                                                             (abst_plus 
                                                                (Additive_monoid_with_supremum__min 
                                                                   abst_T 
                                                                   abst_zero) 
                                                                x)))))) =>
                                              zen.Rnotnot 
                                                (zen.triangle 
                                                   (zen.equal abst_T x 
                                                      (abst_plus 
                                                         (Additive_monoid_with_supremum__min 
                                                            abst_T abst_zero) 
                                                         x))) 
                                                (v_Vbd:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (zen.equal abst_T x 
                                                          (abst_plus 
                                                             (Additive_monoid_with_supremum__min 
                                                                abst_T 
                                                                abst_zero) x)))) =>
                                                 zen.Reqsym abst_T x 
                                                   (abst_plus 
                                                      (Additive_monoid_with_supremum__min 
                                                         abst_T abst_zero) x) 
                                                   v_Vbd v_Vzc) v_Vad) 
                                             (v_Vhd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (lattices.Join_semi_lattice__order_sup 
                                                                abst_T 
                                                                abst_equal 
                                                                abst_sup x 
                                                                (abst_plus 
                                                                   (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero) 
                                                                   x))))))) =>
                                              zen.Rnotnot 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (lattices.Join_semi_lattice__order_sup 
                                                         abst_T abst_equal 
                                                         abst_sup x 
                                                         (abst_plus 
                                                            (Additive_monoid_with_supremum__min 
                                                               abst_T 
                                                               abst_zero) x)))) 
                                                (v_Vtc:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (lattices.Join_semi_lattice__order_sup 
                                                             abst_T 
                                                             abst_equal 
                                                             abst_sup x 
                                                             (abst_plus 
                                                                (Additive_monoid_with_supremum__min 
                                                                   abst_T 
                                                                   abst_zero) 
                                                                x))))) =>
                                                 zen.Rall abst_T 
                                                   (v_Voc:
                                                    (zen.term abst_T) =>
                                                    zen.forall abst_T 
                                                      (v_Vpc:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vid:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    v_Vpc 
                                                                    v_Vid))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    v_Voc 
                                                                    v_Vid))))))) 
                                                   x 
                                                   (v_Vjd:
                                                    (zen.proof 
                                                       (zen.forall abst_T 
                                                          (v_Vpc:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vid:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    x v_Vpc))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    v_Vpc 
                                                                    v_Vid))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    x v_Vid)))))))) =>
                                                    zen.Rall abst_T 
                                                      (v_Vpc:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vid:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    x v_Vpc))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    v_Vpc 
                                                                    v_Vid))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    x v_Vid)))))) 
                                                      (abst_plus 
                                                         (Additive_monoid_with_supremum__min 
                                                            abst_T abst_zero) 
                                                         x) 
                                                      (v_Vkd:
                                                       (zen.proof 
                                                          (zen.forall abst_T 
                                                             (v_Vid:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    x 
                                                                    (abst_plus 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero) 
                                                                    x)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    (abst_plus 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero) 
                                                                    x) v_Vid))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    x v_Vid))))))) =>
                                                       zen.Rall abst_T 
                                                         (v_Vid:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    x 
                                                                    (abst_plus 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero) 
                                                                    x)))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    (abst_plus 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero) 
                                                                    x) v_Vid))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    x v_Vid))))) 
                                                         (Additive_monoid_with_supremum__min 
                                                            abst_T abst_zero) 
                                                         (v_Vld:
                                                          (zen.proof 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    x 
                                                                    (abst_plus 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero) 
                                                                    x)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    (abst_plus 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero) 
                                                                    x) 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero)))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    x 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero))))))) =>
                                                          zen.Rimply 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    x 
                                                                    (abst_plus 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero) 
                                                                    x)))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    (abst_plus 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero) 
                                                                    x) 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero)))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    x 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero))))) 
                                                            (v_Vnc:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    x 
                                                                    (abst_plus 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero) 
                                                                    x)))))) =>
                                                             zen.Raxiom 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    x 
                                                                    (abst_plus 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero) 
                                                                    x)))) 
                                                               v_Vtc v_Vnc) 
                                                            (v_Vmd:
                                                             (zen.proof 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    (abst_plus 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero) 
                                                                    x) 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero)))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    x 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero)))))) =>
                                                             zen.Rimply 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    (abst_plus 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero) 
                                                                    x) 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero)))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    x 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero)))) 
                                                               (v_Vnd:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    (abst_plus 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero) 
                                                                    x) 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero)))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    (abst_plus 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero) 
                                                                    x) 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero)))) 
                                                                  __R_1_2_LEMMA0 
                                                                  v_Vnd) 
                                                               (v_Vod:
                                                                (zen.proof 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    x 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (lattices.Join_semi_lattice__order_sup 
                                                                    abst_T 
                                                                    abst_equal 
                                                                    abst_sup 
                                                                    x 
                                                                    (Additive_monoid_with_supremum__min 
                                                                    abst_T 
                                                                    abst_zero)))) 
                                                                  v_Vod v_Vkc) 
                                                               v_Vmd) v_Vld) 
                                                         v_Vkd) v_Vjd) 
                                                   abst_order_sup_is_transitive) 
                                                v_Vhd) v_Vuc) 
                                          (v_Vpd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (lattices.Join_semi_lattice__order_sup 
                                                          abst_T abst_equal 
                                                          abst_sup x 
                                                          (Additive_monoid_with_supremum__min 
                                                             abst_T abst_zero)) 
                                                       (lattices.Join_semi_lattice__order_sup 
                                                          abst_T abst_equal 
                                                          abst_sup x 
                                                          (Additive_monoid_with_supremum__min 
                                                             abst_T abst_zero)))))) =>
                                           zen.Rsubst abst_T 
                                             (v_Vqd:(zen.term abst_T) =>
                                              zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (lattices.Join_semi_lattice__order_sup 
                                                         abst_T abst_equal 
                                                         abst_sup x v_Vqd) 
                                                      (lattices.Join_semi_lattice__order_sup 
                                                         abst_T abst_equal 
                                                         abst_sup x 
                                                         (Additive_monoid_with_supremum__min 
                                                            abst_T abst_zero))))) 
                                             (Additive_monoid_with_supremum__min 
                                                abst_T abst_zero) 
                                             (Additive_monoid_with_supremum__min 
                                                abst_T abst_zero) 
                                             (v_Vrd0:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (Additive_monoid_with_supremum__min 
                                                             abst_T abst_zero) 
                                                          (Additive_monoid_with_supremum__min 
                                                             abst_T abst_zero))))) =>
                                              zen.Rnoteq abst_T 
                                                (Additive_monoid_with_supremum__min 
                                                   abst_T abst_zero) v_Vrd0) 
                                             (v_Vpd0:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (lattices.Join_semi_lattice__order_sup 
                                                             abst_T 
                                                             abst_equal 
                                                             abst_sup x 
                                                             (Additive_monoid_with_supremum__min 
                                                                abst_T 
                                                                abst_zero)) 
                                                          (lattices.Join_semi_lattice__order_sup 
                                                             abst_T 
                                                             abst_equal 
                                                             abst_sup x 
                                                             (Additive_monoid_with_supremum__min 
                                                                abst_T 
                                                                abst_zero)))))) =>
                                              zen.Rnoteq basics.bool__t 
                                                (lattices.Join_semi_lattice__order_sup 
                                                   abst_T abst_equal 
                                                   abst_sup x 
                                                   (Additive_monoid_with_supremum__min 
                                                      abst_T abst_zero)) 
                                                v_Vpd0) v_Vpd) v_Vxc) 
                                       (v_Vod:
                                        (zen.proof 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (lattices.Join_semi_lattice__order_sup 
                                                    abst_T abst_equal 
                                                    abst_sup x 
                                                    (Additive_monoid_with_supremum__min 
                                                       abst_T abst_zero))))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (lattices.Join_semi_lattice__order_sup 
                                                   abst_T abst_equal 
                                                   abst_sup x 
                                                   (Additive_monoid_with_supremum__min 
                                                      abst_T abst_zero)))) 
                                          v_Vod v_Vkc) __R_1_2_LEMMA0) v_Vwd) 
                                 v_Vvd) v_Vud) v_Vtd) 
                        abst_order_sup_is_transitive) 
                     (v_Vxd:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (lattices.Join_semi_lattice__order_sup 
                                     abst_T abst_equal abst_sup 
                                     (Additive_monoid_with_supremum__min 
                                        abst_T abst_zero) 
                                     (Additive_monoid_with_supremum__min 
                                        abst_T abst_zero)))))) =>
                      zen.Rnoteq abst_T 
                        (Additive_monoid_with_supremum__min abst_T abst_zero) 
                        v_Vrd)))))) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true 
                 (lattices.Join_semi_lattice__order_sup abst_T abst_equal 
                    abst_sup 
                    (abst_plus 
                       (Additive_monoid_with_supremum__min abst_T abst_zero) 
                       x) 
                    (Additive_monoid_with_supremum__min abst_T abst_zero)))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (lattices.Join_semi_lattice__order_sup abst_T 
                           abst_equal abst_sup 
                           (abst_plus 
                              (Additive_monoid_with_supremum__min abst_T 
                                 abst_zero) x) 
                           (Additive_monoid_with_supremum__min abst_T 
                              abst_zero)))))) =>
            zen.Rall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (lattices.Join_semi_lattice__order_sup abst_T 
                          abst_equal abst_sup (abst_plus v_Vac v_Vbc) v_Vac)))) 
              (Additive_monoid_with_supremum__min abst_T abst_zero) 
              (v_Vcc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.triangle 
                        (focal.is_true 
                           (lattices.Join_semi_lattice__order_sup abst_T 
                              abst_equal abst_sup 
                              (abst_plus 
                                 (Additive_monoid_with_supremum__min abst_T 
                                    abst_zero) v_Vbc) 
                              (Additive_monoid_with_supremum__min abst_T 
                                 abst_zero)))))) =>
               zen.Rall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (lattices.Join_semi_lattice__order_sup abst_T 
                          abst_equal abst_sup 
                          (abst_plus 
                             (Additive_monoid_with_supremum__min abst_T 
                                abst_zero) v_Vbc) 
                          (Additive_monoid_with_supremum__min abst_T 
                             abst_zero)))) x 
                 (v_Vdc:
                  (zen.proof 
                     (zen.triangle 
                        (focal.is_true 
                           (lattices.Join_semi_lattice__order_sup abst_T 
                              abst_equal abst_sup 
                              (abst_plus 
                                 (Additive_monoid_with_supremum__min abst_T 
                                    abst_zero) x) 
                              (Additive_monoid_with_supremum__min abst_T 
                                 abst_zero))))) =>
                  zen.Raxiom 
                    (zen.triangle 
                       (focal.is_true 
                          (lattices.Join_semi_lattice__order_sup abst_T 
                             abst_equal abst_sup 
                             (abst_plus 
                                (Additive_monoid_with_supremum__min abst_T 
                                   abst_zero) x) 
                             (Additive_monoid_with_supremum__min abst_T 
                                abst_zero)))) v_Vdc v_Vzb) v_Vcc) 
              abst_sup_absorbes_add))) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (abst_equal x 
                   (abst_plus 
                      (Additive_monoid_with_supremum__min abst_T abst_zero) x)))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true (abst_equal x (abst_plus abst_zero x)))))) =>
           zen.Rall abst_T 
             (v_Vac:(zen.term abst_T) =>
              zen.and 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus v_Vac abst_zero) v_Vac))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus abst_zero v_Vac) v_Vac)))) x 
             (v_Vbc:
              (zen.proof 
                 (zen.and 
                    (zen.triangle 
                       (focal.is_true (abst_equal (abst_plus x abst_zero) x))) 
                    (zen.triangle 
                       (focal.is_true (abst_equal (abst_plus abst_zero x) x))))) =>
              zen.Rand 
                (zen.triangle 
                   (focal.is_true (abst_equal (abst_plus x abst_zero) x))) 
                (zen.triangle 
                   (focal.is_true (abst_equal (abst_plus abst_zero x) x))) 
                (v_Vcc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true (abst_equal (abst_plus x abst_zero) x)))) =>
                 v_Vdc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true (abst_equal (abst_plus abst_zero x) x)))) =>
                 zen.Rall abst_T 
                   (v_Vac:(zen.term abst_T) =>
                    zen.forall abst_T 
                      (v_Vec:(zen.term abst_T) =>
                       zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vac v_Vec))) 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vec v_Vac))))) 
                   (abst_plus abst_zero x) 
                   (v_Vfc:
                    (zen.proof 
                       (zen.forall abst_T 
                          (v_Vec:(zen.term abst_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_plus abst_zero x) v_Vec))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal v_Vec (abst_plus abst_zero x))))))) =>
                    zen.Rall abst_T 
                      (v_Vec:(zen.term abst_T) =>
                       zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_plus abst_zero x) v_Vec))) 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal v_Vec (abst_plus abst_zero x))))) 
                      x 
                      (v_Vgc:
                       (zen.proof 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_plus abst_zero x) x))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal x (abst_plus abst_zero x)))))) =>
                       zen.Rimply 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_plus abst_zero x) x))) 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal x (abst_plus abst_zero x)))) 
                         (v_Vhc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus abst_zero x) x))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_plus abst_zero x) x))) 
                            v_Vdc v_Vhc) 
                         (v_Vic:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal x (abst_plus abst_zero x))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal x (abst_plus abst_zero x)))) 
                            v_Vic v_Vzb) v_Vgc) v_Vfc) abst_equal_symmetric) 
                v_Vbc) abst_zero_is_neutral))).

def Monomial_ordering__leq_absorbes_add :
  abst_T:cc.uT ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_order_inf:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_inf_absorbes_add:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.ebP 
                                    (abst_order_inf x (abst_plus x y)))))) ->
  abst_leq_refines_order_inf:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.imp 
                                         (dk_logic.ebP (abst_order_inf x y)) 
                                         (dk_logic.ebP (abst_leq x y)))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) => dk_logic.ebP (abst_leq x (abst_plus x y)))))
  :=
  abst_T:cc.uT =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_order_inf:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_inf_absorbes_add:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.ebP (abst_order_inf x (abst_plus x y)))))) =>
  abst_leq_refines_order_inf:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_order_inf x y)) 
              (dk_logic.ebP (abst_leq x y)))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.triangle 
             (focal.is_true (abst_leq v_Vzb (abst_plus v_Vzb v_Vac)))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.triangle 
                    (focal.is_true (abst_leq v_Vzb (abst_plus v_Vzb v_Vac)))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.triangle 
             (focal.is_true (abst_leq v_Vzb (abst_plus v_Vzb v_Vac))))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.triangle 
                    (focal.is_true (abst_leq v_Vcc (abst_plus v_Vcc v_Vac))))))) =>
        zen.Rnotall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.triangle 
             (focal.is_true (abst_leq v_Vcc (abst_plus v_Vcc v_Vac)))) 
          (v_Vec:(zen.term abst_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true (abst_leq v_Vcc (abst_plus v_Vcc v_Vec)))))) =>
           zen.Rall abst_T 
             (v_Vzb:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vac:(zen.term abst_T) =>
                 zen.triangle 
                   (focal.is_true 
                      (abst_order_inf v_Vzb (abst_plus v_Vzb v_Vac))))) 
             v_Vcc 
             (v_Vgc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Vac:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (abst_order_inf v_Vcc (abst_plus v_Vcc v_Vac)))))) =>
              zen.Rall abst_T 
                (v_Vac:(zen.term abst_T) =>
                 zen.triangle 
                   (focal.is_true 
                      (abst_order_inf v_Vcc (abst_plus v_Vcc v_Vac)))) v_Vec 
                (v_Vhc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_order_inf v_Vcc (abst_plus v_Vcc v_Vec))))) =>
                 zen.Rall abst_T 
                   (v_Vzb:(zen.term abst_T) =>
                    zen.forall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_order_inf v_Vzb v_Vac))) 
                         (zen.triangle (focal.is_true (abst_leq v_Vzb v_Vac))))) 
                   v_Vcc 
                   (v_Vic:
                    (zen.proof 
                       (zen.forall abst_T 
                          (v_Vac:(zen.term abst_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_order_inf v_Vcc v_Vac))) 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vcc v_Vac)))))) =>
                    zen.Rall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_order_inf v_Vcc v_Vac))) 
                         (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vac)))) 
                      (abst_plus v_Vcc v_Vec) 
                      (v_Vjc:
                       (zen.proof 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_order_inf v_Vcc 
                                      (abst_plus v_Vcc v_Vec)))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_leq v_Vcc (abst_plus v_Vcc v_Vec)))))) =>
                       zen.Rimply 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_order_inf v_Vcc (abst_plus v_Vcc v_Vec)))) 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_leq v_Vcc (abst_plus v_Vcc v_Vec)))) 
                         (v_Vkc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_order_inf v_Vcc 
                                         (abst_plus v_Vcc v_Vec)))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_order_inf v_Vcc 
                                     (abst_plus v_Vcc v_Vec)))) v_Vhc v_Vkc) 
                         (v_Vlc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_leq v_Vcc (abst_plus v_Vcc v_Vec))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_leq v_Vcc (abst_plus v_Vcc v_Vec)))) 
                            v_Vlc v_Vfc) v_Vjc) v_Vic) 
                   abst_leq_refines_order_inf) v_Vgc) abst_inf_absorbes_add) 
          v_Vdc) v_Vbc).

def Monomial_ordering__geq_absorbes_add :
  abst_T:cc.uT ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_geq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_order_sup:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_geq_refines_order_sup:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.imp 
                                         (dk_logic.ebP (abst_order_sup x y)) 
                                         (dk_logic.ebP (abst_geq x y)))))) ->
  abst_sup_absorbes_add:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.ebP 
                                    (abst_order_sup (abst_plus x y) x))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) => dk_logic.ebP (abst_geq (abst_plus x y) x))))
  :=
  abst_T:cc.uT =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_geq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_order_sup:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_geq_refines_order_sup:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_order_sup x y)) 
              (dk_logic.ebP (abst_geq x y)))))) =>
  abst_sup_absorbes_add:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.ebP (abst_order_sup (abst_plus x y) x))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.triangle 
             (focal.is_true (abst_geq (abst_plus v_Vzb v_Vac) v_Vzb))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.triangle 
                    (focal.is_true (abst_geq (abst_plus v_Vzb v_Vac) v_Vzb))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.triangle 
             (focal.is_true (abst_geq (abst_plus v_Vzb v_Vac) v_Vzb)))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.triangle 
                    (focal.is_true (abst_geq (abst_plus v_Vcc v_Vac) v_Vcc)))))) =>
        zen.Rnotall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.triangle 
             (focal.is_true (abst_geq (abst_plus v_Vcc v_Vac) v_Vcc))) 
          (v_Vec:(zen.term abst_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true (abst_geq (abst_plus v_Vcc v_Vec) v_Vcc))))) =>
           zen.Rall abst_T 
             (v_Vzb:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vac:(zen.term abst_T) =>
                 zen.triangle 
                   (focal.is_true 
                      (abst_order_sup (abst_plus v_Vzb v_Vac) v_Vzb)))) 
             v_Vcc 
             (v_Vgc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Vac:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (abst_order_sup (abst_plus v_Vcc v_Vac) v_Vcc))))) =>
              zen.Rall abst_T 
                (v_Vzb:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vac:(zen.term abst_T) =>
                    zen.imp 
                      (zen.triangle 
                         (focal.is_true (abst_order_sup v_Vzb v_Vac))) 
                      (zen.triangle (focal.is_true (abst_geq v_Vzb v_Vac))))) 
                (abst_plus v_Vcc v_Vec) 
                (v_Vhc:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vac:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_order_sup (abst_plus v_Vcc v_Vec) v_Vac))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_geq (abst_plus v_Vcc v_Vec) v_Vac)))))) =>
                 zen.Rall abst_T 
                   (v_Vac:(zen.term abst_T) =>
                    zen.imp 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_order_sup (abst_plus v_Vcc v_Vec) v_Vac))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_geq (abst_plus v_Vcc v_Vec) v_Vac)))) 
                   v_Vcc 
                   (v_Vic:
                    (zen.proof 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_order_sup (abst_plus v_Vcc v_Vec) v_Vcc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_geq (abst_plus v_Vcc v_Vec) v_Vcc))))) =>
                    zen.Rimply 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_order_sup (abst_plus v_Vcc v_Vec) v_Vcc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_geq (abst_plus v_Vcc v_Vec) v_Vcc))) 
                      (v_Vjc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_order_sup (abst_plus v_Vcc v_Vec) 
                                      v_Vcc))))) =>
                       zen.Rall abst_T 
                         (v_Vac:(zen.term abst_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (abst_order_sup (abst_plus v_Vcc v_Vac) v_Vcc))) 
                         v_Vec 
                         (v_Vkc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_order_sup (abst_plus v_Vcc v_Vec) 
                                      v_Vcc)))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_order_sup (abst_plus v_Vcc v_Vec) 
                                     v_Vcc))) v_Vkc v_Vjc) v_Vgc) 
                      (v_Vlc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_geq (abst_plus v_Vcc v_Vec) v_Vcc)))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_geq (abst_plus v_Vcc v_Vec) v_Vcc))) 
                         v_Vlc v_Vfc) v_Vic) v_Vhc) 
                abst_geq_refines_order_sup) abst_sup_absorbes_add) v_Vdc) 
       v_Vbc).

def Additive_group__minus :
  abst_T:cc.uT ->
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  x:(cc.eT abst_T) -> y:(cc.eT abst_T) -> cc.eT abst_T
  :=
  abst_T:cc.uT =>
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  x:(cc.eT abst_T) => y:(cc.eT abst_T) => abst_plus x (abst_opposite y).

def Additive_group__minus_left_substracts :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (abst_equal x y)) 
                                   (dk_logic.ebP (abst_equal y x)))))) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_plus_is_associative:(dk_logic.eP 
                              (dk_logic.forall abst_T 
                                 (x:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (y:(cc.eT abst_T) =>
                                     dk_logic.forall abst_T 
                                       (z:(cc.eT abst_T) =>
                                        dk_logic.ebP 
                                          (abst_equal 
                                             (abst_plus x (abst_plus y z)) 
                                             (abst_plus (abst_plus x y) z))))))) ->
  abst_plus_right_substitution_rule:(dk_logic.eP 
                                       (dk_logic.forall abst_T 
                                          (x:(cc.eT abst_T) =>
                                           dk_logic.forall abst_T 
                                             (y:(cc.eT abst_T) =>
                                              dk_logic.forall abst_T 
                                                (z:(cc.eT abst_T) =>
                                                 dk_logic.imp 
                                                   (dk_logic.ebP 
                                                      (abst_equal x y)) 
                                                   (dk_logic.ebP 
                                                      (abst_equal 
                                                         (abst_plus z x) 
                                                         (abst_plus z y)))))))) ->
  abst_opposite_is_opposite:(dk_logic.eP 
                               (dk_logic.forall abst_T 
                                  (x:(cc.eT abst_T) =>
                                   dk_logic.ebP 
                                     (abst_equal 
                                        (abst_plus x (abst_opposite x)) 
                                        abst_zero)))) ->
  abst_zero_is_neutral:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.and 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus x abst_zero) x)) 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus abst_zero x) x))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.ebP 
             (abst_equal x 
                (Additive_group__minus abst_T abst_opposite abst_plus 
                   (abst_plus x y) y)))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal y x)))))) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_plus_is_associative:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.ebP 
                 (abst_equal (abst_plus x (abst_plus y z)) 
                    (abst_plus (abst_plus x y) z))))))) =>
  abst_plus_right_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.ebP (abst_equal (abst_plus z x) (abst_plus z y)))))))) =>
  abst_opposite_is_opposite:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.ebP (abst_equal (abst_plus x (abst_opposite x)) abst_zero)))) =>
  abst_zero_is_neutral:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.and (dk_logic.ebP (abst_equal (abst_plus x abst_zero) x)) 
           (dk_logic.ebP (abst_equal (abst_plus abst_zero x) x))))) =>
  (__U_1_LEMMA:
   (x:(cc.eT abst_T) ->
    y:(cc.eT abst_T) ->
    dk_logic.eP 
      (dk_logic.ebP 
         (abst_equal x (abst_plus (abst_plus x y) (abst_opposite y))))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.triangle 
              (focal.is_true 
                 (abst_equal v_Vzb 
                    (Additive_group__minus abst_T abst_opposite abst_plus 
                       (abst_plus v_Vzb v_Vac) v_Vac)))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.triangle 
                     (focal.is_true 
                        (abst_equal v_Vzb 
                           (Additive_group__minus abst_T abst_opposite 
                              abst_plus (abst_plus v_Vzb v_Vac) v_Vac)))))))) =>
      zen.Rnotall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.triangle 
              (focal.is_true 
                 (abst_equal v_Vzb 
                    (Additive_group__minus abst_T abst_opposite abst_plus 
                       (abst_plus v_Vzb v_Vac) v_Vac))))) 
        (v_Vcc:(zen.term abst_T) =>
         v_Vdc:
         (zen.proof 
            (zen.not 
               (zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.triangle 
                     (focal.is_true 
                        (abst_equal v_Vcc 
                           (Additive_group__minus abst_T abst_opposite 
                              abst_plus (abst_plus v_Vcc v_Vac) v_Vac))))))) =>
         zen.Rnotall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.triangle 
              (focal.is_true 
                 (abst_equal v_Vcc 
                    (Additive_group__minus abst_T abst_opposite abst_plus 
                       (abst_plus v_Vcc v_Vac) v_Vac)))) 
           (v_Vec:(zen.term abst_T) =>
            v_Vfc:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal v_Vcc 
                           (abst_plus (abst_plus v_Vcc v_Vec) 
                              (abst_opposite v_Vec))))))) =>
            zen.Rall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (abst_equal v_Vzb 
                          (abst_plus (abst_plus v_Vzb v_Vac) 
                             (abst_opposite v_Vac)))))) v_Vcc 
              (v_Vgc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vac:(zen.term abst_T) =>
                      zen.triangle 
                        (focal.is_true 
                           (abst_equal v_Vcc 
                              (abst_plus (abst_plus v_Vcc v_Vac) 
                                 (abst_opposite v_Vac))))))) =>
               zen.Rall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (abst_equal v_Vcc 
                          (abst_plus (abst_plus v_Vcc v_Vac) 
                             (abst_opposite v_Vac))))) v_Vec 
                 (v_Vhc:
                  (zen.proof 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal v_Vcc 
                              (abst_plus (abst_plus v_Vcc v_Vec) 
                                 (abst_opposite v_Vec)))))) =>
                  zen.Raxiom 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal v_Vcc 
                             (abst_plus (abst_plus v_Vcc v_Vec) 
                                (abst_opposite v_Vec))))) v_Vhc v_Vfc) v_Vgc) 
              __U_1_LEMMA) v_Vdc) v_Vbc)) 
    (x:(cc.eT abst_T) =>
     y:(cc.eT abst_T) =>
     (__U_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (abst_equal (abst_plus x (abst_plus y (abst_opposite y))) 
               (abst_plus (abst_plus x y) (abst_opposite y))))) =>
      (__U_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP 
             (abst_equal (abst_plus y (abst_opposite y)) abst_zero))) =>
       (__U_1_3_LEMMA:
        (dk_logic.eP 
           (dk_logic.ebP 
              (abst_equal (abst_plus x (abst_plus y (abst_opposite y))) 
                 (abst_plus x abst_zero)))) =>
        (__U_1_4_LEMMA:
         (dk_logic.eP (dk_logic.ebP (abst_equal (abst_plus x abst_zero) x))) =>
         zen.nnpp 
           (zen.triangle 
              (focal.is_true 
                 (abst_equal x (abst_plus (abst_plus x y) (abst_opposite y))))) 
           (v_Vvc:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal x 
                           (abst_plus (abst_plus x y) (abst_opposite y))))))) =>
            zen.Rcut 
              (zen.and 
                 (zen.not 
                    (zen.triangle 
                       (zen.equal abst_T x 
                          (abst_plus x (abst_plus y (abst_opposite y)))))) 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal x 
                             (abst_plus x (abst_plus y (abst_opposite y)))))))) 
              (v_Vwc:
               (zen.proof 
                  (zen.and 
                     (zen.not 
                        (zen.triangle 
                           (zen.equal abst_T x 
                              (abst_plus x (abst_plus y (abst_opposite y)))))) 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal x 
                                 (abst_plus x (abst_plus y (abst_opposite y))))))))) =>
               zen.Rand 
                 (zen.not 
                    (zen.triangle 
                       (zen.equal abst_T x 
                          (abst_plus x (abst_plus y (abst_opposite y)))))) 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal x 
                             (abst_plus x (abst_plus y (abst_opposite y))))))) 
                 (v_Vxc:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (zen.equal abst_T x 
                              (abst_plus x (abst_plus y (abst_opposite y))))))) =>
                  v_Vyc:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal x 
                                 (abst_plus x (abst_plus y (abst_opposite y)))))))) =>
                  zen.Rall abst_T 
                    (v_Vzc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vad:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vzc v_Vad))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vad v_Vzc))))) 
                    (abst_plus x (abst_plus y (abst_opposite y))) 
                    (v_Vbd:
                     (zen.proof 
                        (zen.forall abst_T 
                           (v_Vad:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus x 
                                          (abst_plus y (abst_opposite y))) 
                                       v_Vad))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal v_Vad 
                                       (abst_plus x 
                                          (abst_plus y (abst_opposite y))))))))) =>
                     zen.Rall abst_T 
                       (v_Vad:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus x 
                                      (abst_plus y (abst_opposite y))) v_Vad))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal v_Vad 
                                   (abst_plus x 
                                      (abst_plus y (abst_opposite y))))))) x 
                       (v_Vcd:
                        (zen.proof 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus x 
                                          (abst_plus y (abst_opposite y))) x))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal x 
                                       (abst_plus x 
                                          (abst_plus y (abst_opposite y)))))))) =>
                        zen.Rimply 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus x 
                                      (abst_plus y (abst_opposite y))) x))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal x 
                                   (abst_plus x 
                                      (abst_plus y (abst_opposite y)))))) 
                          (v_Vdd:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus x 
                                             (abst_plus y (abst_opposite y))) 
                                          x))))) =>
                           zen.Rcut 
                             (zen.and 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_plus x 
                                            (abst_plus y (abst_opposite y))) 
                                         (abst_plus x abst_zero)))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus x 
                                               (abst_plus y (abst_opposite y))) 
                                            (abst_plus x abst_zero)))))) 
                             (v_Ved:
                              (zen.proof 
                                 (zen.and 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_plus x 
                                                (abst_plus y 
                                                   (abst_opposite y))) 
                                             (abst_plus x abst_zero)))) 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus x 
                                                   (abst_plus y 
                                                      (abst_opposite y))) 
                                                (abst_plus x abst_zero))))))) =>
                              zen.Rand 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_plus x 
                                            (abst_plus y (abst_opposite y))) 
                                         (abst_plus x abst_zero)))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus x 
                                               (abst_plus y (abst_opposite y))) 
                                            (abst_plus x abst_zero))))) 
                                (v_Vfd:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_plus x 
                                                (abst_plus y 
                                                   (abst_opposite y))) 
                                             (abst_plus x abst_zero))))) =>
                                 v_Vgd:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus x 
                                                   (abst_plus y 
                                                      (abst_opposite y))) 
                                                (abst_plus x abst_zero)))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus x 
                                               (abst_plus y (abst_opposite y))) 
                                            (abst_plus x abst_zero)))) 
                                   __U_1_3_LEMMA v_Vgd) v_Ved) 
                             (v_Vhd:
                              (zen.proof 
                                 (zen.not 
                                    (zen.and 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_plus x 
                                                   (abst_plus y 
                                                      (abst_opposite y))) 
                                                (abst_plus x abst_zero)))) 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus x 
                                                      (abst_plus y 
                                                         (abst_opposite y))) 
                                                   (abst_plus x abst_zero)))))))) =>
                              zen.Rcut (zen.triangle (zen.equal abst_T x x)) 
                                (v_Vid:
                                 (zen.proof 
                                    (zen.triangle (zen.equal abst_T x x))) =>
                                 zen.Rsubst basics.bool__t 
                                   (v_Vjd:(zen.term basics.bool__t) =>
                                    zen.triangle (focal.is_true v_Vjd)) 
                                   (abst_equal (abst_plus x abst_zero) x) 
                                   (abst_equal 
                                      (abst_plus x 
                                         (abst_plus y (abst_opposite y))) x) 
                                   (v_Vkd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal basics.bool__t 
                                                (abst_equal 
                                                   (abst_plus x abst_zero) x) 
                                                (abst_equal 
                                                   (abst_plus x 
                                                      (abst_plus y 
                                                         (abst_opposite y))) 
                                                   x))))) =>
                                    zen.Rsubst abst_T 
                                      (v_Vld:(zen.term abst_T) =>
                                       zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (abst_equal v_Vld x) 
                                               (abst_equal 
                                                  (abst_plus x 
                                                     (abst_plus y 
                                                        (abst_opposite y))) x)))) 
                                      (abst_plus x abst_zero) 
                                      (abst_plus x 
                                         (abst_plus y (abst_opposite y))) 
                                      (v_Vmd:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal abst_T 
                                                   (abst_plus x abst_zero) 
                                                   (abst_plus x 
                                                      (abst_plus y 
                                                         (abst_opposite y))))))) =>
                                       zen.Rnotand 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus x 
                                                     (abst_plus y 
                                                        (abst_opposite y))) 
                                                  (abst_plus x abst_zero)))) 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus x 
                                                        (abst_plus y 
                                                           (abst_opposite y))) 
                                                     (abst_plus x abst_zero))))) 
                                         (v_Vnd:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         (abst_plus x 
                                                            (abst_plus y 
                                                               (abst_opposite 
                                                                  y))) 
                                                         (abst_plus x 
                                                            abst_zero)))))) =>
                                          zen.Rnotnot 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus x 
                                                     (abst_plus y 
                                                        (abst_opposite y))) 
                                                  (abst_plus x abst_zero))) 
                                            (v_Vod:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_plus x 
                                                         (abst_plus y 
                                                            (abst_opposite y))) 
                                                      (abst_plus x abst_zero)))) =>
                                             zen.Rcut 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus x 
                                                        (abst_plus y 
                                                           (abst_opposite y))) 
                                                     (abst_plus x 
                                                        (abst_plus y 
                                                           (abst_opposite y))))) 
                                               (v_Vpd:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         (abst_plus x 
                                                            (abst_plus y 
                                                               (abst_opposite 
                                                                  y))) 
                                                         (abst_plus x 
                                                            (abst_plus y 
                                                               (abst_opposite 
                                                                  y)))))) =>
                                                zen.Rsubst abst_T 
                                                  (v_Vqd:(zen.term abst_T) =>
                                                   zen.triangle 
                                                     (zen.equal abst_T v_Vqd 
                                                        (abst_plus x 
                                                           (abst_plus y 
                                                              (abst_opposite 
                                                                 y))))) 
                                                  (abst_plus x 
                                                     (abst_plus y 
                                                        (abst_opposite y))) 
                                                  (abst_plus x abst_zero) 
                                                  (v_Vfd:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T 
                                                               (abst_plus x 
                                                                  (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                               (abst_plus x 
                                                                  abst_zero))))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_plus x 
                                                              (abst_plus y 
                                                                 (abst_opposite 
                                                                    y))) 
                                                           (abst_plus x 
                                                              abst_zero))) 
                                                     v_Vod v_Vfd) 
                                                  (v_Vrd:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            (abst_plus x 
                                                               abst_zero) 
                                                            (abst_plus x 
                                                               (abst_plus y 
                                                                  (abst_opposite 
                                                                    y)))))) =>
                                                   zen.Rsubst abst_T 
                                                     (v_Vsd:
                                                      (zen.term abst_T) =>
                                                      zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_plus x 
                                                              abst_zero) 
                                                           v_Vsd)) 
                                                     (abst_plus x 
                                                        (abst_plus y 
                                                           (abst_opposite y))) 
                                                     (abst_plus x 
                                                        (abst_plus y 
                                                           (abst_opposite y))) 
                                                     (v_Vtd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T 
                                                                  (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                  (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))))))) =>
                                                      zen.Rnoteq abst_T 
                                                        (abst_plus x 
                                                           (abst_plus y 
                                                              (abst_opposite 
                                                                 y))) v_Vtd) 
                                                     (v_Vrd0:
                                                      (zen.proof 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T 
                                                               (abst_plus x 
                                                                  abst_zero) 
                                                               (abst_plus x 
                                                                  (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)))))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_plus x 
                                                                 abst_zero) 
                                                              (abst_plus x 
                                                                 (abst_plus 
                                                                    y 
                                                                    (
                                                                    abst_opposite 
                                                                    y))))) 
                                                        v_Vrd0 v_Vmd) v_Vrd) 
                                                  v_Vpd) 
                                               (v_Vtd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            (abst_plus x 
                                                               (abst_plus y 
                                                                  (abst_opposite 
                                                                    y))) 
                                                            (abst_plus x 
                                                               (abst_plus y 
                                                                  (abst_opposite 
                                                                    y))))))) =>
                                                zen.Rnoteq abst_T 
                                                  (abst_plus x 
                                                     (abst_plus y 
                                                        (abst_opposite y))) 
                                                  v_Vtd)) v_Vnd) 
                                         (v_Vud:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus x 
                                                               (abst_plus y 
                                                                  (abst_opposite 
                                                                    y))) 
                                                            (abst_plus x 
                                                               abst_zero))))))) =>
                                          zen.Rnotnot 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus x 
                                                        (abst_plus y 
                                                           (abst_opposite y))) 
                                                     (abst_plus x abst_zero)))) 
                                            (__U_1_3_LEMMA0:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus x 
                                                            (abst_plus y 
                                                               (abst_opposite 
                                                                  y))) 
                                                         (abst_plus x 
                                                            abst_zero))))) =>
                                             zen.Rall abst_T 
                                               (v_Vzc:(zen.term abst_T) =>
                                                zen.forall abst_T 
                                                  (v_Vad:(zen.term abst_T) =>
                                                   zen.forall abst_T 
                                                     (v_Vvd:
                                                      (zen.term abst_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Vzc v_Vad))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    v_Vad 
                                                                    v_Vvd))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vvd))))))) 
                                               (abst_plus x 
                                                  (abst_plus y 
                                                     (abst_opposite y))) 
                                               (v_Vwd:
                                                (zen.proof 
                                                   (zen.forall abst_T 
                                                      (v_Vad:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vvd:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    v_Vad))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vvd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    v_Vvd)))))))) =>
                                                zen.Rall abst_T 
                                                  (v_Vad:(zen.term abst_T) =>
                                                   zen.forall abst_T 
                                                     (v_Vvd:
                                                      (zen.term abst_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                 v_Vad))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    v_Vad 
                                                                    v_Vvd))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    v_Vvd)))))) 
                                                  (abst_plus x abst_zero) 
                                                  (v_Vxd:
                                                   (zen.proof 
                                                      (zen.forall abst_T 
                                                         (v_Vvd:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero)))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero) 
                                                                    v_Vvd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    v_Vvd))))))) =>
                                                   zen.Rall abst_T 
                                                     (v_Vvd:
                                                      (zen.term abst_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                 (abst_plus 
                                                                    x 
                                                                    abst_zero)))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    abst_zero) 
                                                                    v_Vvd))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    v_Vvd))))) 
                                                     x 
                                                     (v_Vyd:
                                                      (zen.proof 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero)))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero) 
                                                                    x))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x)))))) =>
                                                      zen.Rimply 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                 (abst_plus 
                                                                    x 
                                                                    abst_zero)))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    abst_zero) 
                                                                    x))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x)))) 
                                                        (v_Vgd:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero)))))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    abst_zero)))) 
                                                           __U_1_3_LEMMA0 
                                                           v_Vgd) 
                                                        (v_Vzd:
                                                         (zen.proof 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero) 
                                                                    x))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x))))) =>
                                                         zen.Rimply 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    abst_zero) 
                                                                    x))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x))) 
                                                           (v_Vae:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero) 
                                                                    x))))) =>
                                                            zen.Raxiom 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero) 
                                                                    x))) 
                                                              __U_1_4_LEMMA 
                                                              v_Vae) 
                                                           (v_Vbe:
                                                            (zen.proof 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x)))) =>
                                                            zen.Rsubst 
                                                              basics.bool__t 
                                                              (v_Vjd:
                                                               (zen.term 
                                                                  basics.bool__t) =>
                                                               zen.triangle 
                                                                 (focal.is_true 
                                                                    v_Vjd)) 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x) 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x) 
                                                              (v_Vce:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x))))) =>
                                                               zen.Rsubst 
                                                                 abst_T 
                                                                 (v_Vld:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vld x) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x)))) 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                 (v_Vtd:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))))))) =>
                                                                  zen.Rnoteq 
                                                                    abst_T 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    v_Vtd) 
                                                                 (v_Vce0:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x))))) =>
                                                                  zen.Rsubst 
                                                                    abst_T 
                                                                    (
                                                                    v_Vde:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    v_Vde) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x)))) 
                                                                    x x 
                                                                    (
                                                                    v_Vee:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T x 
                                                                    x)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T x 
                                                                    x)) 
                                                                    v_Vid 
                                                                    v_Vee) 
                                                                    (
                                                                    v_Vce0:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x) 
                                                                    v_Vce0) 
                                                                    v_Vce0) 
                                                                 v_Vce) 
                                                              (v_Vbe0:
                                                               (zen.proof 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x)))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x))) 
                                                                 v_Vbe0 v_Vdd) 
                                                              v_Vbe) v_Vzd) 
                                                        v_Vyd) v_Vxd) v_Vwd) 
                                               abst_equal_transitive) v_Vud) 
                                         v_Vhd) 
                                      (v_Vce:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (abst_equal 
                                                      (abst_plus x 
                                                         (abst_plus y 
                                                            (abst_opposite y))) 
                                                      x) 
                                                   (abst_equal 
                                                      (abst_plus x 
                                                         (abst_plus y 
                                                            (abst_opposite y))) 
                                                      x))))) =>
                                       zen.Rsubst abst_T 
                                         (v_Vde:(zen.term abst_T) =>
                                          zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (abst_equal 
                                                     (abst_plus x 
                                                        (abst_plus y 
                                                           (abst_opposite y))) 
                                                     v_Vde) 
                                                  (abst_equal 
                                                     (abst_plus x 
                                                        (abst_plus y 
                                                           (abst_opposite y))) 
                                                     x)))) x x 
                                         (v_Vee:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T x x)))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (zen.equal abst_T x x)) v_Vid 
                                            v_Vee) 
                                         (v_Vce0:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (abst_equal 
                                                         (abst_plus x 
                                                            (abst_plus y 
                                                               (abst_opposite 
                                                                  y))) x) 
                                                      (abst_equal 
                                                         (abst_plus x 
                                                            (abst_plus y 
                                                               (abst_opposite 
                                                                  y))) x))))) =>
                                          zen.Rnoteq basics.bool__t 
                                            (abst_equal 
                                               (abst_plus x 
                                                  (abst_plus y 
                                                     (abst_opposite y))) x) 
                                            v_Vce0) v_Vce) v_Vkd) 
                                   (v_Vbe:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus x 
                                                   (abst_plus y 
                                                      (abst_opposite y))) x)))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus x 
                                                  (abst_plus y 
                                                     (abst_opposite y))) x))) 
                                      v_Vbe v_Vdd) __U_1_4_LEMMA) 
                                (v_Vee:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle (zen.equal abst_T x x)))) =>
                                 zen.Rcut 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal x x))) 
                                   (v_Vfe:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true (abst_equal x x)))) =>
                                    zen.Rall abst_T 
                                      (v_Vzc:(zen.term abst_T) =>
                                       zen.forall abst_T 
                                         (v_Vad:(zen.term abst_T) =>
                                          zen.forall abst_T 
                                            (v_Vvd:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vzc v_Vad))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vad 
                                                           v_Vvd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vzc 
                                                           v_Vvd))))))) 
                                      (abst_plus x abst_zero) 
                                      (v_Vge:
                                       (zen.proof 
                                          (zen.forall abst_T 
                                             (v_Vad:(zen.term abst_T) =>
                                              zen.forall abst_T 
                                                (v_Vvd:(zen.term abst_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus x 
                                                               abst_zero) 
                                                            v_Vad))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               v_Vad v_Vvd))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_plus x 
                                                                  abst_zero) 
                                                               v_Vvd)))))))) =>
                                       zen.Rall abst_T 
                                         (v_Vad:(zen.term abst_T) =>
                                          zen.forall abst_T 
                                            (v_Vvd:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus x 
                                                           abst_zero) v_Vad))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vad 
                                                           v_Vvd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus x 
                                                              abst_zero) 
                                                           v_Vvd)))))) x 
                                         (v_Vhe:
                                          (zen.proof 
                                             (zen.forall abst_T 
                                                (v_Vvd:(zen.term abst_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus x 
                                                               abst_zero) x))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal x 
                                                               v_Vvd))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_plus x 
                                                                  abst_zero) 
                                                               v_Vvd))))))) =>
                                          zen.Rall abst_T 
                                            (v_Vvd:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus x 
                                                           abst_zero) x))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal x v_Vvd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus x 
                                                              abst_zero) 
                                                           v_Vvd))))) x 
                                            (v_Vie:
                                             (zen.proof 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus x 
                                                               abst_zero) x))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal x x))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_plus x 
                                                                  abst_zero) 
                                                               x)))))) =>
                                             zen.Rimply 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus x 
                                                           abst_zero) x))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal x x))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus x 
                                                              abst_zero) x)))) 
                                               (v_Vae:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_plus x 
                                                                  abst_zero) 
                                                               x))))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus x 
                                                              abst_zero) x))) 
                                                  __U_1_4_LEMMA v_Vae) 
                                               (v_Vje:
                                                (zen.proof 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal x x))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_plus x 
                                                                  abst_zero) 
                                                               x))))) =>
                                                zen.Rimply 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal x x))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus x 
                                                              abst_zero) x))) 
                                                  (v_Vke:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal x 
                                                                  x))))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal x x))) 
                                                     v_Vfe v_Vke) 
                                                  (__U_1_4_LEMMA0:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_plus x 
                                                                  abst_zero) 
                                                               x)))) =>
                                                   zen.Rsubst basics.bool__t 
                                                     (v_Vjd:
                                                      (zen.term 
                                                         basics.bool__t) =>
                                                      zen.triangle 
                                                        (focal.is_true v_Vjd)) 
                                                     (abst_equal 
                                                        (abst_plus x 
                                                           abst_zero) x) 
                                                     (abst_equal 
                                                        (abst_plus x 
                                                           (abst_plus y 
                                                              (abst_opposite 
                                                                 y))) x) 
                                                     (v_Vkd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero) 
                                                                    x) 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x))))) =>
                                                      zen.Rsubst abst_T 
                                                        (v_Vld:
                                                         (zen.term abst_T) =>
                                                         zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    v_Vld x) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x)))) 
                                                        (abst_plus x 
                                                           abst_zero) 
                                                        (abst_plus x 
                                                           (abst_plus y 
                                                              (abst_opposite 
                                                                 y))) 
                                                        (v_Vmd:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))))))) =>
                                                         zen.Rnotand 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    abst_zero)))) 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero))))) 
                                                           (v_Vnd:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero)))))) =>
                                                            zen.Rnotnot 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    abst_zero))) 
                                                              (v_Vod:
                                                               (zen.proof 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero)))) =>
                                                               zen.Reqsym 
                                                                 abst_T 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                 (abst_plus 
                                                                    x 
                                                                    abst_zero) 
                                                                 v_Vod v_Vmd) 
                                                              v_Vnd) 
                                                           (v_Vud:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero))))))) =>
                                                            zen.Rnotnot 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero)))) 
                                                              (__U_1_3_LEMMA0:
                                                               (zen.proof 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero))))) =>
                                                               zen.Rall 
                                                                 abst_T 
                                                                 (v_Vzc:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.forall 
                                                                    abst_T 
                                                                    (
                                                                    v_Vad:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vvd))))))) 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                 (v_Vwd:
                                                                  (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    v_Vad))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    v_Vvd)))))))) =>
                                                                  zen.Rall 
                                                                    abst_T 
                                                                    (
                                                                    v_Vad:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    v_Vad))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    v_Vvd)))))) 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    abst_zero) 
                                                                    (
                                                                    v_Vxd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero) 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    v_Vvd))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero) 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    v_Vvd))))) 
                                                                    x 
                                                                    (v_Vyd:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero) 
                                                                    x))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero) 
                                                                    x))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x)))) 
                                                                    (v_Vgd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero)))) 
                                                                    __U_1_3_LEMMA0 
                                                                    v_Vgd) 
                                                                    (v_Vzd:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero) 
                                                                    x))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero) 
                                                                    x))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x))) 
                                                                    (v_Vae:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero) 
                                                                    x))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    abst_zero) 
                                                                    x))) 
                                                                    __U_1_4_LEMMA0 
                                                                    v_Vae) 
                                                                    (v_Vbe:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x))) 
                                                                    v_Vbe 
                                                                    v_Vdd) 
                                                                    v_Vzd) 
                                                                    v_Vyd) 
                                                                    v_Vxd) 
                                                                    v_Vwd) 
                                                                 abst_equal_transitive) 
                                                              v_Vud) v_Vhd) 
                                                        (v_Vce:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x))))) =>
                                                         zen.Rsubst abst_T 
                                                           (v_Vde:
                                                            (zen.term abst_T) =>
                                                            zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    v_Vde) 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x)))) 
                                                           x x 
                                                           (v_Vee0:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T x 
                                                                    x)))) =>
                                                            zen.Rnoteq 
                                                              abst_T x v_Vee0) 
                                                           (v_Vce0:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x))))) =>
                                                            zen.Rnoteq 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x) 
                                                              v_Vce0) v_Vce) 
                                                        v_Vkd) 
                                                     (v_Vbe:
                                                      (zen.proof 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x)))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) x))) 
                                                        v_Vbe v_Vdd) 
                                                     __U_1_4_LEMMA0) v_Vje) 
                                               v_Vie) v_Vhe) v_Vge) 
                                      abst_equal_transitive) 
                                   (v_Vke:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true (abst_equal x x))))) =>
                                    zen.Rnoteq abst_T x v_Vee)))) 
                          (v_Vle:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal x 
                                       (abst_plus x 
                                          (abst_plus y (abst_opposite y))))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal x 
                                      (abst_plus x 
                                         (abst_plus y (abst_opposite y)))))) 
                             v_Vle v_Vyc) v_Vcd) v_Vbd) abst_equal_symmetric) 
                 v_Vwc) 
              (v_Vme:
               (zen.proof 
                  (zen.not 
                     (zen.and 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal abst_T x 
                                 (abst_plus x (abst_plus y (abst_opposite y)))))) 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal x 
                                    (abst_plus x 
                                       (abst_plus y (abst_opposite y)))))))))) =>
               zen.Rcut 
                 (zen.triangle 
                    (zen.equal abst_T 
                       (abst_plus (abst_plus x y) (abst_opposite y)) 
                       (abst_plus (abst_plus x y) (abst_opposite y)))) 
                 (v_Vne:
                  (zen.proof 
                     (zen.triangle 
                        (zen.equal abst_T 
                           (abst_plus (abst_plus x y) (abst_opposite y)) 
                           (abst_plus (abst_plus x y) (abst_opposite y))))) =>
                  zen.Rsubst basics.bool__t 
                    (v_Vjd:(zen.term basics.bool__t) =>
                     zen.triangle (focal.is_true v_Vjd)) 
                    (abst_equal 
                       (abst_plus x (abst_plus y (abst_opposite y))) 
                       (abst_plus (abst_plus x y) (abst_opposite y))) 
                    (abst_equal x 
                       (abst_plus (abst_plus x y) (abst_opposite y))) 
                    (v_Voe:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal basics.bool__t 
                                 (abst_equal 
                                    (abst_plus x 
                                       (abst_plus y (abst_opposite y))) 
                                    (abst_plus (abst_plus x y) 
                                       (abst_opposite y))) 
                                 (abst_equal x 
                                    (abst_plus (abst_plus x y) 
                                       (abst_opposite y))))))) =>
                     zen.Rsubst abst_T 
                       (v_Vpe:(zen.term abst_T) =>
                        zen.not 
                          (zen.triangle 
                             (zen.equal basics.bool__t 
                                (abst_equal v_Vpe 
                                   (abst_plus (abst_plus x y) 
                                      (abst_opposite y))) 
                                (abst_equal x 
                                   (abst_plus (abst_plus x y) 
                                      (abst_opposite y)))))) 
                       (abst_plus x (abst_plus y (abst_opposite y))) x 
                       (v_Vqe:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal abst_T 
                                    (abst_plus x 
                                       (abst_plus y (abst_opposite y))) x)))) =>
                        zen.Rnotand 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal abst_T x 
                                   (abst_plus x 
                                      (abst_plus y (abst_opposite y)))))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal x 
                                      (abst_plus x 
                                         (abst_plus y (abst_opposite y))))))) 
                          (v_Vre:
                           (zen.proof 
                              (zen.not 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal abst_T x 
                                          (abst_plus x 
                                             (abst_plus y (abst_opposite y)))))))) =>
                           zen.Rnotnot 
                             (zen.triangle 
                                (zen.equal abst_T x 
                                   (abst_plus x 
                                      (abst_plus y (abst_opposite y))))) 
                             (v_Vse:
                              (zen.proof 
                                 (zen.triangle 
                                    (zen.equal abst_T x 
                                       (abst_plus x 
                                          (abst_plus y (abst_opposite y)))))) =>
                              zen.Rcut (zen.triangle (zen.equal abst_T x x)) 
                                (v_Vid:
                                 (zen.proof 
                                    (zen.triangle (zen.equal abst_T x x))) =>
                                 zen.Rsubst abst_T 
                                   (v_Vte:(zen.term abst_T) =>
                                    zen.triangle (zen.equal abst_T v_Vte x)) 
                                   x 
                                   (abst_plus x 
                                      (abst_plus y (abst_opposite y))) 
                                   (v_Vxc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal abst_T x 
                                                (abst_plus x 
                                                   (abst_plus y 
                                                      (abst_opposite y))))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (zen.equal abst_T x 
                                            (abst_plus x 
                                               (abst_plus y (abst_opposite y))))) 
                                      v_Vse v_Vxc) 
                                   (v_Vue:
                                    (zen.proof 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_plus x 
                                                (abst_plus y 
                                                   (abst_opposite y))) x))) =>
                                    zen.Rsubst abst_T 
                                      (v_Vve:(zen.term abst_T) =>
                                       zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_plus x 
                                               (abst_plus y (abst_opposite y))) 
                                            v_Vve)) x x 
                                      (v_Vee:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal abst_T x x)))) =>
                                       zen.Rnoteq abst_T x v_Vee) 
                                      (v_Vue0:
                                       (zen.proof 
                                          (zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_plus x 
                                                   (abst_plus y 
                                                      (abst_opposite y))) x))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus x 
                                                  (abst_plus y 
                                                     (abst_opposite y))) x)) 
                                         v_Vue0 v_Vqe) v_Vue) v_Vid) 
                                (v_Vee:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle (zen.equal abst_T x x)))) =>
                                 zen.Rnoteq abst_T x v_Vee)) v_Vre) 
                          (v_Vwe:
                           (zen.proof 
                              (zen.not 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal x 
                                             (abst_plus x 
                                                (abst_plus y 
                                                   (abst_opposite y))))))))) =>
                           zen.Rnotnot 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal x 
                                      (abst_plus x 
                                         (abst_plus y (abst_opposite y)))))) 
                             (v_Vle:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal x 
                                          (abst_plus x 
                                             (abst_plus y (abst_opposite y))))))) =>
                              zen.Rall abst_T 
                                (v_Vzc:(zen.term abst_T) =>
                                 zen.forall abst_T 
                                   (v_Vad:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Vvd:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vzc v_Vad))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vad v_Vvd))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vzc v_Vvd))))))) 
                                x 
                                (v_Vxe:
                                 (zen.proof 
                                    (zen.forall abst_T 
                                       (v_Vad:(zen.term abst_T) =>
                                        zen.forall abst_T 
                                          (v_Vvd:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal x v_Vad))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vad v_Vvd))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x v_Vvd)))))))) =>
                                 zen.Rall abst_T 
                                   (v_Vad:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Vvd:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal x v_Vad))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vad v_Vvd))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal x v_Vvd)))))) 
                                   (abst_plus x 
                                      (abst_plus y (abst_opposite y))) 
                                   (v_Vye:
                                    (zen.proof 
                                       (zen.forall abst_T 
                                          (v_Vvd:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal x 
                                                      (abst_plus x 
                                                         (abst_plus y 
                                                            (abst_opposite y)))))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus x 
                                                            (abst_plus y 
                                                               (abst_opposite 
                                                                  y))) v_Vvd))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x v_Vvd))))))) =>
                                    zen.Rall abst_T 
                                      (v_Vvd:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal x 
                                                  (abst_plus x 
                                                     (abst_plus y 
                                                        (abst_opposite y)))))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus x 
                                                        (abst_plus y 
                                                           (abst_opposite y))) 
                                                     v_Vvd))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal x v_Vvd))))) 
                                      (abst_plus (abst_plus x y) 
                                         (abst_opposite y)) 
                                      (v_Vze:
                                       (zen.proof 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal x 
                                                      (abst_plus x 
                                                         (abst_plus y 
                                                            (abst_opposite y)))))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus x 
                                                            (abst_plus y 
                                                               (abst_opposite 
                                                                  y))) 
                                                         (abst_plus 
                                                            (abst_plus x y) 
                                                            (abst_opposite y))))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x 
                                                         (abst_plus 
                                                            (abst_plus x y) 
                                                            (abst_opposite y)))))))) =>
                                       zen.Rimply 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal x 
                                                  (abst_plus x 
                                                     (abst_plus y 
                                                        (abst_opposite y)))))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus x 
                                                        (abst_plus y 
                                                           (abst_opposite y))) 
                                                     (abst_plus 
                                                        (abst_plus x y) 
                                                        (abst_opposite y))))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal x 
                                                     (abst_plus 
                                                        (abst_plus x y) 
                                                        (abst_opposite y)))))) 
                                         (v_Vyc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x 
                                                         (abst_plus x 
                                                            (abst_plus y 
                                                               (abst_opposite 
                                                                  y)))))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal x 
                                                     (abst_plus x 
                                                        (abst_plus y 
                                                           (abst_opposite y)))))) 
                                            v_Vle v_Vyc) 
                                         (v_Vaf:
                                          (zen.proof 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus x 
                                                            (abst_plus y 
                                                               (abst_opposite 
                                                                  y))) 
                                                         (abst_plus 
                                                            (abst_plus x y) 
                                                            (abst_opposite y))))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x 
                                                         (abst_plus 
                                                            (abst_plus x y) 
                                                            (abst_opposite y))))))) =>
                                          zen.Rimply 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus x 
                                                        (abst_plus y 
                                                           (abst_opposite y))) 
                                                     (abst_plus 
                                                        (abst_plus x y) 
                                                        (abst_opposite y))))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal x 
                                                     (abst_plus 
                                                        (abst_plus x y) 
                                                        (abst_opposite y))))) 
                                            (v_Vbf:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus x 
                                                               (abst_plus y 
                                                                  (abst_opposite 
                                                                    y))) 
                                                            (abst_plus 
                                                               (abst_plus x y) 
                                                               (abst_opposite 
                                                                  y))))))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus x 
                                                           (abst_plus y 
                                                              (abst_opposite 
                                                                 y))) 
                                                        (abst_plus 
                                                           (abst_plus x y) 
                                                           (abst_opposite y))))) 
                                               __U_1_1_LEMMA v_Vbf) 
                                            (v_Vcf:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x 
                                                         (abst_plus 
                                                            (abst_plus x y) 
                                                            (abst_opposite y)))))) =>
                                             zen.Rsubst basics.bool__t 
                                               (v_Vjd:
                                                (zen.term basics.bool__t) =>
                                                zen.triangle 
                                                  (focal.is_true v_Vjd)) 
                                               (abst_equal x 
                                                  (abst_plus (abst_plus x y) 
                                                     (abst_opposite y))) 
                                               (abst_equal x 
                                                  (abst_plus (abst_plus x y) 
                                                     (abst_opposite y))) 
                                               (v_Vdf:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (abst_equal x 
                                                               (abst_plus 
                                                                  (abst_plus 
                                                                    x y) 
                                                                  (abst_opposite 
                                                                    y))) 
                                                            (abst_equal x 
                                                               (abst_plus 
                                                                  (abst_plus 
                                                                    x y) 
                                                                  (abst_opposite 
                                                                    y))))))) =>
                                                zen.Rsubst abst_T 
                                                  (v_Vpe:(zen.term abst_T) =>
                                                   zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal v_Vpe 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    x y) 
                                                                 (abst_opposite 
                                                                    y))) 
                                                           (abst_equal x 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    x y) 
                                                                 (abst_opposite 
                                                                    y)))))) 
                                                  x x 
                                                  (v_Vee:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T x x)))) =>
                                                   zen.Rnoteq abst_T x v_Vee) 
                                                  (v_Vdf0:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (abst_equal x 
                                                                  (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                               (abst_equal x 
                                                                  (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_opposite 
                                                                    y))))))) =>
                                                   zen.Rsubst abst_T 
                                                     (v_Vef:
                                                      (zen.term abst_T) =>
                                                      zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal x 
                                                                 v_Vef) 
                                                              (abst_equal x 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    x y) 
                                                                    (
                                                                    abst_opposite 
                                                                    y)))))) 
                                                     (abst_plus 
                                                        (abst_plus x y) 
                                                        (abst_opposite y)) 
                                                     (abst_plus 
                                                        (abst_plus x y) 
                                                        (abst_opposite y)) 
                                                     (v_Vff:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T 
                                                                  (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                  (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_opposite 
                                                                    y)))))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    x y) 
                                                                 (abst_opposite 
                                                                    y)) 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    x y) 
                                                                 (abst_opposite 
                                                                    y)))) 
                                                        v_Vne v_Vff) 
                                                     (v_Vdf0:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                  (abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_opposite 
                                                                    y))))))) =>
                                                      zen.Rnoteq 
                                                        basics.bool__t 
                                                        (abst_equal x 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_opposite 
                                                                 y))) v_Vdf0) 
                                                     v_Vdf0) v_Vdf) 
                                               (v_Vcf0:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal x 
                                                            (abst_plus 
                                                               (abst_plus x y) 
                                                               (abst_opposite 
                                                                  y)))))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal x 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_opposite 
                                                                 y))))) 
                                                  v_Vcf0 v_Vvc) v_Vcf) v_Vaf) 
                                         v_Vze) v_Vye) v_Vxe) 
                                abst_equal_transitive) v_Vwe) v_Vme) 
                       (v_Vdf:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (abst_equal x 
                                       (abst_plus (abst_plus x y) 
                                          (abst_opposite y))) 
                                    (abst_equal x 
                                       (abst_plus (abst_plus x y) 
                                          (abst_opposite y))))))) =>
                        zen.Rsubst abst_T 
                          (v_Vef:(zen.term abst_T) =>
                           zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (abst_equal x v_Vef) 
                                   (abst_equal x 
                                      (abst_plus (abst_plus x y) 
                                         (abst_opposite y)))))) 
                          (abst_plus (abst_plus x y) (abst_opposite y)) 
                          (abst_plus (abst_plus x y) (abst_opposite y)) 
                          (v_Vff:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal abst_T 
                                       (abst_plus (abst_plus x y) 
                                          (abst_opposite y)) 
                                       (abst_plus (abst_plus x y) 
                                          (abst_opposite y)))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (zen.equal abst_T 
                                   (abst_plus (abst_plus x y) 
                                      (abst_opposite y)) 
                                   (abst_plus (abst_plus x y) 
                                      (abst_opposite y)))) v_Vne v_Vff) 
                          (v_Vdf0:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal basics.bool__t 
                                       (abst_equal x 
                                          (abst_plus (abst_plus x y) 
                                             (abst_opposite y))) 
                                       (abst_equal x 
                                          (abst_plus (abst_plus x y) 
                                             (abst_opposite y))))))) =>
                           zen.Rnoteq basics.bool__t 
                             (abst_equal x 
                                (abst_plus (abst_plus x y) (abst_opposite y))) 
                             v_Vdf0) v_Vdf) v_Voe) 
                    (v_Vcf:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal x 
                                 (abst_plus (abst_plus x y) (abst_opposite y)))))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal x 
                                (abst_plus (abst_plus x y) (abst_opposite y))))) 
                       v_Vcf v_Vvc) __U_1_1_LEMMA) 
                 (v_Vff:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (zen.equal abst_T 
                              (abst_plus (abst_plus x y) (abst_opposite y)) 
                              (abst_plus (abst_plus x y) (abst_opposite y)))))) =>
                  zen.Rcut 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal 
                             (abst_plus (abst_plus x y) (abst_opposite y)) 
                             (abst_plus (abst_plus x y) (abst_opposite y))))) 
                    (v_Vgf:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus (abst_plus x y) (abst_opposite y)) 
                                 (abst_plus (abst_plus x y) (abst_opposite y)))))) =>
                     zen.Rall abst_T 
                       (v_Vzc:(zen.term abst_T) =>
                        zen.forall abst_T 
                          (v_Vad:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vvd:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vzc v_Vad))) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vad v_Vvd))) 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vzc v_Vvd))))))) 
                       (abst_plus x (abst_plus y (abst_opposite y))) 
                       (v_Vwd:
                        (zen.proof 
                           (zen.forall abst_T 
                              (v_Vad:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vvd:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus x 
                                                (abst_plus y 
                                                   (abst_opposite y))) v_Vad))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vad v_Vvd))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus x 
                                                   (abst_plus y 
                                                      (abst_opposite y))) 
                                                v_Vvd)))))))) =>
                        zen.Rall abst_T 
                          (v_Vad:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vvd:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus x 
                                            (abst_plus y (abst_opposite y))) 
                                         v_Vad))) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vad v_Vvd))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus x 
                                               (abst_plus y (abst_opposite y))) 
                                            v_Vvd)))))) 
                          (abst_plus (abst_plus x y) (abst_opposite y)) 
                          (v_Vhf:
                           (zen.proof 
                              (zen.forall abst_T 
                                 (v_Vvd:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus x 
                                                (abst_plus y 
                                                   (abst_opposite y))) 
                                             (abst_plus (abst_plus x y) 
                                                (abst_opposite y))))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus (abst_plus x y) 
                                                   (abst_opposite y)) v_Vvd))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus x 
                                                   (abst_plus y 
                                                      (abst_opposite y))) 
                                                v_Vvd))))))) =>
                           zen.Rall abst_T 
                             (v_Vvd:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus x 
                                            (abst_plus y (abst_opposite y))) 
                                         (abst_plus (abst_plus x y) 
                                            (abst_opposite y))))) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus (abst_plus x y) 
                                               (abst_opposite y)) v_Vvd))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus x 
                                               (abst_plus y (abst_opposite y))) 
                                            v_Vvd))))) 
                             (abst_plus (abst_plus x y) (abst_opposite y)) 
                             (v_Vif:
                              (zen.proof 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus x 
                                                (abst_plus y 
                                                   (abst_opposite y))) 
                                             (abst_plus (abst_plus x y) 
                                                (abst_opposite y))))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus (abst_plus x y) 
                                                   (abst_opposite y)) 
                                                (abst_plus (abst_plus x y) 
                                                   (abst_opposite y))))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus x 
                                                   (abst_plus y 
                                                      (abst_opposite y))) 
                                                (abst_plus (abst_plus x y) 
                                                   (abst_opposite y)))))))) =>
                              zen.Rimply 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus x 
                                            (abst_plus y (abst_opposite y))) 
                                         (abst_plus (abst_plus x y) 
                                            (abst_opposite y))))) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus (abst_plus x y) 
                                               (abst_opposite y)) 
                                            (abst_plus (abst_plus x y) 
                                               (abst_opposite y))))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus x 
                                               (abst_plus y (abst_opposite y))) 
                                            (abst_plus (abst_plus x y) 
                                               (abst_opposite y)))))) 
                                (v_Vbf:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus x 
                                                   (abst_plus y 
                                                      (abst_opposite y))) 
                                                (abst_plus (abst_plus x y) 
                                                   (abst_opposite y))))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus x 
                                               (abst_plus y (abst_opposite y))) 
                                            (abst_plus (abst_plus x y) 
                                               (abst_opposite y))))) 
                                   __U_1_1_LEMMA v_Vbf) 
                                (v_Vjf:
                                 (zen.proof 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus (abst_plus x y) 
                                                   (abst_opposite y)) 
                                                (abst_plus (abst_plus x y) 
                                                   (abst_opposite y))))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus x 
                                                   (abst_plus y 
                                                      (abst_opposite y))) 
                                                (abst_plus (abst_plus x y) 
                                                   (abst_opposite y))))))) =>
                                 zen.Rimply 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus (abst_plus x y) 
                                               (abst_opposite y)) 
                                            (abst_plus (abst_plus x y) 
                                               (abst_opposite y))))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus x 
                                               (abst_plus y (abst_opposite y))) 
                                            (abst_plus (abst_plus x y) 
                                               (abst_opposite y))))) 
                                   (v_Vkf:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_plus x y) 
                                                      (abst_opposite y)) 
                                                   (abst_plus 
                                                      (abst_plus x y) 
                                                      (abst_opposite y))))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus (abst_plus x y) 
                                                  (abst_opposite y)) 
                                               (abst_plus (abst_plus x y) 
                                                  (abst_opposite y))))) 
                                      v_Vgf v_Vkf) 
                                   (__U_1_1_LEMMA0:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus x 
                                                   (abst_plus y 
                                                      (abst_opposite y))) 
                                                (abst_plus (abst_plus x y) 
                                                   (abst_opposite y)))))) =>
                                    zen.Rsubst basics.bool__t 
                                      (v_Vlf:(zen.term basics.bool__t) =>
                                       zen.triangle (focal.is_true v_Vlf)) 
                                      (abst_equal 
                                         (abst_plus x 
                                            (abst_plus y (abst_opposite y))) 
                                         (abst_plus (abst_plus x y) 
                                            (abst_opposite y))) 
                                      (abst_equal x 
                                         (abst_plus (abst_plus x y) 
                                            (abst_opposite y))) 
                                      (v_Voe:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (abst_equal 
                                                      (abst_plus x 
                                                         (abst_plus y 
                                                            (abst_opposite y))) 
                                                      (abst_plus 
                                                         (abst_plus x y) 
                                                         (abst_opposite y))) 
                                                   (abst_equal x 
                                                      (abst_plus 
                                                         (abst_plus x y) 
                                                         (abst_opposite y))))))) =>
                                       zen.Rsubst abst_T 
                                         (v_Vmf:(zen.term abst_T) =>
                                          zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (abst_equal v_Vmf 
                                                     (abst_plus 
                                                        (abst_plus x y) 
                                                        (abst_opposite y))) 
                                                  (abst_equal x 
                                                     (abst_plus 
                                                        (abst_plus x y) 
                                                        (abst_opposite y)))))) 
                                         (abst_plus x 
                                            (abst_plus y (abst_opposite y))) 
                                         x 
                                         (v_Vqe:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_plus x 
                                                         (abst_plus y 
                                                            (abst_opposite y))) 
                                                      x)))) =>
                                          zen.Rnotand 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T x 
                                                     (abst_plus x 
                                                        (abst_plus y 
                                                           (abst_opposite y)))))) 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal x 
                                                        (abst_plus x 
                                                           (abst_plus y 
                                                              (abst_opposite 
                                                                 y))))))) 
                                            (v_Vre:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal abst_T x 
                                                            (abst_plus x 
                                                               (abst_plus y 
                                                                  (abst_opposite 
                                                                    y)))))))) =>
                                             zen.Rnotnot 
                                               (zen.triangle 
                                                  (zen.equal abst_T x 
                                                     (abst_plus x 
                                                        (abst_plus y 
                                                           (abst_opposite y))))) 
                                               (v_Vse:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (zen.equal abst_T x 
                                                         (abst_plus x 
                                                            (abst_plus y 
                                                               (abst_opposite 
                                                                  y)))))) =>
                                                zen.Reqsym abst_T x 
                                                  (abst_plus x 
                                                     (abst_plus y 
                                                        (abst_opposite y))) 
                                                  v_Vse v_Vqe) v_Vre) 
                                            (v_Vwe:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal x 
                                                               (abst_plus x 
                                                                  (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))))))))) =>
                                             zen.Rnotnot 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal x 
                                                        (abst_plus x 
                                                           (abst_plus y 
                                                              (abst_opposite 
                                                                 y)))))) 
                                               (v_Vle:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal x 
                                                            (abst_plus x 
                                                               (abst_plus y 
                                                                  (abst_opposite 
                                                                    y))))))) =>
                                                zen.Rall abst_T 
                                                  (v_Vzc:(zen.term abst_T) =>
                                                   zen.forall abst_T 
                                                     (v_Vad:
                                                      (zen.term abst_T) =>
                                                      zen.forall abst_T 
                                                        (v_Vvd:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Vad 
                                                                    v_Vvd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Vzc 
                                                                    v_Vvd))))))) 
                                                  x 
                                                  (v_Vxe:
                                                   (zen.proof 
                                                      (zen.forall abst_T 
                                                         (v_Vad:
                                                          (zen.term abst_T) =>
                                                          zen.forall abst_T 
                                                            (v_Vvd:
                                                             (zen.term abst_T) =>
                                                             zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    x v_Vad))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vvd))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x v_Vvd)))))))) =>
                                                   zen.Rall abst_T 
                                                     (v_Vad:
                                                      (zen.term abst_T) =>
                                                      zen.forall abst_T 
                                                        (v_Vvd:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    x v_Vad))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Vad 
                                                                    v_Vvd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    x v_Vvd)))))) 
                                                     (abst_plus x 
                                                        (abst_plus y 
                                                           (abst_opposite y))) 
                                                     (v_Vye:
                                                      (zen.proof 
                                                         (zen.forall abst_T 
                                                            (v_Vvd:
                                                             (zen.term abst_T) =>
                                                             zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)))))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    v_Vvd))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x v_Vvd))))))) =>
                                                      zen.Rall abst_T 
                                                        (v_Vvd:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)))))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    v_Vvd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    x v_Vvd))))) 
                                                        (abst_plus 
                                                           (abst_plus x y) 
                                                           (abst_opposite y)) 
                                                        (v_Vze:
                                                         (zen.proof 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)))))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_opposite 
                                                                    y))))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_opposite 
                                                                    y)))))))) =>
                                                         zen.Rimply 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)))))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_opposite 
                                                                    y))))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_opposite 
                                                                    y)))))) 
                                                           (v_Vyc:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)))))))) =>
                                                            zen.Raxiom 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)))))) 
                                                              v_Vle v_Vyc) 
                                                           (v_Vaf:
                                                            (zen.proof 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_opposite 
                                                                    y))))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_opposite 
                                                                    y))))))) =>
                                                            zen.Rimply 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_opposite 
                                                                    y))))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_opposite 
                                                                    y))))) 
                                                              (v_Vbf:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_opposite 
                                                                    y))))))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_opposite 
                                                                    y))))) 
                                                                 __U_1_1_LEMMA0 
                                                                 v_Vbf) 
                                                              (v_Vcf:
                                                               (zen.proof 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_opposite 
                                                                    y)))))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_opposite 
                                                                    y))))) 
                                                                 v_Vcf v_Vvc) 
                                                              v_Vaf) v_Vze) 
                                                        v_Vye) v_Vxe) 
                                                  abst_equal_transitive) 
                                               v_Vwe) v_Vme) 
                                         (v_Vdf:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (abst_equal x 
                                                         (abst_plus 
                                                            (abst_plus x y) 
                                                            (abst_opposite y))) 
                                                      (abst_equal x 
                                                         (abst_plus 
                                                            (abst_plus x y) 
                                                            (abst_opposite y))))))) =>
                                          zen.Rsubst abst_T 
                                            (v_Vnf:(zen.term abst_T) =>
                                             zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal x v_Vnf) 
                                                     (abst_equal x 
                                                        (abst_plus 
                                                           (abst_plus x y) 
                                                           (abst_opposite y)))))) 
                                            (abst_plus (abst_plus x y) 
                                               (abst_opposite y)) 
                                            (abst_plus (abst_plus x y) 
                                               (abst_opposite y)) 
                                            (v_Vff0:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         (abst_plus 
                                                            (abst_plus x y) 
                                                            (abst_opposite y)) 
                                                         (abst_plus 
                                                            (abst_plus x y) 
                                                            (abst_opposite y)))))) =>
                                             zen.Rnoteq abst_T 
                                               (abst_plus (abst_plus x y) 
                                                  (abst_opposite y)) v_Vff0) 
                                            (v_Vdf0:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         basics.bool__t 
                                                         (abst_equal x 
                                                            (abst_plus 
                                                               (abst_plus x y) 
                                                               (abst_opposite 
                                                                  y))) 
                                                         (abst_equal x 
                                                            (abst_plus 
                                                               (abst_plus x y) 
                                                               (abst_opposite 
                                                                  y))))))) =>
                                             zen.Rnoteq basics.bool__t 
                                               (abst_equal x 
                                                  (abst_plus (abst_plus x y) 
                                                     (abst_opposite y))) 
                                               v_Vdf0) v_Vdf) v_Voe) 
                                      (v_Vcf:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal x 
                                                   (abst_plus 
                                                      (abst_plus x y) 
                                                      (abst_opposite y)))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal x 
                                                  (abst_plus (abst_plus x y) 
                                                     (abst_opposite y))))) 
                                         v_Vcf v_Vvc) __U_1_1_LEMMA0) v_Vjf) 
                                v_Vif) v_Vhf) v_Vwd) abst_equal_transitive) 
                    (v_Vkf:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_plus (abst_plus x y) 
                                       (abst_opposite y)) 
                                    (abst_plus (abst_plus x y) 
                                       (abst_opposite y))))))) =>
                     zen.Rnoteq abst_T 
                       (abst_plus (abst_plus x y) (abst_opposite y)) v_Vff))))) 
          (zen.nnpp 
             (zen.triangle 
                (focal.is_true (abst_equal (abst_plus x abst_zero) x))) 
             (v_Vzb:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true (abst_equal (abst_plus x abst_zero) x))))) =>
              zen.Rall abst_T 
                (v_Vac:(zen.term abst_T) =>
                 zen.and 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_plus v_Vac abst_zero) v_Vac))) 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_plus abst_zero v_Vac) v_Vac)))) x 
                (v_Vbc:
                 (zen.proof 
                    (zen.and 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_plus x abst_zero) x))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_plus abst_zero x) x))))) =>
                 zen.Rand 
                   (zen.triangle 
                      (focal.is_true (abst_equal (abst_plus x abst_zero) x))) 
                   (zen.triangle 
                      (focal.is_true (abst_equal (abst_plus abst_zero x) x))) 
                   (v_Vcc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_plus x abst_zero) x)))) =>
                    v_Vdc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_plus abst_zero x) x)))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus x abst_zero) x))) v_Vcc 
                      v_Vzb) v_Vbc) abst_zero_is_neutral))) 
         (zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (abst_equal (abst_plus x (abst_plus y (abst_opposite y))) 
                     (abst_plus x abst_zero)))) 
            (v_Vzb:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal 
                            (abst_plus x (abst_plus y (abst_opposite y))) 
                            (abst_plus x abst_zero)))))) =>
             zen.Rall abst_T 
               (v_Vac:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vbc:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vcc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Vac v_Vbc))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_plus v_Vcc v_Vac) 
                                 (abst_plus v_Vcc v_Vbc))))))) 
               (abst_plus y (abst_opposite y)) 
               (v_Vdc:
                (zen.proof 
                   (zen.forall abst_T 
                      (v_Vbc:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vcc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus y (abst_opposite y)) v_Vbc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus v_Vcc 
                                        (abst_plus y (abst_opposite y))) 
                                     (abst_plus v_Vcc v_Vbc)))))))) =>
                zen.Rall abst_T 
                  (v_Vbc:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vcc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_plus y (abst_opposite y)) 
                                 v_Vbc))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus v_Vcc 
                                    (abst_plus y (abst_opposite y))) 
                                 (abst_plus v_Vcc v_Vbc)))))) abst_zero 
                  (v_Vec:
                   (zen.proof 
                      (zen.forall abst_T 
                         (v_Vcc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus y (abst_opposite y)) 
                                     abst_zero))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus v_Vcc 
                                        (abst_plus y (abst_opposite y))) 
                                     (abst_plus v_Vcc abst_zero))))))) =>
                   zen.Rall abst_T 
                     (v_Vcc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_plus y (abst_opposite y)) 
                                 abst_zero))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus v_Vcc 
                                    (abst_plus y (abst_opposite y))) 
                                 (abst_plus v_Vcc abst_zero))))) x 
                     (v_Vfc:
                      (zen.proof 
                         (zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus y (abst_opposite y)) 
                                     abst_zero))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus x 
                                        (abst_plus y (abst_opposite y))) 
                                     (abst_plus x abst_zero)))))) =>
                      zen.Rimply 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_plus y (abst_opposite y)) 
                                 abst_zero))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus x (abst_plus y (abst_opposite y))) 
                                 (abst_plus x abst_zero)))) 
                        (v_Vgc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus y (abst_opposite y)) 
                                        abst_zero))))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_plus y (abst_opposite y)) 
                                    abst_zero))) __U_1_2_LEMMA v_Vgc) 
                        (v_Vhc:
                         (zen.proof 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus x 
                                        (abst_plus y (abst_opposite y))) 
                                     (abst_plus x abst_zero))))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_plus x 
                                       (abst_plus y (abst_opposite y))) 
                                    (abst_plus x abst_zero)))) v_Vhc v_Vzb) 
                        v_Vfc) v_Vec) v_Vdc) 
               abst_plus_right_substitution_rule))) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true 
                 (abst_equal (abst_plus y (abst_opposite y)) abst_zero))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_plus y (abst_opposite y)) abst_zero))))) =>
            zen.Rall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.triangle 
                 (focal.is_true 
                    (abst_equal (abst_plus v_Vac (abst_opposite v_Vac)) 
                       abst_zero))) y 
              (v_Vbc:
               (zen.proof 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_plus y (abst_opposite y)) abst_zero)))) =>
               zen.Raxiom 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_plus y (abst_opposite y)) abst_zero))) 
                 v_Vbc v_Vzb) abst_opposite_is_opposite))) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (abst_equal (abst_plus x (abst_plus y (abst_opposite y))) 
                   (abst_plus (abst_plus x y) (abst_opposite y))))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal 
                          (abst_plus x (abst_plus y (abst_opposite y))) 
                          (abst_plus (abst_plus x y) (abst_opposite y))))))) =>
           zen.Rall abst_T 
             (v_Vac:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.triangle 
                      (focal.is_true 
                         (abst_equal 
                            (abst_plus v_Vac (abst_plus v_Vbc v_Vcc)) 
                            (abst_plus (abst_plus v_Vac v_Vbc) v_Vcc)))))) x 
             (v_Vdc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus x (abst_plus v_Vbc v_Vcc)) 
                                (abst_plus (abst_plus x v_Vbc) v_Vcc))))))) =>
              zen.Rall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_plus x (abst_plus v_Vbc v_Vcc)) 
                            (abst_plus (abst_plus x v_Vbc) v_Vcc))))) y 
                (v_Vec:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_plus x (abst_plus y v_Vcc)) 
                                (abst_plus (abst_plus x y) v_Vcc)))))) =>
                 zen.Rall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_plus x (abst_plus y v_Vcc)) 
                            (abst_plus (abst_plus x y) v_Vcc)))) 
                   (abst_opposite y) 
                   (v_Vfc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus x (abst_plus y (abst_opposite y))) 
                                (abst_plus (abst_plus x y) (abst_opposite y)))))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_plus x (abst_plus y (abst_opposite y))) 
                               (abst_plus (abst_plus x y) (abst_opposite y))))) 
                      v_Vfc v_Vzb) v_Vec) v_Vdc) abst_plus_is_associative))).

def Additive_group__minus_left_substitution_rule :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_plus_left_substitution_rule:(dk_logic.eP 
                                      (dk_logic.forall abst_T 
                                         (x:(cc.eT abst_T) =>
                                          dk_logic.forall abst_T 
                                            (y:(cc.eT abst_T) =>
                                             dk_logic.forall abst_T 
                                               (z:(cc.eT abst_T) =>
                                                dk_logic.imp 
                                                  (dk_logic.ebP 
                                                     (abst_equal x y)) 
                                                  (dk_logic.ebP 
                                                     (abst_equal 
                                                        (abst_plus x z) 
                                                        (abst_plus y z)))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                (dk_logic.ebP 
                   (abst_equal 
                      (Additive_group__minus abst_T abst_opposite abst_plus 
                         x z) 
                      (Additive_group__minus abst_T abst_opposite abst_plus 
                         y z)))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_plus_left_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.ebP (abst_equal (abst_plus x z) (abst_plus y z)))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal 
                         (Additive_group__minus abst_T abst_opposite 
                            abst_plus v_Vzb v_Vbc) 
                         (Additive_group__minus abst_T abst_opposite 
                            abst_plus v_Vac v_Vbc)))))))) 
    (v_Vcc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (Additive_group__minus abst_T abst_opposite 
                                   abst_plus v_Vzb v_Vbc) 
                                (Additive_group__minus abst_T abst_opposite 
                                   abst_plus v_Vac v_Vbc)))))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal 
                         (Additive_group__minus abst_T abst_opposite 
                            abst_plus v_Vzb v_Vbc) 
                         (Additive_group__minus abst_T abst_opposite 
                            abst_plus v_Vac v_Vbc))))))) 
       (v_Vdc:(zen.term abst_T) =>
        v_Vec:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vac))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (Additive_group__minus abst_T abst_opposite 
                                   abst_plus v_Vdc v_Vbc) 
                                (Additive_group__minus abst_T abst_opposite 
                                   abst_plus v_Vac v_Vbc))))))))) =>
        zen.Rnotall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vac))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal 
                         (Additive_group__minus abst_T abst_opposite 
                            abst_plus v_Vdc v_Vbc) 
                         (Additive_group__minus abst_T abst_opposite 
                            abst_plus v_Vac v_Vbc)))))) 
          (v_Vfc:(zen.term abst_T) =>
           v_Vgc:
           (zen.proof 
              (zen.not 
                 (zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vfc))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (Additive_group__minus abst_T abst_opposite 
                                   abst_plus v_Vdc v_Vbc) 
                                (Additive_group__minus abst_T abst_opposite 
                                   abst_plus v_Vfc v_Vbc)))))))) =>
           zen.Rnotall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vfc))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal 
                         (Additive_group__minus abst_T abst_opposite 
                            abst_plus v_Vdc v_Vbc) 
                         (Additive_group__minus abst_T abst_opposite 
                            abst_plus v_Vfc v_Vbc))))) 
             (v_Vhc:(zen.term abst_T) =>
              v_Vic:
              (zen.proof 
                 (zen.not 
                    (zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vfc))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (Additive_group__minus abst_T abst_opposite 
                                   abst_plus v_Vdc v_Vhc) 
                                (Additive_group__minus abst_T abst_opposite 
                                   abst_plus v_Vfc v_Vhc))))))) =>
              zen.Rnotimply 
                (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vfc))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal 
                         (Additive_group__minus abst_T abst_opposite 
                            abst_plus v_Vdc v_Vhc) 
                         (Additive_group__minus abst_T abst_opposite 
                            abst_plus v_Vfc v_Vhc)))) 
                (v_Vjc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vfc)))) =>
                 v_Vkc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus v_Vdc (abst_opposite v_Vhc)) 
                                (abst_plus v_Vfc (abst_opposite v_Vhc))))))) =>
                 zen.Rall abst_T 
                   (v_Vzb:(zen.term abst_T) =>
                    zen.forall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vzb v_Vac))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_plus v_Vzb v_Vbc) 
                                     (abst_plus v_Vac v_Vbc))))))) v_Vdc 
                   (v_Vlc:
                    (zen.proof 
                       (zen.forall abst_T 
                          (v_Vac:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vbc:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vdc v_Vac))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus v_Vdc v_Vbc) 
                                         (abst_plus v_Vac v_Vbc)))))))) =>
                    zen.Rall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vdc v_Vac))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_plus v_Vdc v_Vbc) 
                                     (abst_plus v_Vac v_Vbc)))))) v_Vfc 
                      (v_Vmc:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vbc:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vdc v_Vfc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus v_Vdc v_Vbc) 
                                         (abst_plus v_Vfc v_Vbc))))))) =>
                       zen.Rall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vdc v_Vfc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_plus v_Vdc v_Vbc) 
                                     (abst_plus v_Vfc v_Vbc))))) 
                         (abst_opposite v_Vhc) 
                         (v_Vnc:
                          (zen.proof 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vdc v_Vfc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus v_Vdc 
                                            (abst_opposite v_Vhc)) 
                                         (abst_plus v_Vfc 
                                            (abst_opposite v_Vhc))))))) =>
                          zen.Rimply 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vdc v_Vfc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus v_Vdc (abst_opposite v_Vhc)) 
                                     (abst_plus v_Vfc (abst_opposite v_Vhc))))) 
                            (v_Voc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vdc v_Vfc))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vdc v_Vfc))) 
                               v_Vjc v_Voc) 
                            (v_Vpc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus v_Vdc 
                                            (abst_opposite v_Vhc)) 
                                         (abst_plus v_Vfc 
                                            (abst_opposite v_Vhc)))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus v_Vdc 
                                           (abst_opposite v_Vhc)) 
                                        (abst_plus v_Vfc 
                                           (abst_opposite v_Vhc))))) v_Vpc 
                               v_Vkc) v_Vnc) v_Vmc) v_Vlc) 
                   abst_plus_left_substitution_rule) v_Vic) v_Vgc) v_Vec) 
       v_Vcc).

def Additive_group__minus_right_substracts :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_plus_commutes:(dk_logic.eP 
                        (dk_logic.forall abst_T 
                           (x:(cc.eT abst_T) =>
                            dk_logic.forall abst_T 
                              (y:(cc.eT abst_T) =>
                               dk_logic.ebP 
                                 (abst_equal (abst_plus x y) (abst_plus y x)))))) ->
  abst_plus_is_associative:(dk_logic.eP 
                              (dk_logic.forall abst_T 
                                 (x:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (y:(cc.eT abst_T) =>
                                     dk_logic.forall abst_T 
                                       (z:(cc.eT abst_T) =>
                                        dk_logic.ebP 
                                          (abst_equal 
                                             (abst_plus x (abst_plus y z)) 
                                             (abst_plus (abst_plus x y) z))))))) ->
  abst_plus_right_substitution_rule:(dk_logic.eP 
                                       (dk_logic.forall abst_T 
                                          (x:(cc.eT abst_T) =>
                                           dk_logic.forall abst_T 
                                             (y:(cc.eT abst_T) =>
                                              dk_logic.forall abst_T 
                                                (z:(cc.eT abst_T) =>
                                                 dk_logic.imp 
                                                   (dk_logic.ebP 
                                                      (abst_equal x y)) 
                                                   (dk_logic.ebP 
                                                      (abst_equal 
                                                         (abst_plus z x) 
                                                         (abst_plus z y)))))))) ->
  abst_opposite_is_opposite:(dk_logic.eP 
                               (dk_logic.forall abst_T 
                                  (x:(cc.eT abst_T) =>
                                   dk_logic.ebP 
                                     (abst_equal 
                                        (abst_plus x (abst_opposite x)) 
                                        abst_zero)))) ->
  abst_zero_is_neutral:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.and 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus x abst_zero) x)) 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus abst_zero x) x))))) ->
  abst_plus_left_substitution_rule:(dk_logic.eP 
                                      (dk_logic.forall abst_T 
                                         (x:(cc.eT abst_T) =>
                                          dk_logic.forall abst_T 
                                            (y:(cc.eT abst_T) =>
                                             dk_logic.forall abst_T 
                                               (z:(cc.eT abst_T) =>
                                                dk_logic.imp 
                                                  (dk_logic.ebP 
                                                     (abst_equal x y)) 
                                                  (dk_logic.ebP 
                                                     (abst_equal 
                                                        (abst_plus x z) 
                                                        (abst_plus y z)))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.ebP 
             (abst_equal 
                (abst_plus x 
                   (Additive_group__minus abst_T abst_opposite abst_plus y x)) 
                y))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_plus_commutes:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.ebP (abst_equal (abst_plus x y) (abst_plus y x)))))) =>
  abst_plus_is_associative:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.ebP 
                 (abst_equal (abst_plus x (abst_plus y z)) 
                    (abst_plus (abst_plus x y) z))))))) =>
  abst_plus_right_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.ebP (abst_equal (abst_plus z x) (abst_plus z y)))))))) =>
  abst_opposite_is_opposite:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.ebP (abst_equal (abst_plus x (abst_opposite x)) abst_zero)))) =>
  abst_zero_is_neutral:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.and (dk_logic.ebP (abst_equal (abst_plus x abst_zero) x)) 
           (dk_logic.ebP (abst_equal (abst_plus abst_zero x) x))))) =>
  abst_plus_left_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.ebP (abst_equal (abst_plus x z) (abst_plus y z)))))))) =>
  (__W_1_LEMMA:
   (x:(cc.eT abst_T) ->
    y:(cc.eT abst_T) ->
    dk_logic.eP 
      (dk_logic.ebP 
         (abst_equal (abst_plus x (abst_plus y (abst_opposite x))) y))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.triangle 
              (focal.is_true 
                 (abst_equal 
                    (abst_plus v_Vzb 
                       (Additive_group__minus abst_T abst_opposite abst_plus 
                          v_Vac v_Vzb)) v_Vac))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.triangle 
                     (focal.is_true 
                        (abst_equal 
                           (abst_plus v_Vzb 
                              (Additive_group__minus abst_T abst_opposite 
                                 abst_plus v_Vac v_Vzb)) v_Vac))))))) =>
      zen.Rnotall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.triangle 
              (focal.is_true 
                 (abst_equal 
                    (abst_plus v_Vzb 
                       (Additive_group__minus abst_T abst_opposite abst_plus 
                          v_Vac v_Vzb)) v_Vac)))) 
        (v_Vcc:(zen.term abst_T) =>
         v_Vdc:
         (zen.proof 
            (zen.not 
               (zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.triangle 
                     (focal.is_true 
                        (abst_equal 
                           (abst_plus v_Vcc 
                              (Additive_group__minus abst_T abst_opposite 
                                 abst_plus v_Vac v_Vcc)) v_Vac)))))) =>
         zen.Rnotall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.triangle 
              (focal.is_true 
                 (abst_equal 
                    (abst_plus v_Vcc 
                       (Additive_group__minus abst_T abst_opposite abst_plus 
                          v_Vac v_Vcc)) v_Vac))) 
           (v_Vec:(zen.term abst_T) =>
            v_Vfc:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal 
                           (abst_plus v_Vcc 
                              (abst_plus v_Vec (abst_opposite v_Vcc))) v_Vec))))) =>
            zen.Rall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (abst_equal 
                          (abst_plus v_Vzb 
                             (abst_plus v_Vac (abst_opposite v_Vzb))) v_Vac)))) 
              v_Vcc 
              (v_Vgc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vac:(zen.term abst_T) =>
                      zen.triangle 
                        (focal.is_true 
                           (abst_equal 
                              (abst_plus v_Vcc 
                                 (abst_plus v_Vac (abst_opposite v_Vcc))) 
                              v_Vac))))) =>
               zen.Rall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (abst_equal 
                          (abst_plus v_Vcc 
                             (abst_plus v_Vac (abst_opposite v_Vcc))) v_Vac))) 
                 v_Vec 
                 (v_Vhc:
                  (zen.proof 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal 
                              (abst_plus v_Vcc 
                                 (abst_plus v_Vec (abst_opposite v_Vcc))) 
                              v_Vec)))) =>
                  zen.Raxiom 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal 
                             (abst_plus v_Vcc 
                                (abst_plus v_Vec (abst_opposite v_Vcc))) 
                             v_Vec))) v_Vhc v_Vfc) v_Vgc) __W_1_LEMMA) v_Vdc) 
        v_Vbc)) 
    (x:(cc.eT abst_T) =>
     y:(cc.eT abst_T) =>
     (__W_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (abst_equal (abst_plus x (abst_plus y (abst_opposite x))) 
               (abst_plus x (abst_plus (abst_opposite x) y))))) =>
      (__W_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP 
             (abst_equal (abst_plus x (abst_plus (abst_opposite x) y)) 
                (abst_plus (abst_plus x (abst_opposite x)) y)))) =>
       (__W_1_3_LEMMA:
        (dk_logic.eP 
           (dk_logic.ebP 
              (abst_equal (abst_plus (abst_plus x (abst_opposite x)) y) 
                 (abst_plus abst_zero y)))) =>
        zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (abst_equal (abst_plus x (abst_plus y (abst_opposite x))) y))) 
          (v_Vvc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal 
                          (abst_plus x (abst_plus y (abst_opposite x))) y))))) =>
           zen.Rcut 
             (zen.and 
                (zen.not 
                   (zen.triangle 
                      (zen.equal abst_T 
                         (abst_plus x (abst_plus y (abst_opposite x))) 
                         (abst_plus x (abst_plus y (abst_opposite x)))))) 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal 
                            (abst_plus x (abst_plus y (abst_opposite x))) 
                            (abst_plus x (abst_plus y (abst_opposite x)))))))) 
             (v_Vwc:
              (zen.proof 
                 (zen.and 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal abst_T 
                             (abst_plus x (abst_plus y (abst_opposite x))) 
                             (abst_plus x (abst_plus y (abst_opposite x)))))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus x (abst_plus y (abst_opposite x))) 
                                (abst_plus x (abst_plus y (abst_opposite x))))))))) =>
              zen.Rand 
                (zen.not 
                   (zen.triangle 
                      (zen.equal abst_T 
                         (abst_plus x (abst_plus y (abst_opposite x))) 
                         (abst_plus x (abst_plus y (abst_opposite x)))))) 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal 
                            (abst_plus x (abst_plus y (abst_opposite x))) 
                            (abst_plus x (abst_plus y (abst_opposite x))))))) 
                (v_Vxc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal abst_T 
                             (abst_plus x (abst_plus y (abst_opposite x))) 
                             (abst_plus x (abst_plus y (abst_opposite x))))))) =>
                 v_Vyc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus x (abst_plus y (abst_opposite x))) 
                                (abst_plus x (abst_plus y (abst_opposite x)))))))) =>
                 zen.Rnoteq abst_T 
                   (abst_plus x (abst_plus y (abst_opposite x))) v_Vxc) v_Vwc) 
             (v_Vzc:
              (zen.proof 
                 (zen.not 
                    (zen.and 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T 
                                (abst_plus x (abst_plus y (abst_opposite x))) 
                                (abst_plus x (abst_plus y (abst_opposite x)))))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus x 
                                      (abst_plus y (abst_opposite x))) 
                                   (abst_plus x 
                                      (abst_plus y (abst_opposite x)))))))))) =>
              zen.Rcut 
                (zen.triangle 
                   (zen.equal abst_T 
                      (abst_plus x (abst_plus (abst_opposite x) y)) y)) 
                (v_Vad:
                 (zen.proof 
                    (zen.triangle 
                       (zen.equal abst_T 
                          (abst_plus x (abst_plus (abst_opposite x) y)) y))) =>
                 zen.Rsubst basics.bool__t 
                   (v_Vbd:(zen.term basics.bool__t) =>
                    zen.triangle (focal.is_true v_Vbd)) 
                   (abst_equal (abst_plus x (abst_plus y (abst_opposite x))) 
                      (abst_plus x (abst_plus (abst_opposite x) y))) 
                   (abst_equal (abst_plus x (abst_plus y (abst_opposite x))) 
                      y) 
                   (v_Vcd:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal basics.bool__t 
                                (abst_equal 
                                   (abst_plus x 
                                      (abst_plus y (abst_opposite x))) 
                                   (abst_plus x 
                                      (abst_plus (abst_opposite x) y))) 
                                (abst_equal 
                                   (abst_plus x 
                                      (abst_plus y (abst_opposite x))) y))))) =>
                    zen.Rsubst abst_T 
                      (v_Vdd:(zen.term abst_T) =>
                       zen.not 
                         (zen.triangle 
                            (zen.equal basics.bool__t 
                               (abst_equal v_Vdd 
                                  (abst_plus x 
                                     (abst_plus (abst_opposite x) y))) 
                               (abst_equal 
                                  (abst_plus x 
                                     (abst_plus y (abst_opposite x))) y)))) 
                      (abst_plus x (abst_plus y (abst_opposite x))) 
                      (abst_plus x (abst_plus y (abst_opposite x))) 
                      (v_Vxc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal abst_T 
                                   (abst_plus x 
                                      (abst_plus y (abst_opposite x))) 
                                   (abst_plus x 
                                      (abst_plus y (abst_opposite x))))))) =>
                       zen.Rnotand 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T 
                                  (abst_plus x 
                                     (abst_plus y (abst_opposite x))) 
                                  (abst_plus x 
                                     (abst_plus y (abst_opposite x)))))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus x 
                                        (abst_plus y (abst_opposite x))) 
                                     (abst_plus x 
                                        (abst_plus y (abst_opposite x))))))) 
                         (v_Ved:
                          (zen.proof 
                             (zen.not 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_plus x 
                                            (abst_plus y (abst_opposite x))) 
                                         (abst_plus x 
                                            (abst_plus y (abst_opposite x)))))))) =>
                          zen.Rnotnot 
                            (zen.triangle 
                               (zen.equal abst_T 
                                  (abst_plus x 
                                     (abst_plus y (abst_opposite x))) 
                                  (abst_plus x 
                                     (abst_plus y (abst_opposite x))))) 
                            (v_Vfd:
                             (zen.proof 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_plus x 
                                         (abst_plus y (abst_opposite x))) 
                                      (abst_plus x 
                                         (abst_plus y (abst_opposite x)))))) =>
                             zen.Rcut 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_plus x 
                                        (abst_plus y (abst_opposite x))) 
                                     (abst_plus x 
                                        (abst_plus y (abst_opposite x))))) 
                               (v_Vfd0:
                                (zen.proof 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_plus x 
                                            (abst_plus y (abst_opposite x))) 
                                         (abst_plus x 
                                            (abst_plus y (abst_opposite x)))))) =>
                                zen.Rsubst abst_T 
                                  (v_Vgd:(zen.term abst_T) =>
                                   zen.triangle 
                                     (zen.equal abst_T v_Vgd 
                                        (abst_plus x 
                                           (abst_plus y (abst_opposite x))))) 
                                  (abst_plus x 
                                     (abst_plus y (abst_opposite x))) 
                                  (abst_plus x 
                                     (abst_plus y (abst_opposite x))) 
                                  (v_Vxc0:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus x 
                                                  (abst_plus y 
                                                     (abst_opposite x))) 
                                               (abst_plus x 
                                                  (abst_plus y 
                                                     (abst_opposite x))))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_plus x 
                                              (abst_plus y (abst_opposite x))) 
                                           (abst_plus x 
                                              (abst_plus y (abst_opposite x))))) 
                                     v_Vfd0 v_Vxc0) 
                                  (v_Vfd0:
                                   (zen.proof 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_plus x 
                                               (abst_plus y (abst_opposite x))) 
                                            (abst_plus x 
                                               (abst_plus y (abst_opposite x)))))) =>
                                   zen.Rsubst abst_T 
                                     (v_Vhd:(zen.term abst_T) =>
                                      zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_plus x 
                                              (abst_plus y (abst_opposite x))) 
                                           v_Vhd)) 
                                     (abst_plus x 
                                        (abst_plus y (abst_opposite x))) 
                                     (abst_plus x 
                                        (abst_plus y (abst_opposite x))) 
                                     (v_Vxc0:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus x 
                                                     (abst_plus y 
                                                        (abst_opposite x))) 
                                                  (abst_plus x 
                                                     (abst_plus y 
                                                        (abst_opposite x))))))) =>
                                      zen.Rnoteq abst_T 
                                        (abst_plus x 
                                           (abst_plus y (abst_opposite x))) 
                                        v_Vxc0) 
                                     (v_Vfd0:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus x 
                                                  (abst_plus y 
                                                     (abst_opposite x))) 
                                               (abst_plus x 
                                                  (abst_plus y 
                                                     (abst_opposite x)))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus x 
                                                 (abst_plus y 
                                                    (abst_opposite x))) 
                                              (abst_plus x 
                                                 (abst_plus y 
                                                    (abst_opposite x))))) 
                                        v_Vfd0 v_Vxc) v_Vfd0) v_Vfd0) 
                               (v_Vxc0:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_plus x 
                                               (abst_plus y (abst_opposite x))) 
                                            (abst_plus x 
                                               (abst_plus y (abst_opposite x))))))) =>
                                zen.Rnoteq abst_T 
                                  (abst_plus x 
                                     (abst_plus y (abst_opposite x))) v_Vxc0)) 
                            v_Ved) 
                         (v_Vid:
                          (zen.proof 
                             (zen.not 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus x 
                                               (abst_plus y (abst_opposite x))) 
                                            (abst_plus x 
                                               (abst_plus y (abst_opposite x))))))))) =>
                          zen.Rnotnot 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus x 
                                        (abst_plus y (abst_opposite x))) 
                                     (abst_plus x 
                                        (abst_plus y (abst_opposite x)))))) 
                            (v_Vjd:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus x 
                                            (abst_plus y (abst_opposite x))) 
                                         (abst_plus x 
                                            (abst_plus y (abst_opposite x))))))) =>
                             zen.Rall abst_T 
                               (v_Vkd:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vld:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vmd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vkd v_Vld))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vld v_Vmd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vkd v_Vmd))))))) 
                               (abst_plus x (abst_plus y (abst_opposite x))) 
                               (v_Vnd:
                                (zen.proof 
                                   (zen.forall abst_T 
                                      (v_Vld:(zen.term abst_T) =>
                                       zen.forall abst_T 
                                         (v_Vmd:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus x 
                                                        (abst_plus y 
                                                           (abst_opposite x))) 
                                                     v_Vld))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vld v_Vmd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus x 
                                                           (abst_plus y 
                                                              (abst_opposite 
                                                                 x))) v_Vmd)))))))) =>
                                zen.Rall abst_T 
                                  (v_Vld:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vmd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus x 
                                                    (abst_plus y 
                                                       (abst_opposite x))) 
                                                 v_Vld))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vld v_Vmd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus x 
                                                       (abst_plus y 
                                                          (abst_opposite x))) 
                                                    v_Vmd)))))) 
                                  (abst_plus x 
                                     (abst_plus y (abst_opposite x))) 
                                  (v_Vod:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vmd:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus x 
                                                        (abst_plus y 
                                                           (abst_opposite x))) 
                                                     (abst_plus x 
                                                        (abst_plus y 
                                                           (abst_opposite x)))))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus x 
                                                           (abst_plus y 
                                                              (abst_opposite 
                                                                 x))) v_Vmd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus x 
                                                           (abst_plus y 
                                                              (abst_opposite 
                                                                 x))) v_Vmd))))))) =>
                                   zen.Rall abst_T 
                                     (v_Vmd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus x 
                                                    (abst_plus y 
                                                       (abst_opposite x))) 
                                                 (abst_plus x 
                                                    (abst_plus y 
                                                       (abst_opposite x)))))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus x 
                                                       (abst_plus y 
                                                          (abst_opposite x))) 
                                                    v_Vmd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus x 
                                                       (abst_plus y 
                                                          (abst_opposite x))) 
                                                    v_Vmd))))) 
                                     (abst_plus x 
                                        (abst_plus (abst_opposite x) y)) 
                                     (v_Vpd:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus x 
                                                        (abst_plus y 
                                                           (abst_opposite x))) 
                                                     (abst_plus x 
                                                        (abst_plus y 
                                                           (abst_opposite x)))))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus x 
                                                           (abst_plus y 
                                                              (abst_opposite 
                                                                 x))) 
                                                        (abst_plus x 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) y))))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus x 
                                                           (abst_plus y 
                                                              (abst_opposite 
                                                                 x))) 
                                                        (abst_plus x 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) y)))))))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus x 
                                                    (abst_plus y 
                                                       (abst_opposite x))) 
                                                 (abst_plus x 
                                                    (abst_plus y 
                                                       (abst_opposite x)))))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus x 
                                                       (abst_plus y 
                                                          (abst_opposite x))) 
                                                    (abst_plus x 
                                                       (abst_plus 
                                                          (abst_opposite x) y))))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus x 
                                                       (abst_plus y 
                                                          (abst_opposite x))) 
                                                    (abst_plus x 
                                                       (abst_plus 
                                                          (abst_opposite x) y)))))) 
                                        (v_Vyc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus x 
                                                           (abst_plus y 
                                                              (abst_opposite 
                                                                 x))) 
                                                        (abst_plus x 
                                                           (abst_plus y 
                                                              (abst_opposite 
                                                                 x)))))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus x 
                                                       (abst_plus y 
                                                          (abst_opposite x))) 
                                                    (abst_plus x 
                                                       (abst_plus y 
                                                          (abst_opposite x)))))) 
                                           v_Vjd v_Vyc) 
                                        (v_Vqd:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus x 
                                                           (abst_plus y 
                                                              (abst_opposite 
                                                                 x))) 
                                                        (abst_plus x 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) y))))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus x 
                                                           (abst_plus y 
                                                              (abst_opposite 
                                                                 x))) 
                                                        (abst_plus x 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) y))))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus x 
                                                       (abst_plus y 
                                                          (abst_opposite x))) 
                                                    (abst_plus x 
                                                       (abst_plus 
                                                          (abst_opposite x) y))))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus x 
                                                       (abst_plus y 
                                                          (abst_opposite x))) 
                                                    (abst_plus x 
                                                       (abst_plus 
                                                          (abst_opposite x) y))))) 
                                           (v_Vrd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus x 
                                                              (abst_plus y 
                                                                 (abst_opposite 
                                                                    x))) 
                                                           (abst_plus x 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) y))))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_plus y 
                                                             (abst_opposite x))) 
                                                       (abst_plus x 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             y))))) 
                                              __W_1_1_LEMMA v_Vrd) 
                                           (__W_1_1_LEMMA0:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus x 
                                                           (abst_plus y 
                                                              (abst_opposite 
                                                                 x))) 
                                                        (abst_plus x 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) y)))))) =>
                                            zen.Rsubst basics.bool__t 
                                              (v_Vsd:
                                               (zen.term basics.bool__t) =>
                                               zen.triangle 
                                                 (focal.is_true v_Vsd)) 
                                              (abst_equal 
                                                 (abst_plus x 
                                                    (abst_plus y 
                                                       (abst_opposite x))) 
                                                 (abst_plus x 
                                                    (abst_plus 
                                                       (abst_opposite x) y))) 
                                              (abst_equal 
                                                 (abst_plus x 
                                                    (abst_plus y 
                                                       (abst_opposite x))) y) 
                                              (v_Vcd0:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_plus x 
                                                                 (abst_plus 
                                                                    y 
                                                                    (
                                                                    abst_opposite 
                                                                    x))) 
                                                              (abst_plus x 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) y))) 
                                                           (abst_equal 
                                                              (abst_plus x 
                                                                 (abst_plus 
                                                                    y 
                                                                    (
                                                                    abst_opposite 
                                                                    x))) y))))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Vtd:(zen.term abst_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal v_Vtd 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    x) y))) 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_plus y 
                                                                   (abst_opposite 
                                                                    x))) y)))) 
                                                 (abst_plus x 
                                                    (abst_plus y 
                                                       (abst_opposite x))) 
                                                 (abst_plus x 
                                                    (abst_plus y 
                                                       (abst_opposite x))) 
                                                 (v_Vxc0:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_plus x 
                                                                 (abst_plus 
                                                                    y 
                                                                    (
                                                                    abst_opposite 
                                                                    x))) 
                                                              (abst_plus x 
                                                                 (abst_plus 
                                                                    y 
                                                                    (
                                                                    abst_opposite 
                                                                    x))))))) =>
                                                  zen.Rnoteq abst_T 
                                                    (abst_plus x 
                                                       (abst_plus y 
                                                          (abst_opposite x))) 
                                                    v_Vxc0) 
                                                 (v_Vcd0:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) y))) 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) y))))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Vud:
                                                     (zen.term abst_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                (abst_plus x 
                                                                   (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                v_Vud) 
                                                             (abst_equal 
                                                                (abst_plus x 
                                                                   (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) y)))) 
                                                    (abst_plus x 
                                                       (abst_plus 
                                                          (abst_opposite x) y)) 
                                                    y 
                                                    (v_Vvd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) y)))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    x) y)) y)) 
                                                       v_Vad v_Vvd) 
                                                    (v_Vwd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) y) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) y))))) =>
                                                     zen.Rnoteq 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_plus y 
                                                                (abst_opposite 
                                                                   x))) y) 
                                                       v_Vwd) v_Vcd0) v_Vcd0) 
                                              (v_Vxd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus x 
                                                              (abst_plus y 
                                                                 (abst_opposite 
                                                                    x))) y)))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_plus y 
                                                                (abst_opposite 
                                                                   x))) y))) 
                                                 v_Vxd v_Vvc) __W_1_1_LEMMA0) 
                                           v_Vqd) v_Vpd) v_Vod) v_Vnd) 
                               abst_equal_transitive) v_Vid) v_Vzc) 
                      (v_Vcd0:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (abst_equal 
                                      (abst_plus x 
                                         (abst_plus y (abst_opposite x))) 
                                      (abst_plus x 
                                         (abst_plus (abst_opposite x) y))) 
                                   (abst_equal 
                                      (abst_plus x 
                                         (abst_plus y (abst_opposite x))) y))))) =>
                       zen.Rsubst abst_T 
                         (v_Vud:(zen.term abst_T) =>
                          zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (abst_equal 
                                     (abst_plus x 
                                        (abst_plus y (abst_opposite x))) 
                                     v_Vud) 
                                  (abst_equal 
                                     (abst_plus x 
                                        (abst_plus y (abst_opposite x))) y)))) 
                         (abst_plus x (abst_plus (abst_opposite x) y)) y 
                         (v_Vvd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_plus x 
                                         (abst_plus (abst_opposite x) y)) y)))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (zen.equal abst_T 
                                  (abst_plus x 
                                     (abst_plus (abst_opposite x) y)) y)) 
                            v_Vad v_Vvd) 
                         (v_Vwd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_equal 
                                         (abst_plus x 
                                            (abst_plus y (abst_opposite x))) 
                                         y) 
                                      (abst_equal 
                                         (abst_plus x 
                                            (abst_plus y (abst_opposite x))) 
                                         y))))) =>
                          zen.Rnoteq basics.bool__t 
                            (abst_equal 
                               (abst_plus x (abst_plus y (abst_opposite x))) 
                               y) v_Vwd) v_Vcd0) v_Vcd) 
                   (v_Vxd:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus x (abst_plus y (abst_opposite x))) 
                                y)))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_plus x (abst_plus y (abst_opposite x))) 
                               y))) v_Vxd v_Vvc) __W_1_1_LEMMA) 
                (v_Vvd:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal abst_T 
                             (abst_plus x (abst_plus (abst_opposite x) y)) y)))) =>
                 zen.Rcut 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal 
                            (abst_plus x (abst_plus (abst_opposite x) y)) y))) 
                   (v_Vyd:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus x (abst_plus (abst_opposite x) y)) 
                                y)))) =>
                    zen.Rall abst_T 
                      (v_Vkd:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vld:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vmd:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vkd v_Vld))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vld v_Vmd))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vkd v_Vmd))))))) 
                      (abst_plus x (abst_plus y (abst_opposite x))) 
                      (v_Vnd:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vld:(zen.term abst_T) =>
                              zen.forall abst_T 
                                (v_Vmd:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus x 
                                               (abst_plus y (abst_opposite x))) 
                                            v_Vld))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vld v_Vmd))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus x 
                                                  (abst_plus y 
                                                     (abst_opposite x))) 
                                               v_Vmd)))))))) =>
                       zen.Rall abst_T 
                         (v_Vld:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vmd:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus x 
                                           (abst_plus y (abst_opposite x))) 
                                        v_Vld))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vld v_Vmd))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus x 
                                              (abst_plus y (abst_opposite x))) 
                                           v_Vmd)))))) 
                         (abst_plus x (abst_plus (abst_opposite x) y)) 
                         (v_Vzd:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vmd:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus x 
                                               (abst_plus y (abst_opposite x))) 
                                            (abst_plus x 
                                               (abst_plus (abst_opposite x) y))))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus x 
                                                  (abst_plus 
                                                     (abst_opposite x) y)) 
                                               v_Vmd))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus x 
                                                  (abst_plus y 
                                                     (abst_opposite x))) 
                                               v_Vmd))))))) =>
                          zen.Rall abst_T 
                            (v_Vmd:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus x 
                                           (abst_plus y (abst_opposite x))) 
                                        (abst_plus x 
                                           (abst_plus (abst_opposite x) y))))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus x 
                                              (abst_plus (abst_opposite x) y)) 
                                           v_Vmd))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus x 
                                              (abst_plus y (abst_opposite x))) 
                                           v_Vmd))))) y 
                            (v_Vae:
                             (zen.proof 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus x 
                                               (abst_plus y (abst_opposite x))) 
                                            (abst_plus x 
                                               (abst_plus (abst_opposite x) y))))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus x 
                                                  (abst_plus 
                                                     (abst_opposite x) y)) y))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus x 
                                                  (abst_plus y 
                                                     (abst_opposite x))) y)))))) =>
                             zen.Rimply 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus x 
                                           (abst_plus y (abst_opposite x))) 
                                        (abst_plus x 
                                           (abst_plus (abst_opposite x) y))))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus x 
                                              (abst_plus (abst_opposite x) y)) 
                                           y))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus x 
                                              (abst_plus y (abst_opposite x))) 
                                           y)))) 
                               (v_Vrd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus x 
                                                  (abst_plus y 
                                                     (abst_opposite x))) 
                                               (abst_plus x 
                                                  (abst_plus 
                                                     (abst_opposite x) y))))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus x 
                                              (abst_plus y (abst_opposite x))) 
                                           (abst_plus x 
                                              (abst_plus (abst_opposite x) y))))) 
                                  __W_1_1_LEMMA v_Vrd) 
                               (v_Vbe:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus x 
                                                  (abst_plus 
                                                     (abst_opposite x) y)) y))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus x 
                                                  (abst_plus y 
                                                     (abst_opposite x))) y))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus x 
                                              (abst_plus (abst_opposite x) y)) 
                                           y))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus x 
                                              (abst_plus y (abst_opposite x))) 
                                           y))) 
                                  (v_Vce:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus x 
                                                     (abst_plus 
                                                        (abst_opposite x) y)) 
                                                  y))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus x 
                                                 (abst_plus 
                                                    (abst_opposite x) y)) y))) 
                                     v_Vyd v_Vce) 
                                  (v_Vxd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus x 
                                                  (abst_plus y 
                                                     (abst_opposite x))) y)))) =>
                                   zen.Rsubst basics.bool__t 
                                     (v_Vsd:(zen.term basics.bool__t) =>
                                      zen.triangle (focal.is_true v_Vsd)) 
                                     (abst_equal 
                                        (abst_plus x 
                                           (abst_plus y (abst_opposite x))) y) 
                                     (abst_equal 
                                        (abst_plus x 
                                           (abst_plus y (abst_opposite x))) y) 
                                     (v_Vwd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (abst_equal 
                                                     (abst_plus x 
                                                        (abst_plus y 
                                                           (abst_opposite x))) 
                                                     y) 
                                                  (abst_equal 
                                                     (abst_plus x 
                                                        (abst_plus y 
                                                           (abst_opposite x))) 
                                                     y))))) =>
                                      zen.Rsubst abst_T 
                                        (v_Vde:(zen.term abst_T) =>
                                         zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (abst_equal v_Vde y) 
                                                 (abst_equal 
                                                    (abst_plus x 
                                                       (abst_plus y 
                                                          (abst_opposite x))) 
                                                    y)))) 
                                        (abst_plus x 
                                           (abst_plus y (abst_opposite x))) 
                                        (abst_plus x 
                                           (abst_plus y (abst_opposite x))) 
                                        (v_Vxc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus x 
                                                        (abst_plus y 
                                                           (abst_opposite x))) 
                                                     (abst_plus x 
                                                        (abst_plus y 
                                                           (abst_opposite x))))))) =>
                                         zen.Rnotand 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_plus x 
                                                       (abst_plus y 
                                                          (abst_opposite x))) 
                                                    (abst_plus x 
                                                       (abst_plus y 
                                                          (abst_opposite x)))))) 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_plus y 
                                                             (abst_opposite x))) 
                                                       (abst_plus x 
                                                          (abst_plus y 
                                                             (abst_opposite x))))))) 
                                           (v_Ved:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_plus x 
                                                              (abst_plus y 
                                                                 (abst_opposite 
                                                                    x))) 
                                                           (abst_plus x 
                                                              (abst_plus y 
                                                                 (abst_opposite 
                                                                    x)))))))) =>
                                            zen.Rnotnot 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_plus x 
                                                       (abst_plus y 
                                                          (abst_opposite x))) 
                                                    (abst_plus x 
                                                       (abst_plus y 
                                                          (abst_opposite x))))) 
                                              (v_Vfd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_plus x 
                                                           (abst_plus y 
                                                              (abst_opposite 
                                                                 x))) 
                                                        (abst_plus x 
                                                           (abst_plus y 
                                                              (abst_opposite 
                                                                 x)))))) =>
                                               zen.Reqsym abst_T 
                                                 (abst_plus x 
                                                    (abst_plus y 
                                                       (abst_opposite x))) 
                                                 (abst_plus x 
                                                    (abst_plus y 
                                                       (abst_opposite x))) 
                                                 v_Vfd v_Vxc) v_Ved) 
                                           (v_Vid:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus x 
                                                                 (abst_plus 
                                                                    y 
                                                                    (
                                                                    abst_opposite 
                                                                    x))) 
                                                              (abst_plus x 
                                                                 (abst_plus 
                                                                    y 
                                                                    (
                                                                    abst_opposite 
                                                                    x))))))))) =>
                                            zen.Rnotnot 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_plus y 
                                                             (abst_opposite x))) 
                                                       (abst_plus x 
                                                          (abst_plus y 
                                                             (abst_opposite x)))))) 
                                              (v_Vjd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus x 
                                                              (abst_plus y 
                                                                 (abst_opposite 
                                                                    x))) 
                                                           (abst_plus x 
                                                              (abst_plus y 
                                                                 (abst_opposite 
                                                                    x))))))) =>
                                               zen.Rall abst_T 
                                                 (v_Vkd:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vld:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vmd:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vkd 
                                                                   v_Vld))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                 (abst_plus x 
                                                    (abst_plus y 
                                                       (abst_opposite x))) 
                                                 (v_Vnd0:
                                                  (zen.proof 
                                                     (zen.forall abst_T 
                                                        (v_Vld:
                                                         (zen.term abst_T) =>
                                                         zen.forall abst_T 
                                                           (v_Vmd:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vld))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vmd)))))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vld:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vmd:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                   v_Vld))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vmd)))))) 
                                                    (abst_plus x 
                                                       (abst_plus y 
                                                          (abst_opposite x))) 
                                                    (v_Vod:
                                                     (zen.proof 
                                                        (zen.forall abst_T 
                                                           (v_Vmd:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vmd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vmd))))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vmd:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vmd))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vmd))))) 
                                                       y 
                                                       (v_Vee:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) y))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) y)))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) y))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) y)))) 
                                                          (v_Vyc:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                             v_Vjd v_Vyc) 
                                                          (v_Vfe:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) y))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) y))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) y))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) y))) 
                                                             (v_Vvc0:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) y))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) y))) 
                                                                v_Vxd v_Vvc0) 
                                                             (v_Vxd0:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) y)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    x))) y))) 
                                                                v_Vxd0 v_Vvc) 
                                                             v_Vfe) v_Vee) 
                                                       v_Vod) v_Vnd0) 
                                                 abst_equal_transitive) v_Vid) 
                                           v_Vzc) 
                                        (v_Vwd0:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal 
                                                        (abst_plus x 
                                                           (abst_plus y 
                                                              (abst_opposite 
                                                                 x))) y) 
                                                     (abst_equal 
                                                        (abst_plus x 
                                                           (abst_plus y 
                                                              (abst_opposite 
                                                                 x))) y))))) =>
                                         zen.Rsubst abst_T 
                                           (v_Vud:(zen.term abst_T) =>
                                            zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_plus y 
                                                             (abst_opposite x))) 
                                                       v_Vud) 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_plus y 
                                                             (abst_opposite x))) 
                                                       y)))) y y 
                                           (v_Vge:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T y y)))) =>
                                            zen.Rnoteq abst_T y v_Vge) 
                                           (v_Vwd0:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_plus x 
                                                              (abst_plus y 
                                                                 (abst_opposite 
                                                                    x))) y) 
                                                        (abst_equal 
                                                           (abst_plus x 
                                                              (abst_plus y 
                                                                 (abst_opposite 
                                                                    x))) y))))) =>
                                            zen.Rnoteq basics.bool__t 
                                              (abst_equal 
                                                 (abst_plus x 
                                                    (abst_plus y 
                                                       (abst_opposite x))) y) 
                                              v_Vwd0) v_Vwd0) v_Vwd) 
                                     (v_Vxd0:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus x 
                                                     (abst_plus y 
                                                        (abst_opposite x))) y)))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus x 
                                                    (abst_plus y 
                                                       (abst_opposite x))) y))) 
                                        v_Vxd0 v_Vvc) v_Vxd) v_Vbe) v_Vae) 
                            v_Vzd) v_Vnd) abst_equal_transitive) 
                   (v_Vce:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus x 
                                      (abst_plus (abst_opposite x) y)) y))))) =>
                    zen.Rcut 
                      (zen.and 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T 
                                  (abst_plus x 
                                     (abst_plus (abst_opposite x) y)) 
                                  (abst_plus (abst_plus x (abst_opposite x)) 
                                     y)))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus x 
                                        (abst_plus (abst_opposite x) y)) 
                                     (abst_plus 
                                        (abst_plus x (abst_opposite x)) y)))))) 
                      (v_Vhe:
                       (zen.proof 
                          (zen.and 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_plus x 
                                         (abst_plus (abst_opposite x) y)) 
                                      (abst_plus 
                                         (abst_plus x (abst_opposite x)) y)))) 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus x 
                                            (abst_plus (abst_opposite x) y)) 
                                         (abst_plus 
                                            (abst_plus x (abst_opposite x)) y))))))) =>
                       zen.Rand 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T 
                                  (abst_plus x 
                                     (abst_plus (abst_opposite x) y)) 
                                  (abst_plus (abst_plus x (abst_opposite x)) 
                                     y)))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus x 
                                        (abst_plus (abst_opposite x) y)) 
                                     (abst_plus 
                                        (abst_plus x (abst_opposite x)) y))))) 
                         (v_Vie:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_plus x 
                                         (abst_plus (abst_opposite x) y)) 
                                      (abst_plus 
                                         (abst_plus x (abst_opposite x)) y))))) =>
                          v_Vje:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus x 
                                            (abst_plus (abst_opposite x) y)) 
                                         (abst_plus 
                                            (abst_plus x (abst_opposite x)) y)))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus x 
                                        (abst_plus (abst_opposite x) y)) 
                                     (abst_plus 
                                        (abst_plus x (abst_opposite x)) y)))) 
                            __W_1_2_LEMMA v_Vje) v_Vhe) 
                      (v_Vke:
                       (zen.proof 
                          (zen.not 
                             (zen.and 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_plus x 
                                            (abst_plus (abst_opposite x) y)) 
                                         (abst_plus 
                                            (abst_plus x (abst_opposite x)) y)))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus x 
                                               (abst_plus (abst_opposite x) y)) 
                                            (abst_plus 
                                               (abst_plus x (abst_opposite x)) 
                                               y)))))))) =>
                       zen.Rcut 
                         (zen.triangle 
                            (zen.equal abst_T (abst_plus abst_zero y) y)) 
                         (v_Vle:
                          (zen.proof 
                             (zen.triangle 
                                (zen.equal abst_T (abst_plus abst_zero y) y))) =>
                          zen.Rsubst basics.bool__t 
                            (v_Vsd:(zen.term basics.bool__t) =>
                             zen.triangle (focal.is_true v_Vsd)) 
                            (abst_equal 
                               (abst_plus (abst_plus x (abst_opposite x)) y) 
                               (abst_plus abst_zero y)) 
                            (abst_equal 
                               (abst_plus x (abst_plus (abst_opposite x) y)) 
                               y) 
                            (v_Vme:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_plus x (abst_opposite x)) 
                                               y) (abst_plus abst_zero y)) 
                                         (abst_equal 
                                            (abst_plus x 
                                               (abst_plus (abst_opposite x) y)) 
                                            y))))) =>
                             zen.Rsubst abst_T 
                               (v_Vne:(zen.term abst_T) =>
                                zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (abst_equal v_Vne 
                                           (abst_plus abst_zero y)) 
                                        (abst_equal 
                                           (abst_plus x 
                                              (abst_plus (abst_opposite x) y)) 
                                           y)))) 
                               (abst_plus (abst_plus x (abst_opposite x)) y) 
                               (abst_plus x (abst_plus (abst_opposite x) y)) 
                               (v_Voe:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_plus 
                                               (abst_plus x (abst_opposite x)) 
                                               y) 
                                            (abst_plus x 
                                               (abst_plus (abst_opposite x) y)))))) =>
                                zen.Rnotand 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_plus x 
                                              (abst_plus (abst_opposite x) y)) 
                                           (abst_plus 
                                              (abst_plus x (abst_opposite x)) 
                                              y)))) 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus x 
                                                 (abst_plus 
                                                    (abst_opposite x) y)) 
                                              (abst_plus 
                                                 (abst_plus x 
                                                    (abst_opposite x)) y))))) 
                                  (v_Vpe:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus x 
                                                     (abst_plus 
                                                        (abst_opposite x) y)) 
                                                  (abst_plus 
                                                     (abst_plus x 
                                                        (abst_opposite x)) y)))))) =>
                                   zen.Rnotnot 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_plus x 
                                              (abst_plus (abst_opposite x) y)) 
                                           (abst_plus 
                                              (abst_plus x (abst_opposite x)) 
                                              y))) 
                                     (v_Vqe:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus x 
                                                  (abst_plus 
                                                     (abst_opposite x) y)) 
                                               (abst_plus 
                                                  (abst_plus x 
                                                     (abst_opposite x)) y)))) =>
                                      zen.Rcut 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus x 
                                                 (abst_plus 
                                                    (abst_opposite x) y)) 
                                              (abst_plus x 
                                                 (abst_plus 
                                                    (abst_opposite x) y)))) 
                                        (v_Vre:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus x 
                                                     (abst_plus 
                                                        (abst_opposite x) y)) 
                                                  (abst_plus x 
                                                     (abst_plus 
                                                        (abst_opposite x) y))))) =>
                                         zen.Rsubst abst_T 
                                           (v_Vse:(zen.term abst_T) =>
                                            zen.triangle 
                                              (zen.equal abst_T v_Vse 
                                                 (abst_plus x 
                                                    (abst_plus 
                                                       (abst_opposite x) y)))) 
                                           (abst_plus x 
                                              (abst_plus (abst_opposite x) y)) 
                                           (abst_plus 
                                              (abst_plus x (abst_opposite x)) 
                                              y) 
                                           (v_Vie:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_plus x 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) y)) 
                                                        (abst_plus 
                                                           (abst_plus x 
                                                              (abst_opposite 
                                                                 x)) y))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_plus x 
                                                       (abst_plus 
                                                          (abst_opposite x) y)) 
                                                    (abst_plus 
                                                       (abst_plus x 
                                                          (abst_opposite x)) 
                                                       y))) v_Vqe v_Vie) 
                                           (v_Vte:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus 
                                                        (abst_plus x 
                                                           (abst_opposite x)) 
                                                        y) 
                                                     (abst_plus x 
                                                        (abst_plus 
                                                           (abst_opposite x) 
                                                           y))))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vue:(zen.term abst_T) =>
                                               zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_plus 
                                                       (abst_plus x 
                                                          (abst_opposite x)) 
                                                       y) v_Vue)) 
                                              (abst_plus x 
                                                 (abst_plus 
                                                    (abst_opposite x) y)) 
                                              (abst_plus x 
                                                 (abst_plus 
                                                    (abst_opposite x) y)) 
                                              (v_Vve:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_plus x 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) y)) 
                                                           (abst_plus x 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) y)))))) =>
                                               zen.Rnoteq abst_T 
                                                 (abst_plus x 
                                                    (abst_plus 
                                                       (abst_opposite x) y)) 
                                                 v_Vve) 
                                              (v_Vte0:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_plus 
                                                           (abst_plus x 
                                                              (abst_opposite 
                                                                 x)) y) 
                                                        (abst_plus x 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) y))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_plus 
                                                          (abst_plus x 
                                                             (abst_opposite x)) 
                                                          y) 
                                                       (abst_plus x 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             y)))) v_Vte0 
                                                 v_Voe) v_Vte) v_Vre) 
                                        (v_Vve:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus x 
                                                        (abst_plus 
                                                           (abst_opposite x) 
                                                           y)) 
                                                     (abst_plus x 
                                                        (abst_plus 
                                                           (abst_opposite x) 
                                                           y)))))) =>
                                         zen.Rnoteq abst_T 
                                           (abst_plus x 
                                              (abst_plus (abst_opposite x) y)) 
                                           v_Vve)) v_Vpe) 
                                  (v_Vwe:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus x 
                                                        (abst_plus 
                                                           (abst_opposite x) 
                                                           y)) 
                                                     (abst_plus 
                                                        (abst_plus x 
                                                           (abst_opposite x)) 
                                                        y))))))) =>
                                   zen.Rnotnot 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus x 
                                                 (abst_plus 
                                                    (abst_opposite x) y)) 
                                              (abst_plus 
                                                 (abst_plus x 
                                                    (abst_opposite x)) y)))) 
                                     (__W_1_2_LEMMA0:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus x 
                                                     (abst_plus 
                                                        (abst_opposite x) y)) 
                                                  (abst_plus 
                                                     (abst_plus x 
                                                        (abst_opposite x)) y))))) =>
                                      zen.Rall abst_T 
                                        (v_Vkd:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vld:(zen.term abst_T) =>
                                            zen.forall abst_T 
                                              (v_Vmd:(zen.term abst_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vkd 
                                                          v_Vld))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vld 
                                                             v_Vmd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vkd 
                                                             v_Vmd))))))) 
                                        (abst_plus x 
                                           (abst_plus (abst_opposite x) y)) 
                                        (v_Vxe:
                                         (zen.proof 
                                            (zen.forall abst_T 
                                               (v_Vld:(zen.term abst_T) =>
                                                zen.forall abst_T 
                                                  (v_Vmd:(zen.term abst_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus x 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) y)) 
                                                              v_Vld))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Vld v_Vmd))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                 v_Vmd)))))))) =>
                                         zen.Rall abst_T 
                                           (v_Vld:(zen.term abst_T) =>
                                            zen.forall abst_T 
                                              (v_Vmd:(zen.term abst_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) y)) 
                                                          v_Vld))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vld 
                                                             v_Vmd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    x) y)) 
                                                             v_Vmd)))))) 
                                           (abst_plus 
                                              (abst_plus x (abst_opposite x)) 
                                              y) 
                                           (v_Vye:
                                            (zen.proof 
                                               (zen.forall abst_T 
                                                  (v_Vmd:(zen.term abst_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus x 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) y)) 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_opposite 
                                                                    x)) y)))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) y) 
                                                                 v_Vmd))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                 v_Vmd))))))) =>
                                            zen.Rall abst_T 
                                              (v_Vmd:(zen.term abst_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) y)) 
                                                          (abst_plus 
                                                             (abst_plus x 
                                                                (abst_opposite 
                                                                   x)) y)))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   (abst_opposite 
                                                                    x)) y) 
                                                             v_Vmd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    x) y)) 
                                                             v_Vmd))))) 
                                              (abst_plus abst_zero y) 
                                              (v_Vze:
                                               (zen.proof 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus x 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) y)) 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_opposite 
                                                                    x)) y)))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) y) 
                                                                 (abst_plus 
                                                                    abst_zero 
                                                                    y)))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                 (abst_plus 
                                                                    abst_zero 
                                                                    y))))))) =>
                                               zen.Rimply 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) y)) 
                                                          (abst_plus 
                                                             (abst_plus x 
                                                                (abst_opposite 
                                                                   x)) y)))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   (abst_opposite 
                                                                    x)) y) 
                                                             (abst_plus 
                                                                abst_zero y)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    x) y)) 
                                                             (abst_plus 
                                                                abst_zero y))))) 
                                                 (v_Vje:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) y)))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    x) y)) 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   (abst_opposite 
                                                                    x)) y)))) 
                                                    __W_1_2_LEMMA0 v_Vje) 
                                                 (v_Vaf:
                                                  (zen.proof 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) y) 
                                                                 (abst_plus 
                                                                    abst_zero 
                                                                    y)))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                 (abst_plus 
                                                                    abst_zero 
                                                                    y)))))) =>
                                                  zen.Rimply 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   (abst_opposite 
                                                                    x)) y) 
                                                             (abst_plus 
                                                                abst_zero y)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    x) y)) 
                                                             (abst_plus 
                                                                abst_zero y)))) 
                                                    (v_Vbf:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) y) 
                                                                    (
                                                                    abst_plus 
                                                                    abst_zero 
                                                                    y)))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) y) 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   y)))) 
                                                       __W_1_3_LEMMA v_Vbf) 
                                                    (v_Vcf:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                 (abst_plus 
                                                                    abst_zero 
                                                                    y))))) =>
                                                     zen.Rsubst 
                                                       basics.bool__t 
                                                       (v_Vsd:
                                                        (zen.term 
                                                           basics.bool__t) =>
                                                        zen.triangle 
                                                          (focal.is_true 
                                                             v_Vsd)) 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) y)) 
                                                          (abst_plus 
                                                             abst_zero y)) 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) y)) y) 
                                                       (v_Vdf:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y)) 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) y))))) =>
                                                        zen.Rsubst abst_T 
                                                          (v_Vne:
                                                           (zen.term abst_T) =>
                                                           zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_equal 
                                                                    v_Vne 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y)) 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) y)))) 
                                                          (abst_plus x 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) y)) 
                                                          (abst_plus x 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) y)) 
                                                          (v_Vve:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)))))) =>
                                                           zen.Rnoteq abst_T 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    x) y)) 
                                                             v_Vve) 
                                                          (v_Vdf0:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) y))))) =>
                                                           zen.Rsubst abst_T 
                                                             (v_Vef:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                    v_Vef) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) y)))) 
                                                             (abst_plus 
                                                                abst_zero y) 
                                                             y 
                                                             (v_Vff:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y) y)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y) y)) 
                                                                v_Vle v_Vff) 
                                                             (v_Vgf:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) y) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) y))))) =>
                                                              zen.Rnoteq 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) y) 
                                                                v_Vgf) v_Vdf0) 
                                                          v_Vdf) 
                                                       (v_Vyd:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) y)))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) y))) 
                                                          v_Vyd v_Vce) v_Vcf) 
                                                    v_Vaf) v_Vze) v_Vye) 
                                           v_Vxe) abst_equal_transitive) 
                                     v_Vwe) v_Vke) 
                               (v_Vdf:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (abst_equal 
                                               (abst_plus x 
                                                  (abst_plus 
                                                     (abst_opposite x) y)) 
                                               (abst_plus abst_zero y)) 
                                            (abst_equal 
                                               (abst_plus x 
                                                  (abst_plus 
                                                     (abst_opposite x) y)) y))))) =>
                                zen.Rsubst abst_T 
                                  (v_Vef:(zen.term abst_T) =>
                                   zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (abst_equal 
                                              (abst_plus x 
                                                 (abst_plus 
                                                    (abst_opposite x) y)) 
                                              v_Vef) 
                                           (abst_equal 
                                              (abst_plus x 
                                                 (abst_plus 
                                                    (abst_opposite x) y)) y)))) 
                                  (abst_plus abst_zero y) y 
                                  (v_Vff:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus abst_zero y) y)))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_plus abst_zero y) y)) v_Vle 
                                     v_Vff) 
                                  (v_Vgf:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (abst_equal 
                                                  (abst_plus x 
                                                     (abst_plus 
                                                        (abst_opposite x) y)) 
                                                  y) 
                                               (abst_equal 
                                                  (abst_plus x 
                                                     (abst_plus 
                                                        (abst_opposite x) y)) 
                                                  y))))) =>
                                   zen.Rnoteq basics.bool__t 
                                     (abst_equal 
                                        (abst_plus x 
                                           (abst_plus (abst_opposite x) y)) y) 
                                     v_Vgf) v_Vdf) v_Vme) 
                            (v_Vyd:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus x 
                                            (abst_plus (abst_opposite x) y)) 
                                         y)))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus x 
                                           (abst_plus (abst_opposite x) y)) y))) 
                               v_Vyd v_Vce) __W_1_3_LEMMA) 
                         (v_Vff:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T (abst_plus abst_zero y) 
                                      y)))) =>
                          zen.Rcut 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_plus abst_zero y) y))) 
                            (v_Vhf:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus abst_zero y) y)))) =>
                             zen.Rall abst_T 
                               (v_Vkd:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vld:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vmd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vkd v_Vld))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vld v_Vmd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vkd v_Vmd))))))) 
                               (abst_plus (abst_plus x (abst_opposite x)) y) 
                               (v_Vif:
                                (zen.proof 
                                   (zen.forall abst_T 
                                      (v_Vld:(zen.term abst_T) =>
                                       zen.forall abst_T 
                                         (v_Vmd:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_plus x 
                                                           (abst_opposite x)) 
                                                        y) v_Vld))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vld v_Vmd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus x 
                                                              (abst_opposite 
                                                                 x)) y) v_Vmd)))))))) =>
                                zen.Rall abst_T 
                                  (v_Vld:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vmd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus 
                                                    (abst_plus x 
                                                       (abst_opposite x)) y) 
                                                 v_Vld))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vld v_Vmd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_plus x 
                                                          (abst_opposite x)) 
                                                       y) v_Vmd)))))) 
                                  (abst_plus abst_zero y) 
                                  (v_Vjf:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vmd:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_plus x 
                                                           (abst_opposite x)) 
                                                        y) 
                                                     (abst_plus abst_zero y)))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus abst_zero 
                                                           y) v_Vmd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus x 
                                                              (abst_opposite 
                                                                 x)) y) v_Vmd))))))) =>
                                   zen.Rall abst_T 
                                     (v_Vmd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus 
                                                    (abst_plus x 
                                                       (abst_opposite x)) y) 
                                                 (abst_plus abst_zero y)))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus abst_zero y) 
                                                    v_Vmd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_plus x 
                                                          (abst_opposite x)) 
                                                       y) v_Vmd))))) y 
                                     (v_Vkf:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_plus x 
                                                           (abst_opposite x)) 
                                                        y) 
                                                     (abst_plus abst_zero y)))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus abst_zero 
                                                           y) y))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus x 
                                                              (abst_opposite 
                                                                 x)) y) y)))))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus 
                                                    (abst_plus x 
                                                       (abst_opposite x)) y) 
                                                 (abst_plus abst_zero y)))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus abst_zero y) y))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_plus x 
                                                          (abst_opposite x)) 
                                                       y) y)))) 
                                        (v_Vbf:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus x 
                                                              (abst_opposite 
                                                                 x)) y) 
                                                        (abst_plus abst_zero 
                                                           y)))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_plus x 
                                                          (abst_opposite x)) 
                                                       y) 
                                                    (abst_plus abst_zero y)))) 
                                           __W_1_3_LEMMA v_Vbf) 
                                        (v_Vlf:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus abst_zero 
                                                           y) y))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus x 
                                                              (abst_opposite 
                                                                 x)) y) y))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus abst_zero y) y))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_plus x 
                                                          (abst_opposite x)) 
                                                       y) y))) 
                                           (v_Vmf:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              abst_zero y) y))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus abst_zero y) 
                                                       y))) v_Vhf v_Vmf) 
                                           (v_Vnf:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus x 
                                                              (abst_opposite 
                                                                 x)) y) y)))) =>
                                            zen.Rsubst basics.bool__t 
                                              (v_Vsd:
                                               (zen.term basics.bool__t) =>
                                               zen.triangle 
                                                 (focal.is_true v_Vsd)) 
                                              (abst_equal 
                                                 (abst_plus 
                                                    (abst_plus x 
                                                       (abst_opposite x)) y) 
                                                 y) 
                                              (abst_equal 
                                                 (abst_plus x 
                                                    (abst_plus 
                                                       (abst_opposite x) y)) 
                                                 y) 
                                              (v_Vof:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_opposite 
                                                                    x)) y) y) 
                                                           (abst_equal 
                                                              (abst_plus x 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) y)) y))))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Vde:(zen.term abst_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal v_Vde y) 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    x) y)) y)))) 
                                                 (abst_plus 
                                                    (abst_plus x 
                                                       (abst_opposite x)) y) 
                                                 (abst_plus x 
                                                    (abst_plus 
                                                       (abst_opposite x) y)) 
                                                 (v_Voe:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_opposite 
                                                                    x)) y) 
                                                              (abst_plus x 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) y)))))) =>
                                                  zen.Rnotand 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    x) y)) 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   (abst_opposite 
                                                                    x)) y)))) 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus x 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) y))))) 
                                                    (v_Vpe:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) y)))))) =>
                                                     zen.Rnotnot 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    x) y)) 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   (abst_opposite 
                                                                    x)) y))) 
                                                       (v_Vqe:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) y)))) =>
                                                        zen.Reqsym abst_T 
                                                          (abst_plus x 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) y)) 
                                                          (abst_plus 
                                                             (abst_plus x 
                                                                (abst_opposite 
                                                                   x)) y) 
                                                          v_Vqe v_Voe) v_Vpe) 
                                                    (v_Vwe:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) y))))))) =>
                                                     zen.Rnotnot 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus x 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) y)))) 
                                                       (__W_1_2_LEMMA0:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) y))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vkd:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vld:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.forall 
                                                                abst_T 
                                                                (v_Vmd:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                          (abst_plus x 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) y)) 
                                                          (v_Vxe:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 abst_T 
                                                                 (v_Vld:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.forall 
                                                                    abst_T 
                                                                    (
                                                                    v_Vmd:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                    v_Vmd)))))))) =>
                                                           zen.Rall abst_T 
                                                             (v_Vld:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.forall 
                                                                abst_T 
                                                                (v_Vmd:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                    v_Vld))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                    v_Vmd)))))) 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   (abst_opposite 
                                                                    x)) y) 
                                                             (v_Vye:
                                                              (zen.proof 
                                                                 (zen.forall 
                                                                    abst_T 
                                                                    (
                                                                    v_Vmd:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) y)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) y) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                    v_Vmd))))))) =>
                                                              zen.Rall 
                                                                abst_T 
                                                                (v_Vmd:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) y)))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) y) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                    v_Vmd))))) 
                                                                y 
                                                                (v_Vpf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) y)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) y) y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) y)))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) y)))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) y) y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) y)))) 
                                                                   (v_Vje:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) y)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) y)))) 
                                                                    __W_1_2_LEMMA0 
                                                                    v_Vje) 
                                                                   (v_Vqf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) y) y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) y))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) y) y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) y))) 
                                                                    (v_Vrf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) y) y))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) y) y))) 
                                                                    v_Vnf 
                                                                    v_Vrf) 
                                                                    (v_Vyd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) y)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) y))) 
                                                                    v_Vyd 
                                                                    v_Vce) 
                                                                    v_Vqf) 
                                                                   v_Vpf) 
                                                                v_Vye) v_Vxe) 
                                                          abst_equal_transitive) 
                                                       v_Vwe) v_Vke) 
                                                 (v_Vgf:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) y) 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) y))))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Vef:
                                                     (zen.term abst_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                (abst_plus x 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) 
                                                                v_Vef) 
                                                             (abst_equal 
                                                                (abst_plus x 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) y)))) 
                                                    y y 
                                                    (v_Vge:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T y y)))) =>
                                                     zen.Rnoteq abst_T y 
                                                       v_Vge) 
                                                    (v_Vgf0:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) y) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) y)) y))))) =>
                                                     zen.Rnoteq 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) y)) y) 
                                                       v_Vgf0) v_Vgf) v_Vof) 
                                              (v_Vyd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus x 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) y)) y)))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) y)) y))) 
                                                 v_Vyd v_Vce) v_Vnf) v_Vlf) 
                                        v_Vkf) v_Vjf) v_Vif) 
                               abst_equal_transitive) 
                            (v_Vmf:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_plus abst_zero y) 
                                            y))))) =>
                             zen.Rall abst_T 
                               (v_Vkd:(zen.term abst_T) =>
                                zen.and 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus v_Vkd abst_zero) v_Vkd))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus abst_zero v_Vkd) v_Vkd)))) 
                               y 
                               (v_Vsf:
                                (zen.proof 
                                   (zen.and 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus y abst_zero) y))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus abst_zero y) y))))) =>
                                zen.Rand 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_plus y abst_zero) y))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_plus abst_zero y) y))) 
                                  (v_Vtf:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus y abst_zero) y)))) =>
                                   v_Vhf:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus abst_zero y) y)))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus abst_zero y) y))) 
                                     v_Vhf v_Vmf) v_Vsf) abst_zero_is_neutral)))))))) 
         (zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (abst_equal (abst_plus (abst_plus x (abst_opposite x)) y) 
                     (abst_plus abst_zero y)))) 
            (v_Vzb:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal 
                            (abst_plus (abst_plus x (abst_opposite x)) y) 
                            (abst_plus abst_zero y)))))) =>
             zen.Rall abst_T 
               (v_Vac:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vbc:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vcc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Vac v_Vbc))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_plus v_Vac v_Vcc) 
                                 (abst_plus v_Vbc v_Vcc))))))) 
               (abst_plus x (abst_opposite x)) 
               (v_Vdc:
                (zen.proof 
                   (zen.forall abst_T 
                      (v_Vbc:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vcc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus x (abst_opposite x)) v_Vbc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus 
                                        (abst_plus x (abst_opposite x)) v_Vcc) 
                                     (abst_plus v_Vbc v_Vcc)))))))) =>
                zen.Rall abst_T 
                  (v_Vbc:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vcc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_plus x (abst_opposite x)) 
                                 v_Vbc))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus (abst_plus x (abst_opposite x)) 
                                    v_Vcc) (abst_plus v_Vbc v_Vcc)))))) 
                  abst_zero 
                  (v_Vec:
                   (zen.proof 
                      (zen.forall abst_T 
                         (v_Vcc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus x (abst_opposite x)) 
                                     abst_zero))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus 
                                        (abst_plus x (abst_opposite x)) v_Vcc) 
                                     (abst_plus abst_zero v_Vcc))))))) =>
                   zen.Rall abst_T 
                     (v_Vcc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_plus x (abst_opposite x)) 
                                 abst_zero))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus (abst_plus x (abst_opposite x)) 
                                    v_Vcc) (abst_plus abst_zero v_Vcc))))) y 
                     (v_Vfc:
                      (zen.proof 
                         (zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus x (abst_opposite x)) 
                                     abst_zero))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus 
                                        (abst_plus x (abst_opposite x)) y) 
                                     (abst_plus abst_zero y)))))) =>
                      zen.Rimply 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_plus x (abst_opposite x)) 
                                 abst_zero))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus (abst_plus x (abst_opposite x)) y) 
                                 (abst_plus abst_zero y)))) 
                        (v_Vgc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus x (abst_opposite x)) 
                                        abst_zero))))) =>
                         zen.Rall abst_T 
                           (v_Vac:(zen.term abst_T) =>
                            zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_plus v_Vac (abst_opposite v_Vac)) 
                                    abst_zero))) x 
                           (v_Vhc:
                            (zen.proof 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus x (abst_opposite x)) 
                                        abst_zero)))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus x (abst_opposite x)) 
                                       abst_zero))) v_Vhc v_Vgc) 
                           abst_opposite_is_opposite) 
                        (v_Vic:
                         (zen.proof 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus 
                                        (abst_plus x (abst_opposite x)) y) 
                                     (abst_plus abst_zero y))))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_plus 
                                       (abst_plus x (abst_opposite x)) y) 
                                    (abst_plus abst_zero y)))) v_Vic v_Vzb) 
                        v_Vfc) v_Vec) v_Vdc) abst_plus_left_substitution_rule))) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true 
                 (abst_equal (abst_plus x (abst_plus (abst_opposite x) y)) 
                    (abst_plus (abst_plus x (abst_opposite x)) y)))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal 
                           (abst_plus x (abst_plus (abst_opposite x) y)) 
                           (abst_plus (abst_plus x (abst_opposite x)) y)))))) =>
            zen.Rall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (abst_equal 
                             (abst_plus v_Vac (abst_plus v_Vbc v_Vcc)) 
                             (abst_plus (abst_plus v_Vac v_Vbc) v_Vcc)))))) 
              x 
              (v_Vdc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus x (abst_plus v_Vbc v_Vcc)) 
                                 (abst_plus (abst_plus x v_Vbc) v_Vcc))))))) =>
               zen.Rall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_plus x (abst_plus v_Vbc v_Vcc)) 
                             (abst_plus (abst_plus x v_Vbc) v_Vcc))))) 
                 (abst_opposite x) 
                 (v_Vec:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus x 
                                    (abst_plus (abst_opposite x) v_Vcc)) 
                                 (abst_plus (abst_plus x (abst_opposite x)) 
                                    v_Vcc)))))) =>
                  zen.Rall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (abst_equal 
                             (abst_plus x (abst_plus (abst_opposite x) v_Vcc)) 
                             (abst_plus (abst_plus x (abst_opposite x)) v_Vcc)))) 
                    y 
                    (v_Vfc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus x (abst_plus (abst_opposite x) y)) 
                                 (abst_plus (abst_plus x (abst_opposite x)) y))))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus x (abst_plus (abst_opposite x) y)) 
                                (abst_plus (abst_plus x (abst_opposite x)) y)))) 
                       v_Vfc v_Vzb) v_Vec) v_Vdc) abst_plus_is_associative))) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (abst_equal (abst_plus x (abst_plus y (abst_opposite x))) 
                   (abst_plus x (abst_plus (abst_opposite x) y))))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal 
                          (abst_plus x (abst_plus y (abst_opposite x))) 
                          (abst_plus x (abst_plus (abst_opposite x) y))))))) =>
           zen.Rall abst_T 
             (v_Vac:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.imp 
                      (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus v_Vcc v_Vac) 
                               (abst_plus v_Vcc v_Vbc))))))) 
             (abst_plus y (abst_opposite x)) 
             (v_Vdc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus y (abst_opposite x)) 
                                   v_Vbc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus v_Vcc 
                                      (abst_plus y (abst_opposite x))) 
                                   (abst_plus v_Vcc v_Vbc)))))))) =>
              zen.Rall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.imp 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus y (abst_opposite x)) v_Vbc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_plus v_Vcc 
                                  (abst_plus y (abst_opposite x))) 
                               (abst_plus v_Vcc v_Vbc)))))) 
                (abst_plus (abst_opposite x) y) 
                (v_Vec:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus y (abst_opposite x)) 
                                   (abst_plus (abst_opposite x) y)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus v_Vcc 
                                      (abst_plus y (abst_opposite x))) 
                                   (abst_plus v_Vcc 
                                      (abst_plus (abst_opposite x) y)))))))) =>
                 zen.Rall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.imp 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus y (abst_opposite x)) 
                               (abst_plus (abst_opposite x) y)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_plus v_Vcc 
                                  (abst_plus y (abst_opposite x))) 
                               (abst_plus v_Vcc 
                                  (abst_plus (abst_opposite x) y)))))) x 
                   (v_Vfc:
                    (zen.proof 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus y (abst_opposite x)) 
                                   (abst_plus (abst_opposite x) y)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus x 
                                      (abst_plus y (abst_opposite x))) 
                                   (abst_plus x 
                                      (abst_plus (abst_opposite x) y))))))) =>
                    zen.Rimply 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus y (abst_opposite x)) 
                               (abst_plus (abst_opposite x) y)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_plus x (abst_plus y (abst_opposite x))) 
                               (abst_plus x (abst_plus (abst_opposite x) y))))) 
                      (v_Vgc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus y (abst_opposite x)) 
                                      (abst_plus (abst_opposite x) y)))))) =>
                       zen.Rall abst_T 
                         (v_Vac:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vbc:(zen.term abst_T) =>
                             zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_plus v_Vac v_Vbc) 
                                     (abst_plus v_Vbc v_Vac))))) y 
                         (v_Vhc:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vbc:(zen.term abst_T) =>
                                 zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus y v_Vbc) 
                                         (abst_plus v_Vbc y)))))) =>
                          zen.Rall abst_T 
                            (v_Vbc:(zen.term abst_T) =>
                             zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_plus y v_Vbc) 
                                     (abst_plus v_Vbc y)))) 
                            (abst_opposite x) 
                            (v_Vic:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus y (abst_opposite x)) 
                                         (abst_plus (abst_opposite x) y))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus y (abst_opposite x)) 
                                        (abst_plus (abst_opposite x) y)))) 
                               v_Vic v_Vgc) v_Vhc) abst_plus_commutes) 
                      (v_Vjc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus x 
                                      (abst_plus y (abst_opposite x))) 
                                   (abst_plus x 
                                      (abst_plus (abst_opposite x) y)))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus x 
                                     (abst_plus y (abst_opposite x))) 
                                  (abst_plus x 
                                     (abst_plus (abst_opposite x) y))))) 
                         v_Vjc v_Vzb) v_Vfc) v_Vec) v_Vdc) 
             abst_plus_right_substitution_rule))).

def Additive_group__plus_is_left_regular :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (abst_equal x y)) 
                                   (dk_logic.ebP (abst_equal y x)))))) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_plus_commutes:(dk_logic.eP 
                        (dk_logic.forall abst_T 
                           (x:(cc.eT abst_T) =>
                            dk_logic.forall abst_T 
                              (y:(cc.eT abst_T) =>
                               dk_logic.ebP 
                                 (abst_equal (abst_plus x y) (abst_plus y x)))))) ->
  abst_plus_is_associative:(dk_logic.eP 
                              (dk_logic.forall abst_T 
                                 (x:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (y:(cc.eT abst_T) =>
                                     dk_logic.forall abst_T 
                                       (z:(cc.eT abst_T) =>
                                        dk_logic.ebP 
                                          (abst_equal 
                                             (abst_plus x (abst_plus y z)) 
                                             (abst_plus (abst_plus x y) z))))))) ->
  abst_plus_right_substitution_rule:(dk_logic.eP 
                                       (dk_logic.forall abst_T 
                                          (x:(cc.eT abst_T) =>
                                           dk_logic.forall abst_T 
                                             (y:(cc.eT abst_T) =>
                                              dk_logic.forall abst_T 
                                                (z:(cc.eT abst_T) =>
                                                 dk_logic.imp 
                                                   (dk_logic.ebP 
                                                      (abst_equal x y)) 
                                                   (dk_logic.ebP 
                                                      (abst_equal 
                                                         (abst_plus z x) 
                                                         (abst_plus z y)))))))) ->
  abst_opposite_is_opposite:(dk_logic.eP 
                               (dk_logic.forall abst_T 
                                  (x:(cc.eT abst_T) =>
                                   dk_logic.ebP 
                                     (abst_equal 
                                        (abst_plus x (abst_opposite x)) 
                                        abst_zero)))) ->
  abst_zero_is_neutral:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.and 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus x abst_zero) x)) 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus abst_zero x) x))))) ->
  abst_plus_left_substitution_rule:(dk_logic.eP 
                                      (dk_logic.forall abst_T 
                                         (x:(cc.eT abst_T) =>
                                          dk_logic.forall abst_T 
                                            (y:(cc.eT abst_T) =>
                                             dk_logic.forall abst_T 
                                               (z:(cc.eT abst_T) =>
                                                dk_logic.imp 
                                                  (dk_logic.ebP 
                                                     (abst_equal x y)) 
                                                  (dk_logic.ebP 
                                                     (abst_equal 
                                                        (abst_plus x z) 
                                                        (abst_plus y z)))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp 
                (dk_logic.ebP (abst_equal (abst_plus x y) (abst_plus x z))) 
                (dk_logic.ebP (abst_equal y z))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal y x)))))) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_plus_commutes:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.ebP (abst_equal (abst_plus x y) (abst_plus y x)))))) =>
  abst_plus_is_associative:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.ebP 
                 (abst_equal (abst_plus x (abst_plus y z)) 
                    (abst_plus (abst_plus x y) z))))))) =>
  abst_plus_right_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.ebP (abst_equal (abst_plus z x) (abst_plus z y)))))))) =>
  abst_opposite_is_opposite:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.ebP (abst_equal (abst_plus x (abst_opposite x)) abst_zero)))) =>
  abst_zero_is_neutral:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.and (dk_logic.ebP (abst_equal (abst_plus x abst_zero) x)) 
           (dk_logic.ebP (abst_equal (abst_plus abst_zero x) x))))) =>
  abst_plus_left_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.ebP (abst_equal (abst_plus x z) (abst_plus y z)))))))) =>
  (__X_1_LEMMA:
   (x:(cc.eT abst_T) ->
    y:(cc.eT abst_T) ->
    z:(cc.eT abst_T) ->
    H:(dk_logic.eP 
         (dk_logic.ebP (abst_equal (abst_plus x y) (abst_plus x z)))) ->
    dk_logic.eP (dk_logic.ebP (abst_equal y z))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_plus v_Vzb v_Vac) 
                          (abst_plus v_Vzb v_Vbc)))) 
                 (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))))))) 
     (v_Vcc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_plus v_Vzb v_Vac) 
                                 (abst_plus v_Vzb v_Vbc)))) 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Vac v_Vbc))))))))) =>
      zen.Raxiom 
        (zen.forall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_plus v_Vzb v_Vac) 
                             (abst_plus v_Vzb v_Vbc)))) 
                    (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))))))) 
        __X_1_LEMMA v_Vcc)) 
    (x:(cc.eT abst_T) =>
     y:(cc.eT abst_T) =>
     z:(cc.eT abst_T) =>
     H:
     (dk_logic.eP (dk_logic.ebP (abst_equal (abst_plus x y) (abst_plus x z)))) =>
     (__X_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (abst_equal (abst_plus (abst_opposite x) (abst_plus x y)) 
               (abst_plus (abst_opposite x) (abst_plus x z))))) =>
      (__X_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP 
             (abst_equal (abst_plus (abst_opposite x) (abst_plus x y)) 
                (abst_plus (abst_plus (abst_opposite x) x) y)))) =>
       (__X_1_3_LEMMA:
        (dk_logic.eP 
           (dk_logic.ebP 
              (abst_equal (abst_plus x (abst_opposite x)) abst_zero))) =>
        (__X_1_4_LEMMA:
         (dk_logic.eP 
            (dk_logic.ebP 
               (abst_equal (abst_plus (abst_opposite x) x) abst_zero))) =>
         (__X_1_5_LEMMA:
          (dk_logic.eP 
             (dk_logic.ebP 
                (abst_equal (abst_plus (abst_plus (abst_opposite x) x) y) 
                   (abst_plus abst_zero y)))) =>
          (__X_1_6_LEMMA:
           (dk_logic.eP (dk_logic.ebP (abst_equal (abst_plus abst_zero y) y))) =>
           (__X_1_7_LEMMA:
            (dk_logic.eP 
               (dk_logic.ebP 
                  (abst_equal (abst_plus (abst_opposite x) (abst_plus x y)) y))) =>
            (__X_1_8_LEMMA:
             (dk_logic.eP 
                (dk_logic.ebP 
                   (abst_equal (abst_plus (abst_opposite x) (abst_plus x z)) 
                      z))) =>
             zen.nnpp (zen.triangle (focal.is_true (abst_equal y z))) 
               (v_Vvc:
                (zen.proof 
                   (zen.not (zen.triangle (focal.is_true (abst_equal y z))))) =>
                zen.Rall abst_T 
                  (v_Vwc:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vxc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Vwc v_Vxc))) 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Vxc v_Vwc))))) z 
                  (v_Vyc:
                   (zen.proof 
                      (zen.forall abst_T 
                         (v_Vxc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true (abst_equal z v_Vxc))) 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vxc z)))))) =>
                   zen.Rall abst_T 
                     (v_Vxc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle (focal.is_true (abst_equal z v_Vxc))) 
                        (zen.triangle (focal.is_true (abst_equal v_Vxc z)))) 
                     y 
                     (v_Vzc:
                      (zen.proof 
                         (zen.imp 
                            (zen.triangle (focal.is_true (abst_equal z y))) 
                            (zen.triangle (focal.is_true (abst_equal y z))))) =>
                      zen.Rimply 
                        (zen.triangle (focal.is_true (abst_equal z y))) 
                        (zen.triangle (focal.is_true (abst_equal y z))) 
                        (v_Vad:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle (focal.is_true (abst_equal z y))))) =>
                         zen.Rcut 
                           (zen.and 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal abst_T z 
                                       (abst_plus (abst_opposite x) 
                                          (abst_plus x y))))) 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal z 
                                          (abst_plus (abst_opposite x) 
                                             (abst_plus x y))))))) 
                           (v_Vbd:
                            (zen.proof 
                               (zen.and 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal abst_T z 
                                           (abst_plus (abst_opposite x) 
                                              (abst_plus x y))))) 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal z 
                                              (abst_plus (abst_opposite x) 
                                                 (abst_plus x y)))))))) =>
                            zen.Rand 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal abst_T z 
                                       (abst_plus (abst_opposite x) 
                                          (abst_plus x y))))) 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal z 
                                          (abst_plus (abst_opposite x) 
                                             (abst_plus x y)))))) 
                              (v_Vcd:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal abst_T z 
                                           (abst_plus (abst_opposite x) 
                                              (abst_plus x y)))))) =>
                               v_Vdd:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal z 
                                              (abst_plus (abst_opposite x) 
                                                 (abst_plus x y))))))) =>
                               zen.Rall abst_T 
                                 (v_Vwc:(zen.term abst_T) =>
                                  zen.forall abst_T 
                                    (v_Vxc:(zen.term abst_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vwc v_Vxc))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vxc v_Vwc))))) 
                                 (abst_plus (abst_opposite x) (abst_plus x y)) 
                                 (v_Ved:
                                  (zen.proof 
                                     (zen.forall abst_T 
                                        (v_Vxc:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_opposite x) 
                                                       (abst_plus x y)) v_Vxc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vxc 
                                                    (abst_plus 
                                                       (abst_opposite x) 
                                                       (abst_plus x y)))))))) =>
                                  zen.Rall abst_T 
                                    (v_Vxc:(zen.term abst_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus (abst_opposite x) 
                                                   (abst_plus x y)) v_Vxc))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vxc 
                                                (abst_plus (abst_opposite x) 
                                                   (abst_plus x y)))))) z 
                                    (v_Vfd:
                                     (zen.proof 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_opposite x) 
                                                       (abst_plus x y)) z))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal z 
                                                    (abst_plus 
                                                       (abst_opposite x) 
                                                       (abst_plus x y))))))) =>
                                     zen.Rimply 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus (abst_opposite x) 
                                                   (abst_plus x y)) z))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal z 
                                                (abst_plus (abst_opposite x) 
                                                   (abst_plus x y))))) 
                                       (v_Vgd:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_plus x y)) z))))) =>
                                        zen.Rcut 
                                          (zen.and 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_plus 
                                                         (abst_opposite x) 
                                                         (abst_plus x y)) 
                                                      (abst_plus 
                                                         (abst_opposite x) 
                                                         (abst_plus x z))))) 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_opposite x) 
                                                            (abst_plus x y)) 
                                                         (abst_plus 
                                                            (abst_opposite x) 
                                                            (abst_plus x z))))))) 
                                          (v_Vhd:
                                           (zen.proof 
                                              (zen.and 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_plus x y)) 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_plus x z))))) 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_plus x 
                                                                   y)) 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_plus x 
                                                                   z)))))))) =>
                                           zen.Rand 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_plus 
                                                         (abst_opposite x) 
                                                         (abst_plus x y)) 
                                                      (abst_plus 
                                                         (abst_opposite x) 
                                                         (abst_plus x z))))) 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_opposite x) 
                                                            (abst_plus x y)) 
                                                         (abst_plus 
                                                            (abst_opposite x) 
                                                            (abst_plus x z)))))) 
                                             (v_Vid:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_plus x y)) 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_plus x z)))))) =>
                                              v_Vjd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_plus x 
                                                                   y)) 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_plus x 
                                                                   z))))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_opposite x) 
                                                            (abst_plus x y)) 
                                                         (abst_plus 
                                                            (abst_opposite x) 
                                                            (abst_plus x z))))) 
                                                __X_1_1_LEMMA v_Vjd) v_Vhd) 
                                          (v_Vkd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.and 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_plus x 
                                                                   y)) 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_plus x 
                                                                   z))))) 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    x) 
                                                                   (abst_plus 
                                                                    x y)) 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    x) 
                                                                   (abst_plus 
                                                                    x z))))))))) =>
                                           zen.Rcut 
                                             (zen.triangle 
                                                (zen.equal abst_T z z)) 
                                             (v_Vld:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (zen.equal abst_T z z))) =>
                                              zen.Rsubst basics.bool__t 
                                                (v_Vmd:
                                                 (zen.term basics.bool__t) =>
                                                 zen.triangle 
                                                   (focal.is_true v_Vmd)) 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_opposite x) 
                                                      (abst_plus x z)) z) 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_opposite x) 
                                                      (abst_plus x y)) z) 
                                                (v_Vnd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    x) 
                                                                   (abst_plus 
                                                                    x z)) z) 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    x) 
                                                                   (abst_plus 
                                                                    x y)) z))))) =>
                                                 zen.Rsubst abst_T 
                                                   (v_Vod:
                                                    (zen.term abst_T) =>
                                                    zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (abst_equal 
                                                               v_Vod z) 
                                                            (abst_equal 
                                                               (abst_plus 
                                                                  (abst_opposite 
                                                                    x) 
                                                                  (abst_plus 
                                                                    x y)) z)))) 
                                                   (abst_plus 
                                                      (abst_opposite x) 
                                                      (abst_plus x z)) 
                                                   (abst_plus 
                                                      (abst_opposite x) 
                                                      (abst_plus x y)) 
                                                   (v_Vpd:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    x) 
                                                                   (abst_plus 
                                                                    x z)) 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    x) 
                                                                   (abst_plus 
                                                                    x y)))))) =>
                                                    zen.Rnotand 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T 
                                                               (abst_plus 
                                                                  (abst_opposite 
                                                                    x) 
                                                                  (abst_plus 
                                                                    x y)) 
                                                               (abst_plus 
                                                                  (abst_opposite 
                                                                    x) 
                                                                  (abst_plus 
                                                                    x z))))) 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                  (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)))))) 
                                                      (v_Vqd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z))))))) =>
                                                       zen.Rnotnot 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T 
                                                               (abst_plus 
                                                                  (abst_opposite 
                                                                    x) 
                                                                  (abst_plus 
                                                                    x y)) 
                                                               (abst_plus 
                                                                  (abst_opposite 
                                                                    x) 
                                                                  (abst_plus 
                                                                    x z)))) 
                                                         (v_Vrd:
                                                          (zen.proof 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z))))) =>
                                                          zen.Rcut 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T 
                                                                  (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                  (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)))) 
                                                            (v_Vsd:
                                                             (zen.proof 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y))))) =>
                                                             zen.Rsubst 
                                                               abst_T 
                                                               (v_Vtd:
                                                                (zen.term 
                                                                   abst_T) =>
                                                                zen.triangle 
                                                                  (zen.equal 
                                                                    abst_T 
                                                                    v_Vtd 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)))) 
                                                               (abst_plus 
                                                                  (abst_opposite 
                                                                    x) 
                                                                  (abst_plus 
                                                                    x y)) 
                                                               (abst_plus 
                                                                  (abst_opposite 
                                                                    x) 
                                                                  (abst_plus 
                                                                    x z)) 
                                                               (v_Vid:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)))) 
                                                                  v_Vrd v_Vid) 
                                                               (v_Vud:
                                                                (zen.proof 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y))))) =>
                                                                zen.Rsubst 
                                                                  abst_T 
                                                                  (v_Vvd:
                                                                   (zen.term 
                                                                    abst_T) =>
                                                                   zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) 
                                                                    v_Vvd)) 
                                                                  (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                  (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                  (v_Vwd:
                                                                   (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)))))) =>
                                                                   zen.Rnoteq 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vwd) 
                                                                  (v_Vud:
                                                                   (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y))))) =>
                                                                   zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)))) 
                                                                    v_Vud 
                                                                    v_Vpd) 
                                                                  v_Vud) 
                                                               v_Vsd) 
                                                            (v_Vwd:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)))))) =>
                                                             zen.Rnoteq 
                                                               abst_T 
                                                               (abst_plus 
                                                                  (abst_opposite 
                                                                    x) 
                                                                  (abst_plus 
                                                                    x y)) 
                                                               v_Vwd)) v_Vqd) 
                                                      (v_Vxd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)))))))) =>
                                                       zen.Rnotnot 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                  (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z))))) 
                                                         (__X_1_1_LEMMA:
                                                          (zen.proof 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)))))) =>
                                                          zen.Rall abst_T 
                                                            (v_Vwc:
                                                             (zen.term abst_T) =>
                                                             zen.forall 
                                                               abst_T 
                                                               (v_Vxc:
                                                                (zen.term 
                                                                   abst_T) =>
                                                                zen.forall 
                                                                  abst_T 
                                                                  (v_Vyd:
                                                                   (zen.term 
                                                                    abst_T) =>
                                                                   zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vwc 
                                                                    v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vxc 
                                                                    v_Vyd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vwc 
                                                                    v_Vyd))))))) 
                                                            (abst_plus 
                                                               (abst_opposite 
                                                                  x) 
                                                               (abst_plus x y)) 
                                                            (v_Vzd:
                                                             (zen.proof 
                                                                (zen.forall 
                                                                   abst_T 
                                                                   (v_Vxc:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vyd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vxc 
                                                                    v_Vyd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vyd)))))))) =>
                                                             zen.Rall abst_T 
                                                               (v_Vxc:
                                                                (zen.term 
                                                                   abst_T) =>
                                                                zen.forall 
                                                                  abst_T 
                                                                  (v_Vyd:
                                                                   (zen.term 
                                                                    abst_T) =>
                                                                   zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vxc 
                                                                    v_Vyd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vyd)))))) 
                                                               (abst_plus 
                                                                  (abst_opposite 
                                                                    x) 
                                                                  (abst_plus 
                                                                    x z)) 
                                                               (v_Vae:
                                                                (zen.proof 
                                                                   (zen.forall 
                                                                    abst_T 
                                                                    (v_Vyd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) 
                                                                    v_Vyd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vyd))))))) =>
                                                                zen.Rall 
                                                                  abst_T 
                                                                  (v_Vyd:
                                                                   (zen.term 
                                                                    abst_T) =>
                                                                   zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) 
                                                                    v_Vyd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vyd))))) 
                                                                  z 
                                                                  (v_Vbe:
                                                                   (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) z))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z)))))) =>
                                                                   zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) z))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z)))) 
                                                                    (v_Vjd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z))))) 
                                                                    __X_1_1_LEMMA 
                                                                    v_Vjd) 
                                                                    (v_Vce:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) z))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) z))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z))) 
                                                                    (v_Vde:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) z))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) z))) 
                                                                    __X_1_8_LEMMA 
                                                                    v_Vde) 
                                                                    (v_Vee:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z)))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vmd)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z) 
                                                                    (v_Vfe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vod:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vod z) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z)))) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (v_Vwd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)))))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vwd) 
                                                                    (v_Vfe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vge:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vge) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z)))) 
                                                                    z z 
                                                                    (v_Vhe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T z 
                                                                    z)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T z 
                                                                    z)) 
                                                                    v_Vld 
                                                                    v_Vhe) 
                                                                    (v_Vfe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z) 
                                                                    v_Vfe) 
                                                                    v_Vfe) 
                                                                    v_Vfe) 
                                                                    (v_Vee:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z))) 
                                                                    v_Vee 
                                                                    v_Vgd) 
                                                                    v_Vee) 
                                                                    v_Vce) 
                                                                    v_Vbe) 
                                                                  v_Vae) 
                                                               v_Vzd) 
                                                            abst_equal_transitive) 
                                                         v_Vxd) v_Vkd) 
                                                   (v_Vfe:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z) 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z))))) =>
                                                    zen.Rsubst abst_T 
                                                      (v_Vge:
                                                       (zen.term abst_T) =>
                                                       zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                  v_Vge) 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z)))) 
                                                      z z 
                                                      (v_Vhe:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T z z)))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T z z)) 
                                                         v_Vld v_Vhe) 
                                                      (v_Vfe:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z) 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z))))) =>
                                                       zen.Rnoteq 
                                                         basics.bool__t 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_opposite 
                                                                  x) 
                                                               (abst_plus x y)) 
                                                            z) v_Vfe) v_Vfe) 
                                                   v_Vnd) 
                                                (v_Vee:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_plus x 
                                                                   y)) z)))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_opposite 
                                                                  x) 
                                                               (abst_plus x y)) 
                                                            z))) v_Vee v_Vgd) 
                                                __X_1_8_LEMMA) 
                                             (v_Vhe:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T z z)))) =>
                                              zen.Rcut 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal z z))) 
                                                (v_Vie:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal z z)))) =>
                                                 zen.Rall abst_T 
                                                   (v_Vwc:
                                                    (zen.term abst_T) =>
                                                    zen.forall abst_T 
                                                      (v_Vxc:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vyd:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Vwc 
                                                                    v_Vxc))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vxc 
                                                                    v_Vyd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vwc 
                                                                    v_Vyd))))))) 
                                                   (abst_plus 
                                                      (abst_opposite x) 
                                                      (abst_plus x z)) 
                                                   (v_Vje:
                                                    (zen.proof 
                                                       (zen.forall abst_T 
                                                          (v_Vxc:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vyd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) 
                                                                    v_Vxc))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vxc 
                                                                    v_Vyd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) 
                                                                    v_Vyd)))))))) =>
                                                    zen.Rall abst_T 
                                                      (v_Vxc:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vyd:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) 
                                                                    v_Vxc))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vxc 
                                                                    v_Vyd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) 
                                                                    v_Vyd)))))) 
                                                      z 
                                                      (v_Vke:
                                                       (zen.proof 
                                                          (zen.forall abst_T 
                                                             (v_Vyd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) z))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    z v_Vyd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) 
                                                                    v_Vyd))))))) =>
                                                       zen.Rall abst_T 
                                                         (v_Vyd:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) z))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    z v_Vyd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) 
                                                                    v_Vyd))))) 
                                                         z 
                                                         (v_Vle:
                                                          (zen.proof 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) z))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    z z))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) z)))))) =>
                                                          zen.Rimply 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) z))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    z z))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) z)))) 
                                                            (v_Vde:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) z))))) =>
                                                             zen.Raxiom 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) z))) 
                                                               __X_1_8_LEMMA 
                                                               v_Vde) 
                                                            (v_Vme:
                                                             (zen.proof 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    z z))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) z))))) =>
                                                             zen.Rimply 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    z z))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) z))) 
                                                               (v_Vne:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    z z))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    z z))) 
                                                                  v_Vie v_Vne) 
                                                               (__X_1_8_LEMMA:
                                                                (zen.proof 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) z)))) =>
                                                                zen.Rsubst 
                                                                  basics.bool__t 
                                                                  (v_Vmd:
                                                                   (zen.term 
                                                                    basics.bool__t) =>
                                                                   zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vmd)) 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) z) 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z) 
                                                                  (v_Vnd:
                                                                   (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) z) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z))))) =>
                                                                   zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vod:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vod z) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z)))) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (v_Vpd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z))))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)))))) 
                                                                    (v_Vqd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)))) 
                                                                    (v_Vrd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z))))) =>
                                                                    zen.Reqsym 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) 
                                                                    v_Vrd 
                                                                    v_Vpd) 
                                                                    v_Vqd) 
                                                                    (v_Vxd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z))))) 
                                                                    (__X_1_1_LEMMA:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vwc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vxc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vyd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vwc 
                                                                    v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vxc 
                                                                    v_Vyd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vwc 
                                                                    v_Vyd))))))) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (v_Vzd:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vxc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vyd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vxc 
                                                                    v_Vyd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vyd)))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vxc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vyd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vxc 
                                                                    v_Vyd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vyd)))))) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) 
                                                                    (v_Vae:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vyd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) 
                                                                    v_Vyd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vyd))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vyd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) 
                                                                    v_Vyd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vyd))))) 
                                                                    z 
                                                                    (v_Vbe:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) z))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) z))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z)))) 
                                                                    (v_Vjd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z))))) 
                                                                    __X_1_1_LEMMA 
                                                                    v_Vjd) 
                                                                    (v_Vce:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) z))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) z))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z))) 
                                                                    (v_Vde:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) z))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x z)) z))) 
                                                                    __X_1_8_LEMMA 
                                                                    v_Vde) 
                                                                    (v_Vee:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z))) 
                                                                    v_Vee 
                                                                    v_Vgd) 
                                                                    v_Vce) 
                                                                    v_Vbe) 
                                                                    v_Vae) 
                                                                    v_Vzd) 
                                                                    abst_equal_transitive) 
                                                                    v_Vxd) 
                                                                    v_Vkd) 
                                                                    (v_Vfe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vge:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vge) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z)))) 
                                                                    z z 
                                                                    (v_Vhe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T z 
                                                                    z)))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T z 
                                                                    v_Vhe) 
                                                                    (v_Vfe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z) 
                                                                    v_Vfe) 
                                                                    v_Vfe) 
                                                                    v_Vnd) 
                                                                  (v_Vee:
                                                                   (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z)))) =>
                                                                   zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z))) 
                                                                    v_Vee 
                                                                    v_Vgd) 
                                                                  __X_1_8_LEMMA) 
                                                               v_Vme) v_Vle) 
                                                         v_Vke) v_Vje) 
                                                   abst_equal_transitive) 
                                                (v_Vne:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal z z))))) =>
                                                 zen.Rnoteq abst_T z v_Vhe)))) 
                                       (v_Voe:
                                        (zen.proof 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal z 
                                                    (abst_plus 
                                                       (abst_opposite x) 
                                                       (abst_plus x y)))))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal z 
                                                   (abst_plus 
                                                      (abst_opposite x) 
                                                      (abst_plus x y))))) 
                                          v_Voe v_Vdd) v_Vfd) v_Ved) 
                                 abst_equal_symmetric) v_Vbd) 
                           (v_Vpe:
                            (zen.proof 
                               (zen.not 
                                  (zen.and 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal abst_T z 
                                              (abst_plus (abst_opposite x) 
                                                 (abst_plus x y))))) 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal z 
                                                 (abst_plus 
                                                    (abst_opposite x) 
                                                    (abst_plus x y))))))))) =>
                            zen.Rcut (zen.triangle (zen.equal abst_T y y)) 
                              (v_Vqe:
                               (zen.proof 
                                  (zen.triangle (zen.equal abst_T y y))) =>
                               zen.Rsubst basics.bool__t 
                                 (v_Vmd:(zen.term basics.bool__t) =>
                                  zen.triangle (focal.is_true v_Vmd)) 
                                 (abst_equal 
                                    (abst_plus (abst_opposite x) 
                                       (abst_plus x y)) y) (abst_equal z y) 
                                 (v_Vre:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal basics.bool__t 
                                              (abst_equal 
                                                 (abst_plus 
                                                    (abst_opposite x) 
                                                    (abst_plus x y)) y) 
                                              (abst_equal z y))))) =>
                                  zen.Rsubst abst_T 
                                    (v_Vse:(zen.term abst_T) =>
                                     zen.not 
                                       (zen.triangle 
                                          (zen.equal basics.bool__t 
                                             (abst_equal v_Vse y) 
                                             (abst_equal z y)))) 
                                    (abst_plus (abst_opposite x) 
                                       (abst_plus x y)) z 
                                    (v_Vte:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus 
                                                    (abst_opposite x) 
                                                    (abst_plus x y)) z)))) =>
                                     zen.Rnotand 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal abst_T z 
                                                (abst_plus (abst_opposite x) 
                                                   (abst_plus x y))))) 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal z 
                                                   (abst_plus 
                                                      (abst_opposite x) 
                                                      (abst_plus x y)))))) 
                                       (v_Vue:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T z 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_plus x y))))))) =>
                                        zen.Rnotnot 
                                          (zen.triangle 
                                             (zen.equal abst_T z 
                                                (abst_plus (abst_opposite x) 
                                                   (abst_plus x y)))) 
                                          (v_Vve:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (zen.equal abst_T z 
                                                    (abst_plus 
                                                       (abst_opposite x) 
                                                       (abst_plus x y))))) =>
                                           zen.Rcut 
                                             (zen.triangle 
                                                (zen.equal abst_T z z)) 
                                             (v_Vld:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (zen.equal abst_T z z))) =>
                                              zen.Rsubst abst_T 
                                                (v_Vwe:(zen.term abst_T) =>
                                                 zen.triangle 
                                                   (zen.equal abst_T v_Vwe z)) 
                                                z 
                                                (abst_plus (abst_opposite x) 
                                                   (abst_plus x y)) 
                                                (v_Vcd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             z 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_plus x 
                                                                   y)))))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (zen.equal abst_T z 
                                                         (abst_plus 
                                                            (abst_opposite x) 
                                                            (abst_plus x y)))) 
                                                   v_Vve v_Vcd) 
                                                (v_Vxe:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_plus x y)) 
                                                          z))) =>
                                                 zen.Rsubst abst_T 
                                                   (v_Vye:
                                                    (zen.term abst_T) =>
                                                    zen.triangle 
                                                      (zen.equal abst_T 
                                                         (abst_plus 
                                                            (abst_opposite x) 
                                                            (abst_plus x y)) 
                                                         v_Vye)) z z 
                                                   (v_Vhe:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T z z)))) =>
                                                    zen.Rnoteq abst_T z v_Vhe) 
                                                   (v_Vxe:
                                                    (zen.proof 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_plus x 
                                                                   y)) z))) =>
                                                    zen.Raxiom 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            (abst_plus 
                                                               (abst_opposite 
                                                                  x) 
                                                               (abst_plus x y)) 
                                                            z)) v_Vxe v_Vte) 
                                                   v_Vxe) v_Vld) 
                                             (v_Vhe:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T z z)))) =>
                                              zen.Rnoteq abst_T z v_Vhe)) 
                                          v_Vue) 
                                       (v_Vze:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal z 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_plus x y)))))))) =>
                                        zen.Rnotnot 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal z 
                                                   (abst_plus 
                                                      (abst_opposite x) 
                                                      (abst_plus x y))))) 
                                          (v_Voe:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal z 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_plus x y)))))) =>
                                           zen.Rall abst_T 
                                             (v_Vwc:(zen.term abst_T) =>
                                              zen.forall abst_T 
                                                (v_Vxc:(zen.term abst_T) =>
                                                 zen.forall abst_T 
                                                   (v_Vyd:
                                                    (zen.term abst_T) =>
                                                    zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               v_Vwc v_Vxc))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  v_Vxc v_Vyd))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  v_Vwc v_Vyd))))))) 
                                             z 
                                             (v_Vaf:
                                              (zen.proof 
                                                 (zen.forall abst_T 
                                                    (v_Vxc:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vyd:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   z v_Vxc))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vxc 
                                                                    v_Vyd))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    z v_Vyd)))))))) =>
                                              zen.Rall abst_T 
                                                (v_Vxc:(zen.term abst_T) =>
                                                 zen.forall abst_T 
                                                   (v_Vyd:
                                                    (zen.term abst_T) =>
                                                    zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal z 
                                                               v_Vxc))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  v_Vxc v_Vyd))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal z 
                                                                  v_Vyd)))))) 
                                                (abst_plus (abst_opposite x) 
                                                   (abst_plus x y)) 
                                                (v_Vbf:
                                                 (zen.proof 
                                                    (zen.forall abst_T 
                                                       (v_Vyd:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   z 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y))))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vyd))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    z v_Vyd))))))) =>
                                                 zen.Rall abst_T 
                                                   (v_Vyd:
                                                    (zen.term abst_T) =>
                                                    zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal z 
                                                               (abst_plus 
                                                                  (abst_opposite 
                                                                    x) 
                                                                  (abst_plus 
                                                                    x y))))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                  v_Vyd))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal z 
                                                                  v_Vyd))))) 
                                                   y 
                                                   (v_Vcf:
                                                    (zen.proof 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   z 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y))))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    z y)))))) =>
                                                    zen.Rimply 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal z 
                                                               (abst_plus 
                                                                  (abst_opposite 
                                                                    x) 
                                                                  (abst_plus 
                                                                    x y))))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal z 
                                                                  y)))) 
                                                      (v_Vdd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    z 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y))))))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal z 
                                                                  (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y))))) 
                                                         v_Voe v_Vdd) 
                                                      (v_Vdf:
                                                       (zen.proof 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    z y))))) =>
                                                       zen.Rimply 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal z 
                                                                  y))) 
                                                         (v_Vef:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y))))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y))) 
                                                            __X_1_7_LEMMA 
                                                            v_Vef) 
                                                         (v_Vff:
                                                          (zen.proof 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    z y)))) =>
                                                          zen.Rsubst 
                                                            basics.bool__t 
                                                            (v_Vmd:
                                                             (zen.term 
                                                                basics.bool__t) =>
                                                             zen.triangle 
                                                               (focal.is_true 
                                                                  v_Vmd)) 
                                                            (abst_equal z y) 
                                                            (abst_equal z y) 
                                                            (v_Vgf:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    z y) 
                                                                    (abst_equal 
                                                                    z y))))) =>
                                                             zen.Rsubst 
                                                               abst_T 
                                                               (v_Vse:
                                                                (zen.term 
                                                                   abst_T) =>
                                                                zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vse y) 
                                                                    (abst_equal 
                                                                    z y)))) 
                                                               z z 
                                                               (v_Vhe:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T z 
                                                                    z)))) =>
                                                                zen.Rnoteq 
                                                                  abst_T z 
                                                                  v_Vhe) 
                                                               (v_Vgf:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    z y) 
                                                                    (abst_equal 
                                                                    z y))))) =>
                                                                zen.Rsubst 
                                                                  abst_T 
                                                                  (v_Vhf:
                                                                   (zen.term 
                                                                    abst_T) =>
                                                                   zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    z v_Vhf) 
                                                                    (abst_equal 
                                                                    z y)))) 
                                                                  y y 
                                                                  (v_Vif:
                                                                   (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T y 
                                                                    y)))) =>
                                                                   zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T y 
                                                                    y)) 
                                                                    v_Vqe 
                                                                    v_Vif) 
                                                                  (v_Vgf:
                                                                   (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    z y) 
                                                                    (abst_equal 
                                                                    z y))))) =>
                                                                   zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    z y) 
                                                                    v_Vgf) 
                                                                  v_Vgf) 
                                                               v_Vgf) 
                                                            (v_Vff:
                                                             (zen.proof 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    z y)))) =>
                                                             zen.Raxiom 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    z y))) 
                                                               v_Vff v_Vad) 
                                                            v_Vff) v_Vdf) 
                                                      v_Vcf) v_Vbf) v_Vaf) 
                                             abst_equal_transitive) v_Vze) 
                                       v_Vpe) 
                                    (v_Vgf:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (abst_equal z y) 
                                                 (abst_equal z y))))) =>
                                     zen.Rsubst abst_T 
                                       (v_Vhf:(zen.term abst_T) =>
                                        zen.not 
                                          (zen.triangle 
                                             (zen.equal basics.bool__t 
                                                (abst_equal z v_Vhf) 
                                                (abst_equal z y)))) y y 
                                       (v_Vif:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T y y)))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (zen.equal abst_T y y)) v_Vqe 
                                          v_Vif) 
                                       (v_Vgf:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal z y) 
                                                    (abst_equal z y))))) =>
                                        zen.Rnoteq basics.bool__t 
                                          (abst_equal z y) v_Vgf) v_Vgf) 
                                    v_Vre) 
                                 (v_Vff:
                                  (zen.proof 
                                     (zen.triangle 
                                        (focal.is_true (abst_equal z y)))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal z y))) 
                                    v_Vff v_Vad) __X_1_7_LEMMA) 
                              (v_Vif:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle (zen.equal abst_T y y)))) =>
                               zen.Rcut 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal y y))) 
                                 (v_Vjf:
                                  (zen.proof 
                                     (zen.triangle 
                                        (focal.is_true (abst_equal y y)))) =>
                                  zen.Rall abst_T 
                                    (v_Vwc:(zen.term abst_T) =>
                                     zen.forall abst_T 
                                       (v_Vxc:(zen.term abst_T) =>
                                        zen.forall abst_T 
                                          (v_Vyd:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Vwc v_Vxc))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vxc v_Vyd))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vwc v_Vyd))))))) 
                                    (abst_plus (abst_opposite x) 
                                       (abst_plus x y)) 
                                    (v_Vzd:
                                     (zen.proof 
                                        (zen.forall abst_T 
                                           (v_Vxc:(zen.term abst_T) =>
                                            zen.forall abst_T 
                                              (v_Vyd:(zen.term abst_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_plus x y)) 
                                                          v_Vxc))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vxc 
                                                             v_Vyd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_plus x 
                                                                   y)) v_Vyd)))))))) =>
                                     zen.Rall abst_T 
                                       (v_Vxc:(zen.term abst_T) =>
                                        zen.forall abst_T 
                                          (v_Vyd:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_opposite x) 
                                                         (abst_plus x y)) 
                                                      v_Vxc))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vxc v_Vyd))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_opposite x) 
                                                            (abst_plus x y)) 
                                                         v_Vyd)))))) y 
                                       (v_Vkf:
                                        (zen.proof 
                                           (zen.forall abst_T 
                                              (v_Vyd:(zen.term abst_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_plus x y)) 
                                                          y))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal y v_Vyd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_plus x 
                                                                   y)) v_Vyd))))))) =>
                                        zen.Rall abst_T 
                                          (v_Vyd:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_opposite x) 
                                                         (abst_plus x y)) y))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal y v_Vyd))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_opposite x) 
                                                            (abst_plus x y)) 
                                                         v_Vyd))))) y 
                                          (v_Vlf:
                                           (zen.proof 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_plus x y)) 
                                                          y))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal y y))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_plus x 
                                                                   y)) y)))))) =>
                                           zen.Rimply 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_opposite x) 
                                                         (abst_plus x y)) y))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal y y))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_opposite x) 
                                                            (abst_plus x y)) 
                                                         y)))) 
                                             (v_Vef:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_plus x 
                                                                   y)) y))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_opposite x) 
                                                            (abst_plus x y)) 
                                                         y))) __X_1_7_LEMMA 
                                                v_Vef) 
                                             (v_Vmf:
                                              (zen.proof 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal y y))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_plus x 
                                                                   y)) y))))) =>
                                              zen.Rimply 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal y y))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_opposite x) 
                                                            (abst_plus x y)) 
                                                         y))) 
                                                (v_Vnf:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal y y))))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal y y))) 
                                                   v_Vjf v_Vnf) 
                                                (__X_1_7_LEMMA:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_plus x 
                                                                   y)) y)))) =>
                                                 zen.Rsubst basics.bool__t 
                                                   (v_Vmd:
                                                    (zen.term basics.bool__t) =>
                                                    zen.triangle 
                                                      (focal.is_true v_Vmd)) 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_opposite x) 
                                                         (abst_plus x y)) y) 
                                                   (abst_equal z y) 
                                                   (v_Vre:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y) 
                                                                (abst_equal 
                                                                   z y))))) =>
                                                    zen.Rsubst abst_T 
                                                      (v_Vse:
                                                       (zen.term abst_T) =>
                                                       zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (abst_equal 
                                                                  v_Vse y) 
                                                               (abst_equal z 
                                                                  y)))) 
                                                      (abst_plus 
                                                         (abst_opposite x) 
                                                         (abst_plus x y)) z 
                                                      (v_Vte:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) z)))) =>
                                                       zen.Rnotand 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T z 
                                                                  (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y))))) 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    z 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)))))) 
                                                         (v_Vue:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T z 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y))))))) =>
                                                          zen.Rnotnot 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T z 
                                                                  (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)))) 
                                                            (v_Vve:
                                                             (zen.proof 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T z 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y))))) =>
                                                             zen.Reqsym 
                                                               abst_T z 
                                                               (abst_plus 
                                                                  (abst_opposite 
                                                                    x) 
                                                                  (abst_plus 
                                                                    x y)) 
                                                               v_Vve v_Vte) 
                                                            v_Vue) 
                                                         (v_Vze:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    z 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)))))))) =>
                                                          zen.Rnotnot 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    z 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y))))) 
                                                            (v_Voe:
                                                             (zen.proof 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    z 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)))))) =>
                                                             zen.Rall abst_T 
                                                               (v_Vwc:
                                                                (zen.term 
                                                                   abst_T) =>
                                                                zen.forall 
                                                                  abst_T 
                                                                  (v_Vxc:
                                                                   (zen.term 
                                                                    abst_T) =>
                                                                   zen.forall 
                                                                    abst_T 
                                                                    (v_Vyd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vwc 
                                                                    v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vxc 
                                                                    v_Vyd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vwc 
                                                                    v_Vyd))))))) 
                                                               z 
                                                               (v_Vaf:
                                                                (zen.proof 
                                                                   (zen.forall 
                                                                    abst_T 
                                                                    (v_Vxc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vyd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    z v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vxc 
                                                                    v_Vyd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    z v_Vyd)))))))) =>
                                                                zen.Rall 
                                                                  abst_T 
                                                                  (v_Vxc:
                                                                   (zen.term 
                                                                    abst_T) =>
                                                                   zen.forall 
                                                                    abst_T 
                                                                    (v_Vyd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    z v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vxc 
                                                                    v_Vyd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    z v_Vyd)))))) 
                                                                  (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                  (v_Vbf:
                                                                   (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vyd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    z 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vyd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    z v_Vyd))))))) =>
                                                                   zen.Rall 
                                                                    abst_T 
                                                                    (v_Vyd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    z 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vyd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    z v_Vyd))))) 
                                                                    y 
                                                                    (v_Vcf:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    z 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    z y)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    z 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    z y)))) 
                                                                    (v_Vdd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    z 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    z 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y))))) 
                                                                    v_Voe 
                                                                    v_Vdd) 
                                                                    (v_Vdf:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    z y))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    z y))) 
                                                                    (v_Vef:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y))) 
                                                                    __X_1_7_LEMMA 
                                                                    v_Vef) 
                                                                    (v_Vff:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    z y)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    z y))) 
                                                                    v_Vff 
                                                                    v_Vad) 
                                                                    v_Vdf) 
                                                                    v_Vcf) 
                                                                    v_Vbf) 
                                                                  v_Vaf) 
                                                               abst_equal_transitive) 
                                                            v_Vze) v_Vpe) 
                                                      (v_Vgf:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_equal 
                                                                    z y) 
                                                                   (abst_equal 
                                                                    z y))))) =>
                                                       zen.Rsubst abst_T 
                                                         (v_Vhf:
                                                          (zen.term abst_T) =>
                                                          zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (abst_equal 
                                                                    z v_Vhf) 
                                                                  (abst_equal 
                                                                    z y)))) 
                                                         y y 
                                                         (v_Vif:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T y 
                                                                    y)))) =>
                                                          zen.Rnoteq abst_T 
                                                            y v_Vif) 
                                                         (v_Vgf:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    z y) 
                                                                    (abst_equal 
                                                                    z y))))) =>
                                                          zen.Rnoteq 
                                                            basics.bool__t 
                                                            (abst_equal z y) 
                                                            v_Vgf) v_Vgf) 
                                                      v_Vre) 
                                                   (v_Vff:
                                                    (zen.proof 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal z y)))) =>
                                                    zen.Raxiom 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal z y))) 
                                                      v_Vff v_Vad) 
                                                   __X_1_7_LEMMA) v_Vmf) 
                                             v_Vlf) v_Vkf) v_Vzd) 
                                    abst_equal_transitive) 
                                 (v_Vnf:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true (abst_equal y y))))) =>
                                  zen.Rnoteq abst_T y v_Vif)))) 
                        (v_Vof:
                         (zen.proof 
                            (zen.triangle (focal.is_true (abst_equal y z)))) =>
                         zen.Raxiom 
                           (zen.triangle (focal.is_true (abst_equal y z))) 
                           v_Vof v_Vvc) v_Vzc) v_Vyc) abst_equal_symmetric)) 
              (dk_builtins.magic_prove 
                 (dk_logic.ebP 
                    (abst_equal 
                       (abst_plus (abst_opposite x) (abst_plus x z)) z)))) 
             (zen.nnpp 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal 
                         (abst_plus (abst_opposite x) (abst_plus x y)) y))) 
                (v_Vvc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus (abst_opposite x) (abst_plus x y)) 
                                y))))) =>
                 zen.Rcut 
                   (zen.and 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal abst_T 
                               (abst_plus (abst_opposite x) (abst_plus x y)) 
                               (abst_plus (abst_opposite x) (abst_plus x y))))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_opposite x) 
                                     (abst_plus x y)) 
                                  (abst_plus (abst_opposite x) 
                                     (abst_plus x y))))))) 
                   (v_Vwc:
                    (zen.proof 
                       (zen.and 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal abst_T 
                                   (abst_plus (abst_opposite x) 
                                      (abst_plus x y)) 
                                   (abst_plus (abst_opposite x) 
                                      (abst_plus x y))))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_opposite x) 
                                         (abst_plus x y)) 
                                      (abst_plus (abst_opposite x) 
                                         (abst_plus x y)))))))) =>
                    zen.Rand 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal abst_T 
                               (abst_plus (abst_opposite x) (abst_plus x y)) 
                               (abst_plus (abst_opposite x) (abst_plus x y))))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_opposite x) 
                                     (abst_plus x y)) 
                                  (abst_plus (abst_opposite x) 
                                     (abst_plus x y)))))) 
                      (v_Vxc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal abst_T 
                                   (abst_plus (abst_opposite x) 
                                      (abst_plus x y)) 
                                   (abst_plus (abst_opposite x) 
                                      (abst_plus x y)))))) =>
                       v_Vyc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_opposite x) 
                                         (abst_plus x y)) 
                                      (abst_plus (abst_opposite x) 
                                         (abst_plus x y))))))) =>
                       zen.Rnoteq abst_T 
                         (abst_plus (abst_opposite x) (abst_plus x y)) v_Vxc) 
                      v_Vwc) 
                   (v_Vzc:
                    (zen.proof 
                       (zen.not 
                          (zen.and 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_plus (abst_opposite x) 
                                         (abst_plus x y)) 
                                      (abst_plus (abst_opposite x) 
                                         (abst_plus x y))))) 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus (abst_opposite x) 
                                            (abst_plus x y)) 
                                         (abst_plus (abst_opposite x) 
                                            (abst_plus x y))))))))) =>
                    zen.Rcut 
                      (zen.triangle 
                         (zen.equal abst_T 
                            (abst_plus (abst_plus (abst_opposite x) x) y) y)) 
                      (v_Vad:
                       (zen.proof 
                          (zen.triangle 
                             (zen.equal abst_T 
                                (abst_plus (abst_plus (abst_opposite x) x) y) 
                                y))) =>
                       zen.Rsubst basics.bool__t 
                         (v_Vbd:(zen.term basics.bool__t) =>
                          zen.triangle (focal.is_true v_Vbd)) 
                         (abst_equal 
                            (abst_plus (abst_opposite x) (abst_plus x y)) 
                            (abst_plus (abst_plus (abst_opposite x) x) y)) 
                         (abst_equal 
                            (abst_plus (abst_opposite x) (abst_plus x y)) y) 
                         (v_Vcd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_equal 
                                         (abst_plus (abst_opposite x) 
                                            (abst_plus x y)) 
                                         (abst_plus 
                                            (abst_plus (abst_opposite x) x) y)) 
                                      (abst_equal 
                                         (abst_plus (abst_opposite x) 
                                            (abst_plus x y)) y))))) =>
                          zen.Rsubst abst_T 
                            (v_Vdd:(zen.term abst_T) =>
                             zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (abst_equal v_Vdd 
                                        (abst_plus 
                                           (abst_plus (abst_opposite x) x) y)) 
                                     (abst_equal 
                                        (abst_plus (abst_opposite x) 
                                           (abst_plus x y)) y)))) 
                            (abst_plus (abst_opposite x) (abst_plus x y)) 
                            (abst_plus (abst_opposite x) (abst_plus x y)) 
                            (v_Vxc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_plus (abst_opposite x) 
                                            (abst_plus x y)) 
                                         (abst_plus (abst_opposite x) 
                                            (abst_plus x y)))))) =>
                             zen.Rnotand 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_plus (abst_opposite x) 
                                           (abst_plus x y)) 
                                        (abst_plus (abst_opposite x) 
                                           (abst_plus x y))))) 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus (abst_opposite x) 
                                              (abst_plus x y)) 
                                           (abst_plus (abst_opposite x) 
                                              (abst_plus x y)))))) 
                               (v_Ved:
                                (zen.proof 
                                   (zen.not 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus (abst_opposite x) 
                                                  (abst_plus x y)) 
                                               (abst_plus (abst_opposite x) 
                                                  (abst_plus x y))))))) =>
                                zen.Rnotnot 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_plus (abst_opposite x) 
                                           (abst_plus x y)) 
                                        (abst_plus (abst_opposite x) 
                                           (abst_plus x y)))) 
                                  (v_Vfd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_plus (abst_opposite x) 
                                               (abst_plus x y)) 
                                            (abst_plus (abst_opposite x) 
                                               (abst_plus x y))))) =>
                                   zen.Rcut 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_plus (abst_opposite x) 
                                              (abst_plus x y)) 
                                           (abst_plus (abst_opposite x) 
                                              (abst_plus x y)))) 
                                     (v_Vfd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus (abst_opposite x) 
                                                  (abst_plus x y)) 
                                               (abst_plus (abst_opposite x) 
                                                  (abst_plus x y))))) =>
                                      zen.Rsubst abst_T 
                                        (v_Vgd:(zen.term abst_T) =>
                                         zen.triangle 
                                           (zen.equal abst_T v_Vgd 
                                              (abst_plus (abst_opposite x) 
                                                 (abst_plus x y)))) 
                                        (abst_plus (abst_opposite x) 
                                           (abst_plus x y)) 
                                        (abst_plus (abst_opposite x) 
                                           (abst_plus x y)) 
                                        (v_Vxc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus 
                                                        (abst_opposite x) 
                                                        (abst_plus x y)) 
                                                     (abst_plus 
                                                        (abst_opposite x) 
                                                        (abst_plus x y)))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus 
                                                    (abst_opposite x) 
                                                    (abst_plus x y)) 
                                                 (abst_plus 
                                                    (abst_opposite x) 
                                                    (abst_plus x y)))) v_Vfd 
                                           v_Vxc) 
                                        (v_Vfd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus 
                                                     (abst_opposite x) 
                                                     (abst_plus x y)) 
                                                  (abst_plus 
                                                     (abst_opposite x) 
                                                     (abst_plus x y))))) =>
                                         zen.Rsubst abst_T 
                                           (v_Vhd:(zen.term abst_T) =>
                                            zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus 
                                                    (abst_opposite x) 
                                                    (abst_plus x y)) v_Vhd)) 
                                           (abst_plus (abst_opposite x) 
                                              (abst_plus x y)) 
                                           (abst_plus (abst_opposite x) 
                                              (abst_plus x y)) 
                                           (v_Vxc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_plus 
                                                           (abst_opposite x) 
                                                           (abst_plus x y)) 
                                                        (abst_plus 
                                                           (abst_opposite x) 
                                                           (abst_plus x y)))))) =>
                                            zen.Rnoteq abst_T 
                                              (abst_plus (abst_opposite x) 
                                                 (abst_plus x y)) v_Vxc) 
                                           (v_Vfd:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus 
                                                        (abst_opposite x) 
                                                        (abst_plus x y)) 
                                                     (abst_plus 
                                                        (abst_opposite x) 
                                                        (abst_plus x y))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_plus 
                                                       (abst_opposite x) 
                                                       (abst_plus x y)) 
                                                    (abst_plus 
                                                       (abst_opposite x) 
                                                       (abst_plus x y)))) 
                                              v_Vfd v_Vxc) v_Vfd) v_Vfd) 
                                     (v_Vxc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus 
                                                     (abst_opposite x) 
                                                     (abst_plus x y)) 
                                                  (abst_plus 
                                                     (abst_opposite x) 
                                                     (abst_plus x y)))))) =>
                                      zen.Rnoteq abst_T 
                                        (abst_plus (abst_opposite x) 
                                           (abst_plus x y)) v_Vxc)) v_Ved) 
                               (v_Vid:
                                (zen.proof 
                                   (zen.not 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus 
                                                     (abst_opposite x) 
                                                     (abst_plus x y)) 
                                                  (abst_plus 
                                                     (abst_opposite x) 
                                                     (abst_plus x y)))))))) =>
                                zen.Rnotnot 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus (abst_opposite x) 
                                              (abst_plus x y)) 
                                           (abst_plus (abst_opposite x) 
                                              (abst_plus x y))))) 
                                  (v_Vjd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus (abst_opposite x) 
                                                  (abst_plus x y)) 
                                               (abst_plus (abst_opposite x) 
                                                  (abst_plus x y)))))) =>
                                   zen.Rall abst_T 
                                     (v_Vkd:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vld:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vmd:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vkd v_Vld))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vld 
                                                          v_Vmd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vkd 
                                                          v_Vmd))))))) 
                                     (abst_plus (abst_opposite x) 
                                        (abst_plus x y)) 
                                     (v_Vnd:
                                      (zen.proof 
                                         (zen.forall abst_T 
                                            (v_Vld:(zen.term abst_T) =>
                                             zen.forall abst_T 
                                               (v_Vmd:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) 
                                                              (abst_plus x y)) 
                                                           v_Vld))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Vld 
                                                              v_Vmd))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_plus 
                                                                    x y)) 
                                                              v_Vmd)))))))) =>
                                      zen.Rall abst_T 
                                        (v_Vld:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vmd:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_plus x y)) 
                                                       v_Vld))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vld 
                                                          v_Vmd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_plus x y)) 
                                                          v_Vmd)))))) 
                                        (abst_plus (abst_opposite x) 
                                           (abst_plus x y)) 
                                        (v_Vod:
                                         (zen.proof 
                                            (zen.forall abst_T 
                                               (v_Vmd:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) 
                                                              (abst_plus x y)) 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) 
                                                              (abst_plus x y))))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_plus 
                                                                    x y)) 
                                                              v_Vmd))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_plus 
                                                                    x y)) 
                                                              v_Vmd))))))) =>
                                         zen.Rall abst_T 
                                           (v_Vmd:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_plus x y)) 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_plus x y))))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_plus x y)) 
                                                          v_Vmd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_plus x y)) 
                                                          v_Vmd))))) 
                                           (abst_plus 
                                              (abst_plus (abst_opposite x) x) 
                                              y) 
                                           (v_Vpd:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) 
                                                              (abst_plus x y)) 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) 
                                                              (abst_plus x y))))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_plus 
                                                                    x y)) 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) x) y)))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_plus 
                                                                    x y)) 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) x) y))))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_plus x y)) 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_plus x y))))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_plus x y)) 
                                                          (abst_plus 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) x) y)))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_plus x y)) 
                                                          (abst_plus 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) x) y))))) 
                                              (v_Vyc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_plus 
                                                                    x y)) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_plus 
                                                                    x y))))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_plus x y)) 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_plus x y))))) 
                                                 v_Vjd v_Vyc) 
                                              (v_Vqd:
                                               (zen.proof 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_plus 
                                                                    x y)) 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) x) y)))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_plus 
                                                                    x y)) 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) x) y)))))) =>
                                               zen.Rimply 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_plus x y)) 
                                                          (abst_plus 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) x) y)))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_plus x y)) 
                                                          (abst_plus 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) x) y)))) 
                                                 (v_Vrd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) 
                                                                    (
                                                                    abst_plus 
                                                                    x y)) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y)))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_plus x 
                                                                   y)) 
                                                             (abst_plus 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    x) x) y)))) 
                                                    __X_1_2_LEMMA v_Vrd) 
                                                 (__X_1_2_LEMMA:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_plus 
                                                                    x y)) 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) x) y))))) =>
                                                  zen.Rsubst basics.bool__t 
                                                    (v_Vbd:
                                                     (zen.term basics.bool__t) =>
                                                     zen.triangle 
                                                       (focal.is_true v_Vbd)) 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_plus x y)) 
                                                       (abst_plus 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             x) y)) 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_plus x y)) y) 
                                                    (v_Vcd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y)) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y))))) =>
                                                     zen.Rsubst abst_T 
                                                       (v_Vdd:
                                                        (zen.term abst_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   v_Vdd 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y)) 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y)))) 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_plus x y)) 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_plus x y)) 
                                                       (v_Vxc:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)))))) =>
                                                        zen.Rnoteq abst_T 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_plus x y)) 
                                                          v_Vxc) 
                                                       (v_Vcd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y)) 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y))))) =>
                                                        zen.Rsubst abst_T 
                                                          (v_Vsd:
                                                           (zen.term abst_T) =>
                                                           zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vsd) 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y)))) 
                                                          (abst_plus 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) x) y) 
                                                          y 
                                                          (v_Vtd:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    y)))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                   y)) v_Vad 
                                                             v_Vtd) 
                                                          (v_Vud:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y))))) =>
                                                           zen.Rnoteq 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    x) 
                                                                   (abst_plus 
                                                                    x y)) y) 
                                                             v_Vud) v_Vcd) 
                                                       v_Vcd) 
                                                    (v_Vvd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) 
                                                                    (
                                                                    abst_plus 
                                                                    x y)) y)))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    x) 
                                                                   (abst_plus 
                                                                    x y)) y))) 
                                                       v_Vvd v_Vvc) 
                                                    __X_1_2_LEMMA) v_Vqd) 
                                              v_Vpd) v_Vod) v_Vnd) 
                                     abst_equal_transitive) v_Vid) v_Vzc) 
                            (v_Vcd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (abst_equal 
                                            (abst_plus (abst_opposite x) 
                                               (abst_plus x y)) 
                                            (abst_plus 
                                               (abst_plus (abst_opposite x) x) 
                                               y)) 
                                         (abst_equal 
                                            (abst_plus (abst_opposite x) 
                                               (abst_plus x y)) y))))) =>
                             zen.Rsubst abst_T 
                               (v_Vsd:(zen.term abst_T) =>
                                zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (abst_equal 
                                           (abst_plus (abst_opposite x) 
                                              (abst_plus x y)) v_Vsd) 
                                        (abst_equal 
                                           (abst_plus (abst_opposite x) 
                                              (abst_plus x y)) y)))) 
                               (abst_plus (abst_plus (abst_opposite x) x) y) 
                               y 
                               (v_Vtd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_plus 
                                               (abst_plus (abst_opposite x) x) 
                                               y) y)))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_plus 
                                           (abst_plus (abst_opposite x) x) y) 
                                        y)) v_Vad v_Vtd) 
                               (v_Vud:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (abst_equal 
                                               (abst_plus (abst_opposite x) 
                                                  (abst_plus x y)) y) 
                                            (abst_equal 
                                               (abst_plus (abst_opposite x) 
                                                  (abst_plus x y)) y))))) =>
                                zen.Rnoteq basics.bool__t 
                                  (abst_equal 
                                     (abst_plus (abst_opposite x) 
                                        (abst_plus x y)) y) v_Vud) v_Vcd) 
                            v_Vcd) 
                         (v_Vvd:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_opposite x) 
                                         (abst_plus x y)) y)))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus (abst_opposite x) 
                                        (abst_plus x y)) y))) v_Vvd v_Vvc) 
                         __X_1_2_LEMMA) 
                      (v_Vtd:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal abst_T 
                                   (abst_plus 
                                      (abst_plus (abst_opposite x) x) y) y)))) =>
                       zen.Rcut 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_plus (abst_opposite x) x) 
                                     y) y))) 
                         (v_Vwd:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus 
                                         (abst_plus (abst_opposite x) x) y) y)))) =>
                          zen.Rall abst_T 
                            (v_Vkd:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vld:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vmd:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vkd v_Vld))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vld v_Vmd))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vkd v_Vmd))))))) 
                            (abst_plus (abst_opposite x) (abst_plus x y)) 
                            (v_Vnd:
                             (zen.proof 
                                (zen.forall abst_T 
                                   (v_Vld:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Vmd:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus 
                                                     (abst_opposite x) 
                                                     (abst_plus x y)) v_Vld))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vld v_Vmd))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_opposite x) 
                                                        (abst_plus x y)) 
                                                     v_Vmd)))))))) =>
                             zen.Rall abst_T 
                               (v_Vld:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vmd:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus (abst_opposite x) 
                                                 (abst_plus x y)) v_Vld))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vld v_Vmd))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus 
                                                    (abst_opposite x) 
                                                    (abst_plus x y)) v_Vmd)))))) 
                               (abst_plus (abst_plus (abst_opposite x) x) y) 
                               (v_Vxd:
                                (zen.proof 
                                   (zen.forall abst_T 
                                      (v_Vmd:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus 
                                                     (abst_opposite x) 
                                                     (abst_plus x y)) 
                                                  (abst_plus 
                                                     (abst_plus 
                                                        (abst_opposite x) x) 
                                                     y)))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_plus 
                                                           (abst_opposite x) 
                                                           x) y) v_Vmd))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_opposite x) 
                                                        (abst_plus x y)) 
                                                     v_Vmd))))))) =>
                                zen.Rall abst_T 
                                  (v_Vmd:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus (abst_opposite x) 
                                                 (abst_plus x y)) 
                                              (abst_plus 
                                                 (abst_plus 
                                                    (abst_opposite x) x) y)))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus 
                                                    (abst_plus 
                                                       (abst_opposite x) x) y) 
                                                 v_Vmd))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus 
                                                    (abst_opposite x) 
                                                    (abst_plus x y)) v_Vmd))))) 
                                  y 
                                  (v_Vyd:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus 
                                                     (abst_opposite x) 
                                                     (abst_plus x y)) 
                                                  (abst_plus 
                                                     (abst_plus 
                                                        (abst_opposite x) x) 
                                                     y)))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_plus 
                                                           (abst_opposite x) 
                                                           x) y) y))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_opposite x) 
                                                        (abst_plus x y)) y)))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus (abst_opposite x) 
                                                 (abst_plus x y)) 
                                              (abst_plus 
                                                 (abst_plus 
                                                    (abst_opposite x) x) y)))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus 
                                                    (abst_plus 
                                                       (abst_opposite x) x) y) 
                                                 y))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus 
                                                    (abst_opposite x) 
                                                    (abst_plus x y)) y)))) 
                                     (v_Vrd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_opposite x) 
                                                        (abst_plus x y)) 
                                                     (abst_plus 
                                                        (abst_plus 
                                                           (abst_opposite x) 
                                                           x) y)))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus 
                                                    (abst_opposite x) 
                                                    (abst_plus x y)) 
                                                 (abst_plus 
                                                    (abst_plus 
                                                       (abst_opposite x) x) y)))) 
                                        __X_1_2_LEMMA v_Vrd) 
                                     (v_Vzd:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_plus 
                                                           (abst_opposite x) 
                                                           x) y) y))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_opposite x) 
                                                        (abst_plus x y)) y))))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus 
                                                    (abst_plus 
                                                       (abst_opposite x) x) y) 
                                                 y))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus 
                                                    (abst_opposite x) 
                                                    (abst_plus x y)) y))) 
                                        (v_Vae:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) x) y) y))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_plus 
                                                          (abst_opposite x) x) 
                                                       y) y))) v_Vwd v_Vae) 
                                        (v_Vvd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_opposite x) 
                                                        (abst_plus x y)) y)))) =>
                                         zen.Rsubst basics.bool__t 
                                           (v_Vbd:
                                            (zen.term basics.bool__t) =>
                                            zen.triangle 
                                              (focal.is_true v_Vbd)) 
                                           (abst_equal 
                                              (abst_plus (abst_opposite x) 
                                                 (abst_plus x y)) y) 
                                           (abst_equal 
                                              (abst_plus (abst_opposite x) 
                                                 (abst_plus x y)) y) 
                                           (v_Vud:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) 
                                                              (abst_plus x y)) 
                                                           y) 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) 
                                                              (abst_plus x y)) 
                                                           y))))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vbe:(zen.term abst_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal v_Vbe y) 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_plus x y)) 
                                                          y)))) 
                                              (abst_plus (abst_opposite x) 
                                                 (abst_plus x y)) 
                                              (abst_plus (abst_opposite x) 
                                                 (abst_plus x y)) 
                                              (v_Vxc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) 
                                                              (abst_plus x y)) 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) 
                                                              (abst_plus x y)))))) =>
                                               zen.Rnotand 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_plus x y)) 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_plus x y))))) 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_plus x 
                                                                   y)) 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_plus x 
                                                                   y)))))) 
                                                 (v_Ved:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) 
                                                                    (
                                                                    abst_plus 
                                                                    x y)) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) 
                                                                    (
                                                                    abst_plus 
                                                                    x y))))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_plus x y)) 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_plus x y)))) 
                                                    (v_Vfd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_plus 
                                                                    x y)) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_plus 
                                                                    x y))))) =>
                                                     zen.Reqsym abst_T 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_plus x y)) 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_plus x y)) 
                                                       v_Vfd v_Vxc) v_Ved) 
                                                 (v_Vid:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)))))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_plus x 
                                                                   y)) 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_plus x 
                                                                   y))))) 
                                                    (v_Vjd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) 
                                                                    (
                                                                    abst_plus 
                                                                    x y)) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) 
                                                                    (
                                                                    abst_plus 
                                                                    x y)))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vkd:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vld:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vmd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_plus x y)) 
                                                       (v_Vnd:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              abst_T 
                                                              (v_Vld:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.forall 
                                                                 abst_T 
                                                                 (v_Vmd:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vld))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vmd)))))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vld:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vmd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vld))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vmd)))))) 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_plus x y)) 
                                                          (v_Vod:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 abst_T 
                                                                 (v_Vmd:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y))))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vmd))))))) =>
                                                           zen.Rall abst_T 
                                                             (v_Vmd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y))))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vmd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vmd))))) 
                                                             y 
                                                             (v_Vce:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y))))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y)))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y))))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y)))) 
                                                                (v_Vyc:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y))))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y))))) 
                                                                   v_Vjd 
                                                                   v_Vyc) 
                                                                (v_Vde:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y))) 
                                                                   (v_Vvc:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y))) 
                                                                    v_Vvd 
                                                                    v_Vvc) 
                                                                   (v_Vvd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_plus 
                                                                    x y)) y))) 
                                                                    v_Vvd 
                                                                    v_Vvc) 
                                                                   v_Vde) 
                                                                v_Vce) v_Vod) 
                                                          v_Vnd) 
                                                       abst_equal_transitive) 
                                                    v_Vid) v_Vzc) 
                                              (v_Vud:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_plus 
                                                                    x y)) y) 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_plus 
                                                                    x y)) y))))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Vsd:(zen.term abst_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_plus x 
                                                                   y)) v_Vsd) 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_plus x 
                                                                   y)) y)))) 
                                                 y y 
                                                 (v_Vee:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              y y)))) =>
                                                  zen.Rnoteq abst_T y v_Vee) 
                                                 (v_Vud:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) 
                                                                    (
                                                                    abst_plus 
                                                                    x y)) y) 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) 
                                                                    (
                                                                    abst_plus 
                                                                    x y)) y))))) =>
                                                  zen.Rnoteq basics.bool__t 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_plus x y)) y) 
                                                    v_Vud) v_Vud) v_Vud) 
                                           (v_Vvd:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_opposite x) 
                                                           (abst_plus x y)) y)))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_plus x y)) y))) 
                                              v_Vvd v_Vvc) v_Vvd) v_Vzd) 
                                     v_Vyd) v_Vxd) v_Vnd) 
                            abst_equal_transitive) 
                         (v_Vae:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus 
                                            (abst_plus (abst_opposite x) x) y) 
                                         y))))) =>
                          zen.Rcut 
                            (zen.and 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_plus 
                                           (abst_plus (abst_opposite x) x) y) 
                                        (abst_plus abst_zero y)))) 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_plus (abst_opposite x) x) 
                                              y) (abst_plus abst_zero y)))))) 
                            (v_Vfe:
                             (zen.proof 
                                (zen.and 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_plus 
                                               (abst_plus (abst_opposite x) x) 
                                               y) (abst_plus abst_zero y)))) 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_plus 
                                                     (abst_opposite x) x) y) 
                                               (abst_plus abst_zero y))))))) =>
                             zen.Rand 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_plus 
                                           (abst_plus (abst_opposite x) x) y) 
                                        (abst_plus abst_zero y)))) 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_plus (abst_opposite x) x) 
                                              y) (abst_plus abst_zero y))))) 
                               (v_Vge:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_plus 
                                               (abst_plus (abst_opposite x) x) 
                                               y) (abst_plus abst_zero y))))) =>
                                v_Vhe:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_plus 
                                                     (abst_opposite x) x) y) 
                                               (abst_plus abst_zero y)))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_plus (abst_opposite x) x) 
                                              y) (abst_plus abst_zero y)))) 
                                  __X_1_5_LEMMA v_Vhe) v_Vfe) 
                            (v_Vie:
                             (zen.proof 
                                (zen.not 
                                   (zen.and 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus 
                                                  (abst_plus 
                                                     (abst_opposite x) x) y) 
                                               (abst_plus abst_zero y)))) 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus 
                                                     (abst_plus 
                                                        (abst_opposite x) x) 
                                                     y) 
                                                  (abst_plus abst_zero y)))))))) =>
                             zen.Rcut (zen.triangle (zen.equal abst_T y y)) 
                               (v_Vje:
                                (zen.proof 
                                   (zen.triangle (zen.equal abst_T y y))) =>
                                zen.Rsubst basics.bool__t 
                                  (v_Vbd:(zen.term basics.bool__t) =>
                                   zen.triangle (focal.is_true v_Vbd)) 
                                  (abst_equal (abst_plus abst_zero y) y) 
                                  (abst_equal 
                                     (abst_plus 
                                        (abst_plus (abst_opposite x) x) y) y) 
                                  (v_Vke:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (abst_equal 
                                                  (abst_plus abst_zero y) y) 
                                               (abst_equal 
                                                  (abst_plus 
                                                     (abst_plus 
                                                        (abst_opposite x) x) 
                                                     y) y))))) =>
                                   zen.Rsubst abst_T 
                                     (v_Vbe:(zen.term abst_T) =>
                                      zen.not 
                                        (zen.triangle 
                                           (zen.equal basics.bool__t 
                                              (abst_equal v_Vbe y) 
                                              (abst_equal 
                                                 (abst_plus 
                                                    (abst_plus 
                                                       (abst_opposite x) x) y) 
                                                 y)))) 
                                     (abst_plus abst_zero y) 
                                     (abst_plus 
                                        (abst_plus (abst_opposite x) x) y) 
                                     (v_Vle:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus abst_zero y) 
                                                  (abst_plus 
                                                     (abst_plus 
                                                        (abst_opposite x) x) 
                                                     y))))) =>
                                      zen.Rnotand 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus 
                                                    (abst_plus 
                                                       (abst_opposite x) x) y) 
                                                 (abst_plus abst_zero y)))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_plus 
                                                          (abst_opposite x) x) 
                                                       y) 
                                                    (abst_plus abst_zero y))))) 
                                        (v_Vme:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) x) y) 
                                                        (abst_plus abst_zero 
                                                           y)))))) =>
                                         zen.Rnotnot 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus 
                                                    (abst_plus 
                                                       (abst_opposite x) x) y) 
                                                 (abst_plus abst_zero y))) 
                                           (v_Vne:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus 
                                                        (abst_plus 
                                                           (abst_opposite x) 
                                                           x) y) 
                                                     (abst_plus abst_zero y)))) =>
                                            zen.Rcut 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_plus 
                                                       (abst_plus 
                                                          (abst_opposite x) x) 
                                                       y) 
                                                    (abst_plus 
                                                       (abst_plus 
                                                          (abst_opposite x) x) 
                                                       y))) 
                                              (v_Voe:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) x) y) 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) x) y)))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Vpe:(zen.term abst_T) =>
                                                  zen.triangle 
                                                    (zen.equal abst_T v_Vpe 
                                                       (abst_plus 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             x) y))) 
                                                 (abst_plus 
                                                    (abst_plus 
                                                       (abst_opposite x) x) y) 
                                                 (abst_plus abst_zero y) 
                                                 (v_Vge:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) x) y) 
                                                              (abst_plus 
                                                                 abst_zero y))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) x) y) 
                                                          (abst_plus 
                                                             abst_zero y))) 
                                                    v_Vne v_Vge) 
                                                 (v_Vqe:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_plus 
                                                              abst_zero y) 
                                                           (abst_plus 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) x) y)))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Vre:
                                                     (zen.term abst_T) =>
                                                     zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus 
                                                             abst_zero y) 
                                                          v_Vre)) 
                                                    (abst_plus 
                                                       (abst_plus 
                                                          (abst_opposite x) x) 
                                                       y) 
                                                    (abst_plus 
                                                       (abst_plus 
                                                          (abst_opposite x) x) 
                                                       y) 
                                                    (v_Vse:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y))))) =>
                                                     zen.Rnoteq abst_T 
                                                       (abst_plus 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             x) y) v_Vse) 
                                                    (v_Vqe:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_plus 
                                                                 abst_zero y) 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) x) y)))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_plus 
                                                                abst_zero y) 
                                                             (abst_plus 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    x) x) y))) 
                                                       v_Vqe v_Vle) v_Vqe) 
                                                 v_Voe) 
                                              (v_Vse:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_plus 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) x) y) 
                                                           (abst_plus 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) x) y))))) =>
                                               zen.Rnoteq abst_T 
                                                 (abst_plus 
                                                    (abst_plus 
                                                       (abst_opposite x) x) y) 
                                                 v_Vse)) v_Vme) 
                                        (v_Vte:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) x) y) 
                                                           (abst_plus 
                                                              abst_zero y))))))) =>
                                         zen.Rnotnot 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_plus 
                                                          (abst_opposite x) x) 
                                                       y) 
                                                    (abst_plus abst_zero y)))) 
                                           (__X_1_5_LEMMA:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) x) y) 
                                                        (abst_plus abst_zero 
                                                           y))))) =>
                                            zen.Rall abst_T 
                                              (v_Vkd:(zen.term abst_T) =>
                                               zen.forall abst_T 
                                                 (v_Vld:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vmd:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                v_Vkd v_Vld))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vld 
                                                                   v_Vmd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vkd 
                                                                   v_Vmd))))))) 
                                              (abst_plus 
                                                 (abst_plus 
                                                    (abst_opposite x) x) y) 
                                              (v_Vue:
                                               (zen.proof 
                                                  (zen.forall abst_T 
                                                     (v_Vld:
                                                      (zen.term abst_T) =>
                                                      zen.forall abst_T 
                                                        (v_Vmd:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    v_Vld))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    v_Vmd)))))))) =>
                                               zen.Rall abst_T 
                                                 (v_Vld:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vmd:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                v_Vld))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vld 
                                                                   v_Vmd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                   v_Vmd)))))) 
                                                 (abst_plus abst_zero y) 
                                                 (v_Vve:
                                                  (zen.proof 
                                                     (zen.forall abst_T 
                                                        (v_Vmd:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    (
                                                                    abst_plus 
                                                                    abst_zero 
                                                                    y)))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y) v_Vmd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    v_Vmd))))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vmd:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   y)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    y) v_Vmd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                   v_Vmd))))) 
                                                    y 
                                                    (v_Vwe:
                                                     (zen.proof 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    (
                                                                    abst_plus 
                                                                    abst_zero 
                                                                    y)))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y) y))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    y)))))) =>
                                                     zen.Rimply 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   y)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    y) y))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                   y)))) 
                                                       (v_Vhe:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y)))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    y)))) 
                                                          __X_1_5_LEMMA v_Vhe) 
                                                       (v_Vxe:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y) y))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    y))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    y) y))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                   y))) 
                                                          (v_Vye:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y) y))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y) y))) 
                                                             __X_1_6_LEMMA 
                                                             v_Vye) 
                                                          (v_Vwd:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    y)))) =>
                                                           zen.Rsubst 
                                                             basics.bool__t 
                                                             (v_Vbd:
                                                              (zen.term 
                                                                 basics.bool__t) =>
                                                              zen.triangle 
                                                                (focal.is_true 
                                                                   v_Vbd)) 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                y) 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                y) 
                                                             (v_Vze:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    y) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    y))))) =>
                                                              zen.Rsubst 
                                                                abst_T 
                                                                (v_Vbe:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vbe y) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    y)))) 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                (v_Vse:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y))))) =>
                                                                 zen.Rnoteq 
                                                                   abst_T 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                   v_Vse) 
                                                                (v_Vze:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    y) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    y))))) =>
                                                                 zen.Rsubst 
                                                                   abst_T 
                                                                   (v_Vaf:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    v_Vaf) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    y)))) y 
                                                                   y 
                                                                   (v_Vee:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T y 
                                                                    y)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T y 
                                                                    y)) 
                                                                    v_Vje 
                                                                    v_Vee) 
                                                                   (v_Vze:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    y) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    y))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    y) v_Vze) 
                                                                   v_Vze) 
                                                                v_Vze) 
                                                             (v_Vwd:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    y)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    y))) 
                                                                v_Vwd v_Vae) 
                                                             v_Vwd) v_Vxe) 
                                                       v_Vwe) v_Vve) v_Vue) 
                                              abst_equal_transitive) v_Vte) 
                                        v_Vie) 
                                     (v_Vze:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_plus 
                                                           (abst_opposite x) 
                                                           x) y) y) 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_plus 
                                                           (abst_opposite x) 
                                                           x) y) y))))) =>
                                      zen.Rsubst abst_T 
                                        (v_Vaf:(zen.term abst_T) =>
                                         zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_plus 
                                                          (abst_opposite x) x) 
                                                       y) v_Vaf) 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_plus 
                                                          (abst_opposite x) x) 
                                                       y) y)))) y y 
                                        (v_Vee:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T y y)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal abst_T y y)) v_Vje 
                                           v_Vee) 
                                        (v_Vze:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) x) y) y) 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) x) y) y))))) =>
                                         zen.Rnoteq basics.bool__t 
                                           (abst_equal 
                                              (abst_plus 
                                                 (abst_plus 
                                                    (abst_opposite x) x) y) y) 
                                           v_Vze) v_Vze) v_Vke) 
                                  (v_Vwd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_plus 
                                                     (abst_opposite x) x) y) 
                                               y)))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus 
                                                 (abst_plus 
                                                    (abst_opposite x) x) y) y))) 
                                     v_Vwd v_Vae) __X_1_6_LEMMA) 
                               (v_Vee:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle (zen.equal abst_T y y)))) =>
                                zen.Rcut 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal y y))) 
                                  (v_Vbf:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true (abst_equal y y)))) =>
                                   zen.Rall abst_T 
                                     (v_Vkd:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vld:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vmd:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vkd v_Vld))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vld 
                                                          v_Vmd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vkd 
                                                          v_Vmd))))))) 
                                     (abst_plus abst_zero y) 
                                     (v_Vcf:
                                      (zen.proof 
                                         (zen.forall abst_T 
                                            (v_Vld:(zen.term abst_T) =>
                                             zen.forall abst_T 
                                               (v_Vmd:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              abst_zero y) 
                                                           v_Vld))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Vld 
                                                              v_Vmd))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 abst_zero y) 
                                                              v_Vmd)))))))) =>
                                      zen.Rall abst_T 
                                        (v_Vld:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vmd:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus abst_zero y) 
                                                       v_Vld))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vld 
                                                          v_Vmd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             abst_zero y) 
                                                          v_Vmd)))))) y 
                                        (v_Vdf:
                                         (zen.proof 
                                            (zen.forall abst_T 
                                               (v_Vmd:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              abst_zero y) y))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal y 
                                                              v_Vmd))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 abst_zero y) 
                                                              v_Vmd))))))) =>
                                         zen.Rall abst_T 
                                           (v_Vmd:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus abst_zero y) 
                                                       y))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal y v_Vmd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             abst_zero y) 
                                                          v_Vmd))))) y 
                                           (v_Vef:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              abst_zero y) y))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal y y))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 abst_zero y) 
                                                              y)))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus abst_zero y) 
                                                       y))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal y y))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             abst_zero y) y)))) 
                                              (v_Vye:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 abst_zero y) 
                                                              y))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             abst_zero y) y))) 
                                                 __X_1_6_LEMMA v_Vye) 
                                              (v_Vff:
                                               (zen.proof 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal y y))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 abst_zero y) 
                                                              y))))) =>
                                               zen.Rimply 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal y y))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             abst_zero y) y))) 
                                                 (v_Vgf:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal y y))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal y y))) 
                                                    v_Vbf v_Vgf) 
                                                 (__X_1_6_LEMMA:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 abst_zero y) 
                                                              y)))) =>
                                                  zen.Rsubst basics.bool__t 
                                                    (v_Vbd:
                                                     (zen.term basics.bool__t) =>
                                                     zen.triangle 
                                                       (focal.is_true v_Vbd)) 
                                                    (abst_equal 
                                                       (abst_plus abst_zero y) 
                                                       y) 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             x) y) y) 
                                                    (v_Vke:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    abst_zero 
                                                                    y) y) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    y))))) =>
                                                     zen.Rsubst abst_T 
                                                       (v_Vbe:
                                                        (zen.term abst_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   v_Vbe y) 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                   y)))) 
                                                       (abst_plus abst_zero y) 
                                                       (abst_plus 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             x) y) 
                                                       (v_Vle:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_plus 
                                                                    abst_zero 
                                                                    y) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y))))) =>
                                                        zen.Rnotand 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    y)))) 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y))))) 
                                                          (v_Vme:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y)))))) =>
                                                           zen.Rnotnot 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    y))) 
                                                             (v_Vne:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y)))) =>
                                                              zen.Reqsym 
                                                                abst_T 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   y) v_Vne 
                                                                v_Vle) v_Vme) 
                                                          (v_Vte:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y))))))) =>
                                                           zen.Rnotnot 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y)))) 
                                                             (__X_1_5_LEMMA:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y))))) =>
                                                              zen.Rall 
                                                                abst_T 
                                                                (v_Vkd:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.forall 
                                                                   abst_T 
                                                                   (v_Vld:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                (v_Vue:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vld:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    v_Vmd)))))))) =>
                                                                 zen.Rall 
                                                                   abst_T 
                                                                   (v_Vld:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    v_Vmd)))))) 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    y) 
                                                                   (v_Vve:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y) v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    v_Vmd))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y) v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    v_Vmd))))) 
                                                                    y 
                                                                    (v_Vwe:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y) y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    y)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y) y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    y)))) 
                                                                    (v_Vhe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y)))) 
                                                                    __X_1_5_LEMMA 
                                                                    v_Vhe) 
                                                                    (v_Vxe:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y) y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    y))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y) y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    y))) 
                                                                    (v_Vye:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y) y))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    y) y))) 
                                                                    __X_1_6_LEMMA 
                                                                    v_Vye) 
                                                                    (v_Vwd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    y)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    y))) 
                                                                    v_Vwd 
                                                                    v_Vae) 
                                                                    v_Vxe) 
                                                                    v_Vwe) 
                                                                    v_Vve) 
                                                                   v_Vue) 
                                                                abst_equal_transitive) 
                                                             v_Vte) v_Vie) 
                                                       (v_Vze:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    y) 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    y))))) =>
                                                        zen.Rsubst abst_T 
                                                          (v_Vhf:
                                                           (zen.term abst_T) =>
                                                           zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    v_Vhf) 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    y)))) y 
                                                          y 
                                                          (v_Vee:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T y 
                                                                    y)))) =>
                                                           zen.Rnoteq abst_T 
                                                             y v_Vee) 
                                                          (v_Vze:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    y) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                    y))))) =>
                                                           zen.Rnoteq 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                y) v_Vze) 
                                                          v_Vze) v_Vke) 
                                                    (v_Vwd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                 y)))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) y) 
                                                                y))) v_Vwd 
                                                       v_Vae) __X_1_6_LEMMA) 
                                                 v_Vff) v_Vef) v_Vdf) v_Vcf) 
                                     abst_equal_transitive) 
                                  (v_Vgf:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true (abst_equal y y))))) =>
                                   zen.Rnoteq abst_T y v_Vee))))))))) 
            (zen.nnpp 
               (zen.triangle 
                  (focal.is_true (abst_equal (abst_plus abst_zero y) y))) 
               (v_Vzb:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus abst_zero y) y))))) =>
                zen.Rall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.and 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_plus v_Vac abst_zero) v_Vac))) 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_plus abst_zero v_Vac) v_Vac)))) 
                  y 
                  (v_Vbc:
                   (zen.proof 
                      (zen.and 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_plus y abst_zero) y))) 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_plus abst_zero y) y))))) =>
                   zen.Rand 
                     (zen.triangle 
                        (focal.is_true (abst_equal (abst_plus y abst_zero) y))) 
                     (zen.triangle 
                        (focal.is_true (abst_equal (abst_plus abst_zero y) y))) 
                     (v_Vcc:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_plus y abst_zero) y)))) =>
                      v_Vdc:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_plus abst_zero y) y)))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_plus abst_zero y) y))) v_Vdc 
                        v_Vzb) v_Vbc) abst_zero_is_neutral))) 
           (zen.nnpp 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal 
                       (abst_plus (abst_plus (abst_opposite x) x) y) 
                       (abst_plus abst_zero y)))) 
              (v_Vzb:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal 
                              (abst_plus (abst_plus (abst_opposite x) x) y) 
                              (abst_plus abst_zero y)))))) =>
               zen.Rall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vac v_Vbc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus v_Vac v_Vcc) 
                                   (abst_plus v_Vbc v_Vcc))))))) 
                 (abst_plus (abst_opposite x) x) 
                 (v_Vdc:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vbc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vcc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_opposite x) x) v_Vbc))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus 
                                          (abst_plus (abst_opposite x) x) 
                                          v_Vcc) (abst_plus v_Vbc v_Vcc)))))))) =>
                  zen.Rall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus (abst_opposite x) x) 
                                   v_Vbc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus 
                                      (abst_plus (abst_opposite x) x) v_Vcc) 
                                   (abst_plus v_Vbc v_Vcc)))))) abst_zero 
                    (v_Vec:
                     (zen.proof 
                        (zen.forall abst_T 
                           (v_Vcc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_opposite x) x) 
                                       abst_zero))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus 
                                          (abst_plus (abst_opposite x) x) 
                                          v_Vcc) (abst_plus abst_zero v_Vcc))))))) =>
                     zen.Rall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus (abst_opposite x) x) 
                                   abst_zero))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus 
                                      (abst_plus (abst_opposite x) x) v_Vcc) 
                                   (abst_plus abst_zero v_Vcc))))) y 
                       (v_Vfc:
                        (zen.proof 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_opposite x) x) 
                                       abst_zero))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus 
                                          (abst_plus (abst_opposite x) x) y) 
                                       (abst_plus abst_zero y)))))) =>
                        zen.Rimply 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus (abst_opposite x) x) 
                                   abst_zero))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus 
                                      (abst_plus (abst_opposite x) x) y) 
                                   (abst_plus abst_zero y)))) 
                          (v_Vgc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus (abst_opposite x) x) 
                                          abst_zero))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_opposite x) x) 
                                      abst_zero))) __X_1_4_LEMMA v_Vgc) 
                          (v_Vhc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus 
                                          (abst_plus (abst_opposite x) x) y) 
                                       (abst_plus abst_zero y))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus 
                                         (abst_plus (abst_opposite x) x) y) 
                                      (abst_plus abst_zero y)))) v_Vhc v_Vzb) 
                          v_Vfc) v_Vec) v_Vdc) 
                 abst_plus_left_substitution_rule))) 
          (zen.nnpp 
             (zen.triangle 
                (focal.is_true 
                   (abst_equal (abst_plus (abst_opposite x) x) abst_zero))) 
             (v_Vkc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_plus (abst_opposite x) x) 
                             abst_zero))))) =>
              zen.Rcut 
                (zen.and 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T (abst_plus (abst_opposite x) x) 
                            (abst_plus x (abst_opposite x))))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus (abst_opposite x) x) 
                               (abst_plus x (abst_opposite x))))))) 
                (v_Vlc:
                 (zen.proof 
                    (zen.and 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T 
                                (abst_plus (abst_opposite x) x) 
                                (abst_plus x (abst_opposite x))))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus (abst_opposite x) x) 
                                   (abst_plus x (abst_opposite x)))))))) =>
                 zen.Rand 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T (abst_plus (abst_opposite x) x) 
                            (abst_plus x (abst_opposite x))))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus (abst_opposite x) x) 
                               (abst_plus x (abst_opposite x)))))) 
                   (v_Vmc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T 
                                (abst_plus (abst_opposite x) x) 
                                (abst_plus x (abst_opposite x)))))) =>
                    v_Vnc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus (abst_opposite x) x) 
                                   (abst_plus x (abst_opposite x))))))) =>
                    zen.Rall abst_T 
                      (v_Voc:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vpc:(zen.term abst_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_plus v_Voc v_Vpc) 
                                  (abst_plus v_Vpc v_Voc))))) 
                      (abst_opposite x) 
                      (v_Vqc:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vpc:(zen.term abst_T) =>
                              zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_opposite x) v_Vpc) 
                                      (abst_plus v_Vpc (abst_opposite x))))))) =>
                       zen.Rall abst_T 
                         (v_Vpc:(zen.term abst_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_opposite x) v_Vpc) 
                                  (abst_plus v_Vpc (abst_opposite x))))) x 
                         (v_Vrc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_opposite x) x) 
                                      (abst_plus x (abst_opposite x)))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus (abst_opposite x) x) 
                                     (abst_plus x (abst_opposite x))))) 
                            v_Vrc v_Vnc) v_Vqc) abst_plus_commutes) v_Vlc) 
                (v_Vsc:
                 (zen.proof 
                    (zen.not 
                       (zen.and 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal abst_T 
                                   (abst_plus (abst_opposite x) x) 
                                   (abst_plus x (abst_opposite x))))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_opposite x) x) 
                                      (abst_plus x (abst_opposite x))))))))) =>
                 zen.Rcut 
                   (zen.triangle (zen.equal abst_T abst_zero abst_zero)) 
                   (v_Vtc:
                    (zen.proof 
                       (zen.triangle (zen.equal abst_T abst_zero abst_zero))) =>
                    zen.Rsubst basics.bool__t 
                      (v_Vuc:(zen.term basics.bool__t) =>
                       zen.triangle (focal.is_true v_Vuc)) 
                      (abst_equal (abst_plus x (abst_opposite x)) abst_zero) 
                      (abst_equal (abst_plus (abst_opposite x) x) abst_zero) 
                      (v_Vvc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (abst_equal 
                                      (abst_plus x (abst_opposite x)) 
                                      abst_zero) 
                                   (abst_equal 
                                      (abst_plus (abst_opposite x) x) 
                                      abst_zero))))) =>
                       zen.Rsubst abst_T 
                         (v_Vwc:(zen.term abst_T) =>
                          zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (abst_equal v_Vwc abst_zero) 
                                  (abst_equal 
                                     (abst_plus (abst_opposite x) x) 
                                     abst_zero)))) 
                         (abst_plus x (abst_opposite x)) 
                         (abst_plus (abst_opposite x) x) 
                         (v_Vxc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_plus x (abst_opposite x)) 
                                      (abst_plus (abst_opposite x) x))))) =>
                          zen.Rnotand 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_plus (abst_opposite x) x) 
                                     (abst_plus x (abst_opposite x))))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus (abst_opposite x) x) 
                                        (abst_plus x (abst_opposite x)))))) 
                            (v_Vyc:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_plus (abst_opposite x) x) 
                                            (abst_plus x (abst_opposite x))))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_plus (abst_opposite x) x) 
                                     (abst_plus x (abst_opposite x)))) 
                               (v_Vzc:
                                (zen.proof 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_plus (abst_opposite x) x) 
                                         (abst_plus x (abst_opposite x))))) =>
                                zen.Rcut 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_plus (abst_opposite x) x) 
                                        (abst_plus (abst_opposite x) x))) 
                                  (v_Vad:
                                   (zen.proof 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_plus (abst_opposite x) x) 
                                            (abst_plus (abst_opposite x) x)))) =>
                                   zen.Rsubst abst_T 
                                     (v_Vbd:(zen.term abst_T) =>
                                      zen.triangle 
                                        (zen.equal abst_T v_Vbd 
                                           (abst_plus (abst_opposite x) x))) 
                                     (abst_plus (abst_opposite x) x) 
                                     (abst_plus x (abst_opposite x)) 
                                     (v_Vmc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus 
                                                     (abst_opposite x) x) 
                                                  (abst_plus x 
                                                     (abst_opposite x)))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus (abst_opposite x) x) 
                                              (abst_plus x (abst_opposite x)))) 
                                        v_Vzc v_Vmc) 
                                     (v_Vcd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus x (abst_opposite x)) 
                                               (abst_plus (abst_opposite x) x)))) =>
                                      zen.Rsubst abst_T 
                                        (v_Vdd:(zen.term abst_T) =>
                                         zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus x (abst_opposite x)) 
                                              v_Vdd)) 
                                        (abst_plus (abst_opposite x) x) 
                                        (abst_plus (abst_opposite x) x) 
                                        (v_Ved:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus 
                                                        (abst_opposite x) x) 
                                                     (abst_plus 
                                                        (abst_opposite x) x))))) =>
                                         zen.Rnoteq abst_T 
                                           (abst_plus (abst_opposite x) x) 
                                           v_Ved) 
                                        (v_Vcd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus x 
                                                     (abst_opposite x)) 
                                                  (abst_plus 
                                                     (abst_opposite x) x)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus x 
                                                    (abst_opposite x)) 
                                                 (abst_plus 
                                                    (abst_opposite x) x))) 
                                           v_Vcd v_Vxc) v_Vcd) v_Vad) 
                                  (v_Ved:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus (abst_opposite x) x) 
                                               (abst_plus (abst_opposite x) x))))) =>
                                   zen.Rnoteq abst_T 
                                     (abst_plus (abst_opposite x) x) v_Ved)) 
                               v_Vyc) 
                            (v_Vfd:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus (abst_opposite x) x) 
                                               (abst_plus x (abst_opposite x)))))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus (abst_opposite x) x) 
                                        (abst_plus x (abst_opposite x))))) 
                               (v_Vrc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus (abst_opposite x) x) 
                                            (abst_plus x (abst_opposite x)))))) =>
                                zen.Rall abst_T 
                                  (v_Voc:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vpc:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vgd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Voc v_Vpc))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vpc v_Vgd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Voc v_Vgd))))))) 
                                  (abst_plus (abst_opposite x) x) 
                                  (v_Vhd:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vpc:(zen.term abst_T) =>
                                          zen.forall abst_T 
                                            (v_Vgd:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_opposite x) 
                                                           x) v_Vpc))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vpc 
                                                           v_Vgd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) x) v_Vgd)))))))) =>
                                   zen.Rall abst_T 
                                     (v_Vpc:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vgd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_opposite x) x) 
                                                    v_Vpc))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vpc v_Vgd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_opposite x) x) 
                                                       v_Vgd)))))) 
                                     (abst_plus x (abst_opposite x)) 
                                     (v_Vid:
                                      (zen.proof 
                                         (zen.forall abst_T 
                                            (v_Vgd:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_opposite x) 
                                                           x) 
                                                        (abst_plus x 
                                                           (abst_opposite x))))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus x 
                                                              (abst_opposite 
                                                                 x)) v_Vgd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) x) v_Vgd))))))) =>
                                      zen.Rall abst_T 
                                        (v_Vgd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_opposite x) x) 
                                                    (abst_plus x 
                                                       (abst_opposite x))))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_opposite x)) 
                                                       v_Vgd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_opposite x) x) 
                                                       v_Vgd))))) abst_zero 
                                        (v_Vjd:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_opposite x) 
                                                           x) 
                                                        (abst_plus x 
                                                           (abst_opposite x))))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus x 
                                                              (abst_opposite 
                                                                 x)) 
                                                           abst_zero))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) x) 
                                                           abst_zero)))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_opposite x) x) 
                                                    (abst_plus x 
                                                       (abst_opposite x))))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_opposite x)) 
                                                       abst_zero))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_opposite x) x) 
                                                       abst_zero)))) 
                                           (v_Vnc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) x) 
                                                           (abst_plus x 
                                                              (abst_opposite 
                                                                 x))))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_opposite x) x) 
                                                       (abst_plus x 
                                                          (abst_opposite x))))) 
                                              v_Vrc v_Vnc) 
                                           (v_Vkd:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus x 
                                                              (abst_opposite 
                                                                 x)) 
                                                           abst_zero))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) x) 
                                                           abst_zero))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_opposite x)) 
                                                       abst_zero))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_opposite x) x) 
                                                       abst_zero))) 
                                              (v_Vld:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus x 
                                                                 (abst_opposite 
                                                                    x)) 
                                                              abst_zero))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_opposite x)) 
                                                          abst_zero))) 
                                                 __X_1_3_LEMMA v_Vld) 
                                              (v_Vmd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) x) 
                                                           abst_zero)))) =>
                                               zen.Rsubst basics.bool__t 
                                                 (v_Vuc:
                                                  (zen.term basics.bool__t) =>
                                                  zen.triangle 
                                                    (focal.is_true v_Vuc)) 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_opposite x) x) 
                                                    abst_zero) 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_opposite x) x) 
                                                    abst_zero) 
                                                 (v_Vnd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) x) 
                                                                 abst_zero) 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) x) 
                                                                 abst_zero))))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Vwc:
                                                     (zen.term abst_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                v_Vwc 
                                                                abst_zero) 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    x) x) 
                                                                abst_zero)))) 
                                                    (abst_plus 
                                                       (abst_opposite x) x) 
                                                    (abst_plus 
                                                       (abst_opposite x) x) 
                                                    (v_Ved:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) x) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) x))))) =>
                                                     zen.Rnoteq abst_T 
                                                       (abst_plus 
                                                          (abst_opposite x) x) 
                                                       v_Ved) 
                                                    (v_Vnd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) 
                                                                    abst_zero) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) 
                                                                    abst_zero))))) =>
                                                     zen.Rsubst abst_T 
                                                       (v_Vod:
                                                        (zen.term abst_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) 
                                                                   v_Vod) 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) 
                                                                   abst_zero)))) 
                                                       abst_zero abst_zero 
                                                       (v_Vpd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    abst_zero 
                                                                    abst_zero)))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T 
                                                                abst_zero 
                                                                abst_zero)) 
                                                          v_Vtc v_Vpd) 
                                                       (v_Vnd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) 
                                                                    abst_zero) 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) 
                                                                    abst_zero))))) =>
                                                        zen.Rnoteq 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) x) 
                                                             abst_zero) v_Vnd) 
                                                       v_Vnd) v_Vnd) 
                                                 (v_Vmd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) x) 
                                                              abst_zero)))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) x) 
                                                             abst_zero))) 
                                                    v_Vmd v_Vkc) v_Vmd) v_Vkd) 
                                           v_Vjd) v_Vid) v_Vhd) 
                                  abst_equal_transitive) v_Vfd) v_Vsc) 
                         (v_Vnd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_equal 
                                         (abst_plus (abst_opposite x) x) 
                                         abst_zero) 
                                      (abst_equal 
                                         (abst_plus (abst_opposite x) x) 
                                         abst_zero))))) =>
                          zen.Rsubst abst_T 
                            (v_Vod:(zen.term abst_T) =>
                             zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (abst_equal 
                                        (abst_plus (abst_opposite x) x) v_Vod) 
                                     (abst_equal 
                                        (abst_plus (abst_opposite x) x) 
                                        abst_zero)))) abst_zero abst_zero 
                            (v_Vpd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T abst_zero abst_zero)))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (zen.equal abst_T abst_zero abst_zero)) 
                               v_Vtc v_Vpd) 
                            (v_Vnd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (abst_equal 
                                            (abst_plus (abst_opposite x) x) 
                                            abst_zero) 
                                         (abst_equal 
                                            (abst_plus (abst_opposite x) x) 
                                            abst_zero))))) =>
                             zen.Rnoteq basics.bool__t 
                               (abst_equal (abst_plus (abst_opposite x) x) 
                                  abst_zero) v_Vnd) v_Vnd) v_Vvc) 
                      (v_Vmd:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus (abst_opposite x) x) 
                                   abst_zero)))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_plus (abst_opposite x) x) 
                                  abst_zero))) v_Vmd v_Vkc) __X_1_3_LEMMA) 
                   (v_Vpd:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T abst_zero abst_zero)))) =>
                    zen.Rcut 
                      (zen.triangle 
                         (focal.is_true (abst_equal abst_zero abst_zero))) 
                      (v_Vqd:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_equal abst_zero abst_zero)))) =>
                       zen.Rall abst_T 
                         (v_Voc:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vpc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vgd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Voc v_Vpc))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vpc v_Vgd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Voc v_Vgd))))))) 
                         (abst_plus x (abst_opposite x)) 
                         (v_Vrd:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vpc:(zen.term abst_T) =>
                                 zen.forall abst_T 
                                   (v_Vgd:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus x (abst_opposite x)) 
                                               v_Vpc))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vpc v_Vgd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus x 
                                                     (abst_opposite x)) v_Vgd)))))))) =>
                          zen.Rall abst_T 
                            (v_Vpc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vgd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus x (abst_opposite x)) 
                                           v_Vpc))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vpc v_Vgd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus x (abst_opposite x)) 
                                              v_Vgd)))))) abst_zero 
                            (v_Vsd:
                             (zen.proof 
                                (zen.forall abst_T 
                                   (v_Vgd:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus x (abst_opposite x)) 
                                               abst_zero))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal abst_zero v_Vgd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus x 
                                                     (abst_opposite x)) v_Vgd))))))) =>
                             zen.Rall abst_T 
                               (v_Vgd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus x (abst_opposite x)) 
                                           abst_zero))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal abst_zero v_Vgd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus x (abst_opposite x)) 
                                              v_Vgd))))) abst_zero 
                               (v_Vtd:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus x (abst_opposite x)) 
                                               abst_zero))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal abst_zero 
                                                  abst_zero))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus x 
                                                     (abst_opposite x)) 
                                                  abst_zero)))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus x (abst_opposite x)) 
                                           abst_zero))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal abst_zero abst_zero))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus x (abst_opposite x)) 
                                              abst_zero)))) 
                                  (v_Vld:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus x 
                                                     (abst_opposite x)) 
                                                  abst_zero))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus x (abst_opposite x)) 
                                              abst_zero))) __X_1_3_LEMMA 
                                     v_Vld) 
                                  (v_Vud:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal abst_zero 
                                                  abst_zero))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus x 
                                                     (abst_opposite x)) 
                                                  abst_zero))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal abst_zero abst_zero))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus x (abst_opposite x)) 
                                              abst_zero))) 
                                     (v_Vvd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal abst_zero 
                                                     abst_zero))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal abst_zero abst_zero))) 
                                        v_Vqd v_Vvd) 
                                     (__X_1_3_LEMMA:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus x 
                                                     (abst_opposite x)) 
                                                  abst_zero)))) =>
                                      zen.Rsubst basics.bool__t 
                                        (v_Vuc:(zen.term basics.bool__t) =>
                                         zen.triangle (focal.is_true v_Vuc)) 
                                        (abst_equal 
                                           (abst_plus x (abst_opposite x)) 
                                           abst_zero) 
                                        (abst_equal 
                                           (abst_plus (abst_opposite x) x) 
                                           abst_zero) 
                                        (v_Vvc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal 
                                                        (abst_plus x 
                                                           (abst_opposite x)) 
                                                        abst_zero) 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_opposite x) 
                                                           x) abst_zero))))) =>
                                         zen.Rsubst abst_T 
                                           (v_Vwc:(zen.term abst_T) =>
                                            zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal v_Vwc 
                                                       abst_zero) 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_opposite x) x) 
                                                       abst_zero)))) 
                                           (abst_plus x (abst_opposite x)) 
                                           (abst_plus (abst_opposite x) x) 
                                           (v_Vxc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_plus x 
                                                           (abst_opposite x)) 
                                                        (abst_plus 
                                                           (abst_opposite x) 
                                                           x))))) =>
                                            zen.Rnotand 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_plus 
                                                          (abst_opposite x) x) 
                                                       (abst_plus x 
                                                          (abst_opposite x))))) 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             x) 
                                                          (abst_plus x 
                                                             (abst_opposite x)))))) 
                                              (v_Vyc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) x) 
                                                              (abst_plus x 
                                                                 (abst_opposite 
                                                                    x))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_plus 
                                                          (abst_opposite x) x) 
                                                       (abst_plus x 
                                                          (abst_opposite x)))) 
                                                 (v_Vzc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) x) 
                                                           (abst_plus x 
                                                              (abst_opposite 
                                                                 x))))) =>
                                                  zen.Reqsym abst_T 
                                                    (abst_plus 
                                                       (abst_opposite x) x) 
                                                    (abst_plus x 
                                                       (abst_opposite x)) 
                                                    v_Vzc v_Vxc) v_Vyc) 
                                              (v_Vfd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) x) 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_opposite 
                                                                    x)))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             x) 
                                                          (abst_plus x 
                                                             (abst_opposite x))))) 
                                                 (v_Vrc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) x) 
                                                              (abst_plus x 
                                                                 (abst_opposite 
                                                                    x)))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Voc:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vpc:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vgd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vpc 
                                                                    v_Vgd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vgd))))))) 
                                                    (abst_plus 
                                                       (abst_opposite x) x) 
                                                    (v_Vhd:
                                                     (zen.proof 
                                                        (zen.forall abst_T 
                                                           (v_Vpc:
                                                            (zen.term abst_T) =>
                                                            zen.forall 
                                                              abst_T 
                                                              (v_Vgd:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) 
                                                                    v_Vpc))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vpc 
                                                                    v_Vgd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) 
                                                                    v_Vgd)))))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vpc:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vgd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) 
                                                                    v_Vpc))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vpc 
                                                                    v_Vgd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) 
                                                                    v_Vgd)))))) 
                                                       (abst_plus x 
                                                          (abst_opposite x)) 
                                                       (v_Vid:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              abst_T 
                                                              (v_Vgd:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) v_Vgd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) 
                                                                    v_Vgd))))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vgd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) v_Vgd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) 
                                                                    v_Vgd))))) 
                                                          abst_zero 
                                                          (v_Vjd:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) 
                                                                    abst_zero)))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) 
                                                                    abst_zero)))) 
                                                             (v_Vnc:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                                v_Vrc v_Vnc) 
                                                             (v_Vkd:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) 
                                                                    abst_zero))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) 
                                                                    abst_zero))) 
                                                                (v_Vld:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))) 
                                                                   __X_1_3_LEMMA 
                                                                   v_Vld) 
                                                                (v_Vmd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) 
                                                                    abst_zero)))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) x) 
                                                                    abst_zero))) 
                                                                   v_Vmd 
                                                                   v_Vkc) 
                                                                v_Vkd) v_Vjd) 
                                                          v_Vid) v_Vhd) 
                                                    abst_equal_transitive) 
                                                 v_Vfd) v_Vsc) 
                                           (v_Vnd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) x) 
                                                           abst_zero) 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) x) 
                                                           abst_zero))))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vod:(zen.term abst_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             x) v_Vod) 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             x) abst_zero)))) 
                                              abst_zero abst_zero 
                                              (v_Vpd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           abst_zero 
                                                           abst_zero)))) =>
                                               zen.Rnoteq abst_T abst_zero 
                                                 v_Vpd) 
                                              (v_Vnd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) x) 
                                                              abst_zero) 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) x) 
                                                              abst_zero))))) =>
                                               zen.Rnoteq basics.bool__t 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_opposite x) x) 
                                                    abst_zero) v_Vnd) v_Vnd) 
                                           v_Vvc) 
                                        (v_Vmd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_opposite x) x) 
                                                     abst_zero)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_opposite x) x) 
                                                    abst_zero))) v_Vmd v_Vkc) 
                                        __X_1_3_LEMMA) v_Vud) v_Vtd) v_Vsd) 
                            v_Vrd) abst_equal_transitive) 
                      (v_Vvd:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal abst_zero abst_zero))))) =>
                       zen.Rnoteq abst_T abst_zero v_Vpd)))))) 
         (zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (abst_equal (abst_plus x (abst_opposite x)) abst_zero))) 
            (v_Vzb:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_plus x (abst_opposite x)) 
                            abst_zero))))) =>
             zen.Rall abst_T 
               (v_Vac:(zen.term abst_T) =>
                zen.triangle 
                  (focal.is_true 
                     (abst_equal (abst_plus v_Vac (abst_opposite v_Vac)) 
                        abst_zero))) x 
               (v_Vbc:
                (zen.proof 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_plus x (abst_opposite x)) 
                            abst_zero)))) =>
                zen.Raxiom 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_plus x (abst_opposite x)) abst_zero))) 
                  v_Vbc v_Vzb) abst_opposite_is_opposite))) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true 
                 (abst_equal (abst_plus (abst_opposite x) (abst_plus x y)) 
                    (abst_plus (abst_plus (abst_opposite x) x) y)))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal 
                           (abst_plus (abst_opposite x) (abst_plus x y)) 
                           (abst_plus (abst_plus (abst_opposite x) x) y)))))) =>
            zen.Rall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (abst_equal 
                             (abst_plus v_Vac (abst_plus v_Vbc v_Vcc)) 
                             (abst_plus (abst_plus v_Vac v_Vbc) v_Vcc)))))) 
              (abst_opposite x) 
              (v_Vdc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus (abst_opposite x) 
                                    (abst_plus v_Vbc v_Vcc)) 
                                 (abst_plus 
                                    (abst_plus (abst_opposite x) v_Vbc) v_Vcc))))))) =>
               zen.Rall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (abst_equal 
                             (abst_plus (abst_opposite x) 
                                (abst_plus v_Vbc v_Vcc)) 
                             (abst_plus (abst_plus (abst_opposite x) v_Vbc) 
                                v_Vcc))))) x 
                 (v_Vec:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus (abst_opposite x) 
                                    (abst_plus x v_Vcc)) 
                                 (abst_plus (abst_plus (abst_opposite x) x) 
                                    v_Vcc)))))) =>
                  zen.Rall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (abst_equal 
                             (abst_plus (abst_opposite x) (abst_plus x v_Vcc)) 
                             (abst_plus (abst_plus (abst_opposite x) x) v_Vcc)))) 
                    y 
                    (v_Vfc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus (abst_opposite x) (abst_plus x y)) 
                                 (abst_plus (abst_plus (abst_opposite x) x) y))))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus (abst_opposite x) (abst_plus x y)) 
                                (abst_plus (abst_plus (abst_opposite x) x) y)))) 
                       v_Vfc v_Vzb) v_Vec) v_Vdc) abst_plus_is_associative))) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (abst_equal (abst_plus (abst_opposite x) (abst_plus x y)) 
                   (abst_plus (abst_opposite x) (abst_plus x z))))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal 
                          (abst_plus (abst_opposite x) (abst_plus x y)) 
                          (abst_plus (abst_opposite x) (abst_plus x z))))))) =>
           zen.Rall abst_T 
             (v_Vac:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.imp 
                      (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus v_Vcc v_Vac) 
                               (abst_plus v_Vcc v_Vbc))))))) (abst_plus x y) 
             (v_Vdc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus x y) v_Vbc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus v_Vcc (abst_plus x y)) 
                                   (abst_plus v_Vcc v_Vbc)))))))) =>
              zen.Rall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.imp 
                      (zen.triangle 
                         (focal.is_true (abst_equal (abst_plus x y) v_Vbc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus v_Vcc (abst_plus x y)) 
                               (abst_plus v_Vcc v_Vbc)))))) (abst_plus x z) 
                (v_Vec:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus x y) (abst_plus x z)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus v_Vcc (abst_plus x y)) 
                                   (abst_plus v_Vcc (abst_plus x z)))))))) =>
                 zen.Rall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.imp 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus x y) (abst_plus x z)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus v_Vcc (abst_plus x y)) 
                               (abst_plus v_Vcc (abst_plus x z)))))) 
                   (abst_opposite x) 
                   (v_Vfc:
                    (zen.proof 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus x y) (abst_plus x z)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_opposite x) 
                                      (abst_plus x y)) 
                                   (abst_plus (abst_opposite x) 
                                      (abst_plus x z))))))) =>
                    zen.Rimply 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus x y) (abst_plus x z)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_plus (abst_opposite x) (abst_plus x y)) 
                               (abst_plus (abst_opposite x) (abst_plus x z))))) 
                      (v_Vgc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_plus x y) 
                                      (abst_plus x z)))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_plus x y) (abst_plus x z)))) 
                         H v_Vgc) 
                      (v_Vhc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_opposite x) 
                                      (abst_plus x y)) 
                                   (abst_plus (abst_opposite x) 
                                      (abst_plus x z)))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_opposite x) 
                                     (abst_plus x y)) 
                                  (abst_plus (abst_opposite x) 
                                     (abst_plus x z))))) v_Vhc v_Vzb) v_Vfc) 
                   v_Vec) v_Vdc) abst_plus_right_substitution_rule))).

def Additive_group__opposite_is_unique :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (abst_equal x y)) 
                                   (dk_logic.ebP (abst_equal y x)))))) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_opposite_is_opposite:(dk_logic.eP 
                               (dk_logic.forall abst_T 
                                  (x:(cc.eT abst_T) =>
                                   dk_logic.ebP 
                                     (abst_equal 
                                        (abst_plus x (abst_opposite x)) 
                                        abst_zero)))) ->
  abst_plus_is_regular:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.forall abst_T 
                                   (z:(cc.eT abst_T) =>
                                    dk_logic.and 
                                      (dk_logic.imp 
                                         (dk_logic.ebP 
                                            (abst_equal (abst_plus x y) 
                                               (abst_plus x z))) 
                                         (dk_logic.ebP (abst_equal y z))) 
                                      (dk_logic.imp 
                                         (dk_logic.ebP 
                                            (abst_equal (abst_plus x z) 
                                               (abst_plus y z))) 
                                         (dk_logic.ebP (abst_equal x y)))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (z:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (x:(cc.eT abst_T) =>
           dk_logic.imp 
             (dk_logic.ebP (abst_equal (abst_plus x z) abst_zero)) 
             (dk_logic.ebP (abst_equal z (abst_opposite x))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal y x)))))) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_opposite_is_opposite:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.ebP (abst_equal (abst_plus x (abst_opposite x)) abst_zero)))) =>
  abst_plus_is_regular:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.and 
                 (dk_logic.imp 
                    (dk_logic.ebP 
                       (abst_equal (abst_plus x y) (abst_plus x z))) 
                    (dk_logic.ebP (abst_equal y z))) 
                 (dk_logic.imp 
                    (dk_logic.ebP 
                       (abst_equal (abst_plus x z) (abst_plus y z))) 
                    (dk_logic.ebP (abst_equal x y)))))))) =>
  (__Y_1_LEMMA:
   (z:(cc.eT abst_T) ->
    x:(cc.eT abst_T) ->
    H:(dk_logic.eP (dk_logic.ebP (abst_equal (abst_plus x z) abst_zero))) ->
    dk_logic.eP (dk_logic.ebP (abst_equal z (abst_opposite x)))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.imp 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal (abst_plus v_Vac v_Vzb) abst_zero))) 
              (zen.triangle 
                 (focal.is_true (abst_equal v_Vzb (abst_opposite v_Vac))))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_plus v_Vac v_Vzb) abst_zero))) 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal v_Vzb (abst_opposite v_Vac))))))))) =>
      zen.Raxiom 
        (zen.forall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_plus v_Vac v_Vzb) abst_zero))) 
                 (zen.triangle 
                    (focal.is_true (abst_equal v_Vzb (abst_opposite v_Vac))))))) 
        __Y_1_LEMMA v_Vbc)) 
    (z:(cc.eT abst_T) =>
     x:(cc.eT abst_T) =>
     H:(dk_logic.eP (dk_logic.ebP (abst_equal (abst_plus x z) abst_zero))) =>
     (__Y_1_1_LEMMA:
      (dk_logic.eP (dk_logic.ebP (abst_equal (abst_opposite x) z))) =>
      zen.nnpp 
        (zen.triangle (focal.is_true (abst_equal z (abst_opposite x)))) 
        (v_Vzb:
         (zen.proof 
            (zen.not 
               (zen.triangle (focal.is_true (abst_equal z (abst_opposite x)))))) =>
         zen.Rall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
                 (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vac))))) 
           (abst_opposite x) 
           (v_Vcc:
            (zen.proof 
               (zen.forall abst_T 
                  (v_Vbc:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle 
                        (focal.is_true (abst_equal (abst_opposite x) v_Vbc))) 
                     (zen.triangle 
                        (focal.is_true (abst_equal v_Vbc (abst_opposite x))))))) =>
            zen.Rall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle 
                    (focal.is_true (abst_equal (abst_opposite x) v_Vbc))) 
                 (zen.triangle 
                    (focal.is_true (abst_equal v_Vbc (abst_opposite x))))) z 
              (v_Vdc:
               (zen.proof 
                  (zen.imp 
                     (zen.triangle 
                        (focal.is_true (abst_equal (abst_opposite x) z))) 
                     (zen.triangle 
                        (focal.is_true (abst_equal z (abst_opposite x)))))) =>
               zen.Rimply 
                 (zen.triangle 
                    (focal.is_true (abst_equal (abst_opposite x) z))) 
                 (zen.triangle 
                    (focal.is_true (abst_equal z (abst_opposite x)))) 
                 (v_Vec:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true (abst_equal (abst_opposite x) z))))) =>
                  zen.Raxiom 
                    (zen.triangle 
                       (focal.is_true (abst_equal (abst_opposite x) z))) 
                    __Y_1_1_LEMMA v_Vec) 
                 (v_Vfc:
                  (zen.proof 
                     (zen.triangle 
                        (focal.is_true (abst_equal z (abst_opposite x))))) =>
                  zen.Raxiom 
                    (zen.triangle 
                       (focal.is_true (abst_equal z (abst_opposite x)))) 
                    v_Vfc v_Vzb) v_Vdc) v_Vcc) abst_equal_symmetric)) 
       ((__Y_1_1_1_LEMMA:
         (dk_logic.eP 
            (dk_logic.ebP 
               (abst_equal (abst_plus x (abst_opposite x)) (abst_plus x z)))) =>
         zen.nnpp 
           (zen.triangle (focal.is_true (abst_equal (abst_opposite x) z))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true (abst_equal (abst_opposite x) z))))) =>
            zen.Rall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.and 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus v_Vac v_Vbc) 
                                   (abst_plus v_Vac v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vbc v_Vcc)))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus v_Vac v_Vcc) 
                                   (abst_plus v_Vbc v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vac v_Vbc))))))) x 
              (v_Vdc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.and 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_plus x v_Vbc) 
                                       (abst_plus x v_Vcc)))) 
                              (zen.triangle 
                                 (focal.is_true (abst_equal v_Vbc v_Vcc)))) 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_plus x v_Vcc) 
                                       (abst_plus v_Vbc v_Vcc)))) 
                              (zen.triangle 
                                 (focal.is_true (abst_equal x v_Vbc)))))))) =>
               zen.Rall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.and 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus x v_Vbc) 
                                   (abst_plus x v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vbc v_Vcc)))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus x v_Vcc) 
                                   (abst_plus v_Vbc v_Vcc)))) 
                          (zen.triangle (focal.is_true (abst_equal x v_Vbc)))))) 
                 (abst_opposite x) 
                 (v_Vec:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.and 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus x (abst_opposite x)) 
                                       (abst_plus x v_Vcc)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_opposite x) v_Vcc)))) 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_plus x v_Vcc) 
                                       (abst_plus (abst_opposite x) v_Vcc)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal x (abst_opposite x)))))))) =>
                  zen.Rall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.and 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus x (abst_opposite x)) 
                                   (abst_plus x v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_opposite x) v_Vcc)))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus x v_Vcc) 
                                   (abst_plus (abst_opposite x) v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal x (abst_opposite x)))))) 
                    z 
                    (v_Vfc:
                     (zen.proof 
                        (zen.and 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus x (abst_opposite x)) 
                                       (abst_plus x z)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_opposite x) z)))) 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_plus x z) 
                                       (abst_plus (abst_opposite x) z)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal x (abst_opposite x))))))) =>
                     zen.Rand 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus x (abst_opposite x)) 
                                   (abst_plus x z)))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal (abst_opposite x) z)))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus x z) 
                                   (abst_plus (abst_opposite x) z)))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal x (abst_opposite x))))) 
                       (v_Vgc:
                        (zen.proof 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus x (abst_opposite x)) 
                                       (abst_plus x z)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_opposite x) z))))) =>
                        v_Vhc:
                        (zen.proof 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_plus x z) 
                                       (abst_plus (abst_opposite x) z)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal x (abst_opposite x)))))) =>
                        zen.Rimply 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus x (abst_opposite x)) 
                                   (abst_plus x z)))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal (abst_opposite x) z))) 
                          (v_Vic:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus x (abst_opposite x)) 
                                          (abst_plus x z)))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus x (abst_opposite x)) 
                                      (abst_plus x z)))) __Y_1_1_1_LEMMA 
                             v_Vic) 
                          (v_Vjc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_opposite x) z)))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_opposite x) z))) v_Vjc 
                             v_Vzb) v_Vgc) v_Vfc) v_Vec) v_Vdc) 
              abst_plus_is_regular)) 
          ((__Y_1_1_1_1_LEMMA:
            (dk_logic.eP 
               (dk_logic.ebP 
                  (abst_equal (abst_plus x (abst_opposite x)) abst_zero))) =>
            (__Y_1_1_1_2_LEMMA:
             (dk_logic.eP 
                (dk_logic.ebP (abst_equal (abst_plus x z) abst_zero))) =>
             zen.nnpp 
               (zen.triangle 
                  (focal.is_true 
                     (abst_equal (abst_plus x (abst_opposite x)) 
                        (abst_plus x z)))) 
               (v_Vkc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus x (abst_opposite x)) 
                               (abst_plus x z)))))) =>
                zen.Rcut 
                  (zen.and 
                     (zen.not 
                        (zen.triangle 
                           (zen.equal abst_T (abst_plus x (abst_opposite x)) 
                              (abst_plus x (abst_opposite x))))) 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_plus x (abst_opposite x)) 
                                 (abst_plus x (abst_opposite x))))))) 
                  (v_Vlc:
                   (zen.proof 
                      (zen.and 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T 
                                  (abst_plus x (abst_opposite x)) 
                                  (abst_plus x (abst_opposite x))))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus x (abst_opposite x)) 
                                     (abst_plus x (abst_opposite x)))))))) =>
                   zen.Rand 
                     (zen.not 
                        (zen.triangle 
                           (zen.equal abst_T (abst_plus x (abst_opposite x)) 
                              (abst_plus x (abst_opposite x))))) 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_plus x (abst_opposite x)) 
                                 (abst_plus x (abst_opposite x)))))) 
                     (v_Vmc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T 
                                  (abst_plus x (abst_opposite x)) 
                                  (abst_plus x (abst_opposite x)))))) =>
                      v_Vnc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus x (abst_opposite x)) 
                                     (abst_plus x (abst_opposite x))))))) =>
                      zen.Rnoteq abst_T (abst_plus x (abst_opposite x)) v_Vmc) 
                     v_Vlc) 
                  (v_Voc:
                   (zen.proof 
                      (zen.not 
                         (zen.and 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_plus x (abst_opposite x)) 
                                     (abst_plus x (abst_opposite x))))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus x (abst_opposite x)) 
                                        (abst_plus x (abst_opposite x))))))))) =>
                   zen.Rcut 
                     (zen.triangle 
                        (zen.equal abst_T abst_zero (abst_plus x z))) 
                     (v_Vpc:
                      (zen.proof 
                         (zen.triangle 
                            (zen.equal abst_T abst_zero (abst_plus x z)))) =>
                      zen.Rsubst basics.bool__t 
                        (v_Vqc:(zen.term basics.bool__t) =>
                         zen.triangle (focal.is_true v_Vqc)) 
                        (abst_equal (abst_plus x (abst_opposite x)) abst_zero) 
                        (abst_equal (abst_plus x (abst_opposite x)) 
                           (abst_plus x z)) 
                        (v_Vrc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (abst_equal 
                                        (abst_plus x (abst_opposite x)) 
                                        abst_zero) 
                                     (abst_equal 
                                        (abst_plus x (abst_opposite x)) 
                                        (abst_plus x z)))))) =>
                         zen.Rsubst abst_T 
                           (v_Vsc:(zen.term abst_T) =>
                            zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (abst_equal v_Vsc abst_zero) 
                                    (abst_equal 
                                       (abst_plus x (abst_opposite x)) 
                                       (abst_plus x z))))) 
                           (abst_plus x (abst_opposite x)) 
                           (abst_plus x (abst_opposite x)) 
                           (v_Vmc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_plus x (abst_opposite x)) 
                                        (abst_plus x (abst_opposite x)))))) =>
                            zen.Rnotand 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal abst_T 
                                       (abst_plus x (abst_opposite x)) 
                                       (abst_plus x (abst_opposite x))))) 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus x (abst_opposite x)) 
                                          (abst_plus x (abst_opposite x)))))) 
                              (v_Vtc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus x (abst_opposite x)) 
                                              (abst_plus x (abst_opposite x))))))) =>
                               zen.Rnotnot 
                                 (zen.triangle 
                                    (zen.equal abst_T 
                                       (abst_plus x (abst_opposite x)) 
                                       (abst_plus x (abst_opposite x)))) 
                                 (v_Vuc:
                                  (zen.proof 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_plus x (abst_opposite x)) 
                                           (abst_plus x (abst_opposite x))))) =>
                                  zen.Rcut 
                                    (zen.triangle 
                                       (zen.equal abst_T 
                                          (abst_plus x (abst_opposite x)) 
                                          (abst_plus x (abst_opposite x)))) 
                                    (v_Vuc:
                                     (zen.proof 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus x (abst_opposite x)) 
                                              (abst_plus x (abst_opposite x))))) =>
                                     zen.Rsubst abst_T 
                                       (v_Vvc:(zen.term abst_T) =>
                                        zen.triangle 
                                          (zen.equal abst_T v_Vvc 
                                             (abst_plus x (abst_opposite x)))) 
                                       (abst_plus x (abst_opposite x)) 
                                       (abst_plus x (abst_opposite x)) 
                                       (v_Vmc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_plus x 
                                                       (abst_opposite x)) 
                                                    (abst_plus x 
                                                       (abst_opposite x)))))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_plus x 
                                                   (abst_opposite x)) 
                                                (abst_plus x 
                                                   (abst_opposite x)))) 
                                          v_Vuc v_Vmc) 
                                       (v_Vuc:
                                        (zen.proof 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus x 
                                                    (abst_opposite x)) 
                                                 (abst_plus x 
                                                    (abst_opposite x))))) =>
                                        zen.Rsubst abst_T 
                                          (v_Vwc:(zen.term abst_T) =>
                                           zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_plus x 
                                                   (abst_opposite x)) v_Vwc)) 
                                          (abst_plus x (abst_opposite x)) 
                                          (abst_plus x (abst_opposite x)) 
                                          (v_Vmc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_plus x 
                                                          (abst_opposite x)) 
                                                       (abst_plus x 
                                                          (abst_opposite x)))))) =>
                                           zen.Rnoteq abst_T 
                                             (abst_plus x (abst_opposite x)) 
                                             v_Vmc) 
                                          (v_Vuc:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_plus x 
                                                       (abst_opposite x)) 
                                                    (abst_plus x 
                                                       (abst_opposite x))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (zen.equal abst_T 
                                                   (abst_plus x 
                                                      (abst_opposite x)) 
                                                   (abst_plus x 
                                                      (abst_opposite x)))) 
                                             v_Vuc v_Vmc) v_Vuc) v_Vuc) 
                                    (v_Vmc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus x 
                                                    (abst_opposite x)) 
                                                 (abst_plus x 
                                                    (abst_opposite x)))))) =>
                                     zen.Rnoteq abst_T 
                                       (abst_plus x (abst_opposite x)) v_Vmc)) 
                                 v_Vtc) 
                              (v_Vxc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus x 
                                                    (abst_opposite x)) 
                                                 (abst_plus x 
                                                    (abst_opposite x)))))))) =>
                               zen.Rnotnot 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus x (abst_opposite x)) 
                                          (abst_plus x (abst_opposite x))))) 
                                 (v_Vyc:
                                  (zen.proof 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus x (abst_opposite x)) 
                                              (abst_plus x (abst_opposite x)))))) =>
                                  zen.Rall abst_T 
                                    (v_Vzc:(zen.term abst_T) =>
                                     zen.forall abst_T 
                                       (v_Vad:(zen.term abst_T) =>
                                        zen.forall abst_T 
                                          (v_Vbd:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Vzc v_Vad))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vad v_Vbd))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vzc v_Vbd))))))) 
                                    (abst_plus x (abst_opposite x)) 
                                    (v_Vcd:
                                     (zen.proof 
                                        (zen.forall abst_T 
                                           (v_Vad:(zen.term abst_T) =>
                                            zen.forall abst_T 
                                              (v_Vbd:(zen.term abst_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_opposite x)) 
                                                          v_Vad))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vad 
                                                             v_Vbd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_opposite 
                                                                   x)) v_Vbd)))))))) =>
                                     zen.Rall abst_T 
                                       (v_Vad:(zen.term abst_T) =>
                                        zen.forall abst_T 
                                          (v_Vbd:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus x 
                                                         (abst_opposite x)) 
                                                      v_Vad))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vad v_Vbd))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus x 
                                                            (abst_opposite x)) 
                                                         v_Vbd)))))) 
                                       (abst_plus x (abst_opposite x)) 
                                       (v_Vdd:
                                        (zen.proof 
                                           (zen.forall abst_T 
                                              (v_Vbd:(zen.term abst_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_opposite x)) 
                                                          (abst_plus x 
                                                             (abst_opposite x))))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_opposite 
                                                                   x)) v_Vbd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_opposite 
                                                                   x)) v_Vbd))))))) =>
                                        zen.Rall abst_T 
                                          (v_Vbd:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus x 
                                                         (abst_opposite x)) 
                                                      (abst_plus x 
                                                         (abst_opposite x))))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus x 
                                                            (abst_opposite x)) 
                                                         v_Vbd))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus x 
                                                            (abst_opposite x)) 
                                                         v_Vbd))))) 
                                          abst_zero 
                                          (v_Ved:
                                           (zen.proof 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_opposite x)) 
                                                          (abst_plus x 
                                                             (abst_opposite x))))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_opposite 
                                                                   x)) 
                                                             abst_zero))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_opposite 
                                                                   x)) 
                                                             abst_zero)))))) =>
                                           zen.Rimply 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus x 
                                                         (abst_opposite x)) 
                                                      (abst_plus x 
                                                         (abst_opposite x))))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus x 
                                                            (abst_opposite x)) 
                                                         abst_zero))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus x 
                                                            (abst_opposite x)) 
                                                         abst_zero)))) 
                                             (v_Vnc:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_opposite 
                                                                   x)) 
                                                             (abst_plus x 
                                                                (abst_opposite 
                                                                   x))))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus x 
                                                            (abst_opposite x)) 
                                                         (abst_plus x 
                                                            (abst_opposite x))))) 
                                                v_Vyc v_Vnc) 
                                             (v_Vfd:
                                              (zen.proof 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_opposite 
                                                                   x)) 
                                                             abst_zero))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_opposite 
                                                                   x)) 
                                                             abst_zero))))) =>
                                              zen.Rimply 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus x 
                                                            (abst_opposite x)) 
                                                         abst_zero))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus x 
                                                            (abst_opposite x)) 
                                                         abst_zero))) 
                                                (v_Vgd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus x 
                                                                   (abst_opposite 
                                                                    x)) 
                                                                abst_zero))))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus x 
                                                               (abst_opposite 
                                                                  x)) 
                                                            abst_zero))) 
                                                   __Y_1_1_1_1_LEMMA v_Vgd) 
                                                (__Y_1_1_1_1_LEMMA:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_opposite 
                                                                   x)) 
                                                             abst_zero)))) =>
                                                 zen.Rsubst basics.bool__t 
                                                   (v_Vqc:
                                                    (zen.term basics.bool__t) =>
                                                    zen.triangle 
                                                      (focal.is_true v_Vqc)) 
                                                   (abst_equal 
                                                      (abst_plus x 
                                                         (abst_opposite x)) 
                                                      abst_zero) 
                                                   (abst_equal 
                                                      (abst_plus x 
                                                         (abst_opposite x)) 
                                                      (abst_plus x z)) 
                                                   (v_Vrc:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                   abst_zero) 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                   (abst_plus 
                                                                    x z)))))) =>
                                                    zen.Rsubst abst_T 
                                                      (v_Vsc:
                                                       (zen.term abst_T) =>
                                                       zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (abst_equal 
                                                                  v_Vsc 
                                                                  abst_zero) 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                  (abst_plus 
                                                                    x z))))) 
                                                      (abst_plus x 
                                                         (abst_opposite x)) 
                                                      (abst_plus x 
                                                         (abst_opposite x)) 
                                                      (v_Vmc:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)))))) =>
                                                       zen.Rnoteq abst_T 
                                                         (abst_plus x 
                                                            (abst_opposite x)) 
                                                         v_Vmc) 
                                                      (v_Vrc:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero) 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x z)))))) =>
                                                       zen.Rsubst abst_T 
                                                         (v_Vhd:
                                                          (zen.term abst_T) =>
                                                          zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) v_Vhd) 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x z))))) 
                                                         abst_zero 
                                                         (abst_plus x z) 
                                                         (v_Vid:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    abst_zero 
                                                                    (abst_plus 
                                                                    x z))))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T 
                                                                  abst_zero 
                                                                  (abst_plus 
                                                                    x z))) 
                                                            v_Vpc v_Vid) 
                                                         (v_Vjd:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x z)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x z)))))) =>
                                                          zen.Rnoteq 
                                                            basics.bool__t 
                                                            (abst_equal 
                                                               (abst_plus x 
                                                                  (abst_opposite 
                                                                    x)) 
                                                               (abst_plus x z)) 
                                                            v_Vjd) v_Vrc) 
                                                      v_Vrc) 
                                                   (v_Vkd:
                                                    (zen.proof 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus x 
                                                                   (abst_opposite 
                                                                    x)) 
                                                                (abst_plus x 
                                                                   z))))) =>
                                                    zen.Raxiom 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_plus x 
                                                                  (abst_opposite 
                                                                    x)) 
                                                               (abst_plus x z)))) 
                                                      v_Vkd v_Vkc) 
                                                   __Y_1_1_1_1_LEMMA) v_Vfd) 
                                             v_Ved) v_Vdd) v_Vcd) 
                                    abst_equal_transitive) v_Vxc) v_Voc) 
                           (v_Vrc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (abst_equal 
                                           (abst_plus x (abst_opposite x)) 
                                           abst_zero) 
                                        (abst_equal 
                                           (abst_plus x (abst_opposite x)) 
                                           (abst_plus x z)))))) =>
                            zen.Rsubst abst_T 
                              (v_Vhd:(zen.term abst_T) =>
                               zen.not 
                                 (zen.triangle 
                                    (zen.equal basics.bool__t 
                                       (abst_equal 
                                          (abst_plus x (abst_opposite x)) 
                                          v_Vhd) 
                                       (abst_equal 
                                          (abst_plus x (abst_opposite x)) 
                                          (abst_plus x z))))) abst_zero 
                              (abst_plus x z) 
                              (v_Vid:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal abst_T abst_zero 
                                           (abst_plus x z))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (zen.equal abst_T abst_zero 
                                       (abst_plus x z))) v_Vpc v_Vid) 
                              (v_Vjd:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (abst_equal 
                                              (abst_plus x (abst_opposite x)) 
                                              (abst_plus x z)) 
                                           (abst_equal 
                                              (abst_plus x (abst_opposite x)) 
                                              (abst_plus x z)))))) =>
                               zen.Rnoteq basics.bool__t 
                                 (abst_equal (abst_plus x (abst_opposite x)) 
                                    (abst_plus x z)) v_Vjd) v_Vrc) v_Vrc) 
                        (v_Vkd:
                         (zen.proof 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus x (abst_opposite x)) 
                                     (abst_plus x z))))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_plus x (abst_opposite x)) 
                                    (abst_plus x z)))) v_Vkd v_Vkc) 
                        __Y_1_1_1_1_LEMMA) 
                     (v_Vid:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T abst_zero (abst_plus x z))))) =>
                      zen.Rcut 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal abst_zero (abst_plus x z)))) 
                        (v_Vld:
                         (zen.proof 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal abst_zero (abst_plus x z))))) =>
                         zen.Rall abst_T 
                           (v_Vzc:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vad:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vbd:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vzc v_Vad))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vad v_Vbd))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vzc v_Vbd))))))) 
                           (abst_plus x (abst_opposite x)) 
                           (v_Vcd:
                            (zen.proof 
                               (zen.forall abst_T 
                                  (v_Vad:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vbd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus x 
                                                    (abst_opposite x)) v_Vad))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vad v_Vbd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus x 
                                                       (abst_opposite x)) 
                                                    v_Vbd)))))))) =>
                            zen.Rall abst_T 
                              (v_Vad:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vbd:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus x (abst_opposite x)) 
                                             v_Vad))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vad v_Vbd))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus x 
                                                   (abst_opposite x)) v_Vbd)))))) 
                              abst_zero 
                              (v_Vmd:
                               (zen.proof 
                                  (zen.forall abst_T 
                                     (v_Vbd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus x 
                                                    (abst_opposite x)) 
                                                 abst_zero))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal abst_zero v_Vbd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus x 
                                                       (abst_opposite x)) 
                                                    v_Vbd))))))) =>
                               zen.Rall abst_T 
                                 (v_Vbd:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus x (abst_opposite x)) 
                                             abst_zero))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal abst_zero v_Vbd))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus x 
                                                   (abst_opposite x)) v_Vbd))))) 
                                 (abst_plus x z) 
                                 (v_Vnd:
                                  (zen.proof 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus x 
                                                    (abst_opposite x)) 
                                                 abst_zero))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal abst_zero 
                                                    (abst_plus x z)))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus x 
                                                       (abst_opposite x)) 
                                                    (abst_plus x z))))))) =>
                                  zen.Rimply 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus x (abst_opposite x)) 
                                             abst_zero))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal abst_zero 
                                                (abst_plus x z)))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus x 
                                                   (abst_opposite x)) 
                                                (abst_plus x z))))) 
                                    (v_Vgd:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus x 
                                                       (abst_opposite x)) 
                                                    abst_zero))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus x 
                                                   (abst_opposite x)) 
                                                abst_zero))) 
                                       __Y_1_1_1_1_LEMMA v_Vgd) 
                                    (v_Vod:
                                     (zen.proof 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal abst_zero 
                                                    (abst_plus x z)))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus x 
                                                       (abst_opposite x)) 
                                                    (abst_plus x z)))))) =>
                                     zen.Rimply 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal abst_zero 
                                                (abst_plus x z)))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus x 
                                                   (abst_opposite x)) 
                                                (abst_plus x z)))) 
                                       (v_Vpd:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal abst_zero 
                                                       (abst_plus x z)))))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal abst_zero 
                                                   (abst_plus x z)))) v_Vld 
                                          v_Vpd) 
                                       (v_Vkd:
                                        (zen.proof 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus x 
                                                       (abst_opposite x)) 
                                                    (abst_plus x z))))) =>
                                        zen.Rsubst basics.bool__t 
                                          (v_Vqc:(zen.term basics.bool__t) =>
                                           zen.triangle (focal.is_true v_Vqc)) 
                                          (abst_equal 
                                             (abst_plus x (abst_opposite x)) 
                                             (abst_plus x z)) 
                                          (abst_equal 
                                             (abst_plus x (abst_opposite x)) 
                                             (abst_plus x z)) 
                                          (v_Vjd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_opposite x)) 
                                                          (abst_plus x z)) 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_opposite x)) 
                                                          (abst_plus x z)))))) =>
                                           zen.Rsubst abst_T 
                                             (v_Vqd:(zen.term abst_T) =>
                                              zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (abst_equal v_Vqd 
                                                         (abst_plus x z)) 
                                                      (abst_equal 
                                                         (abst_plus x 
                                                            (abst_opposite x)) 
                                                         (abst_plus x z))))) 
                                             (abst_plus x (abst_opposite x)) 
                                             (abst_plus x (abst_opposite x)) 
                                             (v_Vmc:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus x 
                                                             (abst_opposite x)) 
                                                          (abst_plus x 
                                                             (abst_opposite x)))))) =>
                                              zen.Rnotand 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         (abst_plus x 
                                                            (abst_opposite x)) 
                                                         (abst_plus x 
                                                            (abst_opposite x))))) 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus x 
                                                               (abst_opposite 
                                                                  x)) 
                                                            (abst_plus x 
                                                               (abst_opposite 
                                                                  x)))))) 
                                                (v_Vtc:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T 
                                                                (abst_plus x 
                                                                   (abst_opposite 
                                                                    x)) 
                                                                (abst_plus x 
                                                                   (abst_opposite 
                                                                    x))))))) =>
                                                 zen.Rnotnot 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         (abst_plus x 
                                                            (abst_opposite x)) 
                                                         (abst_plus x 
                                                            (abst_opposite x)))) 
                                                   (v_Vuc:
                                                    (zen.proof 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_plus x 
                                                                (abst_opposite 
                                                                   x)) 
                                                             (abst_plus x 
                                                                (abst_opposite 
                                                                   x))))) =>
                                                    zen.Reqsym abst_T 
                                                      (abst_plus x 
                                                         (abst_opposite x)) 
                                                      (abst_plus x 
                                                         (abst_opposite x)) 
                                                      v_Vuc v_Vmc) v_Vtc) 
                                                (v_Vxc:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                 zen.Rnotnot 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus x 
                                                               (abst_opposite 
                                                                  x)) 
                                                            (abst_plus x 
                                                               (abst_opposite 
                                                                  x))))) 
                                                   (v_Vyc:
                                                    (zen.proof 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus x 
                                                                   (abst_opposite 
                                                                    x)) 
                                                                (abst_plus x 
                                                                   (abst_opposite 
                                                                    x)))))) =>
                                                    zen.Rall abst_T 
                                                      (v_Vzc:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vad:
                                                          (zen.term abst_T) =>
                                                          zen.forall abst_T 
                                                            (v_Vbd:
                                                             (zen.term abst_T) =>
                                                             zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vbd))))))) 
                                                      (abst_plus x 
                                                         (abst_opposite x)) 
                                                      (v_Vcd:
                                                       (zen.proof 
                                                          (zen.forall abst_T 
                                                             (v_Vad:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.forall 
                                                                abst_T 
                                                                (v_Vbd:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) v_Vad))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) v_Vbd)))))))) =>
                                                       zen.Rall abst_T 
                                                         (v_Vad:
                                                          (zen.term abst_T) =>
                                                          zen.forall abst_T 
                                                            (v_Vbd:
                                                             (zen.term abst_T) =>
                                                             zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) v_Vad))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) v_Vbd)))))) 
                                                         (abst_plus x 
                                                            (abst_opposite x)) 
                                                         (v_Vdd:
                                                          (zen.proof 
                                                             (zen.forall 
                                                                abst_T 
                                                                (v_Vbd:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) v_Vbd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) v_Vbd))))))) =>
                                                          zen.Rall abst_T 
                                                            (v_Vbd:
                                                             (zen.term abst_T) =>
                                                             zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) v_Vbd))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) v_Vbd))))) 
                                                            (abst_plus x z) 
                                                            (v_Vrd:
                                                             (zen.proof 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x z)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x z))))))) =>
                                                             zen.Rimply 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x z)))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x z))))) 
                                                               (v_Vnc:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                                  v_Vyc v_Vnc) 
                                                               (v_Vsd:
                                                                (zen.proof 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x z)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x z)))))) =>
                                                                zen.Rimply 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x z)))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x z)))) 
                                                                  (v_Vkc:
                                                                   (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x z)))))) =>
                                                                   zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x z)))) 
                                                                    v_Vkd 
                                                                    v_Vkc) 
                                                                  (v_Vkd:
                                                                   (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x z))))) =>
                                                                   zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x z)))) 
                                                                    v_Vkd 
                                                                    v_Vkc) 
                                                                  v_Vsd) 
                                                               v_Vrd) v_Vdd) 
                                                         v_Vcd) 
                                                      abst_equal_transitive) 
                                                   v_Vxc) v_Voc) 
                                             (v_Vjd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_opposite 
                                                                   x)) 
                                                             (abst_plus x z)) 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_opposite 
                                                                   x)) 
                                                             (abst_plus x z)))))) =>
                                              zen.Rsubst abst_T 
                                                (v_Vtd:(zen.term abst_T) =>
                                                 zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         basics.bool__t 
                                                         (abst_equal 
                                                            (abst_plus x 
                                                               (abst_opposite 
                                                                  x)) v_Vtd) 
                                                         (abst_equal 
                                                            (abst_plus x 
                                                               (abst_opposite 
                                                                  x)) 
                                                            (abst_plus x z))))) 
                                                (abst_plus x z) 
                                                (abst_plus x z) 
                                                (v_Vud:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_plus x z) 
                                                             (abst_plus x z))))) =>
                                                 zen.Rnoteq abst_T 
                                                   (abst_plus x z) v_Vud) 
                                                (v_Vjd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                (abst_plus x 
                                                                   (abst_opposite 
                                                                    x)) 
                                                                (abst_plus x 
                                                                   z)) 
                                                             (abst_equal 
                                                                (abst_plus x 
                                                                   (abst_opposite 
                                                                    x)) 
                                                                (abst_plus x 
                                                                   z)))))) =>
                                                 zen.Rnoteq basics.bool__t 
                                                   (abst_equal 
                                                      (abst_plus x 
                                                         (abst_opposite x)) 
                                                      (abst_plus x z)) v_Vjd) 
                                                v_Vjd) v_Vjd) 
                                          (v_Vkd:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_opposite x)) 
                                                       (abst_plus x z))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus x 
                                                         (abst_opposite x)) 
                                                      (abst_plus x z)))) 
                                             v_Vkd v_Vkc) v_Vkd) v_Vod) v_Vnd) 
                                 v_Vmd) v_Vcd) abst_equal_transitive) 
                        (v_Vpd:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal abst_zero (abst_plus x z)))))) =>
                         zen.Rall abst_T 
                           (v_Vzc:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vad:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal v_Vzc v_Vad))) 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal v_Vad v_Vzc))))) 
                           (abst_plus x z) 
                           (v_Vvd:
                            (zen.proof 
                               (zen.forall abst_T 
                                  (v_Vad:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal (abst_plus x z) v_Vad))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vad (abst_plus x z))))))) =>
                            zen.Rall abst_T 
                              (v_Vad:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_plus x z) v_Vad))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal v_Vad (abst_plus x z))))) 
                              abst_zero 
                              (v_Vwd:
                               (zen.proof 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal (abst_plus x z) 
                                              abst_zero))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal abst_zero 
                                              (abst_plus x z)))))) =>
                               zen.Rimply 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_plus x z) abst_zero))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal abst_zero (abst_plus x z)))) 
                                 (v_Vxd:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal (abst_plus x z) 
                                                 abst_zero))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_plus x z) 
                                             abst_zero))) __Y_1_1_1_2_LEMMA 
                                    v_Vxd) 
                                 (v_Vld:
                                  (zen.proof 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal abst_zero 
                                              (abst_plus x z))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal abst_zero 
                                             (abst_plus x z)))) v_Vld v_Vpd) 
                                 v_Vwd) v_Vvd) abst_equal_symmetric))))) 
              (zen.nnpp 
                 (zen.triangle 
                    (focal.is_true (abst_equal (abst_plus x z) abst_zero))) 
                 (v_Vzb:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_plus x z) abst_zero))))) =>
                  zen.Raxiom 
                    (zen.triangle 
                       (focal.is_true (abst_equal (abst_plus x z) abst_zero))) 
                    H v_Vzb))) 
             (zen.nnpp 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus x (abst_opposite x)) abst_zero))) 
                (v_Vzb:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_plus x (abst_opposite x)) 
                                abst_zero))))) =>
                 zen.Rall abst_T 
                   (v_Vac:(zen.term abst_T) =>
                    zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_plus v_Vac (abst_opposite v_Vac)) 
                            abst_zero))) x 
                   (v_Vbc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_plus x (abst_opposite x)) 
                                abst_zero)))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus x (abst_opposite x)) 
                               abst_zero))) v_Vbc v_Vzb) 
                   abst_opposite_is_opposite))))).

def Additive_group__opposite_fixes_zero :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (abst_equal x y)) 
                                   (dk_logic.ebP (abst_equal y x)))))) ->
  abst_zero_is_neutral:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.and 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus x abst_zero) x)) 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus abst_zero x) x))))) ->
  abst_opposite_is_unique:(dk_logic.eP 
                             (dk_logic.forall abst_T 
                                (z:(cc.eT abst_T) =>
                                 dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.imp 
                                      (dk_logic.ebP 
                                         (abst_equal (abst_plus x z) 
                                            abst_zero)) 
                                      (dk_logic.ebP 
                                         (abst_equal z (abst_opposite x))))))) ->
  dk_logic.eP (dk_logic.ebP (abst_equal (abst_opposite abst_zero) abst_zero))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal y x)))))) =>
  abst_zero_is_neutral:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.and (dk_logic.ebP (abst_equal (abst_plus x abst_zero) x)) 
           (dk_logic.ebP (abst_equal (abst_plus abst_zero x) x))))) =>
  abst_opposite_is_unique:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (z:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (x:(cc.eT abst_T) =>
            dk_logic.imp 
              (dk_logic.ebP (abst_equal (abst_plus x z) abst_zero)) 
              (dk_logic.ebP (abst_equal z (abst_opposite x))))))) =>
  (__Z_1_LEMMA:
   (dk_logic.eP 
      (dk_logic.ebP (abst_equal (abst_plus abst_zero abst_zero) abst_zero))) =>
   zen.nnpp 
     (zen.triangle 
        (focal.is_true (abst_equal (abst_opposite abst_zero) abst_zero))) 
     (v_Vzb:
      (zen.proof 
         (zen.not 
            (zen.triangle 
               (focal.is_true 
                  (abst_equal (abst_opposite abst_zero) abst_zero))))) =>
      zen.Rall abst_T 
        (v_Vac:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vbc:(zen.term abst_T) =>
            zen.imp 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal (abst_plus v_Vbc v_Vac) abst_zero))) 
              (zen.triangle 
                 (focal.is_true (abst_equal v_Vac (abst_opposite v_Vbc)))))) 
        abst_zero 
        (v_Vcc:
         (zen.proof 
            (zen.forall abst_T 
               (v_Vbc:(zen.term abst_T) =>
                zen.imp 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_plus v_Vbc abst_zero) abst_zero))) 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal abst_zero (abst_opposite v_Vbc))))))) =>
         zen.Rall abst_T 
           (v_Vbc:(zen.term abst_T) =>
            zen.imp 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal (abst_plus v_Vbc abst_zero) abst_zero))) 
              (zen.triangle 
                 (focal.is_true (abst_equal abst_zero (abst_opposite v_Vbc))))) 
           abst_zero 
           (v_Vdc:
            (zen.proof 
               (zen.imp 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_plus abst_zero abst_zero) abst_zero))) 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal abst_zero (abst_opposite abst_zero)))))) =>
            zen.Rimply 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal (abst_plus abst_zero abst_zero) abst_zero))) 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal abst_zero (abst_opposite abst_zero)))) 
              (v_Vec:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_plus abst_zero abst_zero) 
                              abst_zero))))) =>
               zen.Raxiom 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_plus abst_zero abst_zero) abst_zero))) 
                 __Z_1_LEMMA v_Vec) 
              (v_Vfc:
               (zen.proof 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal abst_zero (abst_opposite abst_zero))))) =>
               zen.Rall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vgc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vgc))) 
                       (zen.triangle (focal.is_true (abst_equal v_Vgc v_Vbc))))) 
                 abst_zero 
                 (v_Vhc:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vgc:(zen.term abst_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_equal abst_zero v_Vgc))) 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Vgc abst_zero)))))) =>
                  zen.Rall abst_T 
                    (v_Vgc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true (abst_equal abst_zero v_Vgc))) 
                       (zen.triangle 
                          (focal.is_true (abst_equal v_Vgc abst_zero)))) 
                    (abst_opposite abst_zero) 
                    (v_Vic:
                     (zen.proof 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal abst_zero 
                                    (abst_opposite abst_zero)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_opposite abst_zero) 
                                    abst_zero))))) =>
                     zen.Rimply 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal abst_zero (abst_opposite abst_zero)))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_opposite abst_zero) abst_zero))) 
                       (v_Vjc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal abst_zero 
                                       (abst_opposite abst_zero)))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal abst_zero 
                                   (abst_opposite abst_zero)))) v_Vfc v_Vjc) 
                       (v_Vkc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_opposite abst_zero) 
                                    abst_zero)))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_opposite abst_zero) 
                                   abst_zero))) v_Vkc v_Vzb) v_Vic) v_Vhc) 
                 abst_equal_symmetric) v_Vdc) v_Vcc) abst_opposite_is_unique)) 
    (zen.nnpp 
       (zen.triangle 
          (focal.is_true 
             (abst_equal (abst_plus abst_zero abst_zero) abst_zero))) 
       (v_Vzb:
        (zen.proof 
           (zen.not 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal (abst_plus abst_zero abst_zero) abst_zero))))) =>
        zen.Rall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.and 
             (zen.triangle 
                (focal.is_true (abst_equal (abst_plus v_Vac abst_zero) v_Vac))) 
             (zen.triangle 
                (focal.is_true (abst_equal (abst_plus abst_zero v_Vac) v_Vac)))) 
          abst_zero 
          (v_Vbc:
           (zen.proof 
              (zen.and 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_plus abst_zero abst_zero) abst_zero))) 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_plus abst_zero abst_zero) abst_zero))))) =>
           zen.Rand 
             (zen.triangle 
                (focal.is_true 
                   (abst_equal (abst_plus abst_zero abst_zero) abst_zero))) 
             (zen.triangle 
                (focal.is_true 
                   (abst_equal (abst_plus abst_zero abst_zero) abst_zero))) 
             (v_Vcc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_plus abst_zero abst_zero) abst_zero)))) =>
              v_Vcc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_plus abst_zero abst_zero) abst_zero)))) =>
              zen.Raxiom 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus abst_zero abst_zero) abst_zero))) 
                v_Vcc v_Vzb) v_Vbc) abst_zero_is_neutral)).

def Additive_group__opposite_is_additive :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (abst_equal x y)) 
                                   (dk_logic.ebP (abst_equal y x)))))) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_plus_commutes:(dk_logic.eP 
                        (dk_logic.forall abst_T 
                           (x:(cc.eT abst_T) =>
                            dk_logic.forall abst_T 
                              (y:(cc.eT abst_T) =>
                               dk_logic.ebP 
                                 (abst_equal (abst_plus x y) (abst_plus y x)))))) ->
  abst_plus_is_associative:(dk_logic.eP 
                              (dk_logic.forall abst_T 
                                 (x:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (y:(cc.eT abst_T) =>
                                     dk_logic.forall abst_T 
                                       (z:(cc.eT abst_T) =>
                                        dk_logic.ebP 
                                          (abst_equal 
                                             (abst_plus x (abst_plus y z)) 
                                             (abst_plus (abst_plus x y) z))))))) ->
  abst_plus_right_substitution_rule:(dk_logic.eP 
                                       (dk_logic.forall abst_T 
                                          (x:(cc.eT abst_T) =>
                                           dk_logic.forall abst_T 
                                             (y:(cc.eT abst_T) =>
                                              dk_logic.forall abst_T 
                                                (z:(cc.eT abst_T) =>
                                                 dk_logic.imp 
                                                   (dk_logic.ebP 
                                                      (abst_equal x y)) 
                                                   (dk_logic.ebP 
                                                      (abst_equal 
                                                         (abst_plus z x) 
                                                         (abst_plus z y)))))))) ->
  abst_opposite_is_opposite:(dk_logic.eP 
                               (dk_logic.forall abst_T 
                                  (x:(cc.eT abst_T) =>
                                   dk_logic.ebP 
                                     (abst_equal 
                                        (abst_plus x (abst_opposite x)) 
                                        abst_zero)))) ->
  abst_zero_is_neutral:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.and 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus x abst_zero) x)) 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus abst_zero x) x))))) ->
  abst_plus_left_substitution_rule:(dk_logic.eP 
                                      (dk_logic.forall abst_T 
                                         (x:(cc.eT abst_T) =>
                                          dk_logic.forall abst_T 
                                            (y:(cc.eT abst_T) =>
                                             dk_logic.forall abst_T 
                                               (z:(cc.eT abst_T) =>
                                                dk_logic.imp 
                                                  (dk_logic.ebP 
                                                     (abst_equal x y)) 
                                                  (dk_logic.ebP 
                                                     (abst_equal 
                                                        (abst_plus x z) 
                                                        (abst_plus y z)))))))) ->
  abst_opposite_is_unique:(dk_logic.eP 
                             (dk_logic.forall abst_T 
                                (z:(cc.eT abst_T) =>
                                 dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.imp 
                                      (dk_logic.ebP 
                                         (abst_equal (abst_plus x z) 
                                            abst_zero)) 
                                      (dk_logic.ebP 
                                         (abst_equal z (abst_opposite x))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.ebP 
             (abst_equal (abst_opposite (abst_plus x y)) 
                (abst_plus (abst_opposite x) (abst_opposite y))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal y x)))))) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_plus_commutes:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.ebP (abst_equal (abst_plus x y) (abst_plus y x)))))) =>
  abst_plus_is_associative:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.ebP 
                 (abst_equal (abst_plus x (abst_plus y z)) 
                    (abst_plus (abst_plus x y) z))))))) =>
  abst_plus_right_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.ebP (abst_equal (abst_plus z x) (abst_plus z y)))))))) =>
  abst_opposite_is_opposite:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.ebP (abst_equal (abst_plus x (abst_opposite x)) abst_zero)))) =>
  abst_zero_is_neutral:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.and (dk_logic.ebP (abst_equal (abst_plus x abst_zero) x)) 
           (dk_logic.ebP (abst_equal (abst_plus abst_zero x) x))))) =>
  abst_plus_left_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.ebP (abst_equal (abst_plus x z) (abst_plus y z)))))))) =>
  abst_opposite_is_unique:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (z:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (x:(cc.eT abst_T) =>
            dk_logic.imp 
              (dk_logic.ebP (abst_equal (abst_plus x z) abst_zero)) 
              (dk_logic.ebP (abst_equal z (abst_opposite x))))))) =>
  (__BA_1_LEMMA:
   (x:(cc.eT abst_T) ->
    y:(cc.eT abst_T) ->
    dk_logic.eP 
      (dk_logic.ebP 
         (abst_equal 
            (abst_plus (abst_plus x y) 
               (abst_plus (abst_opposite x) (abst_opposite y))) abst_zero))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.triangle 
              (focal.is_true 
                 (abst_equal (abst_opposite (abst_plus v_Vzb v_Vac)) 
                    (abst_plus (abst_opposite v_Vzb) (abst_opposite v_Vac))))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_opposite (abst_plus v_Vzb v_Vac)) 
                           (abst_plus (abst_opposite v_Vzb) 
                              (abst_opposite v_Vac))))))))) =>
      zen.Rnotall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.triangle 
              (focal.is_true 
                 (abst_equal (abst_opposite (abst_plus v_Vzb v_Vac)) 
                    (abst_plus (abst_opposite v_Vzb) (abst_opposite v_Vac)))))) 
        (v_Vcc:(zen.term abst_T) =>
         v_Vdc:
         (zen.proof 
            (zen.not 
               (zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_opposite (abst_plus v_Vcc v_Vac)) 
                           (abst_plus (abst_opposite v_Vcc) 
                              (abst_opposite v_Vac)))))))) =>
         zen.Rnotall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.triangle 
              (focal.is_true 
                 (abst_equal (abst_opposite (abst_plus v_Vcc v_Vac)) 
                    (abst_plus (abst_opposite v_Vcc) (abst_opposite v_Vac))))) 
           (v_Vec:(zen.term abst_T) =>
            v_Vfc:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_opposite (abst_plus v_Vcc v_Vec)) 
                           (abst_plus (abst_opposite v_Vcc) 
                              (abst_opposite v_Vec))))))) =>
            zen.Rall abst_T 
              (v_Vgc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vzb:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_plus v_Vzb v_Vgc) abst_zero))) 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal v_Vgc (abst_opposite v_Vzb)))))) 
              (abst_plus (abst_opposite v_Vcc) (abst_opposite v_Vec)) 
              (v_Vhc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vzb:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus v_Vzb 
                                    (abst_plus (abst_opposite v_Vcc) 
                                       (abst_opposite v_Vec))) abst_zero))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus (abst_opposite v_Vcc) 
                                    (abst_opposite v_Vec)) 
                                 (abst_opposite v_Vzb))))))) =>
               zen.Rall abst_T 
                 (v_Vzb:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal 
                             (abst_plus v_Vzb 
                                (abst_plus (abst_opposite v_Vcc) 
                                   (abst_opposite v_Vec))) abst_zero))) 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal 
                             (abst_plus (abst_opposite v_Vcc) 
                                (abst_opposite v_Vec)) (abst_opposite v_Vzb))))) 
                 (abst_plus v_Vcc v_Vec) 
                 (v_Vic:
                  (zen.proof 
                     (zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus (abst_plus v_Vcc v_Vec) 
                                    (abst_plus (abst_opposite v_Vcc) 
                                       (abst_opposite v_Vec))) abst_zero))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus (abst_opposite v_Vcc) 
                                    (abst_opposite v_Vec)) 
                                 (abst_opposite (abst_plus v_Vcc v_Vec))))))) =>
                  zen.Rimply 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal 
                             (abst_plus (abst_plus v_Vcc v_Vec) 
                                (abst_plus (abst_opposite v_Vcc) 
                                   (abst_opposite v_Vec))) abst_zero))) 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal 
                             (abst_plus (abst_opposite v_Vcc) 
                                (abst_opposite v_Vec)) 
                             (abst_opposite (abst_plus v_Vcc v_Vec))))) 
                    (v_Vjc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_plus (abst_plus v_Vcc v_Vec) 
                                       (abst_plus (abst_opposite v_Vcc) 
                                          (abst_opposite v_Vec))) abst_zero))))) =>
                     zen.Rall abst_T 
                       (v_Vzb:(zen.term abst_T) =>
                        zen.forall abst_T 
                          (v_Vac:(zen.term abst_T) =>
                           zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_plus v_Vzb v_Vac) 
                                      (abst_plus (abst_opposite v_Vzb) 
                                         (abst_opposite v_Vac))) abst_zero)))) 
                       v_Vcc 
                       (v_Vkc:
                        (zen.proof 
                           (zen.forall abst_T 
                              (v_Vac:(zen.term abst_T) =>
                               zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_plus v_Vcc v_Vac) 
                                          (abst_plus (abst_opposite v_Vcc) 
                                             (abst_opposite v_Vac))) 
                                       abst_zero))))) =>
                        zen.Rall abst_T 
                          (v_Vac:(zen.term abst_T) =>
                           zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_plus v_Vcc v_Vac) 
                                      (abst_plus (abst_opposite v_Vcc) 
                                         (abst_opposite v_Vac))) abst_zero))) 
                          v_Vec 
                          (v_Vlc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_plus v_Vcc v_Vec) 
                                          (abst_plus (abst_opposite v_Vcc) 
                                             (abst_opposite v_Vec))) 
                                       abst_zero)))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_plus v_Vcc v_Vec) 
                                         (abst_plus (abst_opposite v_Vcc) 
                                            (abst_opposite v_Vec))) abst_zero))) 
                             v_Vlc v_Vjc) v_Vkc) __BA_1_LEMMA) 
                    (v_Vmc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus (abst_opposite v_Vcc) 
                                    (abst_opposite v_Vec)) 
                                 (abst_opposite (abst_plus v_Vcc v_Vec)))))) =>
                     zen.Rall abst_T 
                       (v_Vzb:(zen.term abst_T) =>
                        zen.forall abst_T 
                          (v_Vac:(zen.term abst_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vzb v_Vac))) 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vac v_Vzb))))) 
                       (abst_plus (abst_opposite v_Vcc) (abst_opposite v_Vec)) 
                       (v_Vnc:
                        (zen.proof 
                           (zen.forall abst_T 
                              (v_Vac:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus (abst_opposite v_Vcc) 
                                             (abst_opposite v_Vec)) v_Vac))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal v_Vac 
                                          (abst_plus (abst_opposite v_Vcc) 
                                             (abst_opposite v_Vec)))))))) =>
                        zen.Rall abst_T 
                          (v_Vac:(zen.term abst_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_opposite v_Vcc) 
                                         (abst_opposite v_Vec)) v_Vac))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal v_Vac 
                                      (abst_plus (abst_opposite v_Vcc) 
                                         (abst_opposite v_Vec)))))) 
                          (abst_opposite (abst_plus v_Vcc v_Vec)) 
                          (v_Voc:
                           (zen.proof 
                              (zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus (abst_opposite v_Vcc) 
                                             (abst_opposite v_Vec)) 
                                          (abst_opposite 
                                             (abst_plus v_Vcc v_Vec))))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_opposite 
                                             (abst_plus v_Vcc v_Vec)) 
                                          (abst_plus (abst_opposite v_Vcc) 
                                             (abst_opposite v_Vec))))))) =>
                           zen.Rimply 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_opposite v_Vcc) 
                                         (abst_opposite v_Vec)) 
                                      (abst_opposite (abst_plus v_Vcc v_Vec))))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_opposite (abst_plus v_Vcc v_Vec)) 
                                      (abst_plus (abst_opposite v_Vcc) 
                                         (abst_opposite v_Vec))))) 
                             (v_Vpc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus 
                                                (abst_opposite v_Vcc) 
                                                (abst_opposite v_Vec)) 
                                             (abst_opposite 
                                                (abst_plus v_Vcc v_Vec))))))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus (abst_opposite v_Vcc) 
                                            (abst_opposite v_Vec)) 
                                         (abst_opposite 
                                            (abst_plus v_Vcc v_Vec))))) 
                                v_Vmc v_Vpc) 
                             (v_Vqc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_opposite 
                                             (abst_plus v_Vcc v_Vec)) 
                                          (abst_plus (abst_opposite v_Vcc) 
                                             (abst_opposite v_Vec)))))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_opposite 
                                            (abst_plus v_Vcc v_Vec)) 
                                         (abst_plus (abst_opposite v_Vcc) 
                                            (abst_opposite v_Vec))))) v_Vqc 
                                v_Vfc) v_Voc) v_Vnc) abst_equal_symmetric) 
                    v_Vic) v_Vhc) abst_opposite_is_unique) v_Vdc) v_Vbc)) 
    (x:(cc.eT abst_T) =>
     y:(cc.eT abst_T) =>
     (__BA_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (abst_equal 
               (abst_plus (abst_plus x y) 
                  (abst_plus (abst_opposite x) (abst_opposite y))) 
               (abst_plus (abst_plus x y) 
                  (abst_plus (abst_opposite y) (abst_opposite x)))))) =>
      (__BA_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP 
             (abst_equal 
                (abst_plus (abst_plus x y) 
                   (abst_plus (abst_opposite y) (abst_opposite x))) 
                (abst_plus x 
                   (abst_plus y 
                      (abst_plus (abst_opposite y) (abst_opposite x))))))) =>
       (__BA_1_3_LEMMA:
        (dk_logic.eP 
           (dk_logic.ebP 
              (abst_equal 
                 (abst_plus x 
                    (abst_plus y 
                       (abst_plus (abst_opposite y) (abst_opposite x)))) 
                 (abst_plus x 
                    (abst_plus (abst_plus y (abst_opposite y)) 
                       (abst_opposite x)))))) =>
        (__BA_1_4_LEMMA:
         (dk_logic.eP 
            (dk_logic.ebP 
               (abst_equal 
                  (abst_plus (abst_plus y (abst_opposite y)) 
                     (abst_opposite x)) 
                  (abst_plus abst_zero (abst_opposite x))))) =>
         (__BA_1_5_LEMMA:
          (dk_logic.eP 
             (dk_logic.ebP 
                (abst_equal 
                   (abst_plus x 
                      (abst_plus (abst_plus y (abst_opposite y)) 
                         (abst_opposite x))) 
                   (abst_plus x (abst_plus abst_zero (abst_opposite x)))))) =>
          (__BA_1_6_LEMMA:
           (dk_logic.eP 
              (dk_logic.ebP 
                 (abst_equal 
                    (abst_plus x (abst_plus abst_zero (abst_opposite x))) 
                    (abst_plus x (abst_opposite x))))) =>
           zen.nnpp 
             (zen.triangle 
                (focal.is_true 
                   (abst_equal 
                      (abst_plus (abst_plus x y) 
                         (abst_plus (abst_opposite x) (abst_opposite y))) 
                      abst_zero))) 
             (v_Vrd:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal 
                             (abst_plus (abst_plus x y) 
                                (abst_plus (abst_opposite x) 
                                   (abst_opposite y))) abst_zero))))) =>
              zen.Rcut 
                (zen.and 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T 
                            (abst_plus (abst_plus x y) 
                               (abst_plus (abst_opposite x) (abst_opposite y))) 
                            (abst_plus (abst_plus x y) 
                               (abst_plus (abst_opposite x) (abst_opposite y)))))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_plus (abst_plus x y) 
                                  (abst_plus (abst_opposite x) 
                                     (abst_opposite y))) 
                               (abst_plus (abst_plus x y) 
                                  (abst_plus (abst_opposite x) 
                                     (abst_opposite y)))))))) 
                (v_Vsd:
                 (zen.proof 
                    (zen.and 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T 
                                (abst_plus (abst_plus x y) 
                                   (abst_plus (abst_opposite x) 
                                      (abst_opposite y))) 
                                (abst_plus (abst_plus x y) 
                                   (abst_plus (abst_opposite x) 
                                      (abst_opposite y)))))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_plus x y) 
                                      (abst_plus (abst_opposite x) 
                                         (abst_opposite y))) 
                                   (abst_plus (abst_plus x y) 
                                      (abst_plus (abst_opposite x) 
                                         (abst_opposite y))))))))) =>
                 zen.Rand 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T 
                            (abst_plus (abst_plus x y) 
                               (abst_plus (abst_opposite x) (abst_opposite y))) 
                            (abst_plus (abst_plus x y) 
                               (abst_plus (abst_opposite x) (abst_opposite y)))))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_plus (abst_plus x y) 
                                  (abst_plus (abst_opposite x) 
                                     (abst_opposite y))) 
                               (abst_plus (abst_plus x y) 
                                  (abst_plus (abst_opposite x) 
                                     (abst_opposite y))))))) 
                   (v_Vtd:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T 
                                (abst_plus (abst_plus x y) 
                                   (abst_plus (abst_opposite x) 
                                      (abst_opposite y))) 
                                (abst_plus (abst_plus x y) 
                                   (abst_plus (abst_opposite x) 
                                      (abst_opposite y))))))) =>
                    v_Vud:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_plus x y) 
                                      (abst_plus (abst_opposite x) 
                                         (abst_opposite y))) 
                                   (abst_plus (abst_plus x y) 
                                      (abst_plus (abst_opposite x) 
                                         (abst_opposite y)))))))) =>
                    zen.Rnoteq abst_T 
                      (abst_plus (abst_plus x y) 
                         (abst_plus (abst_opposite x) (abst_opposite y))) 
                      v_Vtd) v_Vsd) 
                (v_Vvd:
                 (zen.proof 
                    (zen.not 
                       (zen.and 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal abst_T 
                                   (abst_plus (abst_plus x y) 
                                      (abst_plus (abst_opposite x) 
                                         (abst_opposite y))) 
                                   (abst_plus (abst_plus x y) 
                                      (abst_plus (abst_opposite x) 
                                         (abst_opposite y)))))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_plus x y) 
                                         (abst_plus (abst_opposite x) 
                                            (abst_opposite y))) 
                                      (abst_plus (abst_plus x y) 
                                         (abst_plus (abst_opposite x) 
                                            (abst_opposite y)))))))))) =>
                 zen.Rcut 
                   (zen.triangle 
                      (zen.equal abst_T 
                         (abst_plus (abst_plus x y) 
                            (abst_plus (abst_opposite y) (abst_opposite x))) 
                         abst_zero)) 
                   (v_Vwd:
                    (zen.proof 
                       (zen.triangle 
                          (zen.equal abst_T 
                             (abst_plus (abst_plus x y) 
                                (abst_plus (abst_opposite y) 
                                   (abst_opposite x))) abst_zero))) =>
                    zen.Rsubst basics.bool__t 
                      (v_Vxd:(zen.term basics.bool__t) =>
                       zen.triangle (focal.is_true v_Vxd)) 
                      (abst_equal 
                         (abst_plus (abst_plus x y) 
                            (abst_plus (abst_opposite x) (abst_opposite y))) 
                         (abst_plus (abst_plus x y) 
                            (abst_plus (abst_opposite y) (abst_opposite x)))) 
                      (abst_equal 
                         (abst_plus (abst_plus x y) 
                            (abst_plus (abst_opposite x) (abst_opposite y))) 
                         abst_zero) 
                      (v_Vyd:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (abst_equal 
                                      (abst_plus (abst_plus x y) 
                                         (abst_plus (abst_opposite x) 
                                            (abst_opposite y))) 
                                      (abst_plus (abst_plus x y) 
                                         (abst_plus (abst_opposite y) 
                                            (abst_opposite x)))) 
                                   (abst_equal 
                                      (abst_plus (abst_plus x y) 
                                         (abst_plus (abst_opposite x) 
                                            (abst_opposite y))) abst_zero))))) =>
                       zen.Rsubst abst_T 
                         (v_Vzd:(zen.term abst_T) =>
                          zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (abst_equal v_Vzd 
                                     (abst_plus (abst_plus x y) 
                                        (abst_plus (abst_opposite y) 
                                           (abst_opposite x)))) 
                                  (abst_equal 
                                     (abst_plus (abst_plus x y) 
                                        (abst_plus (abst_opposite x) 
                                           (abst_opposite y))) abst_zero)))) 
                         (abst_plus (abst_plus x y) 
                            (abst_plus (abst_opposite x) (abst_opposite y))) 
                         (abst_plus (abst_plus x y) 
                            (abst_plus (abst_opposite x) (abst_opposite y))) 
                         (v_Vtd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_plus (abst_plus x y) 
                                         (abst_plus (abst_opposite x) 
                                            (abst_opposite y))) 
                                      (abst_plus (abst_plus x y) 
                                         (abst_plus (abst_opposite x) 
                                            (abst_opposite y))))))) =>
                          zen.Rnotand 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_plus (abst_plus x y) 
                                        (abst_plus (abst_opposite x) 
                                           (abst_opposite y))) 
                                     (abst_plus (abst_plus x y) 
                                        (abst_plus (abst_opposite x) 
                                           (abst_opposite y)))))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus (abst_plus x y) 
                                           (abst_plus (abst_opposite x) 
                                              (abst_opposite y))) 
                                        (abst_plus (abst_plus x y) 
                                           (abst_plus (abst_opposite x) 
                                              (abst_opposite y))))))) 
                            (v_Vae:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_plus (abst_plus x y) 
                                               (abst_plus (abst_opposite x) 
                                                  (abst_opposite y))) 
                                            (abst_plus (abst_plus x y) 
                                               (abst_plus (abst_opposite x) 
                                                  (abst_opposite y)))))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_plus (abst_plus x y) 
                                        (abst_plus (abst_opposite x) 
                                           (abst_opposite y))) 
                                     (abst_plus (abst_plus x y) 
                                        (abst_plus (abst_opposite x) 
                                           (abst_opposite y))))) 
                               (v_Vbe:
                                (zen.proof 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_plus (abst_plus x y) 
                                            (abst_plus (abst_opposite x) 
                                               (abst_opposite y))) 
                                         (abst_plus (abst_plus x y) 
                                            (abst_plus (abst_opposite x) 
                                               (abst_opposite y)))))) =>
                                zen.Rcut 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_plus (abst_plus x y) 
                                           (abst_plus (abst_opposite x) 
                                              (abst_opposite y))) 
                                        (abst_plus (abst_plus x y) 
                                           (abst_plus (abst_opposite x) 
                                              (abst_opposite y))))) 
                                  (v_Vbe:
                                   (zen.proof 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_plus (abst_plus x y) 
                                               (abst_plus (abst_opposite x) 
                                                  (abst_opposite y))) 
                                            (abst_plus (abst_plus x y) 
                                               (abst_plus (abst_opposite x) 
                                                  (abst_opposite y)))))) =>
                                   zen.Rsubst abst_T 
                                     (v_Vce:(zen.term abst_T) =>
                                      zen.triangle 
                                        (zen.equal abst_T v_Vce 
                                           (abst_plus (abst_plus x y) 
                                              (abst_plus (abst_opposite x) 
                                                 (abst_opposite y))))) 
                                     (abst_plus (abst_plus x y) 
                                        (abst_plus (abst_opposite x) 
                                           (abst_opposite y))) 
                                     (abst_plus (abst_plus x y) 
                                        (abst_plus (abst_opposite x) 
                                           (abst_opposite y))) 
                                     (v_Vtd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus (abst_plus x y) 
                                                     (abst_plus 
                                                        (abst_opposite x) 
                                                        (abst_opposite y))) 
                                                  (abst_plus (abst_plus x y) 
                                                     (abst_plus 
                                                        (abst_opposite x) 
                                                        (abst_opposite y))))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus (abst_plus x y) 
                                                 (abst_plus 
                                                    (abst_opposite x) 
                                                    (abst_opposite y))) 
                                              (abst_plus (abst_plus x y) 
                                                 (abst_plus 
                                                    (abst_opposite x) 
                                                    (abst_opposite y))))) 
                                        v_Vbe v_Vtd) 
                                     (v_Vbe:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus (abst_plus x y) 
                                                  (abst_plus 
                                                     (abst_opposite x) 
                                                     (abst_opposite y))) 
                                               (abst_plus (abst_plus x y) 
                                                  (abst_plus 
                                                     (abst_opposite x) 
                                                     (abst_opposite y)))))) =>
                                      zen.Rsubst abst_T 
                                        (v_Vde:(zen.term abst_T) =>
                                         zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus (abst_plus x y) 
                                                 (abst_plus 
                                                    (abst_opposite x) 
                                                    (abst_opposite y))) v_Vde)) 
                                        (abst_plus (abst_plus x y) 
                                           (abst_plus (abst_opposite x) 
                                              (abst_opposite y))) 
                                        (abst_plus (abst_plus x y) 
                                           (abst_plus (abst_opposite x) 
                                              (abst_opposite y))) 
                                        (v_Vtd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus 
                                                        (abst_plus x y) 
                                                        (abst_plus 
                                                           (abst_opposite x) 
                                                           (abst_opposite y))) 
                                                     (abst_plus 
                                                        (abst_plus x y) 
                                                        (abst_plus 
                                                           (abst_opposite x) 
                                                           (abst_opposite y))))))) =>
                                         zen.Rnoteq abst_T 
                                           (abst_plus (abst_plus x y) 
                                              (abst_plus (abst_opposite x) 
                                                 (abst_opposite y))) v_Vtd) 
                                        (v_Vbe:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus (abst_plus x y) 
                                                     (abst_plus 
                                                        (abst_opposite x) 
                                                        (abst_opposite y))) 
                                                  (abst_plus (abst_plus x y) 
                                                     (abst_plus 
                                                        (abst_opposite x) 
                                                        (abst_opposite y)))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus (abst_plus x y) 
                                                    (abst_plus 
                                                       (abst_opposite x) 
                                                       (abst_opposite y))) 
                                                 (abst_plus (abst_plus x y) 
                                                    (abst_plus 
                                                       (abst_opposite x) 
                                                       (abst_opposite y))))) 
                                           v_Vbe v_Vtd) v_Vbe) v_Vbe) 
                                  (v_Vtd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus (abst_plus x y) 
                                                  (abst_plus 
                                                     (abst_opposite x) 
                                                     (abst_opposite y))) 
                                               (abst_plus (abst_plus x y) 
                                                  (abst_plus 
                                                     (abst_opposite x) 
                                                     (abst_opposite y))))))) =>
                                   zen.Rnoteq abst_T 
                                     (abst_plus (abst_plus x y) 
                                        (abst_plus (abst_opposite x) 
                                           (abst_opposite y))) v_Vtd)) v_Vae) 
                            (v_Vee:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus (abst_plus x y) 
                                                  (abst_plus 
                                                     (abst_opposite x) 
                                                     (abst_opposite y))) 
                                               (abst_plus (abst_plus x y) 
                                                  (abst_plus 
                                                     (abst_opposite x) 
                                                     (abst_opposite y))))))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus (abst_plus x y) 
                                           (abst_plus (abst_opposite x) 
                                              (abst_opposite y))) 
                                        (abst_plus (abst_plus x y) 
                                           (abst_plus (abst_opposite x) 
                                              (abst_opposite y)))))) 
                               (v_Vfe:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus (abst_plus x y) 
                                               (abst_plus (abst_opposite x) 
                                                  (abst_opposite y))) 
                                            (abst_plus (abst_plus x y) 
                                               (abst_plus (abst_opposite x) 
                                                  (abst_opposite y))))))) =>
                                zen.Rall abst_T 
                                  (v_Vge:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vhe:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vie:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vge v_Vhe))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vhe v_Vie))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vge v_Vie))))))) 
                                  (abst_plus (abst_plus x y) 
                                     (abst_plus (abst_opposite x) 
                                        (abst_opposite y))) 
                                  (v_Vje:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vhe:(zen.term abst_T) =>
                                          zen.forall abst_T 
                                            (v_Vie:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus x y) 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) 
                                                              (abst_opposite 
                                                                 y))) v_Vhe))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vhe 
                                                           v_Vie))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_opposite 
                                                                    y))) 
                                                           v_Vie)))))))) =>
                                   zen.Rall abst_T 
                                     (v_Vhe:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vie:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_plus x y) 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_opposite y))) 
                                                    v_Vhe))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vhe v_Vie))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_opposite y))) 
                                                       v_Vie)))))) 
                                     (abst_plus (abst_plus x y) 
                                        (abst_plus (abst_opposite x) 
                                           (abst_opposite y))) 
                                     (v_Vke:
                                      (zen.proof 
                                         (zen.forall abst_T 
                                            (v_Vie:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus x y) 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) 
                                                              (abst_opposite 
                                                                 y))) 
                                                        (abst_plus 
                                                           (abst_plus x y) 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) 
                                                              (abst_opposite 
                                                                 y)))))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_opposite 
                                                                    y))) 
                                                           v_Vie))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_opposite 
                                                                    y))) 
                                                           v_Vie))))))) =>
                                      zen.Rall abst_T 
                                        (v_Vie:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_plus x y) 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_opposite y))) 
                                                    (abst_plus 
                                                       (abst_plus x y) 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_opposite y)))))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_opposite y))) 
                                                       v_Vie))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_opposite y))) 
                                                       v_Vie))))) 
                                        (abst_plus (abst_plus x y) 
                                           (abst_plus (abst_opposite y) 
                                              (abst_opposite x))) 
                                        (v_Vle:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus x y) 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) 
                                                              (abst_opposite 
                                                                 y))) 
                                                        (abst_plus 
                                                           (abst_plus x y) 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) 
                                                              (abst_opposite 
                                                                 y)))))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_opposite 
                                                                    y))) 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    y) 
                                                                 (abst_opposite 
                                                                    x)))))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_opposite 
                                                                    y))) 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    y) 
                                                                 (abst_opposite 
                                                                    x))))))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_plus x y) 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_opposite y))) 
                                                    (abst_plus 
                                                       (abst_plus x y) 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_opposite y)))))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_opposite y))) 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite y) 
                                                             (abst_opposite x)))))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_opposite y))) 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite y) 
                                                             (abst_opposite x))))))) 
                                           (v_Vud:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_opposite 
                                                                    y))) 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_opposite 
                                                                    y)))))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_opposite y))) 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_opposite y)))))) 
                                              v_Vfe v_Vud) 
                                           (v_Vme:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_opposite 
                                                                    y))) 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    y) 
                                                                 (abst_opposite 
                                                                    x)))))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_opposite 
                                                                    y))) 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    y) 
                                                                 (abst_opposite 
                                                                    x)))))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_opposite y))) 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite y) 
                                                             (abst_opposite x)))))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_opposite y))) 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite y) 
                                                             (abst_opposite x)))))) 
                                              (v_Vne:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    x y) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) 
                                                                    (
                                                                    abst_opposite 
                                                                    y))) 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    x y) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    y) 
                                                                    (
                                                                    abst_opposite 
                                                                    x)))))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_plus x y) 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_opposite 
                                                                   y))) 
                                                          (abst_plus 
                                                             (abst_plus x y) 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   y) 
                                                                (abst_opposite 
                                                                   x)))))) 
                                                 __BA_1_1_LEMMA v_Vne) 
                                              (__BA_1_1_LEMMA:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_opposite 
                                                                    y))) 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    y) 
                                                                 (abst_opposite 
                                                                    x))))))) =>
                                               zen.Rsubst basics.bool__t 
                                                 (v_Vxd:
                                                  (zen.term basics.bool__t) =>
                                                  zen.triangle 
                                                    (focal.is_true v_Vxd)) 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_plus x y) 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_opposite y))) 
                                                    (abst_plus 
                                                       (abst_plus x y) 
                                                       (abst_plus 
                                                          (abst_opposite y) 
                                                          (abst_opposite x)))) 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_plus x y) 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_opposite y))) 
                                                    abst_zero) 
                                                 (v_Vyd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    x y) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    x y) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    x y) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                 abst_zero))))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Vzd:
                                                     (zen.term abst_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                v_Vzd 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    x y) 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    x y) 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                abst_zero)))) 
                                                    (abst_plus 
                                                       (abst_plus x y) 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_opposite y))) 
                                                    (abst_plus 
                                                       (abst_plus x y) 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_opposite y))) 
                                                    (v_Vtd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    x y) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    x y) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))))))) =>
                                                     zen.Rnoteq abst_T 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_opposite y))) 
                                                       v_Vtd) 
                                                    (v_Vyd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    abst_zero))))) =>
                                                     zen.Rsubst abst_T 
                                                       (v_Voe:
                                                        (zen.term abst_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                   v_Voe) 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                   abst_zero)))) 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite y) 
                                                             (abst_opposite x))) 
                                                       abst_zero 
                                                       (v_Vpe:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero)))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    x y) 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                abst_zero)) 
                                                          v_Vwd v_Vpe) 
                                                       (v_Vqe:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    abst_zero) 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    abst_zero))))) =>
                                                        zen.Rnoteq 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   y) 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    x) 
                                                                   (abst_opposite 
                                                                    y))) 
                                                             abst_zero) v_Vqe) 
                                                       v_Vyd) v_Vyd) 
                                                 (v_Vre:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    x y) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) 
                                                                    (
                                                                    abst_opposite 
                                                                    y))) 
                                                              abst_zero)))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   y) 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    x) 
                                                                   (abst_opposite 
                                                                    y))) 
                                                             abst_zero))) 
                                                    v_Vre v_Vrd) 
                                                 __BA_1_1_LEMMA) v_Vme) v_Vle) 
                                        v_Vke) v_Vje) abst_equal_transitive) 
                               v_Vee) v_Vvd) 
                         (v_Vyd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_equal 
                                         (abst_plus (abst_plus x y) 
                                            (abst_plus (abst_opposite x) 
                                               (abst_opposite y))) 
                                         (abst_plus (abst_plus x y) 
                                            (abst_plus (abst_opposite y) 
                                               (abst_opposite x)))) 
                                      (abst_equal 
                                         (abst_plus (abst_plus x y) 
                                            (abst_plus (abst_opposite x) 
                                               (abst_opposite y))) abst_zero))))) =>
                          zen.Rsubst abst_T 
                            (v_Voe:(zen.term abst_T) =>
                             zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (abst_equal 
                                        (abst_plus (abst_plus x y) 
                                           (abst_plus (abst_opposite x) 
                                              (abst_opposite y))) v_Voe) 
                                     (abst_equal 
                                        (abst_plus (abst_plus x y) 
                                           (abst_plus (abst_opposite x) 
                                              (abst_opposite y))) abst_zero)))) 
                            (abst_plus (abst_plus x y) 
                               (abst_plus (abst_opposite y) (abst_opposite x))) 
                            abst_zero 
                            (v_Vpe:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_plus (abst_plus x y) 
                                            (abst_plus (abst_opposite y) 
                                               (abst_opposite x))) abst_zero)))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_plus (abst_plus x y) 
                                        (abst_plus (abst_opposite y) 
                                           (abst_opposite x))) abst_zero)) 
                               v_Vwd v_Vpe) 
                            (v_Vqe:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (abst_equal 
                                            (abst_plus (abst_plus x y) 
                                               (abst_plus (abst_opposite x) 
                                                  (abst_opposite y))) 
                                            abst_zero) 
                                         (abst_equal 
                                            (abst_plus (abst_plus x y) 
                                               (abst_plus (abst_opposite x) 
                                                  (abst_opposite y))) 
                                            abst_zero))))) =>
                             zen.Rnoteq basics.bool__t 
                               (abst_equal 
                                  (abst_plus (abst_plus x y) 
                                     (abst_plus (abst_opposite x) 
                                        (abst_opposite y))) abst_zero) v_Vqe) 
                            v_Vyd) v_Vyd) 
                      (v_Vre:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_plus x y) 
                                      (abst_plus (abst_opposite x) 
                                         (abst_opposite y))) abst_zero)))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_plus x y) 
                                     (abst_plus (abst_opposite x) 
                                        (abst_opposite y))) abst_zero))) 
                         v_Vre v_Vrd) __BA_1_1_LEMMA) 
                   (v_Vpe:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T 
                                (abst_plus (abst_plus x y) 
                                   (abst_plus (abst_opposite y) 
                                      (abst_opposite x))) abst_zero)))) =>
                    zen.Rcut 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_plus (abst_plus x y) 
                                  (abst_plus (abst_opposite y) 
                                     (abst_opposite x))) abst_zero))) 
                      (v_Vse:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_plus x y) 
                                      (abst_plus (abst_opposite y) 
                                         (abst_opposite x))) abst_zero)))) =>
                       zen.Rall abst_T 
                         (v_Vge:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vhe:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vie:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vge v_Vhe))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vhe v_Vie))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vge v_Vie))))))) 
                         (abst_plus (abst_plus x y) 
                            (abst_plus (abst_opposite x) (abst_opposite y))) 
                         (v_Vje:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vhe:(zen.term abst_T) =>
                                 zen.forall abst_T 
                                   (v_Vie:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus (abst_plus x y) 
                                                  (abst_plus 
                                                     (abst_opposite x) 
                                                     (abst_opposite y))) 
                                               v_Vhe))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vhe v_Vie))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus (abst_plus x y) 
                                                     (abst_plus 
                                                        (abst_opposite x) 
                                                        (abst_opposite y))) 
                                                  v_Vie)))))))) =>
                          zen.Rall abst_T 
                            (v_Vhe:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vie:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus (abst_plus x y) 
                                              (abst_plus (abst_opposite x) 
                                                 (abst_opposite y))) v_Vhe))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vhe v_Vie))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus (abst_plus x y) 
                                                 (abst_plus 
                                                    (abst_opposite x) 
                                                    (abst_opposite y))) v_Vie)))))) 
                            (abst_plus (abst_plus x y) 
                               (abst_plus (abst_opposite y) (abst_opposite x))) 
                            (v_Vte:
                             (zen.proof 
                                (zen.forall abst_T 
                                   (v_Vie:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus (abst_plus x y) 
                                                  (abst_plus 
                                                     (abst_opposite x) 
                                                     (abst_opposite y))) 
                                               (abst_plus (abst_plus x y) 
                                                  (abst_plus 
                                                     (abst_opposite y) 
                                                     (abst_opposite x)))))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus (abst_plus x y) 
                                                     (abst_plus 
                                                        (abst_opposite y) 
                                                        (abst_opposite x))) 
                                                  v_Vie))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus (abst_plus x y) 
                                                     (abst_plus 
                                                        (abst_opposite x) 
                                                        (abst_opposite y))) 
                                                  v_Vie))))))) =>
                             zen.Rall abst_T 
                               (v_Vie:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus (abst_plus x y) 
                                              (abst_plus (abst_opposite x) 
                                                 (abst_opposite y))) 
                                           (abst_plus (abst_plus x y) 
                                              (abst_plus (abst_opposite y) 
                                                 (abst_opposite x)))))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus (abst_plus x y) 
                                                 (abst_plus 
                                                    (abst_opposite y) 
                                                    (abst_opposite x))) v_Vie))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus (abst_plus x y) 
                                                 (abst_plus 
                                                    (abst_opposite x) 
                                                    (abst_opposite y))) v_Vie))))) 
                               abst_zero 
                               (v_Vue:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus (abst_plus x y) 
                                                  (abst_plus 
                                                     (abst_opposite x) 
                                                     (abst_opposite y))) 
                                               (abst_plus (abst_plus x y) 
                                                  (abst_plus 
                                                     (abst_opposite y) 
                                                     (abst_opposite x)))))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus (abst_plus x y) 
                                                     (abst_plus 
                                                        (abst_opposite y) 
                                                        (abst_opposite x))) 
                                                  abst_zero))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus (abst_plus x y) 
                                                     (abst_plus 
                                                        (abst_opposite x) 
                                                        (abst_opposite y))) 
                                                  abst_zero)))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus (abst_plus x y) 
                                              (abst_plus (abst_opposite x) 
                                                 (abst_opposite y))) 
                                           (abst_plus (abst_plus x y) 
                                              (abst_plus (abst_opposite y) 
                                                 (abst_opposite x)))))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus (abst_plus x y) 
                                                 (abst_plus 
                                                    (abst_opposite y) 
                                                    (abst_opposite x))) 
                                              abst_zero))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus (abst_plus x y) 
                                                 (abst_plus 
                                                    (abst_opposite x) 
                                                    (abst_opposite y))) 
                                              abst_zero)))) 
                                  (v_Vne:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus (abst_plus x y) 
                                                     (abst_plus 
                                                        (abst_opposite x) 
                                                        (abst_opposite y))) 
                                                  (abst_plus (abst_plus x y) 
                                                     (abst_plus 
                                                        (abst_opposite y) 
                                                        (abst_opposite x)))))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus (abst_plus x y) 
                                                 (abst_plus 
                                                    (abst_opposite x) 
                                                    (abst_opposite y))) 
                                              (abst_plus (abst_plus x y) 
                                                 (abst_plus 
                                                    (abst_opposite y) 
                                                    (abst_opposite x)))))) 
                                     __BA_1_1_LEMMA v_Vne) 
                                  (v_Vve:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus (abst_plus x y) 
                                                     (abst_plus 
                                                        (abst_opposite y) 
                                                        (abst_opposite x))) 
                                                  abst_zero))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus (abst_plus x y) 
                                                     (abst_plus 
                                                        (abst_opposite x) 
                                                        (abst_opposite y))) 
                                                  abst_zero))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus (abst_plus x y) 
                                                 (abst_plus 
                                                    (abst_opposite y) 
                                                    (abst_opposite x))) 
                                              abst_zero))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus (abst_plus x y) 
                                                 (abst_plus 
                                                    (abst_opposite x) 
                                                    (abst_opposite y))) 
                                              abst_zero))) 
                                     (v_Vwe:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_plus x y) 
                                                        (abst_plus 
                                                           (abst_opposite y) 
                                                           (abst_opposite x))) 
                                                     abst_zero))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus (abst_plus x y) 
                                                    (abst_plus 
                                                       (abst_opposite y) 
                                                       (abst_opposite x))) 
                                                 abst_zero))) v_Vse v_Vwe) 
                                     (v_Vre:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus (abst_plus x y) 
                                                     (abst_plus 
                                                        (abst_opposite x) 
                                                        (abst_opposite y))) 
                                                  abst_zero)))) =>
                                      zen.Rsubst basics.bool__t 
                                        (v_Vxd:(zen.term basics.bool__t) =>
                                         zen.triangle (focal.is_true v_Vxd)) 
                                        (abst_equal 
                                           (abst_plus (abst_plus x y) 
                                              (abst_plus (abst_opposite x) 
                                                 (abst_opposite y))) 
                                           abst_zero) 
                                        (abst_equal 
                                           (abst_plus (abst_plus x y) 
                                              (abst_plus (abst_opposite x) 
                                                 (abst_opposite y))) 
                                           abst_zero) 
                                        (v_Vqe:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus x y) 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) 
                                                              (abst_opposite 
                                                                 y))) 
                                                        abst_zero) 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus x y) 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) 
                                                              (abst_opposite 
                                                                 y))) 
                                                        abst_zero))))) =>
                                         zen.Rsubst abst_T 
                                           (v_Vxe:(zen.term abst_T) =>
                                            zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal v_Vxe 
                                                       abst_zero) 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_opposite y))) 
                                                       abst_zero)))) 
                                           (abst_plus (abst_plus x y) 
                                              (abst_plus (abst_opposite x) 
                                                 (abst_opposite y))) 
                                           (abst_plus (abst_plus x y) 
                                              (abst_plus (abst_opposite x) 
                                                 (abst_opposite y))) 
                                           (v_Vtd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_plus 
                                                           (abst_plus x y) 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) 
                                                              (abst_opposite 
                                                                 y))) 
                                                        (abst_plus 
                                                           (abst_plus x y) 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 x) 
                                                              (abst_opposite 
                                                                 y))))))) =>
                                            zen.Rnotand 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_opposite y))) 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_opposite y)))))) 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_plus x y) 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_opposite 
                                                                   y))) 
                                                          (abst_plus 
                                                             (abst_plus x y) 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_opposite 
                                                                   y))))))) 
                                              (v_Vae:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    x y) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) 
                                                                    (
                                                                    abst_opposite 
                                                                    y))) 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    x y) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) 
                                                                    (
                                                                    abst_opposite 
                                                                    y)))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_opposite y))) 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_opposite y))))) 
                                                 (v_Vbe:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_opposite 
                                                                    y))) 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_opposite 
                                                                    y)))))) =>
                                                  zen.Reqsym abst_T 
                                                    (abst_plus 
                                                       (abst_plus x y) 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_opposite y))) 
                                                    (abst_plus 
                                                       (abst_plus x y) 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_opposite y))) 
                                                    v_Vbe v_Vtd) v_Vae) 
                                              (v_Vee:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    x y) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    x y) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_plus x y) 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_opposite 
                                                                   y))) 
                                                          (abst_plus 
                                                             (abst_plus x y) 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_opposite 
                                                                   y)))))) 
                                                 (v_Vfe:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    x y) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) 
                                                                    (
                                                                    abst_opposite 
                                                                    y))) 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    x y) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) 
                                                                    (
                                                                    abst_opposite 
                                                                    y))))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vge:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vhe:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vie:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vge 
                                                                    v_Vhe))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vhe 
                                                                    v_Vie))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vge 
                                                                    v_Vie))))))) 
                                                    (abst_plus 
                                                       (abst_plus x y) 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_opposite y))) 
                                                    (v_Vje:
                                                     (zen.proof 
                                                        (zen.forall abst_T 
                                                           (v_Vhe:
                                                            (zen.term abst_T) =>
                                                            zen.forall 
                                                              abst_T 
                                                              (v_Vie:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    v_Vhe))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vhe 
                                                                    v_Vie))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    v_Vie)))))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vhe:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vie:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    v_Vhe))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vhe 
                                                                    v_Vie))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    v_Vie)))))) 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite x) 
                                                             (abst_opposite y))) 
                                                       (v_Vke:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              abst_T 
                                                              (v_Vie:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y)))))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    v_Vie))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    v_Vie))))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vie:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y)))))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    v_Vie))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    v_Vie))))) 
                                                          abst_zero 
                                                          (v_Vye:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y)))))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    abst_zero))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    abst_zero)))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y)))))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    abst_zero))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    abst_zero)))) 
                                                             (v_Vud:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y)))))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y)))))) 
                                                                v_Vfe v_Vud) 
                                                             (v_Vze:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    abst_zero))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    abst_zero))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    abst_zero))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    abst_zero))) 
                                                                (v_Vrd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    abst_zero))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    abst_zero))) 
                                                                   v_Vre 
                                                                   v_Vrd) 
                                                                (v_Vre:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    abst_zero)))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    x) 
                                                                    (abst_opposite 
                                                                    y))) 
                                                                    abst_zero))) 
                                                                   v_Vre 
                                                                   v_Vrd) 
                                                                v_Vze) v_Vye) 
                                                          v_Vke) v_Vje) 
                                                    abst_equal_transitive) 
                                                 v_Vee) v_Vvd) 
                                           (v_Vqe:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_opposite 
                                                                    y))) 
                                                           abst_zero) 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    x) 
                                                                 (abst_opposite 
                                                                    y))) 
                                                           abst_zero))))) =>
                                            zen.Rsubst abst_T 
                                              (v_Voe:(zen.term abst_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_plus x y) 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_opposite 
                                                                   y))) v_Voe) 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_plus x y) 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   x) 
                                                                (abst_opposite 
                                                                   y))) 
                                                          abst_zero)))) 
                                              abst_zero abst_zero 
                                              (v_Vaf:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           abst_zero 
                                                           abst_zero)))) =>
                                               zen.Rnoteq abst_T abst_zero 
                                                 v_Vaf) 
                                              (v_Vqe:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    x y) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) 
                                                                    (
                                                                    abst_opposite 
                                                                    y))) 
                                                              abst_zero) 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    x y) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    x) 
                                                                    (
                                                                    abst_opposite 
                                                                    y))) 
                                                              abst_zero))))) =>
                                               zen.Rnoteq basics.bool__t 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_plus x y) 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_opposite y))) 
                                                    abst_zero) v_Vqe) v_Vqe) 
                                           v_Vqe) 
                                        (v_Vre:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_plus x y) 
                                                        (abst_plus 
                                                           (abst_opposite x) 
                                                           (abst_opposite y))) 
                                                     abst_zero)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_plus x y) 
                                                       (abst_plus 
                                                          (abst_opposite x) 
                                                          (abst_opposite y))) 
                                                    abst_zero))) v_Vre v_Vrd) 
                                        v_Vre) v_Vve) v_Vue) v_Vte) v_Vje) 
                         abst_equal_transitive) 
                      (v_Vwe:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_plus x y) 
                                         (abst_plus (abst_opposite y) 
                                            (abst_opposite x))) abst_zero))))) =>
                       zen.Rcut 
                         (zen.and 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_plus (abst_plus x y) 
                                        (abst_plus (abst_opposite y) 
                                           (abst_opposite x))) 
                                     (abst_plus x 
                                        (abst_plus abst_zero 
                                           (abst_opposite x)))))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus (abst_plus x y) 
                                           (abst_plus (abst_opposite y) 
                                              (abst_opposite x))) 
                                        (abst_plus x 
                                           (abst_plus abst_zero 
                                              (abst_opposite x)))))))) 
                         (v_Vbf:
                          (zen.proof 
                             (zen.and 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_plus (abst_plus x y) 
                                            (abst_plus (abst_opposite y) 
                                               (abst_opposite x))) 
                                         (abst_plus x 
                                            (abst_plus abst_zero 
                                               (abst_opposite x)))))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus (abst_plus x y) 
                                               (abst_plus (abst_opposite y) 
                                                  (abst_opposite x))) 
                                            (abst_plus x 
                                               (abst_plus abst_zero 
                                                  (abst_opposite x))))))))) =>
                          zen.Rand 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_plus (abst_plus x y) 
                                        (abst_plus (abst_opposite y) 
                                           (abst_opposite x))) 
                                     (abst_plus x 
                                        (abst_plus abst_zero 
                                           (abst_opposite x)))))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus (abst_plus x y) 
                                           (abst_plus (abst_opposite y) 
                                              (abst_opposite x))) 
                                        (abst_plus x 
                                           (abst_plus abst_zero 
                                              (abst_opposite x))))))) 
                            (v_Vcf:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_plus (abst_plus x y) 
                                            (abst_plus (abst_opposite y) 
                                               (abst_opposite x))) 
                                         (abst_plus x 
                                            (abst_plus abst_zero 
                                               (abst_opposite x))))))) =>
                             v_Vdf:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus (abst_plus x y) 
                                               (abst_plus (abst_opposite y) 
                                                  (abst_opposite x))) 
                                            (abst_plus x 
                                               (abst_plus abst_zero 
                                                  (abst_opposite x)))))))) =>
                             zen.Rcut 
                               (zen.and 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_plus (abst_plus x y) 
                                              (abst_plus (abst_opposite y) 
                                                 (abst_opposite x))) 
                                           (abst_plus x 
                                              (abst_plus 
                                                 (abst_plus y 
                                                    (abst_opposite y)) 
                                                 (abst_opposite x)))))) 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus (abst_plus x y) 
                                                 (abst_plus 
                                                    (abst_opposite y) 
                                                    (abst_opposite x))) 
                                              (abst_plus x 
                                                 (abst_plus 
                                                    (abst_plus y 
                                                       (abst_opposite y)) 
                                                    (abst_opposite x)))))))) 
                               (v_Vef:
                                (zen.proof 
                                   (zen.and 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus (abst_plus x y) 
                                                  (abst_plus 
                                                     (abst_opposite y) 
                                                     (abst_opposite x))) 
                                               (abst_plus x 
                                                  (abst_plus 
                                                     (abst_plus y 
                                                        (abst_opposite y)) 
                                                     (abst_opposite x)))))) 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus (abst_plus x y) 
                                                     (abst_plus 
                                                        (abst_opposite y) 
                                                        (abst_opposite x))) 
                                                  (abst_plus x 
                                                     (abst_plus 
                                                        (abst_plus y 
                                                           (abst_opposite y)) 
                                                        (abst_opposite x))))))))) =>
                                zen.Rand 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_plus (abst_plus x y) 
                                              (abst_plus (abst_opposite y) 
                                                 (abst_opposite x))) 
                                           (abst_plus x 
                                              (abst_plus 
                                                 (abst_plus y 
                                                    (abst_opposite y)) 
                                                 (abst_opposite x)))))) 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus (abst_plus x y) 
                                                 (abst_plus 
                                                    (abst_opposite y) 
                                                    (abst_opposite x))) 
                                              (abst_plus x 
                                                 (abst_plus 
                                                    (abst_plus y 
                                                       (abst_opposite y)) 
                                                    (abst_opposite x))))))) 
                                  (v_Vff:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus (abst_plus x y) 
                                                  (abst_plus 
                                                     (abst_opposite y) 
                                                     (abst_opposite x))) 
                                               (abst_plus x 
                                                  (abst_plus 
                                                     (abst_plus y 
                                                        (abst_opposite y)) 
                                                     (abst_opposite x))))))) =>
                                   v_Vgf:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus (abst_plus x y) 
                                                     (abst_plus 
                                                        (abst_opposite y) 
                                                        (abst_opposite x))) 
                                                  (abst_plus x 
                                                     (abst_plus 
                                                        (abst_plus y 
                                                           (abst_opposite y)) 
                                                        (abst_opposite x)))))))) =>
                                   zen.Rcut 
                                     (zen.and 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus (abst_plus x y) 
                                                    (abst_plus 
                                                       (abst_opposite y) 
                                                       (abst_opposite x))) 
                                                 (abst_plus x 
                                                    (abst_plus y 
                                                       (abst_plus 
                                                          (abst_opposite y) 
                                                          (abst_opposite x))))))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_plus x y) 
                                                       (abst_plus 
                                                          (abst_opposite y) 
                                                          (abst_opposite x))) 
                                                    (abst_plus x 
                                                       (abst_plus y 
                                                          (abst_plus 
                                                             (abst_opposite y) 
                                                             (abst_opposite x))))))))) 
                                     (v_Vhf:
                                      (zen.proof 
                                         (zen.and 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus 
                                                        (abst_plus x y) 
                                                        (abst_plus 
                                                           (abst_opposite y) 
                                                           (abst_opposite x))) 
                                                     (abst_plus x 
                                                        (abst_plus y 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 y) 
                                                              (abst_opposite 
                                                                 x))))))) 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus x y) 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 y) 
                                                              (abst_opposite 
                                                                 x))) 
                                                        (abst_plus x 
                                                           (abst_plus y 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    y) 
                                                                 (abst_opposite 
                                                                    x)))))))))) =>
                                      zen.Rand 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus (abst_plus x y) 
                                                    (abst_plus 
                                                       (abst_opposite y) 
                                                       (abst_opposite x))) 
                                                 (abst_plus x 
                                                    (abst_plus y 
                                                       (abst_plus 
                                                          (abst_opposite y) 
                                                          (abst_opposite x))))))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_plus x y) 
                                                       (abst_plus 
                                                          (abst_opposite y) 
                                                          (abst_opposite x))) 
                                                    (abst_plus x 
                                                       (abst_plus y 
                                                          (abst_plus 
                                                             (abst_opposite y) 
                                                             (abst_opposite x)))))))) 
                                        (v_Vif:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus 
                                                        (abst_plus x y) 
                                                        (abst_plus 
                                                           (abst_opposite y) 
                                                           (abst_opposite x))) 
                                                     (abst_plus x 
                                                        (abst_plus y 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 y) 
                                                              (abst_opposite 
                                                                 x)))))))) =>
                                         v_Vjf:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus x y) 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 y) 
                                                              (abst_opposite 
                                                                 x))) 
                                                        (abst_plus x 
                                                           (abst_plus y 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    y) 
                                                                 (abst_opposite 
                                                                    x))))))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_plus x y) 
                                                       (abst_plus 
                                                          (abst_opposite y) 
                                                          (abst_opposite x))) 
                                                    (abst_plus x 
                                                       (abst_plus y 
                                                          (abst_plus 
                                                             (abst_opposite y) 
                                                             (abst_opposite x))))))) 
                                           __BA_1_2_LEMMA v_Vjf) v_Vhf) 
                                     (v_Vkf:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.and 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_plus 
                                                           (abst_plus x y) 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 y) 
                                                              (abst_opposite 
                                                                 x))) 
                                                        (abst_plus x 
                                                           (abst_plus y 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    y) 
                                                                 (abst_opposite 
                                                                    x))))))) 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    y) 
                                                                 (abst_opposite 
                                                                    x))) 
                                                           (abst_plus x 
                                                              (abst_plus y 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    y) 
                                                                    (
                                                                    abst_opposite 
                                                                    x))))))))))) =>
                                      zen.Rcut 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus x 
                                                 (abst_plus 
                                                    (abst_plus y 
                                                       (abst_opposite y)) 
                                                    (abst_opposite x))) 
                                              (abst_plus x 
                                                 (abst_plus 
                                                    (abst_plus y 
                                                       (abst_opposite y)) 
                                                    (abst_opposite x))))) 
                                        (v_Vlf:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus x 
                                                     (abst_plus 
                                                        (abst_plus y 
                                                           (abst_opposite y)) 
                                                        (abst_opposite x))) 
                                                  (abst_plus x 
                                                     (abst_plus 
                                                        (abst_plus y 
                                                           (abst_opposite y)) 
                                                        (abst_opposite x)))))) =>
                                         zen.Rsubst basics.bool__t 
                                           (v_Vxd:
                                            (zen.term basics.bool__t) =>
                                            zen.triangle 
                                              (focal.is_true v_Vxd)) 
                                           (abst_equal 
                                              (abst_plus x 
                                                 (abst_plus y 
                                                    (abst_plus 
                                                       (abst_opposite y) 
                                                       (abst_opposite x)))) 
                                              (abst_plus x 
                                                 (abst_plus 
                                                    (abst_plus y 
                                                       (abst_opposite y)) 
                                                    (abst_opposite x)))) 
                                           (abst_equal 
                                              (abst_plus (abst_plus x y) 
                                                 (abst_plus 
                                                    (abst_opposite y) 
                                                    (abst_opposite x))) 
                                              (abst_plus x 
                                                 (abst_plus 
                                                    (abst_plus y 
                                                       (abst_opposite y)) 
                                                    (abst_opposite x)))) 
                                           (v_Vmf:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_plus x 
                                                              (abst_plus y 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    y) 
                                                                    (
                                                                    abst_opposite 
                                                                    x)))) 
                                                           (abst_plus x 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    y 
                                                                    (
                                                                    abst_opposite 
                                                                    y)) 
                                                                 (abst_opposite 
                                                                    x)))) 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    y) 
                                                                 (abst_opposite 
                                                                    x))) 
                                                           (abst_plus x 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    y 
                                                                    (
                                                                    abst_opposite 
                                                                    y)) 
                                                                 (abst_opposite 
                                                                    x)))))))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vnf:(zen.term abst_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal v_Vnf 
                                                          (abst_plus x 
                                                             (abst_plus 
                                                                (abst_plus y 
                                                                   (abst_opposite 
                                                                    y)) 
                                                                (abst_opposite 
                                                                   x)))) 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_plus x y) 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   y) 
                                                                (abst_opposite 
                                                                   x))) 
                                                          (abst_plus x 
                                                             (abst_plus 
                                                                (abst_plus y 
                                                                   (abst_opposite 
                                                                    y)) 
                                                                (abst_opposite 
                                                                   x))))))) 
                                              (abst_plus x 
                                                 (abst_plus y 
                                                    (abst_plus 
                                                       (abst_opposite y) 
                                                       (abst_opposite x)))) 
                                              (abst_plus (abst_plus x y) 
                                                 (abst_plus 
                                                    (abst_opposite y) 
                                                    (abst_opposite x))) 
                                              (v_Vof:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_plus x 
                                                              (abst_plus y 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    y) 
                                                                    (
                                                                    abst_opposite 
                                                                    x)))) 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    y) 
                                                                 (abst_opposite 
                                                                    x))))))) =>
                                               zen.Rnotand 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus 
                                                             (abst_plus x y) 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   y) 
                                                                (abst_opposite 
                                                                   x))) 
                                                          (abst_plus x 
                                                             (abst_plus y 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    y) 
                                                                   (abst_opposite 
                                                                    x))))))) 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   y) 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    y) 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             (abst_plus x 
                                                                (abst_plus y 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))))))) 
                                                 (v_Vpf:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    x y) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus 
                                                             (abst_plus x y) 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   y) 
                                                                (abst_opposite 
                                                                   x))) 
                                                          (abst_plus x 
                                                             (abst_plus y 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    y) 
                                                                   (abst_opposite 
                                                                    x)))))) 
                                                    (v_Vqf:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    x y) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    y) 
                                                                    (
                                                                    abst_opposite 
                                                                    x))) 
                                                              (abst_plus x 
                                                                 (abst_plus 
                                                                    y 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                     zen.Rcut 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   y) 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    y) 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   y) 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    y) 
                                                                   (abst_opposite 
                                                                    x))))) 
                                                       (v_Vrf:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    x y) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    x y) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))))) =>
                                                        zen.Rsubst abst_T 
                                                          (v_Vsf:
                                                           (zen.term abst_T) =>
                                                           zen.triangle 
                                                             (zen.equal 
                                                                abst_T v_Vsf 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    x y) 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                          (abst_plus 
                                                             (abst_plus x y) 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   y) 
                                                                (abst_opposite 
                                                                   x))) 
                                                          (abst_plus x 
                                                             (abst_plus y 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    y) 
                                                                   (abst_opposite 
                                                                    x)))) 
                                                          (v_Vif:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                             v_Vqf v_Vif) 
                                                          (v_Vtf:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))))) =>
                                                           zen.Rsubst abst_T 
                                                             (v_Vuf:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                   v_Vuf)) 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   y) 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    y) 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   y) 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    y) 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             (v_Vvf:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                              zen.Rnoteq 
                                                                abst_T 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    x y) 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                v_Vvf) 
                                                             (v_Vtf:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                                v_Vtf v_Vof) 
                                                             v_Vtf) v_Vrf) 
                                                       (v_Vvf:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                        zen.Rnoteq abst_T 
                                                          (abst_plus 
                                                             (abst_plus x y) 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   y) 
                                                                (abst_opposite 
                                                                   x))) v_Vvf)) 
                                                    v_Vpf) 
                                                 (v_Vwf:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))))))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   y) 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    y) 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             (abst_plus x 
                                                                (abst_plus y 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                    (__BA_1_2_LEMMA:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    x y) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vge:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vhe:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vie:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vge 
                                                                    v_Vhe))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vhe 
                                                                    v_Vie))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vge 
                                                                    v_Vie))))))) 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite y) 
                                                             (abst_opposite x))) 
                                                       (v_Vxf:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              abst_T 
                                                              (v_Vhe:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.forall 
                                                                 abst_T 
                                                                 (v_Vie:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vhe))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vhe 
                                                                    v_Vie))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie)))))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vhe:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vie:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vhe))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vhe 
                                                                    v_Vie))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie)))))) 
                                                          (abst_plus x 
                                                             (abst_plus y 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    y) 
                                                                   (abst_opposite 
                                                                    x)))) 
                                                          (v_Vyf:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 abst_T 
                                                                 (v_Vie:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    v_Vie))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie))))))) =>
                                                           zen.Rall abst_T 
                                                             (v_Vie:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    v_Vie))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie))))) 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             (v_Vzf:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))))))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                                (v_Vjf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                                   __BA_1_2_LEMMA 
                                                                   v_Vjf) 
                                                                (v_Vag:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                   (v_Vbg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    __BA_1_3_LEMMA 
                                                                    v_Vbg) 
                                                                   (v_Vcg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vxd:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vxd)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (v_Vdg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vnf:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vnf 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (v_Vvf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vvf) 
                                                                    (v_Vdg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Veg:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Veg) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (v_Vfg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                                    v_Vlf 
                                                                    v_Vfg) 
                                                                    (v_Vdg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    v_Vdg) 
                                                                    v_Vdg) 
                                                                    v_Vdg) 
                                                                    (v_Vcg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    v_Vcg 
                                                                    v_Vgf) 
                                                                    v_Vcg) 
                                                                   v_Vag) 
                                                                v_Vzf) v_Vyf) 
                                                          v_Vxf) 
                                                       abst_equal_transitive) 
                                                    v_Vwf) v_Vkf) 
                                              (v_Vdg:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    x y) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    y) 
                                                                    (
                                                                    abst_opposite 
                                                                    x))) 
                                                              (abst_plus x 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (
                                                                    abst_opposite 
                                                                    x)))) 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    x y) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    y) 
                                                                    (
                                                                    abst_opposite 
                                                                    x))) 
                                                              (abst_plus x 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (
                                                                    abst_opposite 
                                                                    x)))))))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Veg:(zen.term abst_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   y) 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    y) 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             v_Veg) 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   y) 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    y) 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                   (abst_opposite 
                                                                    x))))))) 
                                                 (abst_plus x 
                                                    (abst_plus 
                                                       (abst_plus y 
                                                          (abst_opposite y)) 
                                                       (abst_opposite x))) 
                                                 (abst_plus x 
                                                    (abst_plus 
                                                       (abst_plus y 
                                                          (abst_opposite y)) 
                                                       (abst_opposite x))) 
                                                 (v_Vfg:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_plus x 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (
                                                                    abst_opposite 
                                                                    x))) 
                                                              (abst_plus x 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (
                                                                    abst_opposite 
                                                                    x))))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus x 
                                                             (abst_plus 
                                                                (abst_plus y 
                                                                   (abst_opposite 
                                                                    y)) 
                                                                (abst_opposite 
                                                                   x))) 
                                                          (abst_plus x 
                                                             (abst_plus 
                                                                (abst_plus y 
                                                                   (abst_opposite 
                                                                    y)) 
                                                                (abst_opposite 
                                                                   x))))) 
                                                    v_Vlf v_Vfg) 
                                                 (v_Vdg:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    x y) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    x y) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                  zen.Rnoteq basics.bool__t 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite y) 
                                                             (abst_opposite x))) 
                                                       (abst_plus x 
                                                          (abst_plus 
                                                             (abst_plus y 
                                                                (abst_opposite 
                                                                   y)) 
                                                             (abst_opposite x)))) 
                                                    v_Vdg) v_Vdg) v_Vmf) 
                                           (v_Vcg:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus x y) 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 y) 
                                                              (abst_opposite 
                                                                 x))) 
                                                        (abst_plus x 
                                                           (abst_plus 
                                                              (abst_plus y 
                                                                 (abst_opposite 
                                                                    y)) 
                                                              (abst_opposite 
                                                                 x))))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite y) 
                                                             (abst_opposite x))) 
                                                       (abst_plus x 
                                                          (abst_plus 
                                                             (abst_plus y 
                                                                (abst_opposite 
                                                                   y)) 
                                                             (abst_opposite x)))))) 
                                              v_Vcg v_Vgf) __BA_1_3_LEMMA) 
                                        (v_Vfg:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus x 
                                                        (abst_plus 
                                                           (abst_plus y 
                                                              (abst_opposite 
                                                                 y)) 
                                                           (abst_opposite x))) 
                                                     (abst_plus x 
                                                        (abst_plus 
                                                           (abst_plus y 
                                                              (abst_opposite 
                                                                 y)) 
                                                           (abst_opposite x))))))) =>
                                         zen.Rcut 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus x 
                                                       (abst_plus 
                                                          (abst_plus y 
                                                             (abst_opposite y)) 
                                                          (abst_opposite x))) 
                                                    (abst_plus x 
                                                       (abst_plus 
                                                          (abst_plus y 
                                                             (abst_opposite y)) 
                                                          (abst_opposite x)))))) 
                                           (v_Vgg:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus x 
                                                           (abst_plus 
                                                              (abst_plus y 
                                                                 (abst_opposite 
                                                                    y)) 
                                                              (abst_opposite 
                                                                 x))) 
                                                        (abst_plus x 
                                                           (abst_plus 
                                                              (abst_plus y 
                                                                 (abst_opposite 
                                                                    y)) 
                                                              (abst_opposite 
                                                                 x))))))) =>
                                            zen.Rall abst_T 
                                              (v_Vge:(zen.term abst_T) =>
                                               zen.forall abst_T 
                                                 (v_Vhe:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vie:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                v_Vge v_Vhe))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vhe 
                                                                   v_Vie))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vge 
                                                                   v_Vie))))))) 
                                              (abst_plus x 
                                                 (abst_plus y 
                                                    (abst_plus 
                                                       (abst_opposite y) 
                                                       (abst_opposite x)))) 
                                              (v_Vhg:
                                               (zen.proof 
                                                  (zen.forall abst_T 
                                                     (v_Vhe:
                                                      (zen.term abst_T) =>
                                                      zen.forall abst_T 
                                                        (v_Vie:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    v_Vhe))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Vhe 
                                                                    v_Vie))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    v_Vie)))))))) =>
                                               zen.Rall abst_T 
                                                 (v_Vhe:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vie:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus x 
                                                                   (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                v_Vhe))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vhe 
                                                                   v_Vie))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                   v_Vie)))))) 
                                                 (abst_plus x 
                                                    (abst_plus 
                                                       (abst_plus y 
                                                          (abst_opposite y)) 
                                                       (abst_opposite x))) 
                                                 (v_Vig:
                                                  (zen.proof 
                                                     (zen.forall abst_T 
                                                        (v_Vie:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    v_Vie))))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vie:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus x 
                                                                   (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                (abst_plus x 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                   v_Vie))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                   v_Vie))))) 
                                                    (abst_plus x 
                                                       (abst_plus 
                                                          (abst_plus y 
                                                             (abst_opposite y)) 
                                                          (abst_opposite x))) 
                                                    (v_Vjg:
                                                     (zen.proof 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))))))))) =>
                                                     zen.Rimply 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus x 
                                                                   (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                (abst_plus x 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                       (v_Vbg:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                          __BA_1_3_LEMMA 
                                                          v_Vbg) 
                                                       (v_Vkg:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                          (v_Vlg:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                             v_Vgg v_Vlg) 
                                                          (__BA_1_3_LEMMA:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                           zen.Rsubst 
                                                             basics.bool__t 
                                                             (v_Vmg:
                                                              (zen.term 
                                                                 basics.bool__t) =>
                                                              zen.triangle 
                                                                (focal.is_true 
                                                                   v_Vmg)) 
                                                             (abst_equal 
                                                                (abst_plus x 
                                                                   (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                (abst_plus x 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    x y) 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                (abst_plus x 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                             (v_Vmf:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                              zen.Rsubst 
                                                                abst_T 
                                                                (v_Vng:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vng 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                                (abst_plus x 
                                                                   (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    x y) 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                (v_Vof:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                                 zen.Rnotand 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))))))) 
                                                                   (v_Vpf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    (v_Vqf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                                    zen.Reqsym 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    v_Vqf 
                                                                    v_Vof) 
                                                                    v_Vpf) 
                                                                   (v_Vwf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                                    (__BA_1_2_LEMMA:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vge:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vhe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vie:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vge 
                                                                    v_Vhe))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vhe 
                                                                    v_Vie))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vge 
                                                                    v_Vie))))))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (v_Vxf:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vhe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vie:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vhe))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vhe 
                                                                    v_Vie))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie)))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vhe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vie:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vhe))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vhe 
                                                                    v_Vie))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie)))))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (v_Vyf:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vie:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    v_Vie))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vie:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    v_Vie))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie))))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (v_Vzf:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                                    (v_Vjf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                                    __BA_1_2_LEMMA 
                                                                    v_Vjf) 
                                                                    (v_Vag:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    (v_Vbg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    __BA_1_3_LEMMA 
                                                                    v_Vbg) 
                                                                    (v_Vcg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    v_Vcg 
                                                                    v_Vgf) 
                                                                    v_Vag) 
                                                                    v_Vzf) 
                                                                    v_Vyf) 
                                                                    v_Vxf) 
                                                                    abst_equal_transitive) 
                                                                    v_Vwf) 
                                                                   v_Vkf) 
                                                                (v_Vdg:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                                 zen.Rsubst 
                                                                   abst_T 
                                                                   (v_Veg:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Veg) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                   (v_Vfg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vfg) 
                                                                   (v_Vdg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    v_Vdg) 
                                                                   v_Vdg) 
                                                                v_Vmf) 
                                                             (v_Vcg:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                v_Vcg v_Vgf) 
                                                             __BA_1_3_LEMMA) 
                                                          v_Vkg) v_Vjg) v_Vig) 
                                                 v_Vhg) abst_equal_transitive) 
                                           (v_Vlg:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus x 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    y 
                                                                    (
                                                                    abst_opposite 
                                                                    y)) 
                                                                 (abst_opposite 
                                                                    x))) 
                                                           (abst_plus x 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    y 
                                                                    (
                                                                    abst_opposite 
                                                                    y)) 
                                                                 (abst_opposite 
                                                                    x)))))))) =>
                                            zen.Rnoteq abst_T 
                                              (abst_plus x 
                                                 (abst_plus 
                                                    (abst_plus y 
                                                       (abst_opposite y)) 
                                                    (abst_opposite x))) v_Vfg)))) 
                                  v_Vef) 
                               (v_Vog:
                                (zen.proof 
                                   (zen.not 
                                      (zen.and 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus (abst_plus x y) 
                                                     (abst_plus 
                                                        (abst_opposite y) 
                                                        (abst_opposite x))) 
                                                  (abst_plus x 
                                                     (abst_plus 
                                                        (abst_plus y 
                                                           (abst_opposite y)) 
                                                        (abst_opposite x)))))) 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_plus x y) 
                                                        (abst_plus 
                                                           (abst_opposite y) 
                                                           (abst_opposite x))) 
                                                     (abst_plus x 
                                                        (abst_plus 
                                                           (abst_plus y 
                                                              (abst_opposite 
                                                                 y)) 
                                                           (abst_opposite x)))))))))) =>
                                zen.Rcut 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_plus x 
                                           (abst_plus abst_zero 
                                              (abst_opposite x))) 
                                        (abst_plus x 
                                           (abst_plus abst_zero 
                                              (abst_opposite x))))) 
                                  (v_Vpg:
                                   (zen.proof 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_plus x 
                                               (abst_plus abst_zero 
                                                  (abst_opposite x))) 
                                            (abst_plus x 
                                               (abst_plus abst_zero 
                                                  (abst_opposite x)))))) =>
                                   zen.Rsubst basics.bool__t 
                                     (v_Vmg:(zen.term basics.bool__t) =>
                                      zen.triangle (focal.is_true v_Vmg)) 
                                     (abst_equal 
                                        (abst_plus x 
                                           (abst_plus 
                                              (abst_plus y (abst_opposite y)) 
                                              (abst_opposite x))) 
                                        (abst_plus x 
                                           (abst_plus abst_zero 
                                              (abst_opposite x)))) 
                                     (abst_equal 
                                        (abst_plus (abst_plus x y) 
                                           (abst_plus (abst_opposite y) 
                                              (abst_opposite x))) 
                                        (abst_plus x 
                                           (abst_plus abst_zero 
                                              (abst_opposite x)))) 
                                     (v_Vqg:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (abst_equal 
                                                     (abst_plus x 
                                                        (abst_plus 
                                                           (abst_plus y 
                                                              (abst_opposite 
                                                                 y)) 
                                                           (abst_opposite x))) 
                                                     (abst_plus x 
                                                        (abst_plus abst_zero 
                                                           (abst_opposite x)))) 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_plus x y) 
                                                        (abst_plus 
                                                           (abst_opposite y) 
                                                           (abst_opposite x))) 
                                                     (abst_plus x 
                                                        (abst_plus abst_zero 
                                                           (abst_opposite x)))))))) =>
                                      zen.Rsubst abst_T 
                                        (v_Vrg:(zen.term abst_T) =>
                                         zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (abst_equal v_Vrg 
                                                    (abst_plus x 
                                                       (abst_plus abst_zero 
                                                          (abst_opposite x)))) 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_plus x y) 
                                                       (abst_plus 
                                                          (abst_opposite y) 
                                                          (abst_opposite x))) 
                                                    (abst_plus x 
                                                       (abst_plus abst_zero 
                                                          (abst_opposite x))))))) 
                                        (abst_plus x 
                                           (abst_plus 
                                              (abst_plus y (abst_opposite y)) 
                                              (abst_opposite x))) 
                                        (abst_plus (abst_plus x y) 
                                           (abst_plus (abst_opposite y) 
                                              (abst_opposite x))) 
                                        (v_Vsg:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus x 
                                                        (abst_plus 
                                                           (abst_plus y 
                                                              (abst_opposite 
                                                                 y)) 
                                                           (abst_opposite x))) 
                                                     (abst_plus 
                                                        (abst_plus x y) 
                                                        (abst_plus 
                                                           (abst_opposite y) 
                                                           (abst_opposite x))))))) =>
                                         zen.Rnotand 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_plus 
                                                       (abst_plus x y) 
                                                       (abst_plus 
                                                          (abst_opposite y) 
                                                          (abst_opposite x))) 
                                                    (abst_plus x 
                                                       (abst_plus 
                                                          (abst_plus y 
                                                             (abst_opposite y)) 
                                                          (abst_opposite x)))))) 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite y) 
                                                             (abst_opposite x))) 
                                                       (abst_plus x 
                                                          (abst_plus 
                                                             (abst_plus y 
                                                                (abst_opposite 
                                                                   y)) 
                                                             (abst_opposite x))))))) 
                                           (v_Vtg:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    y) 
                                                                 (abst_opposite 
                                                                    x))) 
                                                           (abst_plus x 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    y 
                                                                    (
                                                                    abst_opposite 
                                                                    y)) 
                                                                 (abst_opposite 
                                                                    x)))))))) =>
                                            zen.Rnotnot 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_plus 
                                                       (abst_plus x y) 
                                                       (abst_plus 
                                                          (abst_opposite y) 
                                                          (abst_opposite x))) 
                                                    (abst_plus x 
                                                       (abst_plus 
                                                          (abst_plus y 
                                                             (abst_opposite y)) 
                                                          (abst_opposite x))))) 
                                              (v_Vug:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_plus 
                                                           (abst_plus x y) 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 y) 
                                                              (abst_opposite 
                                                                 x))) 
                                                        (abst_plus x 
                                                           (abst_plus 
                                                              (abst_plus y 
                                                                 (abst_opposite 
                                                                    y)) 
                                                              (abst_opposite 
                                                                 x)))))) =>
                                               zen.Rcut 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite y) 
                                                             (abst_opposite x))) 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite y) 
                                                             (abst_opposite x))))) 
                                                 (v_Vrf:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    y) 
                                                                 (abst_opposite 
                                                                    x))) 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    y) 
                                                                 (abst_opposite 
                                                                    x)))))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Vvg:
                                                     (zen.term abst_T) =>
                                                     zen.triangle 
                                                       (zen.equal abst_T 
                                                          v_Vvg 
                                                          (abst_plus 
                                                             (abst_plus x y) 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   y) 
                                                                (abst_opposite 
                                                                   x))))) 
                                                    (abst_plus 
                                                       (abst_plus x y) 
                                                       (abst_plus 
                                                          (abst_opposite y) 
                                                          (abst_opposite x))) 
                                                    (abst_plus x 
                                                       (abst_plus 
                                                          (abst_plus y 
                                                             (abst_opposite y)) 
                                                          (abst_opposite x))) 
                                                    (v_Vff:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    x y) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   y) 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    y) 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                   (abst_opposite 
                                                                    x))))) 
                                                       v_Vug v_Vff) 
                                                    (v_Vwg:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_plus x 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (
                                                                    abst_opposite 
                                                                    x))) 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    x y) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    y) 
                                                                    (
                                                                    abst_opposite 
                                                                    x)))))) =>
                                                     zen.Rsubst abst_T 
                                                       (v_Vxg:
                                                        (zen.term abst_T) =>
                                                        zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             v_Vxg)) 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite y) 
                                                             (abst_opposite x))) 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite y) 
                                                             (abst_opposite x))) 
                                                       (v_Vvf:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                        zen.Rnoteq abst_T 
                                                          (abst_plus 
                                                             (abst_plus x y) 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   y) 
                                                                (abst_opposite 
                                                                   x))) v_Vvf) 
                                                       (v_Vwg:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    x y) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x)))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T 
                                                                (abst_plus x 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    x y) 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                          v_Vwg v_Vsg) v_Vwg) 
                                                    v_Vrf) 
                                                 (v_Vvf:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    x y) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    y) 
                                                                    (
                                                                    abst_opposite 
                                                                    x))) 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    x y) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    y) 
                                                                    (
                                                                    abst_opposite 
                                                                    x))))))) =>
                                                  zen.Rnoteq abst_T 
                                                    (abst_plus 
                                                       (abst_plus x y) 
                                                       (abst_plus 
                                                          (abst_opposite y) 
                                                          (abst_opposite x))) 
                                                    v_Vvf)) v_Vtg) 
                                           (v_Vyg:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    x y) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    y) 
                                                                    (
                                                                    abst_opposite 
                                                                    x))) 
                                                              (abst_plus x 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (
                                                                    abst_opposite 
                                                                    x))))))))) =>
                                            zen.Rnotnot 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite y) 
                                                             (abst_opposite x))) 
                                                       (abst_plus x 
                                                          (abst_plus 
                                                             (abst_plus y 
                                                                (abst_opposite 
                                                                   y)) 
                                                             (abst_opposite x)))))) 
                                              (v_Vcg:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    y) 
                                                                 (abst_opposite 
                                                                    x))) 
                                                           (abst_plus x 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    y 
                                                                    (
                                                                    abst_opposite 
                                                                    y)) 
                                                                 (abst_opposite 
                                                                    x))))))) =>
                                               zen.Rall abst_T 
                                                 (v_Vge:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vhe:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vie:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vge 
                                                                   v_Vhe))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vhe 
                                                                    v_Vie))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vge 
                                                                    v_Vie))))))) 
                                                 (abst_plus (abst_plus x y) 
                                                    (abst_plus 
                                                       (abst_opposite y) 
                                                       (abst_opposite x))) 
                                                 (v_Vxf:
                                                  (zen.proof 
                                                     (zen.forall abst_T 
                                                        (v_Vhe:
                                                         (zen.term abst_T) =>
                                                         zen.forall abst_T 
                                                           (v_Vie:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vhe))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vhe 
                                                                    v_Vie))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie)))))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vhe:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vie:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                   v_Vhe))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vhe 
                                                                    v_Vie))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie)))))) 
                                                    (abst_plus x 
                                                       (abst_plus 
                                                          (abst_plus y 
                                                             (abst_opposite y)) 
                                                          (abst_opposite x))) 
                                                    (v_Vzg:
                                                     (zen.proof 
                                                        (zen.forall abst_T 
                                                           (v_Vie:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie))))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vie:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie))))) 
                                                       (abst_plus x 
                                                          (abst_plus 
                                                             abst_zero 
                                                             (abst_opposite x))) 
                                                       (v_Vah:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))))))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                          (v_Vgf:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                             v_Vcg v_Vgf) 
                                                          (v_Vbh:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                             (v_Vch:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                __BA_1_5_LEMMA 
                                                                v_Vch) 
                                                             (v_Vdh:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                              zen.Rsubst 
                                                                basics.bool__t 
                                                                (v_Vmg:
                                                                 (zen.term 
                                                                    basics.bool__t) =>
                                                                 zen.triangle 
                                                                   (focal.is_true 
                                                                    v_Vmg)) 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                (v_Veh:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                                 zen.Rsubst 
                                                                   abst_T 
                                                                   (v_Vrg:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vrg 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                   (v_Vvf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vvf) 
                                                                   (v_Veh:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Veg:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Veg) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (v_Vfh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                                    v_Vpg 
                                                                    v_Vfh) 
                                                                    (v_Veh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    v_Veh) 
                                                                    v_Veh) 
                                                                   v_Veh) 
                                                                (v_Vdh:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                   v_Vdh 
                                                                   v_Vdf) 
                                                                v_Vdh) v_Vbh) 
                                                          v_Vah) v_Vzg) v_Vxf) 
                                                 abst_equal_transitive) v_Vyg) 
                                           v_Vog) 
                                        (v_Veh:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus x y) 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 y) 
                                                              (abst_opposite 
                                                                 x))) 
                                                        (abst_plus x 
                                                           (abst_plus 
                                                              abst_zero 
                                                              (abst_opposite 
                                                                 x)))) 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus x y) 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 y) 
                                                              (abst_opposite 
                                                                 x))) 
                                                        (abst_plus x 
                                                           (abst_plus 
                                                              abst_zero 
                                                              (abst_opposite 
                                                                 x)))))))) =>
                                         zen.Rsubst abst_T 
                                           (v_Veg:(zen.term abst_T) =>
                                            zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite y) 
                                                             (abst_opposite x))) 
                                                       v_Veg) 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite y) 
                                                             (abst_opposite x))) 
                                                       (abst_plus x 
                                                          (abst_plus 
                                                             abst_zero 
                                                             (abst_opposite x))))))) 
                                           (abst_plus x 
                                              (abst_plus abst_zero 
                                                 (abst_opposite x))) 
                                           (abst_plus x 
                                              (abst_plus abst_zero 
                                                 (abst_opposite x))) 
                                           (v_Vfh:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_plus x 
                                                           (abst_plus 
                                                              abst_zero 
                                                              (abst_opposite 
                                                                 x))) 
                                                        (abst_plus x 
                                                           (abst_plus 
                                                              abst_zero 
                                                              (abst_opposite 
                                                                 x))))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_plus x 
                                                       (abst_plus abst_zero 
                                                          (abst_opposite x))) 
                                                    (abst_plus x 
                                                       (abst_plus abst_zero 
                                                          (abst_opposite x))))) 
                                              v_Vpg v_Vfh) 
                                           (v_Veh:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    y) 
                                                                 (abst_opposite 
                                                                    x))) 
                                                           (abst_plus x 
                                                              (abst_plus 
                                                                 abst_zero 
                                                                 (abst_opposite 
                                                                    x)))) 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    y) 
                                                                 (abst_opposite 
                                                                    x))) 
                                                           (abst_plus x 
                                                              (abst_plus 
                                                                 abst_zero 
                                                                 (abst_opposite 
                                                                    x)))))))) =>
                                            zen.Rnoteq basics.bool__t 
                                              (abst_equal 
                                                 (abst_plus (abst_plus x y) 
                                                    (abst_plus 
                                                       (abst_opposite y) 
                                                       (abst_opposite x))) 
                                                 (abst_plus x 
                                                    (abst_plus abst_zero 
                                                       (abst_opposite x)))) 
                                              v_Veh) v_Veh) v_Vqg) 
                                     (v_Vdh:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus (abst_plus x y) 
                                                     (abst_plus 
                                                        (abst_opposite y) 
                                                        (abst_opposite x))) 
                                                  (abst_plus x 
                                                     (abst_plus abst_zero 
                                                        (abst_opposite x))))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus (abst_plus x y) 
                                                    (abst_plus 
                                                       (abst_opposite y) 
                                                       (abst_opposite x))) 
                                                 (abst_plus x 
                                                    (abst_plus abst_zero 
                                                       (abst_opposite x)))))) 
                                        v_Vdh v_Vdf) __BA_1_5_LEMMA) 
                                  (v_Vfh:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus x 
                                                  (abst_plus abst_zero 
                                                     (abst_opposite x))) 
                                               (abst_plus x 
                                                  (abst_plus abst_zero 
                                                     (abst_opposite x))))))) =>
                                   zen.Rcut 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus x 
                                                 (abst_plus abst_zero 
                                                    (abst_opposite x))) 
                                              (abst_plus x 
                                                 (abst_plus abst_zero 
                                                    (abst_opposite x)))))) 
                                     (v_Vgh:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus x 
                                                     (abst_plus abst_zero 
                                                        (abst_opposite x))) 
                                                  (abst_plus x 
                                                     (abst_plus abst_zero 
                                                        (abst_opposite x))))))) =>
                                      zen.Rall abst_T 
                                        (v_Vge:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vhe:(zen.term abst_T) =>
                                            zen.forall abst_T 
                                              (v_Vie:(zen.term abst_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vge 
                                                          v_Vhe))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vhe 
                                                             v_Vie))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vge 
                                                             v_Vie))))))) 
                                        (abst_plus x 
                                           (abst_plus 
                                              (abst_plus y (abst_opposite y)) 
                                              (abst_opposite x))) 
                                        (v_Vhh:
                                         (zen.proof 
                                            (zen.forall abst_T 
                                               (v_Vhe:(zen.term abst_T) =>
                                                zen.forall abst_T 
                                                  (v_Vie:(zen.term abst_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus x 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (
                                                                    abst_opposite 
                                                                    x))) 
                                                              v_Vhe))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Vhe v_Vie))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                 v_Vie)))))))) =>
                                         zen.Rall abst_T 
                                           (v_Vhe:(zen.term abst_T) =>
                                            zen.forall abst_T 
                                              (v_Vie:(zen.term abst_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_plus 
                                                                (abst_plus y 
                                                                   (abst_opposite 
                                                                    y)) 
                                                                (abst_opposite 
                                                                   x))) v_Vhe))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vhe 
                                                             v_Vie))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             v_Vie)))))) 
                                           (abst_plus x 
                                              (abst_plus abst_zero 
                                                 (abst_opposite x))) 
                                           (v_Vih:
                                            (zen.proof 
                                               (zen.forall abst_T 
                                                  (v_Vie:(zen.term abst_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus x 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (
                                                                    abst_opposite 
                                                                    x))) 
                                                              (abst_plus x 
                                                                 (abst_plus 
                                                                    abst_zero 
                                                                    (
                                                                    abst_opposite 
                                                                    x)))))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                 v_Vie))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                 v_Vie))))))) =>
                                            zen.Rall abst_T 
                                              (v_Vie:(zen.term abst_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_plus 
                                                                (abst_plus y 
                                                                   (abst_opposite 
                                                                    y)) 
                                                                (abst_opposite 
                                                                   x))) 
                                                          (abst_plus x 
                                                             (abst_plus 
                                                                abst_zero 
                                                                (abst_opposite 
                                                                   x)))))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             v_Vie))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             v_Vie))))) 
                                              (abst_plus x 
                                                 (abst_plus abst_zero 
                                                    (abst_opposite x))) 
                                              (v_Vjh:
                                               (zen.proof 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus x 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (
                                                                    abst_opposite 
                                                                    x))) 
                                                              (abst_plus x 
                                                                 (abst_plus 
                                                                    abst_zero 
                                                                    (
                                                                    abst_opposite 
                                                                    x)))))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))))))))) =>
                                               zen.Rimply 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_plus 
                                                                (abst_plus y 
                                                                   (abst_opposite 
                                                                    y)) 
                                                                (abst_opposite 
                                                                   x))) 
                                                          (abst_plus x 
                                                             (abst_plus 
                                                                abst_zero 
                                                                (abst_opposite 
                                                                   x)))))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   (abst_opposite 
                                                                    x)))))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   (abst_opposite 
                                                                    x))))))) 
                                                 (v_Vch:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   (abst_opposite 
                                                                    x)))))) 
                                                    __BA_1_5_LEMMA v_Vch) 
                                                 (v_Vkh:
                                                  (zen.proof 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                  zen.Rimply 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   (abst_opposite 
                                                                    x)))))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   (abst_opposite 
                                                                    x)))))) 
                                                    (v_Vlh:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus x 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                (abst_plus x 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                       v_Vgh v_Vlh) 
                                                    (__BA_1_5_LEMMA:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                     zen.Rsubst 
                                                       basics.bool__t 
                                                       (v_Vmg:
                                                        (zen.term 
                                                           basics.bool__t) =>
                                                        zen.triangle 
                                                          (focal.is_true 
                                                             v_Vmg)) 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_plus 
                                                                (abst_plus y 
                                                                   (abst_opposite 
                                                                    y)) 
                                                                (abst_opposite 
                                                                   x))) 
                                                          (abst_plus x 
                                                             (abst_plus 
                                                                abst_zero 
                                                                (abst_opposite 
                                                                   x)))) 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_plus x y) 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   y) 
                                                                (abst_opposite 
                                                                   x))) 
                                                          (abst_plus x 
                                                             (abst_plus 
                                                                abst_zero 
                                                                (abst_opposite 
                                                                   x)))) 
                                                       (v_Vqg:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                        zen.Rsubst abst_T 
                                                          (v_Vrg:
                                                           (zen.term abst_T) =>
                                                           zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_equal 
                                                                    v_Vrg 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                          (abst_plus x 
                                                             (abst_plus 
                                                                (abst_plus y 
                                                                   (abst_opposite 
                                                                    y)) 
                                                                (abst_opposite 
                                                                   x))) 
                                                          (abst_plus 
                                                             (abst_plus x y) 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   y) 
                                                                (abst_opposite 
                                                                   x))) 
                                                          (v_Vsg:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                           zen.Rnotand 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                             (v_Vtg:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                              zen.Rnotnot 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                                (v_Vug:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) =>
                                                                 zen.Reqsym 
                                                                   abst_T 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                   v_Vug 
                                                                   v_Vsg) 
                                                                v_Vtg) 
                                                             (v_Vyg:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))))))))) =>
                                                              zen.Rnotnot 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                (v_Vcg:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                                 zen.Rall 
                                                                   abst_T 
                                                                   (v_Vge:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vhe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vie:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vge 
                                                                    v_Vhe))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vhe 
                                                                    v_Vie))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vge 
                                                                    v_Vie))))))) 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                   (v_Vxf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vhe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vie:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vhe))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vhe 
                                                                    v_Vie))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie)))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vhe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vie:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vhe))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vhe 
                                                                    v_Vie))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie)))))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (v_Vzg:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vie:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vie:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie))))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (v_Vah:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                                    (v_Vgf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    v_Vcg 
                                                                    v_Vgf) 
                                                                    (v_Vbh:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    (v_Vch:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    y 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    __BA_1_5_LEMMA 
                                                                    v_Vch) 
                                                                    (v_Vdh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    v_Vdh 
                                                                    v_Vdf) 
                                                                    v_Vbh) 
                                                                    v_Vah) 
                                                                    v_Vzg) 
                                                                    v_Vxf) 
                                                                   abst_equal_transitive) 
                                                                v_Vyg) v_Vog) 
                                                          (v_Veh:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                           zen.Rsubst abst_T 
                                                             (v_Veg:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Veg) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             (v_Vfh:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                              zen.Rnoteq 
                                                                abst_T 
                                                                (abst_plus x 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                v_Vfh) 
                                                             (v_Veh:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                              zen.Rnoteq 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))) 
                                                                v_Veh) v_Veh) 
                                                          v_Vqg) 
                                                       (v_Vdh:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                          v_Vdh v_Vdf) 
                                                       __BA_1_5_LEMMA) v_Vkh) 
                                                 v_Vjh) v_Vih) v_Vhh) 
                                        abst_equal_transitive) 
                                     (v_Vlh:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus x 
                                                        (abst_plus abst_zero 
                                                           (abst_opposite x))) 
                                                     (abst_plus x 
                                                        (abst_plus abst_zero 
                                                           (abst_opposite x)))))))) =>
                                      zen.Rnoteq abst_T 
                                        (abst_plus x 
                                           (abst_plus abst_zero 
                                              (abst_opposite x))) v_Vfh)))) 
                            v_Vbf) 
                         (v_Vmh:
                          (zen.proof 
                             (zen.not 
                                (zen.and 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_plus (abst_plus x y) 
                                               (abst_plus (abst_opposite y) 
                                                  (abst_opposite x))) 
                                            (abst_plus x 
                                               (abst_plus abst_zero 
                                                  (abst_opposite x)))))) 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus (abst_plus x y) 
                                                  (abst_plus 
                                                     (abst_opposite y) 
                                                     (abst_opposite x))) 
                                               (abst_plus x 
                                                  (abst_plus abst_zero 
                                                     (abst_opposite x)))))))))) =>
                          zen.Rcut 
                            (zen.triangle 
                               (zen.equal abst_T 
                                  (abst_plus x (abst_opposite x)) abst_zero)) 
                            (v_Vnh:
                             (zen.proof 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_plus x (abst_opposite x)) 
                                      abst_zero))) =>
                             zen.Rsubst basics.bool__t 
                               (v_Vmg:(zen.term basics.bool__t) =>
                                zen.triangle (focal.is_true v_Vmg)) 
                               (abst_equal 
                                  (abst_plus x 
                                     (abst_plus abst_zero (abst_opposite x))) 
                                  (abst_plus x (abst_opposite x))) 
                               (abst_equal 
                                  (abst_plus (abst_plus x y) 
                                     (abst_plus (abst_opposite y) 
                                        (abst_opposite x))) abst_zero) 
                               (v_Voh:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (abst_equal 
                                               (abst_plus x 
                                                  (abst_plus abst_zero 
                                                     (abst_opposite x))) 
                                               (abst_plus x (abst_opposite x))) 
                                            (abst_equal 
                                               (abst_plus (abst_plus x y) 
                                                  (abst_plus 
                                                     (abst_opposite y) 
                                                     (abst_opposite x))) 
                                               abst_zero))))) =>
                                zen.Rsubst abst_T 
                                  (v_Vph:(zen.term abst_T) =>
                                   zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (abst_equal v_Vph 
                                              (abst_plus x (abst_opposite x))) 
                                           (abst_equal 
                                              (abst_plus (abst_plus x y) 
                                                 (abst_plus 
                                                    (abst_opposite y) 
                                                    (abst_opposite x))) 
                                              abst_zero)))) 
                                  (abst_plus x 
                                     (abst_plus abst_zero (abst_opposite x))) 
                                  (abst_plus (abst_plus x y) 
                                     (abst_plus (abst_opposite y) 
                                        (abst_opposite x))) 
                                  (v_Vqh:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus x 
                                                  (abst_plus abst_zero 
                                                     (abst_opposite x))) 
                                               (abst_plus (abst_plus x y) 
                                                  (abst_plus 
                                                     (abst_opposite y) 
                                                     (abst_opposite x))))))) =>
                                   zen.Rnotand 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus (abst_plus x y) 
                                                 (abst_plus 
                                                    (abst_opposite y) 
                                                    (abst_opposite x))) 
                                              (abst_plus x 
                                                 (abst_plus abst_zero 
                                                    (abst_opposite x)))))) 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus (abst_plus x y) 
                                                    (abst_plus 
                                                       (abst_opposite y) 
                                                       (abst_opposite x))) 
                                                 (abst_plus x 
                                                    (abst_plus abst_zero 
                                                       (abst_opposite x))))))) 
                                     (v_Vrh:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus 
                                                        (abst_plus x y) 
                                                        (abst_plus 
                                                           (abst_opposite y) 
                                                           (abst_opposite x))) 
                                                     (abst_plus x 
                                                        (abst_plus abst_zero 
                                                           (abst_opposite x)))))))) =>
                                      zen.Rnotnot 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus (abst_plus x y) 
                                                 (abst_plus 
                                                    (abst_opposite y) 
                                                    (abst_opposite x))) 
                                              (abst_plus x 
                                                 (abst_plus abst_zero 
                                                    (abst_opposite x))))) 
                                        (v_Vsh:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus (abst_plus x y) 
                                                     (abst_plus 
                                                        (abst_opposite y) 
                                                        (abst_opposite x))) 
                                                  (abst_plus x 
                                                     (abst_plus abst_zero 
                                                        (abst_opposite x)))))) =>
                                         zen.Rcut 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus (abst_plus x y) 
                                                    (abst_plus 
                                                       (abst_opposite y) 
                                                       (abst_opposite x))) 
                                                 (abst_plus (abst_plus x y) 
                                                    (abst_plus 
                                                       (abst_opposite y) 
                                                       (abst_opposite x))))) 
                                           (v_Vrf:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus 
                                                        (abst_plus x y) 
                                                        (abst_plus 
                                                           (abst_opposite y) 
                                                           (abst_opposite x))) 
                                                     (abst_plus 
                                                        (abst_plus x y) 
                                                        (abst_plus 
                                                           (abst_opposite y) 
                                                           (abst_opposite x)))))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vvg:(zen.term abst_T) =>
                                               zen.triangle 
                                                 (zen.equal abst_T v_Vvg 
                                                    (abst_plus 
                                                       (abst_plus x y) 
                                                       (abst_plus 
                                                          (abst_opposite y) 
                                                          (abst_opposite x))))) 
                                              (abst_plus (abst_plus x y) 
                                                 (abst_plus 
                                                    (abst_opposite y) 
                                                    (abst_opposite x))) 
                                              (abst_plus x 
                                                 (abst_plus abst_zero 
                                                    (abst_opposite x))) 
                                              (v_Vcf:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    y) 
                                                                 (abst_opposite 
                                                                    x))) 
                                                           (abst_plus x 
                                                              (abst_plus 
                                                                 abst_zero 
                                                                 (abst_opposite 
                                                                    x))))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_plus 
                                                          (abst_plus x y) 
                                                          (abst_plus 
                                                             (abst_opposite y) 
                                                             (abst_opposite x))) 
                                                       (abst_plus x 
                                                          (abst_plus 
                                                             abst_zero 
                                                             (abst_opposite x))))) 
                                                 v_Vsh v_Vcf) 
                                              (v_Vth:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_plus x 
                                                           (abst_plus 
                                                              abst_zero 
                                                              (abst_opposite 
                                                                 x))) 
                                                        (abst_plus 
                                                           (abst_plus x y) 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 y) 
                                                              (abst_opposite 
                                                                 x)))))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Vuh:(zen.term abst_T) =>
                                                  zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_plus x 
                                                          (abst_plus 
                                                             abst_zero 
                                                             (abst_opposite x))) 
                                                       v_Vuh)) 
                                                 (abst_plus (abst_plus x y) 
                                                    (abst_plus 
                                                       (abst_opposite y) 
                                                       (abst_opposite x))) 
                                                 (abst_plus (abst_plus x y) 
                                                    (abst_plus 
                                                       (abst_opposite y) 
                                                       (abst_opposite x))) 
                                                 (v_Vvf:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    x y) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    y) 
                                                                    (
                                                                    abst_opposite 
                                                                    x))) 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    x y) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    y) 
                                                                    (
                                                                    abst_opposite 
                                                                    x))))))) =>
                                                  zen.Rnoteq abst_T 
                                                    (abst_plus 
                                                       (abst_plus x y) 
                                                       (abst_plus 
                                                          (abst_opposite y) 
                                                          (abst_opposite x))) 
                                                    v_Vvf) 
                                                 (v_Vth:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_plus x 
                                                              (abst_plus 
                                                                 abst_zero 
                                                                 (abst_opposite 
                                                                    x))) 
                                                           (abst_plus 
                                                              (abst_plus x y) 
                                                              (abst_plus 
                                                                 (abst_opposite 
                                                                    y) 
                                                                 (abst_opposite 
                                                                    x)))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus x 
                                                             (abst_plus 
                                                                abst_zero 
                                                                (abst_opposite 
                                                                   x))) 
                                                          (abst_plus 
                                                             (abst_plus x y) 
                                                             (abst_plus 
                                                                (abst_opposite 
                                                                   y) 
                                                                (abst_opposite 
                                                                   x))))) 
                                                    v_Vth v_Vqh) v_Vth) v_Vrf) 
                                           (v_Vvf:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_plus 
                                                           (abst_plus x y) 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 y) 
                                                              (abst_opposite 
                                                                 x))) 
                                                        (abst_plus 
                                                           (abst_plus x y) 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 y) 
                                                              (abst_opposite 
                                                                 x))))))) =>
                                            zen.Rnoteq abst_T 
                                              (abst_plus (abst_plus x y) 
                                                 (abst_plus 
                                                    (abst_opposite y) 
                                                    (abst_opposite x))) v_Vvf)) 
                                        v_Vrh) 
                                     (v_Vvh:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus x y) 
                                                           (abst_plus 
                                                              (abst_opposite 
                                                                 y) 
                                                              (abst_opposite 
                                                                 x))) 
                                                        (abst_plus x 
                                                           (abst_plus 
                                                              abst_zero 
                                                              (abst_opposite 
                                                                 x))))))))) =>
                                      zen.Rnotnot 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus (abst_plus x y) 
                                                    (abst_plus 
                                                       (abst_opposite y) 
                                                       (abst_opposite x))) 
                                                 (abst_plus x 
                                                    (abst_plus abst_zero 
                                                       (abst_opposite x)))))) 
                                        (v_Vdh:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_plus x y) 
                                                        (abst_plus 
                                                           (abst_opposite y) 
                                                           (abst_opposite x))) 
                                                     (abst_plus x 
                                                        (abst_plus abst_zero 
                                                           (abst_opposite x))))))) =>
                                         zen.Rall abst_T 
                                           (v_Vge:(zen.term abst_T) =>
                                            zen.forall abst_T 
                                              (v_Vhe:(zen.term abst_T) =>
                                               zen.forall abst_T 
                                                 (v_Vie:(zen.term abst_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vge 
                                                             v_Vhe))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                v_Vhe v_Vie))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                v_Vge v_Vie))))))) 
                                           (abst_plus (abst_plus x y) 
                                              (abst_plus (abst_opposite y) 
                                                 (abst_opposite x))) 
                                           (v_Vxf:
                                            (zen.proof 
                                               (zen.forall abst_T 
                                                  (v_Vhe:(zen.term abst_T) =>
                                                   zen.forall abst_T 
                                                     (v_Vie:
                                                      (zen.term abst_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    x y) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                 v_Vhe))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    v_Vhe 
                                                                    v_Vie))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie)))))))) =>
                                            zen.Rall abst_T 
                                              (v_Vhe:(zen.term abst_T) =>
                                               zen.forall abst_T 
                                                 (v_Vie:(zen.term abst_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   y) 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    y) 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             v_Vhe))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                v_Vhe v_Vie))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    x y) 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                v_Vie)))))) 
                                              (abst_plus x 
                                                 (abst_plus abst_zero 
                                                    (abst_opposite x))) 
                                              (v_Vwh:
                                               (zen.proof 
                                                  (zen.forall abst_T 
                                                     (v_Vie:
                                                      (zen.term abst_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    x y) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie))))))) =>
                                               zen.Rall abst_T 
                                                 (v_Vie:(zen.term abst_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   y) 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    y) 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   (abst_opposite 
                                                                    x)))))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus x 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                v_Vie))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    x y) 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                v_Vie))))) 
                                                 (abst_plus x 
                                                    (abst_opposite x)) 
                                                 (v_Vxh:
                                                  (zen.proof 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    x y) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                  zen.Rimply 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   y) 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    y) 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   (abst_opposite 
                                                                    x)))))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus x 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                (abst_plus x 
                                                                   (abst_opposite 
                                                                    x))))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    x y) 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                (abst_plus x 
                                                                   (abst_opposite 
                                                                    x)))))) 
                                                    (v_Vdf:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    x y) 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                (abst_plus x 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                       v_Vdh v_Vdf) 
                                                    (v_Vyh:
                                                     (zen.proof 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                     zen.Rimply 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus x 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                (abst_plus x 
                                                                   (abst_opposite 
                                                                    x))))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    x y) 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                (abst_plus x 
                                                                   (abst_opposite 
                                                                    x))))) 
                                                       (v_Vzh:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                          __BA_1_6_LEMMA 
                                                          v_Vzh) 
                                                       (v_Vai:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)))))) =>
                                                        zen.Rsubst 
                                                          basics.bool__t 
                                                          (v_Vmg:
                                                           (zen.term 
                                                              basics.bool__t) =>
                                                           zen.triangle 
                                                             (focal.is_true 
                                                                v_Vmg)) 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   y) 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    y) 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             (abst_plus x 
                                                                (abst_opposite 
                                                                   x))) 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   y) 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    y) 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             abst_zero) 
                                                          (v_Vbi:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero))))) =>
                                                           zen.Rsubst abst_T 
                                                             (v_Vph:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vph 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero)))) 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   y) 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    y) 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   y) 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    y) 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             (v_Vvf:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                              zen.Rnoteq 
                                                                abst_T 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    x y) 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                v_Vvf) 
                                                             (v_Vbi:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero))))) =>
                                                              zen.Rsubst 
                                                                abst_T 
                                                                (v_Veg:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Veg) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero)))) 
                                                                (abst_plus x 
                                                                   (abst_opposite 
                                                                    x)) 
                                                                abst_zero 
                                                                (v_Vci:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero)))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero)) 
                                                                   v_Vnh 
                                                                   v_Vci) 
                                                                (v_Vdi:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero))))) =>
                                                                 zen.Rnoteq 
                                                                   basics.bool__t 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero) 
                                                                   v_Vdi) 
                                                                v_Vbi) v_Vbi) 
                                                          (v_Vse:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero)))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero))) 
                                                             v_Vse v_Vwe) 
                                                          v_Vai) v_Vyh) v_Vxh) 
                                                 v_Vwh) v_Vxf) 
                                           abst_equal_transitive) v_Vvh) 
                                     v_Vmh) 
                                  (v_Vbi:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (abst_equal 
                                                  (abst_plus (abst_plus x y) 
                                                     (abst_plus 
                                                        (abst_opposite y) 
                                                        (abst_opposite x))) 
                                                  (abst_plus x 
                                                     (abst_opposite x))) 
                                               (abst_equal 
                                                  (abst_plus (abst_plus x y) 
                                                     (abst_plus 
                                                        (abst_opposite y) 
                                                        (abst_opposite x))) 
                                                  abst_zero))))) =>
                                   zen.Rsubst abst_T 
                                     (v_Vei:(zen.term abst_T) =>
                                      zen.not 
                                        (zen.triangle 
                                           (zen.equal basics.bool__t 
                                              (abst_equal 
                                                 (abst_plus (abst_plus x y) 
                                                    (abst_plus 
                                                       (abst_opposite y) 
                                                       (abst_opposite x))) 
                                                 v_Vei) 
                                              (abst_equal 
                                                 (abst_plus (abst_plus x y) 
                                                    (abst_plus 
                                                       (abst_opposite y) 
                                                       (abst_opposite x))) 
                                                 abst_zero)))) 
                                     (abst_plus x (abst_opposite x)) 
                                     abst_zero 
                                     (v_Vci:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus x 
                                                     (abst_opposite x)) 
                                                  abst_zero)))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus x (abst_opposite x)) 
                                              abst_zero)) v_Vnh v_Vci) 
                                     (v_Vdi:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_plus x y) 
                                                        (abst_plus 
                                                           (abst_opposite y) 
                                                           (abst_opposite x))) 
                                                     abst_zero) 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_plus x y) 
                                                        (abst_plus 
                                                           (abst_opposite y) 
                                                           (abst_opposite x))) 
                                                     abst_zero))))) =>
                                      zen.Rnoteq basics.bool__t 
                                        (abst_equal 
                                           (abst_plus (abst_plus x y) 
                                              (abst_plus (abst_opposite y) 
                                                 (abst_opposite x))) 
                                           abst_zero) v_Vdi) v_Vbi) v_Voh) 
                               (v_Vse:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus (abst_plus x y) 
                                               (abst_plus (abst_opposite y) 
                                                  (abst_opposite x))) 
                                            abst_zero)))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus (abst_plus x y) 
                                              (abst_plus (abst_opposite y) 
                                                 (abst_opposite x))) 
                                           abst_zero))) v_Vse v_Vwe) 
                               __BA_1_6_LEMMA) 
                            (v_Vci:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_plus x (abst_opposite x)) 
                                         abst_zero)))) =>
                             zen.Rcut 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus x (abst_opposite x)) 
                                        abst_zero))) 
                               (v_Vfi:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus x (abst_opposite x)) 
                                            abst_zero)))) =>
                                zen.Rall abst_T 
                                  (v_Vge:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vhe:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vie:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vge v_Vhe))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vhe v_Vie))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vge v_Vie))))))) 
                                  (abst_plus x 
                                     (abst_plus abst_zero (abst_opposite x))) 
                                  (v_Vgi:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vhe:(zen.term abst_T) =>
                                          zen.forall abst_T 
                                            (v_Vie:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus x 
                                                           (abst_plus 
                                                              abst_zero 
                                                              (abst_opposite 
                                                                 x))) v_Vhe))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vhe 
                                                           v_Vie))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus x 
                                                              (abst_plus 
                                                                 abst_zero 
                                                                 (abst_opposite 
                                                                    x))) 
                                                           v_Vie)))))))) =>
                                   zen.Rall abst_T 
                                     (v_Vhe:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vie:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus x 
                                                       (abst_plus abst_zero 
                                                          (abst_opposite x))) 
                                                    v_Vhe))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vhe v_Vie))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_plus 
                                                             abst_zero 
                                                             (abst_opposite x))) 
                                                       v_Vie)))))) 
                                     (abst_plus x (abst_opposite x)) 
                                     (v_Vhi:
                                      (zen.proof 
                                         (zen.forall abst_T 
                                            (v_Vie:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus x 
                                                           (abst_plus 
                                                              abst_zero 
                                                              (abst_opposite 
                                                                 x))) 
                                                        (abst_plus x 
                                                           (abst_opposite x))))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus x 
                                                              (abst_opposite 
                                                                 x)) v_Vie))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus x 
                                                              (abst_plus 
                                                                 abst_zero 
                                                                 (abst_opposite 
                                                                    x))) 
                                                           v_Vie))))))) =>
                                      zen.Rall abst_T 
                                        (v_Vie:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus x 
                                                       (abst_plus abst_zero 
                                                          (abst_opposite x))) 
                                                    (abst_plus x 
                                                       (abst_opposite x))))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_opposite x)) 
                                                       v_Vie))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_plus 
                                                             abst_zero 
                                                             (abst_opposite x))) 
                                                       v_Vie))))) abst_zero 
                                        (v_Vii:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus x 
                                                           (abst_plus 
                                                              abst_zero 
                                                              (abst_opposite 
                                                                 x))) 
                                                        (abst_plus x 
                                                           (abst_opposite x))))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus x 
                                                              (abst_opposite 
                                                                 x)) 
                                                           abst_zero))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus x 
                                                              (abst_plus 
                                                                 abst_zero 
                                                                 (abst_opposite 
                                                                    x))) 
                                                           abst_zero)))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus x 
                                                       (abst_plus abst_zero 
                                                          (abst_opposite x))) 
                                                    (abst_plus x 
                                                       (abst_opposite x))))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_opposite x)) 
                                                       abst_zero))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_plus 
                                                             abst_zero 
                                                             (abst_opposite x))) 
                                                       abst_zero)))) 
                                           (v_Vzh:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus x 
                                                              (abst_plus 
                                                                 abst_zero 
                                                                 (abst_opposite 
                                                                    x))) 
                                                           (abst_plus x 
                                                              (abst_opposite 
                                                                 x))))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_plus 
                                                             abst_zero 
                                                             (abst_opposite x))) 
                                                       (abst_plus x 
                                                          (abst_opposite x))))) 
                                              __BA_1_6_LEMMA v_Vzh) 
                                           (v_Vji:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus x 
                                                              (abst_opposite 
                                                                 x)) 
                                                           abst_zero))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus x 
                                                              (abst_plus 
                                                                 abst_zero 
                                                                 (abst_opposite 
                                                                    x))) 
                                                           abst_zero))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_opposite x)) 
                                                       abst_zero))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_plus 
                                                             abst_zero 
                                                             (abst_opposite x))) 
                                                       abst_zero))) 
                                              (v_Vki:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus x 
                                                                 (abst_opposite 
                                                                    x)) 
                                                              abst_zero))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_opposite x)) 
                                                          abst_zero))) v_Vfi 
                                                 v_Vki) 
                                              (v_Vli:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus x 
                                                              (abst_plus 
                                                                 abst_zero 
                                                                 (abst_opposite 
                                                                    x))) 
                                                           abst_zero)))) =>
                                               zen.Rsubst basics.bool__t 
                                                 (v_Vmi:
                                                  (zen.term basics.bool__t) =>
                                                  zen.triangle 
                                                    (focal.is_true v_Vmi)) 
                                                 (abst_equal 
                                                    (abst_plus x 
                                                       (abst_plus abst_zero 
                                                          (abst_opposite x))) 
                                                    abst_zero) 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_plus x y) 
                                                       (abst_plus 
                                                          (abst_opposite y) 
                                                          (abst_opposite x))) 
                                                    abst_zero) 
                                                 (v_Vni:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                 abst_zero) 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    x y) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                 abst_zero))))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Voi:
                                                     (zen.term abst_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                v_Voi 
                                                                abst_zero) 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    x y) 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                abst_zero)))) 
                                                    (abst_plus x 
                                                       (abst_plus abst_zero 
                                                          (abst_opposite x))) 
                                                    (abst_plus 
                                                       (abst_plus x y) 
                                                       (abst_plus 
                                                          (abst_opposite y) 
                                                          (abst_opposite x))) 
                                                    (v_Vqh:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_plus 
                                                                    x 
                                                                    (
                                                                    abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    x y) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                     zen.Rnotand 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    x y) 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                (abst_plus x 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))))))) 
                                                       (v_Vrh:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                        zen.Rnotnot 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T 
                                                                (abst_plus 
                                                                   (abst_plus 
                                                                    x y) 
                                                                   (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                (abst_plus x 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                          (v_Vsh:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (
                                                                    abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) =>
                                                           zen.Reqsym abst_T 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   y) 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    y) 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             (abst_plus x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             v_Vsh v_Vqh) 
                                                          v_Vrh) 
                                                       (v_Vvh:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))))))))) =>
                                                        zen.Rnotnot 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                          (v_Vdh:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                           zen.Rall abst_T 
                                                             (v_Vge:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.forall 
                                                                abst_T 
                                                                (v_Vhe:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.forall 
                                                                   abst_T 
                                                                   (v_Vie:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vge 
                                                                    v_Vhe))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vhe 
                                                                    v_Vie))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vge 
                                                                    v_Vie))))))) 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   y) 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    y) 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             (v_Vxf:
                                                              (zen.proof 
                                                                 (zen.forall 
                                                                    abst_T 
                                                                    (
                                                                    v_Vhe:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vie:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vhe))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vhe 
                                                                    v_Vie))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie)))))))) =>
                                                              zen.Rall 
                                                                abst_T 
                                                                (v_Vhe:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.forall 
                                                                   abst_T 
                                                                   (v_Vie:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vhe))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vhe 
                                                                    v_Vie))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie)))))) 
                                                                (abst_plus x 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                (v_Vwh:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vie:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie))))))) =>
                                                                 zen.Rall 
                                                                   abst_T 
                                                                   (v_Vie:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vie))))) 
                                                                   abst_zero 
                                                                   (v_Vpi:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero)))) 
                                                                    (v_Vdf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    v_Vdh 
                                                                    v_Vdf) 
                                                                    (v_Vqi:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero))) 
                                                                    (v_Vri:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero))) 
                                                                    v_Vli 
                                                                    v_Vri) 
                                                                    (v_Vse:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero))) 
                                                                    v_Vse 
                                                                    v_Vwe) 
                                                                    v_Vqi) 
                                                                    v_Vpi) 
                                                                   v_Vwh) 
                                                                v_Vxf) 
                                                             abst_equal_transitive) 
                                                          v_Vvh) v_Vmh) 
                                                    (v_Vdi:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero))))) =>
                                                     zen.Rsubst abst_T 
                                                       (v_Vei:
                                                        (zen.term abst_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                   v_Vei) 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                   abst_zero)))) 
                                                       abst_zero abst_zero 
                                                       (v_Vaf:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    abst_zero 
                                                                    abst_zero)))) =>
                                                        zen.Rnoteq abst_T 
                                                          abst_zero v_Vaf) 
                                                       (v_Vdi:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero) 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    x y) 
                                                                    (abst_plus 
                                                                    (abst_opposite 
                                                                    y) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero))))) =>
                                                        zen.Rnoteq 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   y) 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    y) 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             abst_zero) v_Vdi) 
                                                       v_Vdi) v_Vni) 
                                                 (v_Vse:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    x y) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_opposite 
                                                                    y) 
                                                                    (
                                                                    abst_opposite 
                                                                    x))) 
                                                              abst_zero)))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_plus x 
                                                                   y) 
                                                                (abst_plus 
                                                                   (abst_opposite 
                                                                    y) 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             abst_zero))) 
                                                    v_Vse v_Vwe) v_Vli) v_Vji) 
                                           v_Vii) v_Vhi) v_Vgi) 
                                  abst_equal_transitive) 
                               (v_Vki:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus x (abst_opposite x)) 
                                               abst_zero))))) =>
                                zen.Rall abst_T 
                                  (v_Vge:(zen.term abst_T) =>
                                   zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus v_Vge 
                                              (abst_opposite v_Vge)) 
                                           abst_zero))) x 
                                  (v_Vfi:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus x (abst_opposite x)) 
                                               abst_zero)))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus x (abst_opposite x)) 
                                              abst_zero))) v_Vfi v_Vki) 
                                  abst_opposite_is_opposite)))))))) 
            (zen.nnpp 
               (zen.triangle 
                  (focal.is_true 
                     (abst_equal 
                        (abst_plus x (abst_plus abst_zero (abst_opposite x))) 
                        (abst_plus x (abst_opposite x))))) 
               (v_Vzb:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_plus x 
                                  (abst_plus abst_zero (abst_opposite x))) 
                               (abst_plus x (abst_opposite x))))))) =>
                zen.Rall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Vac v_Vbc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_plus v_Vcc v_Vac) 
                                    (abst_plus v_Vcc v_Vbc))))))) 
                  (abst_plus abst_zero (abst_opposite x)) 
                  (v_Vdc:
                   (zen.proof 
                      (zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vcc:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus abst_zero 
                                           (abst_opposite x)) v_Vbc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus v_Vcc 
                                           (abst_plus abst_zero 
                                              (abst_opposite x))) 
                                        (abst_plus v_Vcc v_Vbc)))))))) =>
                   zen.Rall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_plus abst_zero (abst_opposite x)) 
                                    v_Vbc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_plus v_Vcc 
                                       (abst_plus abst_zero (abst_opposite x))) 
                                    (abst_plus v_Vcc v_Vbc)))))) 
                     (abst_opposite x) 
                     (v_Vec:
                      (zen.proof 
                         (zen.forall abst_T 
                            (v_Vcc:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus abst_zero 
                                           (abst_opposite x)) 
                                        (abst_opposite x)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus v_Vcc 
                                           (abst_plus abst_zero 
                                              (abst_opposite x))) 
                                        (abst_plus v_Vcc (abst_opposite x)))))))) =>
                      zen.Rall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_plus abst_zero (abst_opposite x)) 
                                    (abst_opposite x)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_plus v_Vcc 
                                       (abst_plus abst_zero (abst_opposite x))) 
                                    (abst_plus v_Vcc (abst_opposite x)))))) 
                        x 
                        (v_Vfc:
                         (zen.proof 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus abst_zero 
                                           (abst_opposite x)) 
                                        (abst_opposite x)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus x 
                                           (abst_plus abst_zero 
                                              (abst_opposite x))) 
                                        (abst_plus x (abst_opposite x))))))) =>
                         zen.Rimply 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_plus abst_zero (abst_opposite x)) 
                                    (abst_opposite x)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_plus x 
                                       (abst_plus abst_zero (abst_opposite x))) 
                                    (abst_plus x (abst_opposite x))))) 
                           (v_Vgc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus abst_zero 
                                              (abst_opposite x)) 
                                           (abst_opposite x)))))) =>
                            zen.Rall abst_T 
                              (v_Vac:(zen.term abst_T) =>
                               zen.and 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus v_Vac abst_zero) v_Vac))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus abst_zero v_Vac) v_Vac)))) 
                              (abst_opposite x) 
                              (v_Vhc:
                               (zen.proof 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus (abst_opposite x) 
                                                 abst_zero) (abst_opposite x)))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus abst_zero 
                                                 (abst_opposite x)) 
                                              (abst_opposite x)))))) =>
                               zen.Rand 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus (abst_opposite x) 
                                             abst_zero) (abst_opposite x)))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus abst_zero 
                                             (abst_opposite x)) 
                                          (abst_opposite x)))) 
                                 (v_Vic:
                                  (zen.proof 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus (abst_opposite x) 
                                                 abst_zero) (abst_opposite x))))) =>
                                  v_Vjc:
                                  (zen.proof 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus abst_zero 
                                                 (abst_opposite x)) 
                                              (abst_opposite x))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus abst_zero 
                                                (abst_opposite x)) 
                                             (abst_opposite x)))) v_Vjc v_Vgc) 
                                 v_Vhc) abst_zero_is_neutral) 
                           (v_Vkc:
                            (zen.proof 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus x 
                                           (abst_plus abst_zero 
                                              (abst_opposite x))) 
                                        (abst_plus x (abst_opposite x)))))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus x 
                                          (abst_plus abst_zero 
                                             (abst_opposite x))) 
                                       (abst_plus x (abst_opposite x))))) 
                              v_Vkc v_Vzb) v_Vfc) v_Vec) v_Vdc) 
                  abst_plus_right_substitution_rule))) 
           (zen.nnpp 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal 
                       (abst_plus x 
                          (abst_plus (abst_plus y (abst_opposite y)) 
                             (abst_opposite x))) 
                       (abst_plus x (abst_plus abst_zero (abst_opposite x)))))) 
              (v_Vzb:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal 
                              (abst_plus x 
                                 (abst_plus (abst_plus y (abst_opposite y)) 
                                    (abst_opposite x))) 
                              (abst_plus x 
                                 (abst_plus abst_zero (abst_opposite x)))))))) =>
               zen.Rall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vac v_Vbc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus v_Vcc v_Vac) 
                                   (abst_plus v_Vcc v_Vbc))))))) 
                 (abst_plus (abst_plus y (abst_opposite y)) (abst_opposite x)) 
                 (v_Vdc:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vbc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vcc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus 
                                          (abst_plus y (abst_opposite y)) 
                                          (abst_opposite x)) v_Vbc))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus v_Vcc 
                                          (abst_plus 
                                             (abst_plus y (abst_opposite y)) 
                                             (abst_opposite x))) 
                                       (abst_plus v_Vcc v_Vbc)))))))) =>
                  zen.Rall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus 
                                      (abst_plus y (abst_opposite y)) 
                                      (abst_opposite x)) v_Vbc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus v_Vcc 
                                      (abst_plus 
                                         (abst_plus y (abst_opposite y)) 
                                         (abst_opposite x))) 
                                   (abst_plus v_Vcc v_Vbc)))))) 
                    (abst_plus abst_zero (abst_opposite x)) 
                    (v_Vec:
                     (zen.proof 
                        (zen.forall abst_T 
                           (v_Vcc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus 
                                          (abst_plus y (abst_opposite y)) 
                                          (abst_opposite x)) 
                                       (abst_plus abst_zero (abst_opposite x))))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus v_Vcc 
                                          (abst_plus 
                                             (abst_plus y (abst_opposite y)) 
                                             (abst_opposite x))) 
                                       (abst_plus v_Vcc 
                                          (abst_plus abst_zero 
                                             (abst_opposite x))))))))) =>
                     zen.Rall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus 
                                      (abst_plus y (abst_opposite y)) 
                                      (abst_opposite x)) 
                                   (abst_plus abst_zero (abst_opposite x))))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus v_Vcc 
                                      (abst_plus 
                                         (abst_plus y (abst_opposite y)) 
                                         (abst_opposite x))) 
                                   (abst_plus v_Vcc 
                                      (abst_plus abst_zero (abst_opposite x))))))) 
                       x 
                       (v_Vfc:
                        (zen.proof 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus 
                                          (abst_plus y (abst_opposite y)) 
                                          (abst_opposite x)) 
                                       (abst_plus abst_zero (abst_opposite x))))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus x 
                                          (abst_plus 
                                             (abst_plus y (abst_opposite y)) 
                                             (abst_opposite x))) 
                                       (abst_plus x 
                                          (abst_plus abst_zero 
                                             (abst_opposite x)))))))) =>
                        zen.Rimply 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus 
                                      (abst_plus y (abst_opposite y)) 
                                      (abst_opposite x)) 
                                   (abst_plus abst_zero (abst_opposite x))))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus x 
                                      (abst_plus 
                                         (abst_plus y (abst_opposite y)) 
                                         (abst_opposite x))) 
                                   (abst_plus x 
                                      (abst_plus abst_zero (abst_opposite x)))))) 
                          (v_Vgc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus 
                                             (abst_plus y (abst_opposite y)) 
                                             (abst_opposite x)) 
                                          (abst_plus abst_zero 
                                             (abst_opposite x))))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus 
                                         (abst_plus y (abst_opposite y)) 
                                         (abst_opposite x)) 
                                      (abst_plus abst_zero (abst_opposite x))))) 
                             __BA_1_4_LEMMA v_Vgc) 
                          (v_Vhc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus x 
                                          (abst_plus 
                                             (abst_plus y (abst_opposite y)) 
                                             (abst_opposite x))) 
                                       (abst_plus x 
                                          (abst_plus abst_zero 
                                             (abst_opposite x))))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus x 
                                         (abst_plus 
                                            (abst_plus y (abst_opposite y)) 
                                            (abst_opposite x))) 
                                      (abst_plus x 
                                         (abst_plus abst_zero 
                                            (abst_opposite x)))))) v_Vhc 
                             v_Vzb) v_Vfc) v_Vec) v_Vdc) 
                 abst_plus_right_substitution_rule))) 
          (zen.nnpp 
             (zen.triangle 
                (focal.is_true 
                   (abst_equal 
                      (abst_plus (abst_plus y (abst_opposite y)) 
                         (abst_opposite x)) 
                      (abst_plus abst_zero (abst_opposite x))))) 
             (v_Vzb:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal 
                             (abst_plus (abst_plus y (abst_opposite y)) 
                                (abst_opposite x)) 
                             (abst_plus abst_zero (abst_opposite x))))))) =>
              zen.Rall abst_T 
                (v_Vac:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vbc:(zen.term abst_T) =>
                    zen.forall abst_T 
                      (v_Vcc:(zen.term abst_T) =>
                       zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vac v_Vbc))) 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_plus v_Vac v_Vcc) 
                                  (abst_plus v_Vbc v_Vcc))))))) 
                (abst_plus y (abst_opposite y)) 
                (v_Vdc:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vbc:(zen.term abst_T) =>
                        zen.forall abst_T 
                          (v_Vcc:(zen.term abst_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus y (abst_opposite y)) v_Vbc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus 
                                         (abst_plus y (abst_opposite y)) 
                                         v_Vcc) (abst_plus v_Vbc v_Vcc)))))))) =>
                 zen.Rall abst_T 
                   (v_Vbc:(zen.term abst_T) =>
                    zen.forall abst_T 
                      (v_Vcc:(zen.term abst_T) =>
                       zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_plus y (abst_opposite y)) 
                                  v_Vbc))) 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_plus y (abst_opposite y)) 
                                     v_Vcc) (abst_plus v_Vbc v_Vcc)))))) 
                   abst_zero 
                   (v_Vec:
                    (zen.proof 
                       (zen.forall abst_T 
                          (v_Vcc:(zen.term abst_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus y (abst_opposite y)) 
                                      abst_zero))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus 
                                         (abst_plus y (abst_opposite y)) 
                                         v_Vcc) (abst_plus abst_zero v_Vcc))))))) =>
                    zen.Rall abst_T 
                      (v_Vcc:(zen.term abst_T) =>
                       zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_plus y (abst_opposite y)) 
                                  abst_zero))) 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_plus y (abst_opposite y)) 
                                     v_Vcc) (abst_plus abst_zero v_Vcc))))) 
                      (abst_opposite x) 
                      (v_Vfc:
                       (zen.proof 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus y (abst_opposite y)) 
                                      abst_zero))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus 
                                         (abst_plus y (abst_opposite y)) 
                                         (abst_opposite x)) 
                                      (abst_plus abst_zero (abst_opposite x))))))) =>
                       zen.Rimply 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_plus y (abst_opposite y)) 
                                  abst_zero))) 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_plus y (abst_opposite y)) 
                                     (abst_opposite x)) 
                                  (abst_plus abst_zero (abst_opposite x))))) 
                         (v_Vgc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus y (abst_opposite y)) 
                                         abst_zero))))) =>
                          zen.Rall abst_T 
                            (v_Vac:(zen.term abst_T) =>
                             zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus v_Vac (abst_opposite v_Vac)) 
                                     abst_zero))) y 
                            (v_Vhc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus y (abst_opposite y)) 
                                         abst_zero)))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus y (abst_opposite y)) 
                                        abst_zero))) v_Vhc v_Vgc) 
                            abst_opposite_is_opposite) 
                         (v_Vic:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus 
                                         (abst_plus y (abst_opposite y)) 
                                         (abst_opposite x)) 
                                      (abst_plus abst_zero (abst_opposite x)))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus 
                                        (abst_plus y (abst_opposite y)) 
                                        (abst_opposite x)) 
                                     (abst_plus abst_zero (abst_opposite x))))) 
                            v_Vic v_Vzb) v_Vfc) v_Vec) v_Vdc) 
                abst_plus_left_substitution_rule))) 
         (zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (abst_equal 
                     (abst_plus x 
                        (abst_plus y 
                           (abst_plus (abst_opposite y) (abst_opposite x)))) 
                     (abst_plus x 
                        (abst_plus (abst_plus y (abst_opposite y)) 
                           (abst_opposite x)))))) 
            (v_Vzb:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal 
                            (abst_plus x 
                               (abst_plus y 
                                  (abst_plus (abst_opposite y) 
                                     (abst_opposite x)))) 
                            (abst_plus x 
                               (abst_plus (abst_plus y (abst_opposite y)) 
                                  (abst_opposite x)))))))) =>
             zen.Rall abst_T 
               (v_Vac:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vbc:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vcc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Vac v_Vbc))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_plus v_Vcc v_Vac) 
                                 (abst_plus v_Vcc v_Vbc))))))) 
               (abst_plus y (abst_plus (abst_opposite y) (abst_opposite x))) 
               (v_Vdc:
                (zen.proof 
                   (zen.forall abst_T 
                      (v_Vbc:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vcc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus y 
                                        (abst_plus (abst_opposite y) 
                                           (abst_opposite x))) v_Vbc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus v_Vcc 
                                        (abst_plus y 
                                           (abst_plus (abst_opposite y) 
                                              (abst_opposite x)))) 
                                     (abst_plus v_Vcc v_Vbc)))))))) =>
                zen.Rall abst_T 
                  (v_Vbc:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vcc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus y 
                                    (abst_plus (abst_opposite y) 
                                       (abst_opposite x))) v_Vbc))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus v_Vcc 
                                    (abst_plus y 
                                       (abst_plus (abst_opposite y) 
                                          (abst_opposite x)))) 
                                 (abst_plus v_Vcc v_Vbc)))))) 
                  (abst_plus (abst_plus y (abst_opposite y)) 
                     (abst_opposite x)) 
                  (v_Vec:
                   (zen.proof 
                      (zen.forall abst_T 
                         (v_Vcc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus y 
                                        (abst_plus (abst_opposite y) 
                                           (abst_opposite x))) 
                                     (abst_plus 
                                        (abst_plus y (abst_opposite y)) 
                                        (abst_opposite x))))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus v_Vcc 
                                        (abst_plus y 
                                           (abst_plus (abst_opposite y) 
                                              (abst_opposite x)))) 
                                     (abst_plus v_Vcc 
                                        (abst_plus 
                                           (abst_plus y (abst_opposite y)) 
                                           (abst_opposite x))))))))) =>
                   zen.Rall abst_T 
                     (v_Vcc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus y 
                                    (abst_plus (abst_opposite y) 
                                       (abst_opposite x))) 
                                 (abst_plus (abst_plus y (abst_opposite y)) 
                                    (abst_opposite x))))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus v_Vcc 
                                    (abst_plus y 
                                       (abst_plus (abst_opposite y) 
                                          (abst_opposite x)))) 
                                 (abst_plus v_Vcc 
                                    (abst_plus 
                                       (abst_plus y (abst_opposite y)) 
                                       (abst_opposite x))))))) x 
                     (v_Vfc:
                      (zen.proof 
                         (zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus y 
                                        (abst_plus (abst_opposite y) 
                                           (abst_opposite x))) 
                                     (abst_plus 
                                        (abst_plus y (abst_opposite y)) 
                                        (abst_opposite x))))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus x 
                                        (abst_plus y 
                                           (abst_plus (abst_opposite y) 
                                              (abst_opposite x)))) 
                                     (abst_plus x 
                                        (abst_plus 
                                           (abst_plus y (abst_opposite y)) 
                                           (abst_opposite x)))))))) =>
                      zen.Rimply 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus y 
                                    (abst_plus (abst_opposite y) 
                                       (abst_opposite x))) 
                                 (abst_plus (abst_plus y (abst_opposite y)) 
                                    (abst_opposite x))))) 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus x 
                                    (abst_plus y 
                                       (abst_plus (abst_opposite y) 
                                          (abst_opposite x)))) 
                                 (abst_plus x 
                                    (abst_plus 
                                       (abst_plus y (abst_opposite y)) 
                                       (abst_opposite x)))))) 
                        (v_Vgc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus y 
                                           (abst_plus (abst_opposite y) 
                                              (abst_opposite x))) 
                                        (abst_plus 
                                           (abst_plus y (abst_opposite y)) 
                                           (abst_opposite x))))))) =>
                         zen.Rall abst_T 
                           (v_Vac:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vbc:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vcc:(zen.term abst_T) =>
                                  zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus v_Vac 
                                             (abst_plus v_Vbc v_Vcc)) 
                                          (abst_plus (abst_plus v_Vac v_Vbc) 
                                             v_Vcc)))))) y 
                           (v_Vhc:
                            (zen.proof 
                               (zen.forall abst_T 
                                  (v_Vbc:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vcc:(zen.term abst_T) =>
                                      zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus y 
                                                 (abst_plus v_Vbc v_Vcc)) 
                                              (abst_plus (abst_plus y v_Vbc) 
                                                 v_Vcc))))))) =>
                            zen.Rall abst_T 
                              (v_Vbc:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vcc:(zen.term abst_T) =>
                                  zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus y 
                                             (abst_plus v_Vbc v_Vcc)) 
                                          (abst_plus (abst_plus y v_Vbc) 
                                             v_Vcc))))) (abst_opposite y) 
                              (v_Vic:
                               (zen.proof 
                                  (zen.forall abst_T 
                                     (v_Vcc:(zen.term abst_T) =>
                                      zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus y 
                                                 (abst_plus 
                                                    (abst_opposite y) v_Vcc)) 
                                              (abst_plus 
                                                 (abst_plus y 
                                                    (abst_opposite y)) v_Vcc)))))) =>
                               zen.Rall abst_T 
                                 (v_Vcc:(zen.term abst_T) =>
                                  zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus y 
                                             (abst_plus (abst_opposite y) 
                                                v_Vcc)) 
                                          (abst_plus 
                                             (abst_plus y (abst_opposite y)) 
                                             v_Vcc)))) (abst_opposite x) 
                                 (v_Vjc:
                                  (zen.proof 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus y 
                                                 (abst_plus 
                                                    (abst_opposite y) 
                                                    (abst_opposite x))) 
                                              (abst_plus 
                                                 (abst_plus y 
                                                    (abst_opposite y)) 
                                                 (abst_opposite x)))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus y 
                                                (abst_plus (abst_opposite y) 
                                                   (abst_opposite x))) 
                                             (abst_plus 
                                                (abst_plus y 
                                                   (abst_opposite y)) 
                                                (abst_opposite x))))) v_Vjc 
                                    v_Vgc) v_Vic) v_Vhc) 
                           abst_plus_is_associative) 
                        (v_Vkc:
                         (zen.proof 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus x 
                                        (abst_plus y 
                                           (abst_plus (abst_opposite y) 
                                              (abst_opposite x)))) 
                                     (abst_plus x 
                                        (abst_plus 
                                           (abst_plus y (abst_opposite y)) 
                                           (abst_opposite x))))))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_plus x 
                                       (abst_plus y 
                                          (abst_plus (abst_opposite y) 
                                             (abst_opposite x)))) 
                                    (abst_plus x 
                                       (abst_plus 
                                          (abst_plus y (abst_opposite y)) 
                                          (abst_opposite x)))))) v_Vkc v_Vzb) 
                        v_Vfc) v_Vec) v_Vdc) 
               abst_plus_right_substitution_rule))) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true 
                 (abst_equal 
                    (abst_plus (abst_plus x y) 
                       (abst_plus (abst_opposite y) (abst_opposite x))) 
                    (abst_plus x 
                       (abst_plus y 
                          (abst_plus (abst_opposite y) (abst_opposite x))))))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal 
                           (abst_plus (abst_plus x y) 
                              (abst_plus (abst_opposite y) (abst_opposite x))) 
                           (abst_plus x 
                              (abst_plus y 
                                 (abst_plus (abst_opposite y) 
                                    (abst_opposite x))))))))) =>
            zen.Rall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (abst_equal 
                             (abst_plus v_Vac (abst_plus v_Vbc v_Vcc)) 
                             (abst_plus (abst_plus v_Vac v_Vbc) v_Vcc)))))) 
              x 
              (v_Vdc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus x (abst_plus v_Vbc v_Vcc)) 
                                 (abst_plus (abst_plus x v_Vbc) v_Vcc))))))) =>
               zen.Rall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_plus x (abst_plus v_Vbc v_Vcc)) 
                             (abst_plus (abst_plus x v_Vbc) v_Vcc))))) y 
                 (v_Vec:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_plus x (abst_plus y v_Vcc)) 
                                 (abst_plus (abst_plus x y) v_Vcc)))))) =>
                  zen.Rall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_plus x (abst_plus y v_Vcc)) 
                             (abst_plus (abst_plus x y) v_Vcc)))) 
                    (abst_plus (abst_opposite y) (abst_opposite x)) 
                    (v_Vfc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus x 
                                    (abst_plus y 
                                       (abst_plus (abst_opposite y) 
                                          (abst_opposite x)))) 
                                 (abst_plus (abst_plus x y) 
                                    (abst_plus (abst_opposite y) 
                                       (abst_opposite x))))))) =>
                     zen.Rall abst_T 
                       (v_Vac:(zen.term abst_T) =>
                        zen.forall abst_T 
                          (v_Vbc:(zen.term abst_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vac v_Vbc))) 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vbc v_Vac))))) 
                       (abst_plus x 
                          (abst_plus y 
                             (abst_plus (abst_opposite y) (abst_opposite x)))) 
                       (v_Vgc:
                        (zen.proof 
                           (zen.forall abst_T 
                              (v_Vbc:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus x 
                                             (abst_plus y 
                                                (abst_plus (abst_opposite y) 
                                                   (abst_opposite x)))) v_Vbc))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal v_Vbc 
                                          (abst_plus x 
                                             (abst_plus y 
                                                (abst_plus (abst_opposite y) 
                                                   (abst_opposite x)))))))))) =>
                        zen.Rall abst_T 
                          (v_Vbc:(zen.term abst_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus x 
                                         (abst_plus y 
                                            (abst_plus (abst_opposite y) 
                                               (abst_opposite x)))) v_Vbc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal v_Vbc 
                                      (abst_plus x 
                                         (abst_plus y 
                                            (abst_plus (abst_opposite y) 
                                               (abst_opposite x)))))))) 
                          (abst_plus (abst_plus x y) 
                             (abst_plus (abst_opposite y) (abst_opposite x))) 
                          (v_Vhc:
                           (zen.proof 
                              (zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus x 
                                             (abst_plus y 
                                                (abst_plus (abst_opposite y) 
                                                   (abst_opposite x)))) 
                                          (abst_plus (abst_plus x y) 
                                             (abst_plus (abst_opposite y) 
                                                (abst_opposite x)))))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus (abst_plus x y) 
                                             (abst_plus (abst_opposite y) 
                                                (abst_opposite x))) 
                                          (abst_plus x 
                                             (abst_plus y 
                                                (abst_plus (abst_opposite y) 
                                                   (abst_opposite x))))))))) =>
                           zen.Rimply 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus x 
                                         (abst_plus y 
                                            (abst_plus (abst_opposite y) 
                                               (abst_opposite x)))) 
                                      (abst_plus (abst_plus x y) 
                                         (abst_plus (abst_opposite y) 
                                            (abst_opposite x)))))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_plus x y) 
                                         (abst_plus (abst_opposite y) 
                                            (abst_opposite x))) 
                                      (abst_plus x 
                                         (abst_plus y 
                                            (abst_plus (abst_opposite y) 
                                               (abst_opposite x))))))) 
                             (v_Vic:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus x 
                                                (abst_plus y 
                                                   (abst_plus 
                                                      (abst_opposite y) 
                                                      (abst_opposite x)))) 
                                             (abst_plus (abst_plus x y) 
                                                (abst_plus (abst_opposite y) 
                                                   (abst_opposite x)))))))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus x 
                                            (abst_plus y 
                                               (abst_plus (abst_opposite y) 
                                                  (abst_opposite x)))) 
                                         (abst_plus (abst_plus x y) 
                                            (abst_plus (abst_opposite y) 
                                               (abst_opposite x)))))) v_Vfc 
                                v_Vic) 
                             (v_Vjc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus (abst_plus x y) 
                                             (abst_plus (abst_opposite y) 
                                                (abst_opposite x))) 
                                          (abst_plus x 
                                             (abst_plus y 
                                                (abst_plus (abst_opposite y) 
                                                   (abst_opposite x)))))))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus (abst_plus x y) 
                                            (abst_plus (abst_opposite y) 
                                               (abst_opposite x))) 
                                         (abst_plus x 
                                            (abst_plus y 
                                               (abst_plus (abst_opposite y) 
                                                  (abst_opposite x))))))) 
                                v_Vjc v_Vzb) v_Vhc) v_Vgc) 
                       abst_equal_symmetric) v_Vec) v_Vdc) 
              abst_plus_is_associative))) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (abst_equal 
                   (abst_plus (abst_plus x y) 
                      (abst_plus (abst_opposite x) (abst_opposite y))) 
                   (abst_plus (abst_plus x y) 
                      (abst_plus (abst_opposite y) (abst_opposite x)))))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal 
                          (abst_plus (abst_plus x y) 
                             (abst_plus (abst_opposite x) (abst_opposite y))) 
                          (abst_plus (abst_plus x y) 
                             (abst_plus (abst_opposite y) (abst_opposite x)))))))) =>
           zen.Rall abst_T 
             (v_Vac:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.imp 
                      (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus v_Vcc v_Vac) 
                               (abst_plus v_Vcc v_Vbc))))))) 
             (abst_plus (abst_opposite x) (abst_opposite y)) 
             (v_Vdc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_opposite x) 
                                      (abst_opposite y)) v_Vbc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus v_Vcc 
                                      (abst_plus (abst_opposite x) 
                                         (abst_opposite y))) 
                                   (abst_plus v_Vcc v_Vbc)))))))) =>
              zen.Rall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.imp 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_plus (abst_opposite x) (abst_opposite y)) 
                               v_Vbc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_plus v_Vcc 
                                  (abst_plus (abst_opposite x) 
                                     (abst_opposite y))) 
                               (abst_plus v_Vcc v_Vbc)))))) 
                (abst_plus (abst_opposite y) (abst_opposite x)) 
                (v_Vec:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_opposite x) 
                                      (abst_opposite y)) 
                                   (abst_plus (abst_opposite y) 
                                      (abst_opposite x))))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus v_Vcc 
                                      (abst_plus (abst_opposite x) 
                                         (abst_opposite y))) 
                                   (abst_plus v_Vcc 
                                      (abst_plus (abst_opposite y) 
                                         (abst_opposite x))))))))) =>
                 zen.Rall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.imp 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_plus (abst_opposite x) (abst_opposite y)) 
                               (abst_plus (abst_opposite y) (abst_opposite x))))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_plus v_Vcc 
                                  (abst_plus (abst_opposite x) 
                                     (abst_opposite y))) 
                               (abst_plus v_Vcc 
                                  (abst_plus (abst_opposite y) 
                                     (abst_opposite x))))))) (abst_plus x y) 
                   (v_Vfc:
                    (zen.proof 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_opposite x) 
                                      (abst_opposite y)) 
                                   (abst_plus (abst_opposite y) 
                                      (abst_opposite x))))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_plus x y) 
                                      (abst_plus (abst_opposite x) 
                                         (abst_opposite y))) 
                                   (abst_plus (abst_plus x y) 
                                      (abst_plus (abst_opposite y) 
                                         (abst_opposite x)))))))) =>
                    zen.Rimply 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_plus (abst_opposite x) (abst_opposite y)) 
                               (abst_plus (abst_opposite y) (abst_opposite x))))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_plus (abst_plus x y) 
                                  (abst_plus (abst_opposite x) 
                                     (abst_opposite y))) 
                               (abst_plus (abst_plus x y) 
                                  (abst_plus (abst_opposite y) 
                                     (abst_opposite x)))))) 
                      (v_Vgc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_opposite x) 
                                         (abst_opposite y)) 
                                      (abst_plus (abst_opposite y) 
                                         (abst_opposite x))))))) =>
                       zen.Rall abst_T 
                         (v_Vac:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vbc:(zen.term abst_T) =>
                             zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_plus v_Vac v_Vbc) 
                                     (abst_plus v_Vbc v_Vac))))) 
                         (abst_opposite x) 
                         (v_Vhc:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vbc:(zen.term abst_T) =>
                                 zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus (abst_opposite x) v_Vbc) 
                                         (abst_plus v_Vbc (abst_opposite x))))))) =>
                          zen.Rall abst_T 
                            (v_Vbc:(zen.term abst_T) =>
                             zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus (abst_opposite x) v_Vbc) 
                                     (abst_plus v_Vbc (abst_opposite x))))) 
                            (abst_opposite y) 
                            (v_Vic:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus (abst_opposite x) 
                                            (abst_opposite y)) 
                                         (abst_plus (abst_opposite y) 
                                            (abst_opposite x)))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus (abst_opposite x) 
                                           (abst_opposite y)) 
                                        (abst_plus (abst_opposite y) 
                                           (abst_opposite x))))) v_Vic v_Vgc) 
                            v_Vhc) abst_plus_commutes) 
                      (v_Vjc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_plus x y) 
                                      (abst_plus (abst_opposite x) 
                                         (abst_opposite y))) 
                                   (abst_plus (abst_plus x y) 
                                      (abst_plus (abst_opposite y) 
                                         (abst_opposite x))))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_plus x y) 
                                     (abst_plus (abst_opposite x) 
                                        (abst_opposite y))) 
                                  (abst_plus (abst_plus x y) 
                                     (abst_plus (abst_opposite y) 
                                        (abst_opposite x)))))) v_Vjc v_Vzb) 
                      v_Vfc) v_Vec) v_Vdc) abst_plus_right_substitution_rule))).

def Additive_group__opposite_substitution_rule :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (abst_equal x y)) 
                                   (dk_logic.ebP (abst_equal y x)))))) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_opposite_is_opposite:(dk_logic.eP 
                               (dk_logic.forall abst_T 
                                  (x:(cc.eT abst_T) =>
                                   dk_logic.ebP 
                                     (abst_equal 
                                        (abst_plus x (abst_opposite x)) 
                                        abst_zero)))) ->
  abst_plus_left_substitution_rule:(dk_logic.eP 
                                      (dk_logic.forall abst_T 
                                         (x:(cc.eT abst_T) =>
                                          dk_logic.forall abst_T 
                                            (y:(cc.eT abst_T) =>
                                             dk_logic.forall abst_T 
                                               (z:(cc.eT abst_T) =>
                                                dk_logic.imp 
                                                  (dk_logic.ebP 
                                                     (abst_equal x y)) 
                                                  (dk_logic.ebP 
                                                     (abst_equal 
                                                        (abst_plus x z) 
                                                        (abst_plus y z)))))))) ->
  abst_opposite_is_unique:(dk_logic.eP 
                             (dk_logic.forall abst_T 
                                (z:(cc.eT abst_T) =>
                                 dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.imp 
                                      (dk_logic.ebP 
                                         (abst_equal (abst_plus x z) 
                                            abst_zero)) 
                                      (dk_logic.ebP 
                                         (abst_equal z (abst_opposite x))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
             (dk_logic.ebP (abst_equal (abst_opposite x) (abst_opposite y))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal y x)))))) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_opposite_is_opposite:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.ebP (abst_equal (abst_plus x (abst_opposite x)) abst_zero)))) =>
  abst_plus_left_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.ebP (abst_equal (abst_plus x z) (abst_plus y z)))))))) =>
  abst_opposite_is_unique:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (z:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (x:(cc.eT abst_T) =>
            dk_logic.imp 
              (dk_logic.ebP (abst_equal (abst_plus x z) abst_zero)) 
              (dk_logic.ebP (abst_equal z (abst_opposite x))))))) =>
  (__BB_1_LEMMA:
   (x:(cc.eT abst_T) ->
    y:(cc.eT abst_T) ->
    H:(dk_logic.eP (dk_logic.ebP (abst_equal x y))) ->
    dk_logic.eP 
      (dk_logic.ebP (abst_equal (abst_plus x (abst_opposite y)) abst_zero))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.imp (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal (abst_opposite v_Vzb) (abst_opposite v_Vac))))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_opposite v_Vzb) 
                              (abst_opposite v_Vac))))))))) =>
      zen.Rnotall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.imp (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal (abst_opposite v_Vzb) (abst_opposite v_Vac)))))) 
        (v_Vcc:(zen.term abst_T) =>
         v_Vdc:
         (zen.proof 
            (zen.not 
               (zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vac))) 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_opposite v_Vcc) 
                              (abst_opposite v_Vac)))))))) =>
         zen.Rnotall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.imp (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vac))) 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal (abst_opposite v_Vcc) (abst_opposite v_Vac))))) 
           (v_Vec:(zen.term abst_T) =>
            v_Vfc:
            (zen.proof 
               (zen.not 
                  (zen.imp 
                     (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec))) 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_opposite v_Vcc) 
                              (abst_opposite v_Vec))))))) =>
            zen.Rnotimply 
              (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec))) 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal (abst_opposite v_Vcc) (abst_opposite v_Vec)))) 
              (v_Vgc:
               (zen.proof 
                  (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec)))) =>
               v_Vhc:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_opposite v_Vcc) 
                              (abst_opposite v_Vec)))))) =>
               zen.Rall abst_T 
                 (v_Vic:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vzb:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_plus v_Vzb v_Vic) abst_zero))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal v_Vic (abst_opposite v_Vzb)))))) 
                 (abst_opposite v_Vec) 
                 (v_Vjc:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vzb:(zen.term abst_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_plus v_Vzb (abst_opposite v_Vec)) 
                                    abst_zero))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_opposite v_Vec) 
                                    (abst_opposite v_Vzb))))))) =>
                  zen.Rall abst_T 
                    (v_Vzb:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus v_Vzb (abst_opposite v_Vec)) 
                                abst_zero))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_opposite v_Vec) 
                                (abst_opposite v_Vzb))))) v_Vcc 
                    (v_Vkc:
                     (zen.proof 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_plus v_Vcc (abst_opposite v_Vec)) 
                                    abst_zero))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_opposite v_Vec) 
                                    (abst_opposite v_Vcc)))))) =>
                     zen.Rimply 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus v_Vcc (abst_opposite v_Vec)) 
                                abst_zero))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_opposite v_Vec) 
                                (abst_opposite v_Vcc)))) 
                       (v_Vlc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus v_Vcc (abst_opposite v_Vec)) 
                                       abst_zero))))) =>
                        zen.Rall abst_T 
                          (v_Vzb:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vac:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vzb v_Vac))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus v_Vzb 
                                            (abst_opposite v_Vac)) abst_zero))))) 
                          v_Vcc 
                          (v_Vmc:
                           (zen.proof 
                              (zen.forall abst_T 
                                 (v_Vac:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vcc v_Vac))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus v_Vcc 
                                                (abst_opposite v_Vac)) 
                                             abst_zero)))))) =>
                           zen.Rall abst_T 
                             (v_Vac:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vcc v_Vac))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus v_Vcc 
                                            (abst_opposite v_Vac)) abst_zero)))) 
                             v_Vec 
                             (v_Vnc:
                              (zen.proof 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vcc v_Vec))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus v_Vcc 
                                                (abst_opposite v_Vec)) 
                                             abst_zero))))) =>
                              zen.Rimply 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vcc v_Vec))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus v_Vcc 
                                            (abst_opposite v_Vec)) abst_zero))) 
                                (v_Voc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vcc v_Vec))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vcc v_Vec))) 
                                   v_Vgc v_Voc) 
                                (v_Vpc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus v_Vcc 
                                                (abst_opposite v_Vec)) 
                                             abst_zero)))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus v_Vcc 
                                               (abst_opposite v_Vec)) 
                                            abst_zero))) v_Vpc v_Vlc) v_Vnc) 
                             v_Vmc) __BB_1_LEMMA) 
                       (v_Vqc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_opposite v_Vec) 
                                    (abst_opposite v_Vcc))))) =>
                        zen.Rall abst_T 
                          (v_Vzb:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vac:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vzb v_Vac))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vac v_Vzb))))) 
                          (abst_opposite v_Vec) 
                          (v_Vrc:
                           (zen.proof 
                              (zen.forall abst_T 
                                 (v_Vac:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_opposite v_Vec) 
                                             v_Vac))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vac 
                                             (abst_opposite v_Vec))))))) =>
                           zen.Rall abst_T 
                             (v_Vac:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_opposite v_Vec) v_Vac))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal v_Vac (abst_opposite v_Vec))))) 
                             (abst_opposite v_Vcc) 
                             (v_Vsc:
                              (zen.proof 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_opposite v_Vec) 
                                             (abst_opposite v_Vcc)))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_opposite v_Vcc) 
                                             (abst_opposite v_Vec)))))) =>
                              zen.Rimply 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_opposite v_Vec) 
                                         (abst_opposite v_Vcc)))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_opposite v_Vcc) 
                                         (abst_opposite v_Vec)))) 
                                (v_Vtc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_opposite v_Vec) 
                                                (abst_opposite v_Vcc)))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_opposite v_Vec) 
                                            (abst_opposite v_Vcc)))) v_Vqc 
                                   v_Vtc) 
                                (v_Vuc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_opposite v_Vcc) 
                                             (abst_opposite v_Vec))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_opposite v_Vcc) 
                                            (abst_opposite v_Vec)))) v_Vuc 
                                   v_Vhc) v_Vsc) v_Vrc) abst_equal_symmetric) 
                       v_Vkc) v_Vjc) abst_opposite_is_unique) v_Vfc) v_Vdc) 
        v_Vbc)) 
    (x:(cc.eT abst_T) =>
     y:(cc.eT abst_T) =>
     H:(dk_logic.eP (dk_logic.ebP (abst_equal x y))) =>
     (__BB_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (abst_equal (abst_plus x (abst_opposite y)) 
               (abst_plus y (abst_opposite y))))) =>
      (__BB_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP 
             (abst_equal (abst_plus y (abst_opposite y)) abst_zero))) =>
       zen.nnpp 
         (zen.triangle 
            (focal.is_true 
               (abst_equal (abst_plus x (abst_opposite y)) abst_zero))) 
         (v_Vkc:
          (zen.proof 
             (zen.not 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_plus x (abst_opposite y)) abst_zero))))) =>
          zen.Rcut 
            (zen.and 
               (zen.not 
                  (zen.triangle 
                     (zen.equal abst_T (abst_plus x (abst_opposite y)) 
                        (abst_plus x (abst_opposite y))))) 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_plus x (abst_opposite y)) 
                           (abst_plus x (abst_opposite y))))))) 
            (v_Vlc:
             (zen.proof 
                (zen.and 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T (abst_plus x (abst_opposite y)) 
                            (abst_plus x (abst_opposite y))))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus x (abst_opposite y)) 
                               (abst_plus x (abst_opposite y)))))))) =>
             zen.Rand 
               (zen.not 
                  (zen.triangle 
                     (zen.equal abst_T (abst_plus x (abst_opposite y)) 
                        (abst_plus x (abst_opposite y))))) 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_plus x (abst_opposite y)) 
                           (abst_plus x (abst_opposite y)))))) 
               (v_Vmc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T (abst_plus x (abst_opposite y)) 
                            (abst_plus x (abst_opposite y)))))) =>
                v_Vnc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus x (abst_opposite y)) 
                               (abst_plus x (abst_opposite y))))))) =>
                zen.Rnoteq abst_T (abst_plus x (abst_opposite y)) v_Vmc) 
               v_Vlc) 
            (v_Voc:
             (zen.proof 
                (zen.not 
                   (zen.and 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal abst_T 
                               (abst_plus x (abst_opposite y)) 
                               (abst_plus x (abst_opposite y))))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_plus x (abst_opposite y)) 
                                  (abst_plus x (abst_opposite y))))))))) =>
             zen.Rcut 
               (zen.triangle 
                  (zen.equal abst_T (abst_plus y (abst_opposite y)) abst_zero)) 
               (v_Vpc:
                (zen.proof 
                   (zen.triangle 
                      (zen.equal abst_T (abst_plus y (abst_opposite y)) 
                         abst_zero))) =>
                zen.Rsubst basics.bool__t 
                  (v_Vqc:(zen.term basics.bool__t) =>
                   zen.triangle (focal.is_true v_Vqc)) 
                  (abst_equal (abst_plus x (abst_opposite y)) 
                     (abst_plus y (abst_opposite y))) 
                  (abst_equal (abst_plus x (abst_opposite y)) abst_zero) 
                  (v_Vrc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal basics.bool__t 
                               (abst_equal (abst_plus x (abst_opposite y)) 
                                  (abst_plus y (abst_opposite y))) 
                               (abst_equal (abst_plus x (abst_opposite y)) 
                                  abst_zero))))) =>
                   zen.Rsubst abst_T 
                     (v_Vsc:(zen.term abst_T) =>
                      zen.not 
                        (zen.triangle 
                           (zen.equal basics.bool__t 
                              (abst_equal v_Vsc 
                                 (abst_plus y (abst_opposite y))) 
                              (abst_equal (abst_plus x (abst_opposite y)) 
                                 abst_zero)))) 
                     (abst_plus x (abst_opposite y)) 
                     (abst_plus x (abst_opposite y)) 
                     (v_Vmc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T 
                                  (abst_plus x (abst_opposite y)) 
                                  (abst_plus x (abst_opposite y)))))) =>
                      zen.Rnotand 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal abst_T 
                                 (abst_plus x (abst_opposite y)) 
                                 (abst_plus x (abst_opposite y))))) 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_plus x (abst_opposite y)) 
                                    (abst_plus x (abst_opposite y)))))) 
                        (v_Vtc:
                         (zen.proof 
                            (zen.not 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_plus x (abst_opposite y)) 
                                        (abst_plus x (abst_opposite y))))))) =>
                         zen.Rnotnot 
                           (zen.triangle 
                              (zen.equal abst_T 
                                 (abst_plus x (abst_opposite y)) 
                                 (abst_plus x (abst_opposite y)))) 
                           (v_Vuc:
                            (zen.proof 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_plus x (abst_opposite y)) 
                                     (abst_plus x (abst_opposite y))))) =>
                            zen.Rcut 
                              (zen.triangle 
                                 (zen.equal abst_T 
                                    (abst_plus x (abst_opposite y)) 
                                    (abst_plus x (abst_opposite y)))) 
                              (v_Vuc:
                               (zen.proof 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_plus x (abst_opposite y)) 
                                        (abst_plus x (abst_opposite y))))) =>
                               zen.Rsubst abst_T 
                                 (v_Vvc:(zen.term abst_T) =>
                                  zen.triangle 
                                    (zen.equal abst_T v_Vvc 
                                       (abst_plus x (abst_opposite y)))) 
                                 (abst_plus x (abst_opposite y)) 
                                 (abst_plus x (abst_opposite y)) 
                                 (v_Vmc:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus x (abst_opposite y)) 
                                              (abst_plus x (abst_opposite y)))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (zen.equal abst_T 
                                          (abst_plus x (abst_opposite y)) 
                                          (abst_plus x (abst_opposite y)))) 
                                    v_Vuc v_Vmc) 
                                 (v_Vuc:
                                  (zen.proof 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_plus x (abst_opposite y)) 
                                           (abst_plus x (abst_opposite y))))) =>
                                  zen.Rsubst abst_T 
                                    (v_Vwc:(zen.term abst_T) =>
                                     zen.triangle 
                                       (zen.equal abst_T 
                                          (abst_plus x (abst_opposite y)) 
                                          v_Vwc)) 
                                    (abst_plus x (abst_opposite y)) 
                                    (abst_plus x (abst_opposite y)) 
                                    (v_Vmc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus x 
                                                    (abst_opposite y)) 
                                                 (abst_plus x 
                                                    (abst_opposite y)))))) =>
                                     zen.Rnoteq abst_T 
                                       (abst_plus x (abst_opposite y)) v_Vmc) 
                                    (v_Vuc:
                                     (zen.proof 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus x (abst_opposite y)) 
                                              (abst_plus x (abst_opposite y))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_plus x (abst_opposite y)) 
                                             (abst_plus x (abst_opposite y)))) 
                                       v_Vuc v_Vmc) v_Vuc) v_Vuc) 
                              (v_Vmc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_plus x (abst_opposite y)) 
                                           (abst_plus x (abst_opposite y)))))) =>
                               zen.Rnoteq abst_T 
                                 (abst_plus x (abst_opposite y)) v_Vmc)) 
                           v_Vtc) 
                        (v_Vxc:
                         (zen.proof 
                            (zen.not 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus x (abst_opposite y)) 
                                           (abst_plus x (abst_opposite y)))))))) =>
                         zen.Rnotnot 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_plus x (abst_opposite y)) 
                                    (abst_plus x (abst_opposite y))))) 
                           (v_Vyc:
                            (zen.proof 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus x (abst_opposite y)) 
                                        (abst_plus x (abst_opposite y)))))) =>
                            zen.Rall abst_T 
                              (v_Vzc:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vad:(zen.term abst_T) =>
                                  zen.forall abst_T 
                                    (v_Vbd:(zen.term abst_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vzc v_Vad))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal v_Vad v_Vbd))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal v_Vzc v_Vbd))))))) 
                              (abst_plus x (abst_opposite y)) 
                              (v_Vcd:
                               (zen.proof 
                                  (zen.forall abst_T 
                                     (v_Vad:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vbd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus x 
                                                       (abst_opposite y)) 
                                                    v_Vad))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vad v_Vbd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_opposite y)) 
                                                       v_Vbd)))))))) =>
                               zen.Rall abst_T 
                                 (v_Vad:(zen.term abst_T) =>
                                  zen.forall abst_T 
                                    (v_Vbd:(zen.term abst_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus x 
                                                   (abst_opposite y)) v_Vad))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal v_Vad v_Vbd))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus x 
                                                      (abst_opposite y)) 
                                                   v_Vbd)))))) 
                                 (abst_plus x (abst_opposite y)) 
                                 (v_Vdd:
                                  (zen.proof 
                                     (zen.forall abst_T 
                                        (v_Vbd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus x 
                                                       (abst_opposite y)) 
                                                    (abst_plus x 
                                                       (abst_opposite y))))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_opposite y)) 
                                                       v_Vbd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_opposite y)) 
                                                       v_Vbd))))))) =>
                                  zen.Rall abst_T 
                                    (v_Vbd:(zen.term abst_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus x 
                                                   (abst_opposite y)) 
                                                (abst_plus x 
                                                   (abst_opposite y))))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus x 
                                                      (abst_opposite y)) 
                                                   v_Vbd))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus x 
                                                      (abst_opposite y)) 
                                                   v_Vbd))))) 
                                    (abst_plus y (abst_opposite y)) 
                                    (v_Ved:
                                     (zen.proof 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus x 
                                                       (abst_opposite y)) 
                                                    (abst_plus x 
                                                       (abst_opposite y))))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_opposite y)) 
                                                       (abst_plus y 
                                                          (abst_opposite y))))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_opposite y)) 
                                                       (abst_plus y 
                                                          (abst_opposite y)))))))) =>
                                     zen.Rimply 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus x 
                                                   (abst_opposite y)) 
                                                (abst_plus x 
                                                   (abst_opposite y))))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus x 
                                                      (abst_opposite y)) 
                                                   (abst_plus y 
                                                      (abst_opposite y))))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus x 
                                                      (abst_opposite y)) 
                                                   (abst_plus y 
                                                      (abst_opposite y)))))) 
                                       (v_Vnc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_opposite y)) 
                                                       (abst_plus x 
                                                          (abst_opposite y))))))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus x 
                                                      (abst_opposite y)) 
                                                   (abst_plus x 
                                                      (abst_opposite y))))) 
                                          v_Vyc v_Vnc) 
                                       (v_Vfd:
                                        (zen.proof 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_opposite y)) 
                                                       (abst_plus y 
                                                          (abst_opposite y))))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_opposite y)) 
                                                       (abst_plus y 
                                                          (abst_opposite y))))))) =>
                                        zen.Rimply 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus x 
                                                      (abst_opposite y)) 
                                                   (abst_plus y 
                                                      (abst_opposite y))))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus x 
                                                      (abst_opposite y)) 
                                                   (abst_plus y 
                                                      (abst_opposite y))))) 
                                          (v_Vgd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_opposite y)) 
                                                          (abst_plus y 
                                                             (abst_opposite y))))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus x 
                                                         (abst_opposite y)) 
                                                      (abst_plus y 
                                                         (abst_opposite y))))) 
                                             __BB_1_1_LEMMA v_Vgd) 
                                          (__BB_1_1_LEMMA:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_opposite y)) 
                                                       (abst_plus y 
                                                          (abst_opposite y)))))) =>
                                           zen.Rsubst basics.bool__t 
                                             (v_Vqc:
                                              (zen.term basics.bool__t) =>
                                              zen.triangle 
                                                (focal.is_true v_Vqc)) 
                                             (abst_equal 
                                                (abst_plus x 
                                                   (abst_opposite y)) 
                                                (abst_plus y 
                                                   (abst_opposite y))) 
                                             (abst_equal 
                                                (abst_plus x 
                                                   (abst_opposite y)) 
                                                abst_zero) 
                                             (v_Vrc:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_opposite 
                                                                   y)) 
                                                             (abst_plus y 
                                                                (abst_opposite 
                                                                   y))) 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_opposite 
                                                                   y)) 
                                                             abst_zero))))) =>
                                              zen.Rsubst abst_T 
                                                (v_Vsc:(zen.term abst_T) =>
                                                 zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         basics.bool__t 
                                                         (abst_equal v_Vsc 
                                                            (abst_plus y 
                                                               (abst_opposite 
                                                                  y))) 
                                                         (abst_equal 
                                                            (abst_plus x 
                                                               (abst_opposite 
                                                                  y)) 
                                                            abst_zero)))) 
                                                (abst_plus x 
                                                   (abst_opposite y)) 
                                                (abst_plus x 
                                                   (abst_opposite y)) 
                                                (v_Vmc:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_plus x 
                                                                (abst_opposite 
                                                                   y)) 
                                                             (abst_plus x 
                                                                (abst_opposite 
                                                                   y)))))) =>
                                                 zen.Rnoteq abst_T 
                                                   (abst_plus x 
                                                      (abst_opposite y)) 
                                                   v_Vmc) 
                                                (v_Vrc:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                (abst_plus x 
                                                                   (abst_opposite 
                                                                    y)) 
                                                                (abst_plus y 
                                                                   (abst_opposite 
                                                                    y))) 
                                                             (abst_equal 
                                                                (abst_plus x 
                                                                   (abst_opposite 
                                                                    y)) 
                                                                abst_zero))))) =>
                                                 zen.Rsubst abst_T 
                                                   (v_Vhd:
                                                    (zen.term abst_T) =>
                                                    zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (abst_equal 
                                                               (abst_plus x 
                                                                  (abst_opposite 
                                                                    y)) v_Vhd) 
                                                            (abst_equal 
                                                               (abst_plus x 
                                                                  (abst_opposite 
                                                                    y)) 
                                                               abst_zero)))) 
                                                   (abst_plus y 
                                                      (abst_opposite y)) 
                                                   abst_zero 
                                                   (v_Vid:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T 
                                                                (abst_plus y 
                                                                   (abst_opposite 
                                                                    y)) 
                                                                abst_zero)))) =>
                                                    zen.Raxiom 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            (abst_plus y 
                                                               (abst_opposite 
                                                                  y)) 
                                                            abst_zero)) 
                                                      v_Vpc v_Vid) 
                                                   (v_Vjd:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                   abst_zero) 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                   abst_zero))))) =>
                                                    zen.Rnoteq 
                                                      basics.bool__t 
                                                      (abst_equal 
                                                         (abst_plus x 
                                                            (abst_opposite y)) 
                                                         abst_zero) v_Vjd) 
                                                   v_Vrc) v_Vrc) 
                                             (v_Vkd:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_opposite y)) 
                                                          abst_zero)))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus x 
                                                            (abst_opposite y)) 
                                                         abst_zero))) v_Vkd 
                                                v_Vkc) __BB_1_1_LEMMA) v_Vfd) 
                                       v_Ved) v_Vdd) v_Vcd) 
                              abst_equal_transitive) v_Vxc) v_Voc) 
                     (v_Vrc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (abst_equal 
                                     (abst_plus x (abst_opposite y)) 
                                     (abst_plus y (abst_opposite y))) 
                                  (abst_equal 
                                     (abst_plus x (abst_opposite y)) 
                                     abst_zero))))) =>
                      zen.Rsubst abst_T 
                        (v_Vhd:(zen.term abst_T) =>
                         zen.not 
                           (zen.triangle 
                              (zen.equal basics.bool__t 
                                 (abst_equal (abst_plus x (abst_opposite y)) 
                                    v_Vhd) 
                                 (abst_equal (abst_plus x (abst_opposite y)) 
                                    abst_zero)))) 
                        (abst_plus y (abst_opposite y)) abst_zero 
                        (v_Vid:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_plus y (abst_opposite y)) 
                                     abst_zero)))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (zen.equal abst_T 
                                 (abst_plus y (abst_opposite y)) abst_zero)) 
                           v_Vpc v_Vid) 
                        (v_Vjd:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (abst_equal 
                                        (abst_plus x (abst_opposite y)) 
                                        abst_zero) 
                                     (abst_equal 
                                        (abst_plus x (abst_opposite y)) 
                                        abst_zero))))) =>
                         zen.Rnoteq basics.bool__t 
                           (abst_equal (abst_plus x (abst_opposite y)) 
                              abst_zero) v_Vjd) v_Vrc) v_Vrc) 
                  (v_Vkd:
                   (zen.proof 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus x (abst_opposite y)) 
                               abst_zero)))) =>
                   zen.Raxiom 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_plus x (abst_opposite y)) 
                              abst_zero))) v_Vkd v_Vkc) __BB_1_1_LEMMA) 
               (v_Vid:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T (abst_plus y (abst_opposite y)) 
                            abst_zero)))) =>
                zen.Rcut 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_plus y (abst_opposite y)) abst_zero))) 
                  (__BB_1_2_LEMMA:
                   (zen.proof 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus y (abst_opposite y)) 
                               abst_zero)))) =>
                   zen.Rall abst_T 
                     (v_Vzc:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vad:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vbd:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_equal v_Vzc v_Vad))) 
                              (zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal v_Vad v_Vbd))) 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal v_Vzc v_Vbd))))))) 
                     (abst_plus x (abst_opposite y)) 
                     (v_Vcd:
                      (zen.proof 
                         (zen.forall abst_T 
                            (v_Vad:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vbd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus x (abst_opposite y)) 
                                           v_Vad))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vad v_Vbd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus x (abst_opposite y)) 
                                              v_Vbd)))))))) =>
                      zen.Rall abst_T 
                        (v_Vad:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vbd:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus x (abst_opposite y)) v_Vad))) 
                              (zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal v_Vad v_Vbd))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus x (abst_opposite y)) 
                                          v_Vbd)))))) 
                        (abst_plus y (abst_opposite y)) 
                        (v_Vld:
                         (zen.proof 
                            (zen.forall abst_T 
                               (v_Vbd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus x (abst_opposite y)) 
                                           (abst_plus y (abst_opposite y))))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus y (abst_opposite y)) 
                                              v_Vbd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus x (abst_opposite y)) 
                                              v_Vbd))))))) =>
                         zen.Rall abst_T 
                           (v_Vbd:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus x (abst_opposite y)) 
                                       (abst_plus y (abst_opposite y))))) 
                              (zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus y (abst_opposite y)) 
                                          v_Vbd))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus x (abst_opposite y)) 
                                          v_Vbd))))) abst_zero 
                           (v_Vmd:
                            (zen.proof 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus x (abst_opposite y)) 
                                           (abst_plus y (abst_opposite y))))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus y (abst_opposite y)) 
                                              abst_zero))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus x (abst_opposite y)) 
                                              abst_zero)))))) =>
                            zen.Rimply 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus x (abst_opposite y)) 
                                       (abst_plus y (abst_opposite y))))) 
                              (zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus y (abst_opposite y)) 
                                          abst_zero))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus x (abst_opposite y)) 
                                          abst_zero)))) 
                              (v_Vgd:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus x (abst_opposite y)) 
                                              (abst_plus y (abst_opposite y))))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus x (abst_opposite y)) 
                                          (abst_plus y (abst_opposite y))))) 
                                 __BB_1_1_LEMMA v_Vgd) 
                              (v_Vnd:
                               (zen.proof 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus y (abst_opposite y)) 
                                              abst_zero))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus x (abst_opposite y)) 
                                              abst_zero))))) =>
                               zen.Rimply 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus y (abst_opposite y)) 
                                          abst_zero))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus x (abst_opposite y)) 
                                          abst_zero))) 
                                 (v_Vod:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus y 
                                                    (abst_opposite y)) 
                                                 abst_zero))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus y (abst_opposite y)) 
                                             abst_zero))) __BB_1_2_LEMMA 
                                    v_Vod) 
                                 (v_Vkd:
                                  (zen.proof 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus x (abst_opposite y)) 
                                              abst_zero)))) =>
                                  zen.Rsubst basics.bool__t 
                                    (v_Vqc:(zen.term basics.bool__t) =>
                                     zen.triangle (focal.is_true v_Vqc)) 
                                    (abst_equal 
                                       (abst_plus x (abst_opposite y)) 
                                       abst_zero) 
                                    (abst_equal 
                                       (abst_plus x (abst_opposite y)) 
                                       abst_zero) 
                                    (v_Vjd:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (abst_equal 
                                                    (abst_plus x 
                                                       (abst_opposite y)) 
                                                    abst_zero) 
                                                 (abst_equal 
                                                    (abst_plus x 
                                                       (abst_opposite y)) 
                                                    abst_zero))))) =>
                                     zen.Rsubst abst_T 
                                       (v_Vpd:(zen.term abst_T) =>
                                        zen.not 
                                          (zen.triangle 
                                             (zen.equal basics.bool__t 
                                                (abst_equal v_Vpd abst_zero) 
                                                (abst_equal 
                                                   (abst_plus x 
                                                      (abst_opposite y)) 
                                                   abst_zero)))) 
                                       (abst_plus x (abst_opposite y)) 
                                       (abst_plus x (abst_opposite y)) 
                                       (v_Vmc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_plus x 
                                                       (abst_opposite y)) 
                                                    (abst_plus x 
                                                       (abst_opposite y)))))) =>
                                        zen.Rnotand 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal abst_T 
                                                   (abst_plus x 
                                                      (abst_opposite y)) 
                                                   (abst_plus x 
                                                      (abst_opposite y))))) 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus x 
                                                         (abst_opposite y)) 
                                                      (abst_plus x 
                                                         (abst_opposite y)))))) 
                                          (v_Vtc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus x 
                                                             (abst_opposite y)) 
                                                          (abst_plus x 
                                                             (abst_opposite y))))))) =>
                                           zen.Rnotnot 
                                             (zen.triangle 
                                                (zen.equal abst_T 
                                                   (abst_plus x 
                                                      (abst_opposite y)) 
                                                   (abst_plus x 
                                                      (abst_opposite y)))) 
                                             (v_Vuc:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_plus x 
                                                          (abst_opposite y)) 
                                                       (abst_plus x 
                                                          (abst_opposite y))))) =>
                                              zen.Reqsym abst_T 
                                                (abst_plus x 
                                                   (abst_opposite y)) 
                                                (abst_plus x 
                                                   (abst_opposite y)) v_Vuc 
                                                v_Vmc) v_Vtc) 
                                          (v_Vxc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_opposite 
                                                                   y)) 
                                                             (abst_plus x 
                                                                (abst_opposite 
                                                                   y)))))))) =>
                                           zen.Rnotnot 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus x 
                                                         (abst_opposite y)) 
                                                      (abst_plus x 
                                                         (abst_opposite y))))) 
                                             (v_Vyc:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_opposite y)) 
                                                          (abst_plus x 
                                                             (abst_opposite y)))))) =>
                                              zen.Rall abst_T 
                                                (v_Vzc:(zen.term abst_T) =>
                                                 zen.forall abst_T 
                                                   (v_Vad:
                                                    (zen.term abst_T) =>
                                                    zen.forall abst_T 
                                                      (v_Vbd:
                                                       (zen.term abst_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  v_Vzc v_Vad))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vbd))))))) 
                                                (abst_plus x 
                                                   (abst_opposite y)) 
                                                (v_Vcd:
                                                 (zen.proof 
                                                    (zen.forall abst_T 
                                                       (v_Vad:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vbd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) v_Vad))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) v_Vbd)))))))) =>
                                                 zen.Rall abst_T 
                                                   (v_Vad:
                                                    (zen.term abst_T) =>
                                                    zen.forall abst_T 
                                                      (v_Vbd:
                                                       (zen.term abst_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) v_Vad))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) v_Vbd)))))) 
                                                   (abst_plus x 
                                                      (abst_opposite y)) 
                                                   (v_Vdd:
                                                    (zen.proof 
                                                       (zen.forall abst_T 
                                                          (v_Vbd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y))))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) v_Vbd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) v_Vbd))))))) =>
                                                    zen.Rall abst_T 
                                                      (v_Vbd:
                                                       (zen.term abst_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                  (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y))))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) v_Vbd))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) v_Vbd))))) 
                                                      abst_zero 
                                                      (v_Vqd:
                                                       (zen.proof 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y))))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    abst_zero))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    abst_zero)))))) =>
                                                       zen.Rimply 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                  (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y))))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    abst_zero))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    abst_zero)))) 
                                                         (v_Vnc:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y))))))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y))))) 
                                                            v_Vyc v_Vnc) 
                                                         (v_Vrd:
                                                          (zen.proof 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    abst_zero))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    abst_zero))))) =>
                                                          zen.Rimply 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    abst_zero))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    abst_zero))) 
                                                            (v_Vkc:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    abst_zero))))) =>
                                                             zen.Raxiom 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    abst_zero))) 
                                                               v_Vkd v_Vkc) 
                                                            (v_Vkd:
                                                             (zen.proof 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    abst_zero)))) =>
                                                             zen.Raxiom 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    y)) 
                                                                    abst_zero))) 
                                                               v_Vkd v_Vkc) 
                                                            v_Vrd) v_Vqd) 
                                                      v_Vdd) v_Vcd) 
                                                abst_equal_transitive) v_Vxc) 
                                          v_Voc) 
                                       (v_Vjd:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_opposite y)) 
                                                       abst_zero) 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_opposite y)) 
                                                       abst_zero))))) =>
                                        zen.Rsubst abst_T 
                                          (v_Vhd:(zen.term abst_T) =>
                                           zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (abst_equal 
                                                      (abst_plus x 
                                                         (abst_opposite y)) 
                                                      v_Vhd) 
                                                   (abst_equal 
                                                      (abst_plus x 
                                                         (abst_opposite y)) 
                                                      abst_zero)))) 
                                          abst_zero abst_zero 
                                          (v_Vsd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       abst_zero abst_zero)))) =>
                                           zen.Rnoteq abst_T abst_zero v_Vsd) 
                                          (v_Vjd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_opposite y)) 
                                                          abst_zero) 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_opposite y)) 
                                                          abst_zero))))) =>
                                           zen.Rnoteq basics.bool__t 
                                             (abst_equal 
                                                (abst_plus x 
                                                   (abst_opposite y)) 
                                                abst_zero) v_Vjd) v_Vjd) 
                                       v_Vjd) 
                                    (v_Vkd:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus x 
                                                    (abst_opposite y)) 
                                                 abst_zero)))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus x 
                                                   (abst_opposite y)) 
                                                abst_zero))) v_Vkd v_Vkc) 
                                    v_Vkd) v_Vnd) v_Vmd) v_Vld) v_Vcd) 
                     abst_equal_transitive) 
                  (v_Vod:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_plus y (abst_opposite y)) 
                                  abst_zero))))) =>
                   zen.Raxiom 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_plus y (abst_opposite y)) 
                              abst_zero))) __BB_1_2_LEMMA v_Vod))))) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true 
                 (abst_equal (abst_plus y (abst_opposite y)) abst_zero))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_plus y (abst_opposite y)) abst_zero))))) =>
            zen.Rall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.triangle 
                 (focal.is_true 
                    (abst_equal (abst_plus v_Vac (abst_opposite v_Vac)) 
                       abst_zero))) y 
              (v_Vbc:
               (zen.proof 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_plus y (abst_opposite y)) abst_zero)))) =>
               zen.Raxiom 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_plus y (abst_opposite y)) abst_zero))) 
                 v_Vbc v_Vzb) abst_opposite_is_opposite))) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (abst_equal (abst_plus x (abst_opposite y)) 
                   (abst_plus y (abst_opposite y))))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_plus x (abst_opposite y)) 
                          (abst_plus y (abst_opposite y))))))) =>
           zen.Rall abst_T 
             (v_Vac:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.imp 
                      (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus v_Vac v_Vcc) 
                               (abst_plus v_Vbc v_Vcc))))))) x 
             (v_Vdc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle (focal.is_true (abst_equal x v_Vbc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus x v_Vcc) 
                                   (abst_plus v_Vbc v_Vcc)))))))) =>
              zen.Rall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.imp 
                      (zen.triangle (focal.is_true (abst_equal x v_Vbc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus x v_Vcc) 
                               (abst_plus v_Vbc v_Vcc)))))) y 
                (v_Vec:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle (focal.is_true (abst_equal x y))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus x v_Vcc) 
                                   (abst_plus y v_Vcc))))))) =>
                 zen.Rall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.imp (zen.triangle (focal.is_true (abst_equal x y))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus x v_Vcc) 
                               (abst_plus y v_Vcc))))) (abst_opposite y) 
                   (v_Vfc:
                    (zen.proof 
                       (zen.imp 
                          (zen.triangle (focal.is_true (abst_equal x y))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus x (abst_opposite y)) 
                                   (abst_plus y (abst_opposite y))))))) =>
                    zen.Rimply 
                      (zen.triangle (focal.is_true (abst_equal x y))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus x (abst_opposite y)) 
                               (abst_plus y (abst_opposite y))))) 
                      (v_Vgc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle (focal.is_true (abst_equal x y))))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_equal x y))) H 
                         v_Vgc) 
                      (v_Vhc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus x (abst_opposite y)) 
                                   (abst_plus y (abst_opposite y)))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_plus x (abst_opposite y)) 
                                  (abst_plus y (abst_opposite y))))) v_Vhc 
                         v_Vzb) v_Vfc) v_Vec) v_Vdc) 
             abst_plus_left_substitution_rule))).

def Additive_group__minus_right_substitution_rule :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_plus_right_substitution_rule:(dk_logic.eP 
                                       (dk_logic.forall abst_T 
                                          (x:(cc.eT abst_T) =>
                                           dk_logic.forall abst_T 
                                             (y:(cc.eT abst_T) =>
                                              dk_logic.forall abst_T 
                                                (z:(cc.eT abst_T) =>
                                                 dk_logic.imp 
                                                   (dk_logic.ebP 
                                                      (abst_equal x y)) 
                                                   (dk_logic.ebP 
                                                      (abst_equal 
                                                         (abst_plus z x) 
                                                         (abst_plus z y)))))))) ->
  abst_opposite_substitution_rule:(dk_logic.eP 
                                     (dk_logic.forall abst_T 
                                        (x:(cc.eT abst_T) =>
                                         dk_logic.forall abst_T 
                                           (y:(cc.eT abst_T) =>
                                            dk_logic.imp 
                                              (dk_logic.ebP (abst_equal x y)) 
                                              (dk_logic.ebP 
                                                 (abst_equal 
                                                    (abst_opposite x) 
                                                    (abst_opposite y))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                (dk_logic.ebP 
                   (abst_equal 
                      (Additive_group__minus abst_T abst_opposite abst_plus 
                         x y) 
                      (Additive_group__minus abst_T abst_opposite abst_plus 
                         x z)))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_plus_right_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.ebP (abst_equal (abst_plus z x) (abst_plus z y)))))))) =>
  abst_opposite_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal (abst_opposite x) (abst_opposite y))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal 
                         (Additive_group__minus abst_T abst_opposite 
                            abst_plus v_Vzb v_Vac) 
                         (Additive_group__minus abst_T abst_opposite 
                            abst_plus v_Vzb v_Vbc)))))))) 
    (v_Vcc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (Additive_group__minus abst_T abst_opposite 
                                   abst_plus v_Vzb v_Vac) 
                                (Additive_group__minus abst_T abst_opposite 
                                   abst_plus v_Vzb v_Vbc)))))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal 
                         (Additive_group__minus abst_T abst_opposite 
                            abst_plus v_Vzb v_Vac) 
                         (Additive_group__minus abst_T abst_opposite 
                            abst_plus v_Vzb v_Vbc))))))) 
       (v_Vdc:(zen.term abst_T) =>
        v_Vec:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (Additive_group__minus abst_T abst_opposite 
                                   abst_plus v_Vdc v_Vac) 
                                (Additive_group__minus abst_T abst_opposite 
                                   abst_plus v_Vdc v_Vbc))))))))) =>
        zen.Rnotall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal 
                         (Additive_group__minus abst_T abst_opposite 
                            abst_plus v_Vdc v_Vac) 
                         (Additive_group__minus abst_T abst_opposite 
                            abst_plus v_Vdc v_Vbc)))))) 
          (v_Vfc:(zen.term abst_T) =>
           v_Vgc:
           (zen.proof 
              (zen.not 
                 (zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vfc v_Vbc))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (Additive_group__minus abst_T abst_opposite 
                                   abst_plus v_Vdc v_Vfc) 
                                (Additive_group__minus abst_T abst_opposite 
                                   abst_plus v_Vdc v_Vbc)))))))) =>
           zen.Rnotall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vfc v_Vbc))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal 
                         (Additive_group__minus abst_T abst_opposite 
                            abst_plus v_Vdc v_Vfc) 
                         (Additive_group__minus abst_T abst_opposite 
                            abst_plus v_Vdc v_Vbc))))) 
             (v_Vhc:(zen.term abst_T) =>
              v_Vic:
              (zen.proof 
                 (zen.not 
                    (zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vfc v_Vhc))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (Additive_group__minus abst_T abst_opposite 
                                   abst_plus v_Vdc v_Vfc) 
                                (Additive_group__minus abst_T abst_opposite 
                                   abst_plus v_Vdc v_Vhc))))))) =>
              zen.Rnotimply 
                (zen.triangle (focal.is_true (abst_equal v_Vfc v_Vhc))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal 
                         (Additive_group__minus abst_T abst_opposite 
                            abst_plus v_Vdc v_Vfc) 
                         (Additive_group__minus abst_T abst_opposite 
                            abst_plus v_Vdc v_Vhc)))) 
                (v_Vjc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_equal v_Vfc v_Vhc)))) =>
                 v_Vkc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus v_Vdc (abst_opposite v_Vfc)) 
                                (abst_plus v_Vdc (abst_opposite v_Vhc))))))) =>
                 zen.Rall abst_T 
                   (v_Vzb:(zen.term abst_T) =>
                    zen.forall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vzb v_Vac))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_plus v_Vbc v_Vzb) 
                                     (abst_plus v_Vbc v_Vac))))))) 
                   (abst_opposite v_Vfc) 
                   (v_Vlc:
                    (zen.proof 
                       (zen.forall abst_T 
                          (v_Vac:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vbc:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_opposite v_Vfc) v_Vac))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus v_Vbc 
                                            (abst_opposite v_Vfc)) 
                                         (abst_plus v_Vbc v_Vac)))))))) =>
                    zen.Rall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_opposite v_Vfc) v_Vac))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus v_Vbc (abst_opposite v_Vfc)) 
                                     (abst_plus v_Vbc v_Vac)))))) 
                      (abst_opposite v_Vhc) 
                      (v_Vmc:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vbc:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_opposite v_Vfc) 
                                         (abst_opposite v_Vhc)))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus v_Vbc 
                                            (abst_opposite v_Vfc)) 
                                         (abst_plus v_Vbc 
                                            (abst_opposite v_Vhc)))))))) =>
                       zen.Rall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_opposite v_Vfc) 
                                     (abst_opposite v_Vhc)))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus v_Vbc (abst_opposite v_Vfc)) 
                                     (abst_plus v_Vbc (abst_opposite v_Vhc)))))) 
                         v_Vdc 
                         (v_Vnc:
                          (zen.proof 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_opposite v_Vfc) 
                                         (abst_opposite v_Vhc)))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus v_Vdc 
                                            (abst_opposite v_Vfc)) 
                                         (abst_plus v_Vdc 
                                            (abst_opposite v_Vhc))))))) =>
                          zen.Rimply 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_opposite v_Vfc) 
                                     (abst_opposite v_Vhc)))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus v_Vdc (abst_opposite v_Vfc)) 
                                     (abst_plus v_Vdc (abst_opposite v_Vhc))))) 
                            (v_Voc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_opposite v_Vfc) 
                                            (abst_opposite v_Vhc)))))) =>
                             zen.Rall abst_T 
                               (v_Vzb:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vac:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vzb v_Vac))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal (abst_opposite v_Vzb) 
                                              (abst_opposite v_Vac)))))) 
                               v_Vfc 
                               (v_Vpc:
                                (zen.proof 
                                   (zen.forall abst_T 
                                      (v_Vac:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vfc v_Vac))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_opposite v_Vfc) 
                                                  (abst_opposite v_Vac))))))) =>
                                zen.Rall abst_T 
                                  (v_Vac:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vfc v_Vac))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal (abst_opposite v_Vfc) 
                                              (abst_opposite v_Vac))))) 
                                  v_Vhc 
                                  (v_Vqc:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vfc v_Vhc))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_opposite v_Vfc) 
                                                  (abst_opposite v_Vhc)))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vfc v_Vhc))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal (abst_opposite v_Vfc) 
                                              (abst_opposite v_Vhc)))) 
                                     (v_Vrc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vfc v_Vhc))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vfc v_Vhc))) 
                                        v_Vjc v_Vrc) 
                                     (v_Vsc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_opposite v_Vfc) 
                                                  (abst_opposite v_Vhc))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_opposite v_Vfc) 
                                                 (abst_opposite v_Vhc)))) 
                                        v_Vsc v_Voc) v_Vqc) v_Vpc) 
                               abst_opposite_substitution_rule) 
                            (v_Vtc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus v_Vdc 
                                            (abst_opposite v_Vfc)) 
                                         (abst_plus v_Vdc 
                                            (abst_opposite v_Vhc)))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus v_Vdc 
                                           (abst_opposite v_Vfc)) 
                                        (abst_plus v_Vdc 
                                           (abst_opposite v_Vhc))))) v_Vtc 
                               v_Vkc) v_Vnc) v_Vmc) v_Vlc) 
                   abst_plus_right_substitution_rule) v_Vic) v_Vgc) v_Vec) 
       v_Vcc).

def Ordered_additive_group__is_zero :
  abst_T:cc.uT ->
  abst_sign:((cc.eT abst_T) -> cc.eT basics.int__t) ->
  x:(cc.eT abst_T) -> cc.eT basics.bool__t
  :=
  abst_T:cc.uT =>
  abst_sign:((cc.eT abst_T) -> cc.eT basics.int__t) =>
  x:(cc.eT abst_T) =>
  basics._equal_0x (abst_sign x) (dk_int.from_nat builtins.0).

def Ordered_additive_group__leq :
  abst_T:cc.uT ->
  abst_sign:((cc.eT abst_T) -> cc.eT basics.int__t) ->
  abst_minus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  x:(cc.eT abst_T) -> y:(cc.eT abst_T) -> cc.eT basics.bool__t
  :=
  abst_T:cc.uT =>
  abst_sign:((cc.eT abst_T) -> cc.eT basics.int__t) =>
  abst_minus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  x:(cc.eT abst_T) =>
  y:(cc.eT abst_T) =>
  basics._lt__equal_ (abst_sign (abst_minus x y)) 
    (dk_int.from_nat builtins.0).

def Ordered_additive_group__leq_reflexive :
  abst_T:cc.uT ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T (x:(cc.eT abst_T) => dk_logic.ebP (abst_leq x x)))
  :=
  abst_T:cc.uT =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T (x:(cc.eT abst_T) => dk_logic.ebP (abst_leq x x))).

def Ordered_additive_group__leq_transitive :
  abst_T:cc.uT ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp (dk_logic.ebP (abst_leq x y)) 
                (dk_logic.imp (dk_logic.ebP (abst_leq y z)) 
                   (dk_logic.ebP (abst_leq x z)))))))
  :=
  abst_T:cc.uT =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp (dk_logic.ebP (abst_leq x y)) 
                (dk_logic.imp (dk_logic.ebP (abst_leq y z)) 
                   (dk_logic.ebP (abst_leq x z))))))).

def Ordered_additive_group__order_compatible_with_cancellation :
  abst_T:cc.uT ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp 
                (dk_logic.ebP (abst_leq (abst_plus x z) (abst_plus y z))) 
                (dk_logic.ebP (abst_leq x y))))))
  :=
  abst_T:cc.uT =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp 
                (dk_logic.ebP (abst_leq (abst_plus x z) (abst_plus y z))) 
                (dk_logic.ebP (abst_leq x y)))))).

def Ordered_additive_group__total_order :
  abst_T:cc.uT ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.or (dk_logic.ebP (abst_leq x y)) 
             (dk_logic.ebP (abst_leq y x)))))
  :=
  abst_T:cc.uT =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.or (dk_logic.ebP (abst_leq x y)) 
             (dk_logic.ebP (abst_leq y x))))).

def Ordered_additive_group__leq_antisymmetric :
  abst_T:cc.uT ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_leq x y)) 
             (dk_logic.imp (dk_logic.ebP (abst_leq y x)) 
                (dk_logic.ebP (abst_equal x y))))))
  :=
  abst_T:cc.uT =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_leq x y)) 
             (dk_logic.imp (dk_logic.ebP (abst_leq y x)) 
                (dk_logic.ebP (abst_equal x y)))))).

def Ordered_additive_group__max :
  abst_T:cc.uT ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  x:(cc.eT abst_T) -> y:(cc.eT abst_T) -> cc.eT abst_T
  :=
  abst_T:cc.uT =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  x:(cc.eT abst_T) =>
  y:(cc.eT abst_T) => dk_bool.ite abst_T (abst_lt x y) y x.

def Ordered_additive_group__min :
  abst_T:cc.uT ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  x:(cc.eT abst_T) -> y:(cc.eT abst_T) -> cc.eT abst_T
  :=
  abst_T:cc.uT =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  x:(cc.eT abst_T) =>
  y:(cc.eT abst_T) => dk_bool.ite abst_T (abst_lt x y) x y.

