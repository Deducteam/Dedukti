#NAME rings_fields.

def Ring__zero :
  abst_T:cc.uT ->
  abst_one:(cc.eT abst_T) ->
  abst_minus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  cc.eT abst_T
  :=
  abst_T:cc.uT =>
  abst_one:(cc.eT abst_T) =>
  abst_minus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_minus abst_one abst_one.

def Ring__zero_right_absorbes :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_one:(cc.eT abst_T) ->
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (abst_equal x y)) 
                                   (dk_logic.ebP (abst_equal y x)))))) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_mult_left_distributes_on_plus:(dk_logic.eP 
                                        (dk_logic.forall abst_T 
                                           (x:(cc.eT abst_T) =>
                                            dk_logic.forall abst_T 
                                              (y:(cc.eT abst_T) =>
                                               dk_logic.forall abst_T 
                                                 (z:(cc.eT abst_T) =>
                                                  dk_logic.ebP 
                                                    (abst_equal 
                                                       (abst_mult x 
                                                          (abst_plus y z)) 
                                                       (abst_plus 
                                                          (abst_mult x y) 
                                                          (abst_mult x z)))))))) ->
  abst_mult_right_substitution_rule:(dk_logic.eP 
                                       (dk_logic.forall abst_T 
                                          (x:(cc.eT abst_T) =>
                                           dk_logic.forall abst_T 
                                             (y:(cc.eT abst_T) =>
                                              dk_logic.forall abst_T 
                                                (z:(cc.eT abst_T) =>
                                                 dk_logic.imp 
                                                   (dk_logic.ebP 
                                                      (abst_equal x y)) 
                                                   (dk_logic.ebP 
                                                      (abst_equal 
                                                         (abst_mult z x) 
                                                         (abst_mult z y)))))))) ->
  abst_one_is_right_neutral:(dk_logic.eP 
                               (dk_logic.forall abst_T 
                                  (x:(cc.eT abst_T) =>
                                   dk_logic.ebP 
                                     (abst_equal (abst_mult x abst_one) x)))) ->
  abst_plus_is_associative:(dk_logic.eP 
                              (dk_logic.forall abst_T 
                                 (x:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (y:(cc.eT abst_T) =>
                                     dk_logic.forall abst_T 
                                       (z:(cc.eT abst_T) =>
                                        dk_logic.ebP 
                                          (abst_equal 
                                             (abst_plus x (abst_plus y z)) 
                                             (abst_plus (abst_plus x y) z))))))) ->
  abst_plus_right_substitution_rule:(dk_logic.eP 
                                       (dk_logic.forall abst_T 
                                          (x:(cc.eT abst_T) =>
                                           dk_logic.forall abst_T 
                                             (y:(cc.eT abst_T) =>
                                              dk_logic.forall abst_T 
                                                (z:(cc.eT abst_T) =>
                                                 dk_logic.imp 
                                                   (dk_logic.ebP 
                                                      (abst_equal x y)) 
                                                   (dk_logic.ebP 
                                                      (abst_equal 
                                                         (abst_plus z x) 
                                                         (abst_plus z y)))))))) ->
  abst_zero:(cc.eT abst_T) ->
  abst_plus_left_substitution_rule:(dk_logic.eP 
                                      (dk_logic.forall abst_T 
                                         (x:(cc.eT abst_T) =>
                                          dk_logic.forall abst_T 
                                            (y:(cc.eT abst_T) =>
                                             dk_logic.forall abst_T 
                                               (z:(cc.eT abst_T) =>
                                                dk_logic.imp 
                                                  (dk_logic.ebP 
                                                     (abst_equal x y)) 
                                                  (dk_logic.ebP 
                                                     (abst_equal 
                                                        (abst_plus x z) 
                                                        (abst_plus y z)))))))) ->
  abst_opposite_is_opposite:(dk_logic.eP 
                               (dk_logic.forall abst_T 
                                  (x:(cc.eT abst_T) =>
                                   dk_logic.ebP 
                                     (abst_equal 
                                        (abst_plus x (abst_opposite x)) 
                                        abst_zero)))) ->
  abst_zero_is_neutral:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.and 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus x abst_zero) x)) 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus abst_zero x) x))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.ebP (abst_equal (abst_mult x abst_zero) abst_zero)))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_one:(cc.eT abst_T) =>
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal y x)))))) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_mult_left_distributes_on_plus:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.ebP 
                 (abst_equal (abst_mult x (abst_plus y z)) 
                    (abst_plus (abst_mult x y) (abst_mult x z)))))))) =>
  abst_mult_right_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.ebP (abst_equal (abst_mult z x) (abst_mult z y)))))))) =>
  abst_one_is_right_neutral:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.ebP (abst_equal (abst_mult x abst_one) x)))) =>
  abst_plus_is_associative:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.ebP 
                 (abst_equal (abst_plus x (abst_plus y z)) 
                    (abst_plus (abst_plus x y) z))))))) =>
  abst_plus_right_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.ebP (abst_equal (abst_plus z x) (abst_plus z y)))))))) =>
  abst_zero:(cc.eT abst_T) =>
  abst_plus_left_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.ebP (abst_equal (abst_plus x z) (abst_plus y z)))))))) =>
  abst_opposite_is_opposite:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.ebP (abst_equal (abst_plus x (abst_opposite x)) abst_zero)))) =>
  abst_zero_is_neutral:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.and (dk_logic.ebP (abst_equal (abst_plus x abst_zero) x)) 
           (dk_logic.ebP (abst_equal (abst_plus abst_zero x) x))))) =>
  (__A_1_LEMMA:
   (x:(cc.eT abst_T) ->
    dk_logic.eP (dk_logic.ebP (abst_equal (abst_mult x abst_zero) abst_zero))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.triangle 
           (focal.is_true (abst_equal (abst_mult v_Vzb abst_zero) abst_zero)))) 
     (v_Vac:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.triangle 
                  (focal.is_true 
                     (abst_equal (abst_mult v_Vzb abst_zero) abst_zero)))))) =>
      zen.Raxiom 
        (zen.forall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.triangle 
              (focal.is_true 
                 (abst_equal (abst_mult v_Vzb abst_zero) abst_zero)))) 
        __A_1_LEMMA v_Vac)) 
    (x:(cc.eT abst_T) =>
     (__A_1_0_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (abst_equal (abst_mult x (abst_plus abst_zero abst_one)) x))) =>
      (__A_1_1_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP 
             (abst_equal (abst_plus x (abst_opposite x)) abst_zero))) =>
       (__A_1_2_LEMMA:
        (dk_logic.eP 
           (dk_logic.ebP 
              (abst_equal 
                 (abst_plus (abst_mult x (abst_plus abst_zero abst_one)) 
                    (abst_opposite x)) abst_zero))) =>
        (__A_1_3_LEMMA:
         (dk_logic.eP 
            (dk_logic.ebP 
               (abst_equal 
                  (abst_plus 
                     (abst_plus (abst_mult x abst_zero) 
                        (abst_mult x abst_one)) (abst_opposite x)) abst_zero))) =>
         (__A_1_4_LEMMA:
          (dk_logic.eP 
             (dk_logic.ebP 
                (abst_equal 
                   (abst_plus (abst_mult x abst_zero) 
                      (abst_plus (abst_mult x abst_one) (abst_opposite x))) 
                   abst_zero))) =>
          (__A_1_7_LEMMA:
           (dk_logic.eP 
              (dk_logic.ebP 
                 (abst_equal 
                    (abst_plus (abst_mult x abst_one) (abst_opposite x)) 
                    abst_zero))) =>
           (__A_1_8_LEMMA:
            (dk_logic.eP 
               (dk_logic.ebP 
                  (abst_equal (abst_plus (abst_mult x abst_zero) abst_zero) 
                     abst_zero))) =>
            zen.nnpp 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal (abst_mult x abst_zero) abst_zero))) 
              (v_Vkc:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_mult x abst_zero) abst_zero))))) =>
               zen.Rcut 
                 (zen.and 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal abst_T (abst_mult x abst_zero) 
                             (abst_plus (abst_mult x abst_zero) abst_zero)))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult x abst_zero) 
                                (abst_plus (abst_mult x abst_zero) abst_zero)))))) 
                 (v_Vlc:
                  (zen.proof 
                     (zen.and 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal abst_T (abst_mult x abst_zero) 
                                 (abst_plus (abst_mult x abst_zero) abst_zero)))) 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_mult x abst_zero) 
                                    (abst_plus (abst_mult x abst_zero) 
                                       abst_zero))))))) =>
                  zen.Rand 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal abst_T (abst_mult x abst_zero) 
                             (abst_plus (abst_mult x abst_zero) abst_zero)))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult x abst_zero) 
                                (abst_plus (abst_mult x abst_zero) abst_zero))))) 
                    (v_Vmc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal abst_T (abst_mult x abst_zero) 
                                 (abst_plus (abst_mult x abst_zero) abst_zero))))) =>
                     v_Vnc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_mult x abst_zero) 
                                    (abst_plus (abst_mult x abst_zero) 
                                       abst_zero)))))) =>
                     zen.Rall abst_T 
                       (v_Voc:(zen.term abst_T) =>
                        zen.and 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus v_Voc abst_zero) v_Voc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus abst_zero v_Voc) v_Voc)))) 
                       (abst_mult x abst_zero) 
                       (v_Vpc:
                        (zen.proof 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult x abst_zero) 
                                          abst_zero) (abst_mult x abst_zero)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus abst_zero 
                                          (abst_mult x abst_zero)) 
                                       (abst_mult x abst_zero)))))) =>
                        zen.Rand 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_mult x abst_zero) 
                                      abst_zero) (abst_mult x abst_zero)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus abst_zero 
                                      (abst_mult x abst_zero)) 
                                   (abst_mult x abst_zero)))) 
                          (v_Vqc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult x abst_zero) 
                                          abst_zero) (abst_mult x abst_zero))))) =>
                           v_Vrc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus abst_zero 
                                          (abst_mult x abst_zero)) 
                                       (abst_mult x abst_zero))))) =>
                           zen.Rall abst_T 
                             (v_Voc:(zen.term abst_T) =>
                              zen.forall abst_T 
                                (v_Vsc:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Voc v_Vsc))) 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vsc v_Voc))))) 
                             (abst_plus (abst_mult x abst_zero) abst_zero) 
                             (v_Vtc:
                              (zen.proof 
                                 (zen.forall abst_T 
                                    (v_Vsc:(zen.term abst_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   abst_zero) v_Vsc))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vsc 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   abst_zero))))))) =>
                              zen.Rall abst_T 
                                (v_Vsc:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               abst_zero) v_Vsc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal v_Vsc 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               abst_zero))))) 
                                (abst_mult x abst_zero) 
                                (v_Vuc:
                                 (zen.proof 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   abst_zero) 
                                                (abst_mult x abst_zero)))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_mult x abst_zero) 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   abst_zero)))))) =>
                                 zen.Rimply 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               abst_zero) 
                                            (abst_mult x abst_zero)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_mult x abst_zero) 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               abst_zero)))) 
                                   (v_Vvc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      abst_zero) 
                                                   (abst_mult x abst_zero)))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  abst_zero) 
                                               (abst_mult x abst_zero)))) 
                                      v_Vqc v_Vvc) 
                                   (v_Vwc:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_mult x abst_zero) 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   abst_zero))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult x abst_zero) 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  abst_zero)))) v_Vwc v_Vnc) 
                                   v_Vuc) v_Vtc) abst_equal_symmetric) v_Vpc) 
                       abst_zero_is_neutral) v_Vlc) 
                 (v_Vxc:
                  (zen.proof 
                     (zen.not 
                        (zen.and 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal abst_T (abst_mult x abst_zero) 
                                    (abst_plus (abst_mult x abst_zero) 
                                       abst_zero)))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_mult x abst_zero) 
                                       (abst_plus (abst_mult x abst_zero) 
                                          abst_zero)))))))) =>
                  zen.Rcut 
                    (zen.triangle (zen.equal abst_T abst_zero abst_zero)) 
                    (v_Vyc:
                     (zen.proof 
                        (zen.triangle (zen.equal abst_T abst_zero abst_zero))) =>
                     zen.Rsubst basics.bool__t 
                       (v_Vzc:(zen.term basics.bool__t) =>
                        zen.triangle (focal.is_true v_Vzc)) 
                       (abst_equal 
                          (abst_plus (abst_mult x abst_zero) abst_zero) 
                          abst_zero) 
                       (abst_equal (abst_mult x abst_zero) abst_zero) 
                       (v_Vad:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (abst_equal 
                                       (abst_plus (abst_mult x abst_zero) 
                                          abst_zero) abst_zero) 
                                    (abst_equal (abst_mult x abst_zero) 
                                       abst_zero))))) =>
                        zen.Rsubst abst_T 
                          (v_Vbd:(zen.term abst_T) =>
                           zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (abst_equal v_Vbd abst_zero) 
                                   (abst_equal (abst_mult x abst_zero) 
                                      abst_zero)))) 
                          (abst_plus (abst_mult x abst_zero) abst_zero) 
                          (abst_mult x abst_zero) 
                          (v_Vcd:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal abst_T 
                                       (abst_plus (abst_mult x abst_zero) 
                                          abst_zero) (abst_mult x abst_zero))))) =>
                           zen.Rnotand 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T (abst_mult x abst_zero) 
                                      (abst_plus (abst_mult x abst_zero) 
                                         abst_zero)))) 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_mult x abst_zero) 
                                         (abst_plus (abst_mult x abst_zero) 
                                            abst_zero))))) 
                             (v_Vdd:
                              (zen.proof 
                                 (zen.not 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_mult x abst_zero) 
                                             (abst_plus 
                                                (abst_mult x abst_zero) 
                                                abst_zero)))))) =>
                              zen.Rnotnot 
                                (zen.triangle 
                                   (zen.equal abst_T (abst_mult x abst_zero) 
                                      (abst_plus (abst_mult x abst_zero) 
                                         abst_zero))) 
                                (v_Ved:
                                 (zen.proof 
                                    (zen.triangle 
                                       (zen.equal abst_T 
                                          (abst_mult x abst_zero) 
                                          (abst_plus (abst_mult x abst_zero) 
                                             abst_zero)))) =>
                                 zen.Rcut 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_mult x abst_zero) 
                                         (abst_mult x abst_zero))) 
                                   (v_Vfd:
                                    (zen.proof 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_mult x abst_zero) 
                                             (abst_mult x abst_zero)))) =>
                                    zen.Rsubst abst_T 
                                      (v_Vgd:(zen.term abst_T) =>
                                       zen.triangle 
                                         (zen.equal abst_T v_Vgd 
                                            (abst_mult x abst_zero))) 
                                      (abst_mult x abst_zero) 
                                      (abst_plus (abst_mult x abst_zero) 
                                         abst_zero) 
                                      (v_Vmc:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal abst_T 
                                                   (abst_mult x abst_zero) 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      abst_zero))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_mult x abst_zero) 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  abst_zero))) v_Ved v_Vmc) 
                                      (v_Vhd:
                                       (zen.proof 
                                          (zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   abst_zero) 
                                                (abst_mult x abst_zero)))) =>
                                       zen.Rsubst abst_T 
                                         (v_Vid:(zen.term abst_T) =>
                                          zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  abst_zero) v_Vid)) 
                                         (abst_mult x abst_zero) 
                                         (abst_mult x abst_zero) 
                                         (v_Vjd:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_mult x abst_zero) 
                                                      (abst_mult x abst_zero))))) =>
                                          zen.Rnoteq abst_T 
                                            (abst_mult x abst_zero) v_Vjd) 
                                         (v_Vhd:
                                          (zen.proof 
                                             (zen.triangle 
                                                (zen.equal abst_T 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      abst_zero) 
                                                   (abst_mult x abst_zero)))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus 
                                                     (abst_mult x abst_zero) 
                                                     abst_zero) 
                                                  (abst_mult x abst_zero))) 
                                            v_Vhd v_Vcd) v_Vhd) v_Vfd) 
                                   (v_Vjd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_mult x abst_zero) 
                                                (abst_mult x abst_zero))))) =>
                                    zen.Rnoteq abst_T 
                                      (abst_mult x abst_zero) v_Vjd)) v_Vdd) 
                             (v_Vkd:
                              (zen.proof 
                                 (zen.not 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_mult x abst_zero) 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   abst_zero))))))) =>
                              zen.Rnotnot 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_mult x abst_zero) 
                                         (abst_plus (abst_mult x abst_zero) 
                                            abst_zero)))) 
                                (v_Vwc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_mult x abst_zero) 
                                             (abst_plus 
                                                (abst_mult x abst_zero) 
                                                abst_zero))))) =>
                                 zen.Rall abst_T 
                                   (v_Voc:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Vsc:(zen.term abst_T) =>
                                       zen.forall abst_T 
                                         (v_Vld:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Voc v_Vsc))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vsc v_Vld))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Voc v_Vld))))))) 
                                   (abst_mult x abst_zero) 
                                   (v_Vmd:
                                    (zen.proof 
                                       (zen.forall abst_T 
                                          (v_Vsc:(zen.term abst_T) =>
                                           zen.forall abst_T 
                                             (v_Vld:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_mult x 
                                                            abst_zero) v_Vsc))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal v_Vsc 
                                                            v_Vld))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_mult x 
                                                               abst_zero) 
                                                            v_Vld)))))))) =>
                                    zen.Rall abst_T 
                                      (v_Vsc:(zen.term abst_T) =>
                                       zen.forall abst_T 
                                         (v_Vld:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult x abst_zero) 
                                                     v_Vsc))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vsc v_Vld))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult x 
                                                           abst_zero) v_Vld)))))) 
                                      (abst_plus (abst_mult x abst_zero) 
                                         abst_zero) 
                                      (v_Vnd:
                                       (zen.proof 
                                          (zen.forall abst_T 
                                             (v_Vld:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_mult x 
                                                            abst_zero) 
                                                         (abst_plus 
                                                            (abst_mult x 
                                                               abst_zero) 
                                                            abst_zero)))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               abst_zero) 
                                                            v_Vld))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_mult x 
                                                               abst_zero) 
                                                            v_Vld))))))) =>
                                       zen.Rall abst_T 
                                         (v_Vld:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult x abst_zero) 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        abst_zero)))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           abst_zero) v_Vld))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult x 
                                                           abst_zero) v_Vld))))) 
                                         abst_zero 
                                         (v_Vod:
                                          (zen.proof 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_mult x 
                                                            abst_zero) 
                                                         (abst_plus 
                                                            (abst_mult x 
                                                               abst_zero) 
                                                            abst_zero)))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               abst_zero) 
                                                            abst_zero))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_mult x 
                                                               abst_zero) 
                                                            abst_zero)))))) =>
                                          zen.Rimply 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult x abst_zero) 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        abst_zero)))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           abst_zero) 
                                                        abst_zero))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        abst_zero)))) 
                                            (v_Vnc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_mult x 
                                                               abst_zero) 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               abst_zero)))))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           abst_zero)))) 
                                               v_Vwc v_Vnc) 
                                            (v_Vpd:
                                             (zen.proof 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               abst_zero) 
                                                            abst_zero))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_mult x 
                                                               abst_zero) 
                                                            abst_zero))))) =>
                                             zen.Rimply 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           abst_zero) 
                                                        abst_zero))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        abst_zero))) 
                                               (v_Vqd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  abst_zero) 
                                                               abst_zero))))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              abst_zero) 
                                                           abst_zero))) 
                                                  __A_1_8_LEMMA v_Vqd) 
                                               (v_Vrd:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_mult x 
                                                               abst_zero) 
                                                            abst_zero)))) =>
                                                zen.Rsubst basics.bool__t 
                                                  (v_Vzc:
                                                   (zen.term basics.bool__t) =>
                                                   zen.triangle 
                                                     (focal.is_true v_Vzc)) 
                                                  (abst_equal 
                                                     (abst_mult x abst_zero) 
                                                     abst_zero) 
                                                  (abst_equal 
                                                     (abst_mult x abst_zero) 
                                                     abst_zero) 
                                                  (v_Vsd:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (abst_equal 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  abst_zero) 
                                                               (abst_equal 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  abst_zero))))) =>
                                                   zen.Rsubst abst_T 
                                                     (v_Vbd:
                                                      (zen.term abst_T) =>
                                                      zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 v_Vbd 
                                                                 abst_zero) 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                 abst_zero)))) 
                                                     (abst_mult x abst_zero) 
                                                     (abst_mult x abst_zero) 
                                                     (v_Vjd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero))))) =>
                                                      zen.Rnoteq abst_T 
                                                        (abst_mult x 
                                                           abst_zero) v_Vjd) 
                                                     (v_Vsd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero))))) =>
                                                      zen.Rsubst abst_T 
                                                        (v_Vtd:
                                                         (zen.term abst_T) =>
                                                         zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    v_Vtd) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero)))) 
                                                        abst_zero abst_zero 
                                                        (v_Vud:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    abst_T 
                                                                    abst_zero 
                                                                    abst_zero)))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 abst_zero 
                                                                 abst_zero)) 
                                                           v_Vyc v_Vud) 
                                                        (v_Vsd:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero))))) =>
                                                         zen.Rnoteq 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              abst_zero) 
                                                           v_Vsd) v_Vsd) 
                                                     v_Vsd) 
                                                  (v_Vrd:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               abst_zero)))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              abst_zero))) 
                                                     v_Vrd v_Vkc) v_Vrd) 
                                               v_Vpd) v_Vod) v_Vnd) v_Vmd) 
                                   abst_equal_transitive) v_Vkd) v_Vxc) 
                          (v_Vsd:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal basics.bool__t 
                                       (abst_equal (abst_mult x abst_zero) 
                                          abst_zero) 
                                       (abst_equal (abst_mult x abst_zero) 
                                          abst_zero))))) =>
                           zen.Rsubst abst_T 
                             (v_Vtd:(zen.term abst_T) =>
                              zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_equal (abst_mult x abst_zero) 
                                         v_Vtd) 
                                      (abst_equal (abst_mult x abst_zero) 
                                         abst_zero)))) abst_zero abst_zero 
                             (v_Vud:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal abst_T abst_zero abst_zero)))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (zen.equal abst_T abst_zero abst_zero)) 
                                v_Vyc v_Vud) 
                             (v_Vsd:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal basics.bool__t 
                                          (abst_equal 
                                             (abst_mult x abst_zero) 
                                             abst_zero) 
                                          (abst_equal 
                                             (abst_mult x abst_zero) 
                                             abst_zero))))) =>
                              zen.Rnoteq basics.bool__t 
                                (abst_equal (abst_mult x abst_zero) abst_zero) 
                                v_Vsd) v_Vsd) v_Vad) 
                       (v_Vrd:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_mult x abst_zero) 
                                    abst_zero)))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult x abst_zero) abst_zero))) 
                          v_Vrd v_Vkc) __A_1_8_LEMMA) 
                    (v_Vud:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal abst_T abst_zero abst_zero)))) =>
                     zen.Rcut 
                       (zen.triangle 
                          (focal.is_true (abst_equal abst_zero abst_zero))) 
                       (v_Vvd:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true (abst_equal abst_zero abst_zero)))) =>
                        zen.Rall abst_T 
                          (v_Voc:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vsc:(zen.term abst_T) =>
                              zen.forall abst_T 
                                (v_Vld:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Voc v_Vsc))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vsc v_Vld))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Voc v_Vld))))))) 
                          (abst_plus (abst_mult x abst_zero) abst_zero) 
                          (v_Vwd:
                           (zen.proof 
                              (zen.forall abst_T 
                                 (v_Vsc:(zen.term abst_T) =>
                                  zen.forall abst_T 
                                    (v_Vld:(zen.term abst_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   abst_zero) v_Vsc))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal v_Vsc v_Vld))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      abst_zero) v_Vld)))))))) =>
                           zen.Rall abst_T 
                             (v_Vsc:(zen.term abst_T) =>
                              zen.forall abst_T 
                                (v_Vld:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               abst_zero) v_Vsc))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vsc v_Vld))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  abst_zero) v_Vld)))))) 
                             abst_zero 
                             (v_Vxd:
                              (zen.proof 
                                 (zen.forall abst_T 
                                    (v_Vld:(zen.term abst_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   abst_zero) abst_zero))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal abst_zero v_Vld))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      abst_zero) v_Vld))))))) =>
                              zen.Rall abst_T 
                                (v_Vld:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               abst_zero) abst_zero))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal abst_zero v_Vld))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  abst_zero) v_Vld))))) 
                                abst_zero 
                                (v_Vyd:
                                 (zen.proof 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   abst_zero) abst_zero))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal abst_zero 
                                                   abst_zero))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      abst_zero) abst_zero)))))) =>
                                 zen.Rimply 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               abst_zero) abst_zero))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal abst_zero abst_zero))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  abst_zero) abst_zero)))) 
                                   (v_Vqd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      abst_zero) abst_zero))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  abst_zero) abst_zero))) 
                                      __A_1_8_LEMMA v_Vqd) 
                                   (v_Vzd:
                                    (zen.proof 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal abst_zero 
                                                   abst_zero))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      abst_zero) abst_zero))))) =>
                                    zen.Rimply 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal abst_zero abst_zero))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  abst_zero) abst_zero))) 
                                      (v_Vae:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal abst_zero 
                                                      abst_zero))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal abst_zero 
                                                  abst_zero))) v_Vvd v_Vae) 
                                      (__A_1_8_LEMMA:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      abst_zero) abst_zero)))) =>
                                       zen.Rsubst basics.bool__t 
                                         (v_Vzc:(zen.term basics.bool__t) =>
                                          zen.triangle (focal.is_true v_Vzc)) 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               abst_zero) abst_zero) 
                                         (abst_equal (abst_mult x abst_zero) 
                                            abst_zero) 
                                         (v_Vad:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_mult x 
                                                               abst_zero) 
                                                            abst_zero) 
                                                         abst_zero) 
                                                      (abst_equal 
                                                         (abst_mult x 
                                                            abst_zero) 
                                                         abst_zero))))) =>
                                          zen.Rsubst abst_T 
                                            (v_Vbd:(zen.term abst_T) =>
                                             zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal v_Vbd 
                                                        abst_zero) 
                                                     (abst_equal 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        abst_zero)))) 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               abst_zero) 
                                            (abst_mult x abst_zero) 
                                            (v_Vcd:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         (abst_plus 
                                                            (abst_mult x 
                                                               abst_zero) 
                                                            abst_zero) 
                                                         (abst_mult x 
                                                            abst_zero))))) =>
                                             zen.Rnotand 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           abst_zero)))) 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              abst_zero))))) 
                                               (v_Vdd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  abst_zero)))))) =>
                                                zen.Rnotnot 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           abst_zero))) 
                                                  (v_Ved:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            (abst_mult x 
                                                               abst_zero) 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               abst_zero)))) =>
                                                   zen.Reqsym abst_T 
                                                     (abst_mult x abst_zero) 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        abst_zero) v_Ved 
                                                     v_Vcd) v_Vdd) 
                                               (v_Vkd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero))))))) =>
                                                zen.Rnotnot 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              abst_zero)))) 
                                                  (v_Vwc:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  abst_zero))))) =>
                                                   zen.Rall abst_T 
                                                     (v_Voc:
                                                      (zen.term abst_T) =>
                                                      zen.forall abst_T 
                                                        (v_Vsc:
                                                         (zen.term abst_T) =>
                                                         zen.forall abst_T 
                                                           (v_Vld:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vsc 
                                                                    v_Vld))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vld))))))) 
                                                     (abst_mult x abst_zero) 
                                                     (v_Vmd:
                                                      (zen.proof 
                                                         (zen.forall abst_T 
                                                            (v_Vsc:
                                                             (zen.term abst_T) =>
                                                             zen.forall 
                                                               abst_T 
                                                               (v_Vld:
                                                                (zen.term 
                                                                   abst_T) =>
                                                                zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    v_Vsc))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vsc 
                                                                    v_Vld))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    v_Vld)))))))) =>
                                                      zen.Rall abst_T 
                                                        (v_Vsc:
                                                         (zen.term abst_T) =>
                                                         zen.forall abst_T 
                                                           (v_Vld:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    v_Vsc))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vsc 
                                                                    v_Vld))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    v_Vld)))))) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           abst_zero) 
                                                        (v_Vnd:
                                                         (zen.proof 
                                                            (zen.forall 
                                                               abst_T 
                                                               (v_Vld:
                                                                (zen.term 
                                                                   abst_T) =>
                                                                zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero)))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    v_Vld))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    v_Vld))))))) =>
                                                         zen.Rall abst_T 
                                                           (v_Vld:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero)))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    v_Vld))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    v_Vld))))) 
                                                           abst_zero 
                                                           (v_Vod:
                                                            (zen.proof 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero)))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero)))))) =>
                                                            zen.Rimply 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero)))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero)))) 
                                                              (v_Vnc:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero)))))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero)))) 
                                                                 v_Vwc v_Vnc) 
                                                              (v_Vpd:
                                                               (zen.proof 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero))))) =>
                                                               zen.Rimply 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero))) 
                                                                 (v_Vqd:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero))))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero))) 
                                                                    __A_1_8_LEMMA 
                                                                    v_Vqd) 
                                                                 (v_Vrd:
                                                                  (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero)))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero))) 
                                                                    v_Vrd 
                                                                    v_Vkc) 
                                                                 v_Vpd) v_Vod) 
                                                           v_Vnd) v_Vmd) 
                                                     abst_equal_transitive) 
                                                  v_Vkd) v_Vxc) 
                                            (v_Vsd:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         basics.bool__t 
                                                         (abst_equal 
                                                            (abst_mult x 
                                                               abst_zero) 
                                                            abst_zero) 
                                                         (abst_equal 
                                                            (abst_mult x 
                                                               abst_zero) 
                                                            abst_zero))))) =>
                                             zen.Rsubst abst_T 
                                               (v_Vtd:(zen.term abst_T) =>
                                                zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           v_Vtd) 
                                                        (abst_equal 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           abst_zero)))) 
                                               abst_zero abst_zero 
                                               (v_Vud:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            abst_zero 
                                                            abst_zero)))) =>
                                                zen.Rnoteq abst_T abst_zero 
                                                  v_Vud) 
                                               (v_Vsd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (abst_equal 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               abst_zero) 
                                                            (abst_equal 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               abst_zero))))) =>
                                                zen.Rnoteq basics.bool__t 
                                                  (abst_equal 
                                                     (abst_mult x abst_zero) 
                                                     abst_zero) v_Vsd) v_Vsd) 
                                            v_Vad) 
                                         (v_Vrd:
                                          (zen.proof 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult x abst_zero) 
                                                      abst_zero)))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult x abst_zero) 
                                                     abst_zero))) v_Vrd v_Vkc) 
                                         __A_1_8_LEMMA) v_Vzd) v_Vyd) v_Vxd) 
                             v_Vwd) abst_equal_transitive) 
                       (v_Vae:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal abst_zero abst_zero))))) =>
                        zen.Rnoteq abst_T abst_zero v_Vud))))) 
             (zen.nnpp 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal 
                         (abst_plus (abst_mult x abst_zero) abst_zero) 
                         abst_zero))) 
                (v_Vkc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus (abst_mult x abst_zero) abst_zero) 
                                abst_zero))))) =>
                 zen.Rcut 
                   (zen.and 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal abst_T 
                               (abst_plus (abst_mult x abst_zero) abst_zero) 
                               (abst_plus (abst_mult x abst_zero) 
                                  (abst_plus (abst_mult x abst_one) 
                                     (abst_opposite x)))))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_mult x abst_zero) 
                                     abst_zero) 
                                  (abst_plus (abst_mult x abst_zero) 
                                     (abst_plus (abst_mult x abst_one) 
                                        (abst_opposite x)))))))) 
                   (v_Vlc:
                    (zen.proof 
                       (zen.and 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal abst_T 
                                   (abst_plus (abst_mult x abst_zero) 
                                      abst_zero) 
                                   (abst_plus (abst_mult x abst_zero) 
                                      (abst_plus (abst_mult x abst_one) 
                                         (abst_opposite x)))))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_mult x abst_zero) 
                                         abst_zero) 
                                      (abst_plus (abst_mult x abst_zero) 
                                         (abst_plus (abst_mult x abst_one) 
                                            (abst_opposite x))))))))) =>
                    zen.Rand 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal abst_T 
                               (abst_plus (abst_mult x abst_zero) abst_zero) 
                               (abst_plus (abst_mult x abst_zero) 
                                  (abst_plus (abst_mult x abst_one) 
                                     (abst_opposite x)))))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_mult x abst_zero) 
                                     abst_zero) 
                                  (abst_plus (abst_mult x abst_zero) 
                                     (abst_plus (abst_mult x abst_one) 
                                        (abst_opposite x))))))) 
                      (v_Vmc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal abst_T 
                                   (abst_plus (abst_mult x abst_zero) 
                                      abst_zero) 
                                   (abst_plus (abst_mult x abst_zero) 
                                      (abst_plus (abst_mult x abst_one) 
                                         (abst_opposite x))))))) =>
                       v_Vnc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_mult x abst_zero) 
                                         abst_zero) 
                                      (abst_plus (abst_mult x abst_zero) 
                                         (abst_plus (abst_mult x abst_one) 
                                            (abst_opposite x)))))))) =>
                       zen.Rall abst_T 
                         (v_Voc:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vpc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vqc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Voc v_Vpc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_plus v_Vqc v_Voc) 
                                           (abst_plus v_Vqc v_Vpc))))))) 
                         abst_zero 
                         (v_Vrc:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vpc:(zen.term abst_T) =>
                                 zen.forall abst_T 
                                   (v_Vqc:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal abst_zero v_Vpc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus v_Vqc abst_zero) 
                                               (abst_plus v_Vqc v_Vpc)))))))) =>
                          zen.Rall abst_T 
                            (v_Vpc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vqc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal abst_zero v_Vpc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus v_Vqc abst_zero) 
                                           (abst_plus v_Vqc v_Vpc)))))) 
                            (abst_plus (abst_mult x abst_one) 
                               (abst_opposite x)) 
                            (v_Vsc:
                             (zen.proof 
                                (zen.forall abst_T 
                                   (v_Vqc:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal abst_zero 
                                               (abst_plus 
                                                  (abst_mult x abst_one) 
                                                  (abst_opposite x))))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus v_Vqc abst_zero) 
                                               (abst_plus v_Vqc 
                                                  (abst_plus 
                                                     (abst_mult x abst_one) 
                                                     (abst_opposite x))))))))) =>
                             zen.Rall abst_T 
                               (v_Vqc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal abst_zero 
                                           (abst_plus (abst_mult x abst_one) 
                                              (abst_opposite x))))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus v_Vqc abst_zero) 
                                           (abst_plus v_Vqc 
                                              (abst_plus 
                                                 (abst_mult x abst_one) 
                                                 (abst_opposite x))))))) 
                               (abst_mult x abst_zero) 
                               (v_Vtc:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal abst_zero 
                                               (abst_plus 
                                                  (abst_mult x abst_one) 
                                                  (abst_opposite x))))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  abst_zero) 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  (abst_plus 
                                                     (abst_mult x abst_one) 
                                                     (abst_opposite x)))))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal abst_zero 
                                           (abst_plus (abst_mult x abst_one) 
                                              (abst_opposite x))))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult x abst_zero) 
                                              abst_zero) 
                                           (abst_plus 
                                              (abst_mult x abst_zero) 
                                              (abst_plus 
                                                 (abst_mult x abst_one) 
                                                 (abst_opposite x)))))) 
                                  (v_Vuc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal abst_zero 
                                                  (abst_plus 
                                                     (abst_mult x abst_one) 
                                                     (abst_opposite x))))))) =>
                                   zen.Rall abst_T 
                                     (v_Voc:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vpc:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Voc v_Vpc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vpc v_Voc))))) 
                                     (abst_plus (abst_mult x abst_one) 
                                        (abst_opposite x)) 
                                     (v_Vvc:
                                      (zen.proof 
                                         (zen.forall abst_T 
                                            (v_Vpc:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_one) 
                                                           (abst_opposite x)) 
                                                        v_Vpc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vpc 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_one) 
                                                           (abst_opposite x)))))))) =>
                                      zen.Rall abst_T 
                                        (v_Vpc:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult x abst_one) 
                                                       (abst_opposite x)) 
                                                    v_Vpc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vpc 
                                                    (abst_plus 
                                                       (abst_mult x abst_one) 
                                                       (abst_opposite x)))))) 
                                        abst_zero 
                                        (v_Vwc:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_one) 
                                                           (abst_opposite x)) 
                                                        abst_zero))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal abst_zero 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_one) 
                                                           (abst_opposite x))))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult x abst_one) 
                                                       (abst_opposite x)) 
                                                    abst_zero))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal abst_zero 
                                                    (abst_plus 
                                                       (abst_mult x abst_one) 
                                                       (abst_opposite x))))) 
                                           (v_Vxc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_one) 
                                                              (abst_opposite 
                                                                 x)) 
                                                           abst_zero))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             abst_one) 
                                                          (abst_opposite x)) 
                                                       abst_zero))) 
                                              __A_1_7_LEMMA v_Vxc) 
                                           (v_Vyc:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal abst_zero 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_one) 
                                                           (abst_opposite x)))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal abst_zero 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             abst_one) 
                                                          (abst_opposite x))))) 
                                              v_Vyc v_Vuc) v_Vwc) v_Vvc) 
                                     abst_equal_symmetric) 
                                  (v_Vzc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  abst_zero) 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  (abst_plus 
                                                     (abst_mult x abst_one) 
                                                     (abst_opposite x))))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus 
                                                 (abst_mult x abst_zero) 
                                                 abst_zero) 
                                              (abst_plus 
                                                 (abst_mult x abst_zero) 
                                                 (abst_plus 
                                                    (abst_mult x abst_one) 
                                                    (abst_opposite x)))))) 
                                     v_Vzc v_Vnc) v_Vtc) v_Vsc) v_Vrc) 
                         abst_plus_right_substitution_rule) v_Vlc) 
                   (v_Vad:
                    (zen.proof 
                       (zen.not 
                          (zen.and 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_plus (abst_mult x abst_zero) 
                                         abst_zero) 
                                      (abst_plus (abst_mult x abst_zero) 
                                         (abst_plus (abst_mult x abst_one) 
                                            (abst_opposite x)))))) 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus (abst_mult x abst_zero) 
                                            abst_zero) 
                                         (abst_plus (abst_mult x abst_zero) 
                                            (abst_plus 
                                               (abst_mult x abst_one) 
                                               (abst_opposite x)))))))))) =>
                    zen.Rcut 
                      (zen.triangle (zen.equal abst_T abst_zero abst_zero)) 
                      (v_Vbd:
                       (zen.proof 
                          (zen.triangle 
                             (zen.equal abst_T abst_zero abst_zero))) =>
                       zen.Rsubst basics.bool__t 
                         (v_Vcd:(zen.term basics.bool__t) =>
                          zen.triangle (focal.is_true v_Vcd)) 
                         (abst_equal 
                            (abst_plus (abst_mult x abst_zero) 
                               (abst_plus (abst_mult x abst_one) 
                                  (abst_opposite x))) abst_zero) 
                         (abst_equal 
                            (abst_plus (abst_mult x abst_zero) abst_zero) 
                            abst_zero) 
                         (v_Vdd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_equal 
                                         (abst_plus (abst_mult x abst_zero) 
                                            (abst_plus 
                                               (abst_mult x abst_one) 
                                               (abst_opposite x))) abst_zero) 
                                      (abst_equal 
                                         (abst_plus (abst_mult x abst_zero) 
                                            abst_zero) abst_zero))))) =>
                          zen.Rsubst abst_T 
                            (v_Ved:(zen.term abst_T) =>
                             zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (abst_equal v_Ved abst_zero) 
                                     (abst_equal 
                                        (abst_plus (abst_mult x abst_zero) 
                                           abst_zero) abst_zero)))) 
                            (abst_plus (abst_mult x abst_zero) 
                               (abst_plus (abst_mult x abst_one) 
                                  (abst_opposite x))) 
                            (abst_plus (abst_mult x abst_zero) abst_zero) 
                            (v_Vfd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_plus (abst_mult x abst_zero) 
                                            (abst_plus 
                                               (abst_mult x abst_one) 
                                               (abst_opposite x))) 
                                         (abst_plus (abst_mult x abst_zero) 
                                            abst_zero))))) =>
                             zen.Rnotand 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_plus (abst_mult x abst_zero) 
                                           abst_zero) 
                                        (abst_plus (abst_mult x abst_zero) 
                                           (abst_plus (abst_mult x abst_one) 
                                              (abst_opposite x)))))) 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult x abst_zero) 
                                              abst_zero) 
                                           (abst_plus 
                                              (abst_mult x abst_zero) 
                                              (abst_plus 
                                                 (abst_mult x abst_one) 
                                                 (abst_opposite x))))))) 
                               (v_Vgd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  abst_zero) 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  (abst_plus 
                                                     (abst_mult x abst_one) 
                                                     (abst_opposite x)))))))) =>
                                zen.Rnotnot 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_plus (abst_mult x abst_zero) 
                                           abst_zero) 
                                        (abst_plus (abst_mult x abst_zero) 
                                           (abst_plus (abst_mult x abst_one) 
                                              (abst_opposite x))))) 
                                  (v_Vhd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               abst_zero) 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               (abst_plus 
                                                  (abst_mult x abst_one) 
                                                  (abst_opposite x)))))) =>
                                   zen.Rcut 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_plus 
                                              (abst_mult x abst_zero) 
                                              abst_zero) 
                                           (abst_plus 
                                              (abst_mult x abst_zero) 
                                              abst_zero))) 
                                     (v_Vid:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  abst_zero) 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  abst_zero)))) =>
                                      zen.Rsubst abst_T 
                                        (v_Vjd:(zen.term abst_T) =>
                                         zen.triangle 
                                           (zen.equal abst_T v_Vjd 
                                              (abst_plus 
                                                 (abst_mult x abst_zero) 
                                                 abst_zero))) 
                                        (abst_plus (abst_mult x abst_zero) 
                                           abst_zero) 
                                        (abst_plus (abst_mult x abst_zero) 
                                           (abst_plus (abst_mult x abst_one) 
                                              (abst_opposite x))) 
                                        (v_Vmc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        abst_zero) 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_one) 
                                                           (abst_opposite x))))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus 
                                                    (abst_mult x abst_zero) 
                                                    abst_zero) 
                                                 (abst_plus 
                                                    (abst_mult x abst_zero) 
                                                    (abst_plus 
                                                       (abst_mult x abst_one) 
                                                       (abst_opposite x))))) 
                                           v_Vhd v_Vmc) 
                                        (v_Vkd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus 
                                                     (abst_mult x abst_zero) 
                                                     (abst_plus 
                                                        (abst_mult x abst_one) 
                                                        (abst_opposite x))) 
                                                  (abst_plus 
                                                     (abst_mult x abst_zero) 
                                                     abst_zero)))) =>
                                         zen.Rsubst abst_T 
                                           (v_Vld:(zen.term abst_T) =>
                                            zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus 
                                                    (abst_mult x abst_zero) 
                                                    (abst_plus 
                                                       (abst_mult x abst_one) 
                                                       (abst_opposite x))) 
                                                 v_Vld)) 
                                           (abst_plus 
                                              (abst_mult x abst_zero) 
                                              abst_zero) 
                                           (abst_plus 
                                              (abst_mult x abst_zero) 
                                              abst_zero) 
                                           (v_Vmd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           abst_zero) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           abst_zero))))) =>
                                            zen.Rnoteq abst_T 
                                              (abst_plus 
                                                 (abst_mult x abst_zero) 
                                                 abst_zero) v_Vmd) 
                                           (v_Vkd:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_one) 
                                                           (abst_opposite x))) 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        abst_zero)))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_plus 
                                                       (abst_mult x abst_zero) 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             abst_one) 
                                                          (abst_opposite x))) 
                                                    (abst_plus 
                                                       (abst_mult x abst_zero) 
                                                       abst_zero))) v_Vkd 
                                              v_Vfd) v_Vkd) v_Vid) 
                                     (v_Vmd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus 
                                                     (abst_mult x abst_zero) 
                                                     abst_zero) 
                                                  (abst_plus 
                                                     (abst_mult x abst_zero) 
                                                     abst_zero))))) =>
                                      zen.Rnoteq abst_T 
                                        (abst_plus (abst_mult x abst_zero) 
                                           abst_zero) v_Vmd)) v_Vgd) 
                               (v_Vnd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus 
                                                     (abst_mult x abst_zero) 
                                                     abst_zero) 
                                                  (abst_plus 
                                                     (abst_mult x abst_zero) 
                                                     (abst_plus 
                                                        (abst_mult x abst_one) 
                                                        (abst_opposite x))))))))) =>
                                zen.Rnotnot 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult x abst_zero) 
                                              abst_zero) 
                                           (abst_plus 
                                              (abst_mult x abst_zero) 
                                              (abst_plus 
                                                 (abst_mult x abst_one) 
                                                 (abst_opposite x)))))) 
                                  (v_Vzc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  abst_zero) 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  (abst_plus 
                                                     (abst_mult x abst_one) 
                                                     (abst_opposite x))))))) =>
                                   zen.Rall abst_T 
                                     (v_Voc:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vpc:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vqc:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Voc v_Vpc))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vpc 
                                                          v_Vqc))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Voc 
                                                          v_Vqc))))))) 
                                     (abst_plus (abst_mult x abst_zero) 
                                        abst_zero) 
                                     (v_Vod:
                                      (zen.proof 
                                         (zen.forall abst_T 
                                            (v_Vpc:(zen.term abst_T) =>
                                             zen.forall abst_T 
                                               (v_Vqc:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              abst_zero) 
                                                           v_Vpc))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Vpc 
                                                              v_Vqc))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                 abst_zero) 
                                                              v_Vqc)))))))) =>
                                      zen.Rall abst_T 
                                        (v_Vpc:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vqc:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             abst_zero) 
                                                          abst_zero) v_Vpc))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vpc 
                                                          v_Vqc))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_zero) 
                                                             abst_zero) v_Vqc)))))) 
                                        (abst_plus (abst_mult x abst_zero) 
                                           (abst_plus (abst_mult x abst_one) 
                                              (abst_opposite x))) 
                                        (v_Vpd:
                                         (zen.proof 
                                            (zen.forall abst_T 
                                               (v_Vqc:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              abst_zero) 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                 (abst_opposite 
                                                                    x)))))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (
                                                                    abst_opposite 
                                                                    x))) 
                                                              v_Vqc))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                 abst_zero) 
                                                              v_Vqc))))))) =>
                                         zen.Rall abst_T 
                                           (v_Vqc:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             abst_zero) 
                                                          abst_zero) 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             abst_zero) 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_one) 
                                                             (abst_opposite x)))))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_zero) 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   abst_one) 
                                                                (abst_opposite 
                                                                   x))) v_Vqc))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_zero) 
                                                             abst_zero) v_Vqc))))) 
                                           abst_zero 
                                           (v_Vqd:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              abst_zero) 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                 (abst_opposite 
                                                                    x)))))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (
                                                                    abst_opposite 
                                                                    x))) 
                                                              abst_zero))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                 abst_zero) 
                                                              abst_zero)))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             abst_zero) 
                                                          abst_zero) 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             abst_zero) 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_one) 
                                                             (abst_opposite x)))))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_zero) 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   abst_one) 
                                                                (abst_opposite 
                                                                   x))) 
                                                          abst_zero))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_zero) 
                                                             abst_zero) 
                                                          abst_zero)))) 
                                              (v_Vnc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                 abst_zero) 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (
                                                                    abst_opposite 
                                                                    x)))))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_zero) 
                                                             abst_zero) 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_zero) 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   abst_one) 
                                                                (abst_opposite 
                                                                   x)))))) 
                                                 v_Vzc v_Vnc) 
                                              (v_Vrd:
                                               (zen.proof 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (
                                                                    abst_opposite 
                                                                    x))) 
                                                              abst_zero))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                 abst_zero) 
                                                              abst_zero))))) =>
                                               zen.Rimply 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_zero) 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   abst_one) 
                                                                (abst_opposite 
                                                                   x))) 
                                                          abst_zero))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_zero) 
                                                             abst_zero) 
                                                          abst_zero))) 
                                                 (v_Vsd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                 abst_zero))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   abst_zero) 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                   (abst_opposite 
                                                                    x))) 
                                                             abst_zero))) 
                                                    __A_1_4_LEMMA v_Vsd) 
                                                 (v_Vtd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                 abst_zero) 
                                                              abst_zero)))) =>
                                                  zen.Rsubst basics.bool__t 
                                                    (v_Vcd:
                                                     (zen.term basics.bool__t) =>
                                                     zen.triangle 
                                                       (focal.is_true v_Vcd)) 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             abst_zero) 
                                                          abst_zero) 
                                                       abst_zero) 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             abst_zero) 
                                                          abst_zero) 
                                                       abst_zero) 
                                                    (v_Vud:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero))))) =>
                                                     zen.Rsubst abst_T 
                                                       (v_Ved:
                                                        (zen.term abst_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   v_Ved 
                                                                   abst_zero) 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                   abst_zero)))) 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             abst_zero) 
                                                          abst_zero) 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             abst_zero) 
                                                          abst_zero) 
                                                       (v_Vmd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero))))) =>
                                                        zen.Rnoteq abst_T 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_zero) 
                                                             abst_zero) v_Vmd) 
                                                       (v_Vud:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero))))) =>
                                                        zen.Rsubst abst_T 
                                                          (v_Vvd:
                                                           (zen.term abst_T) =>
                                                           zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    v_Vvd) 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero)))) 
                                                          abst_zero 
                                                          abst_zero 
                                                          (v_Vwd:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    abst_zero 
                                                                    abst_zero)))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   abst_zero 
                                                                   abst_zero)) 
                                                             v_Vbd v_Vwd) 
                                                          (v_Vud:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero))))) =>
                                                           zen.Rnoteq 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                   abst_zero) 
                                                                abst_zero) 
                                                             v_Vud) v_Vud) 
                                                       v_Vud) 
                                                    (v_Vtd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                 abst_zero)))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                   abst_zero) 
                                                                abst_zero))) 
                                                       v_Vtd v_Vkc) v_Vtd) 
                                                 v_Vrd) v_Vqd) v_Vpd) v_Vod) 
                                     abst_equal_transitive) v_Vnd) v_Vad) 
                            (v_Vud:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               abst_zero) abst_zero) 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               abst_zero) abst_zero))))) =>
                             zen.Rsubst abst_T 
                               (v_Vvd:(zen.term abst_T) =>
                                zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult x abst_zero) 
                                              abst_zero) v_Vvd) 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult x abst_zero) 
                                              abst_zero) abst_zero)))) 
                               abst_zero abst_zero 
                               (v_Vwd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T abst_zero 
                                            abst_zero)))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (zen.equal abst_T abst_zero abst_zero)) 
                                  v_Vbd v_Vwd) 
                               (v_Vud:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  abst_zero) abst_zero) 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  abst_zero) abst_zero))))) =>
                                zen.Rnoteq basics.bool__t 
                                  (abst_equal 
                                     (abst_plus (abst_mult x abst_zero) 
                                        abst_zero) abst_zero) v_Vud) v_Vud) 
                            v_Vdd) 
                         (v_Vtd:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_mult x abst_zero) 
                                         abst_zero) abst_zero)))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus (abst_mult x abst_zero) 
                                        abst_zero) abst_zero))) v_Vtd v_Vkc) 
                         __A_1_4_LEMMA) 
                      (v_Vwd:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal abst_T abst_zero abst_zero)))) =>
                       zen.Rcut 
                         (zen.triangle 
                            (focal.is_true (abst_equal abst_zero abst_zero))) 
                         (v_Vxd:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal abst_zero abst_zero)))) =>
                          zen.Rall abst_T 
                            (v_Voc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vpc:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vqc:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Voc v_Vpc))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vpc v_Vqc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Voc v_Vqc))))))) 
                            (abst_plus (abst_mult x abst_zero) 
                               (abst_plus (abst_mult x abst_one) 
                                  (abst_opposite x))) 
                            (v_Vyd:
                             (zen.proof 
                                (zen.forall abst_T 
                                   (v_Vpc:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Vqc:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus 
                                                     (abst_mult x abst_zero) 
                                                     (abst_plus 
                                                        (abst_mult x abst_one) 
                                                        (abst_opposite x))) 
                                                  v_Vpc))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vpc v_Vqc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_one) 
                                                           (abst_opposite x))) 
                                                     v_Vqc)))))))) =>
                             zen.Rall abst_T 
                               (v_Vpc:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vqc:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus 
                                                 (abst_mult x abst_zero) 
                                                 (abst_plus 
                                                    (abst_mult x abst_one) 
                                                    (abst_opposite x))) v_Vpc))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vpc v_Vqc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus 
                                                    (abst_mult x abst_zero) 
                                                    (abst_plus 
                                                       (abst_mult x abst_one) 
                                                       (abst_opposite x))) 
                                                 v_Vqc)))))) abst_zero 
                               (v_Vzd:
                                (zen.proof 
                                   (zen.forall abst_T 
                                      (v_Vqc:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus 
                                                     (abst_mult x abst_zero) 
                                                     (abst_plus 
                                                        (abst_mult x abst_one) 
                                                        (abst_opposite x))) 
                                                  abst_zero))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal abst_zero v_Vqc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_one) 
                                                           (abst_opposite x))) 
                                                     v_Vqc))))))) =>
                                zen.Rall abst_T 
                                  (v_Vqc:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus 
                                                 (abst_mult x abst_zero) 
                                                 (abst_plus 
                                                    (abst_mult x abst_one) 
                                                    (abst_opposite x))) 
                                              abst_zero))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal abst_zero v_Vqc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus 
                                                    (abst_mult x abst_zero) 
                                                    (abst_plus 
                                                       (abst_mult x abst_one) 
                                                       (abst_opposite x))) 
                                                 v_Vqc))))) abst_zero 
                                  (v_Vae:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus 
                                                     (abst_mult x abst_zero) 
                                                     (abst_plus 
                                                        (abst_mult x abst_one) 
                                                        (abst_opposite x))) 
                                                  abst_zero))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal abst_zero 
                                                     abst_zero))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_one) 
                                                           (abst_opposite x))) 
                                                     abst_zero)))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus 
                                                 (abst_mult x abst_zero) 
                                                 (abst_plus 
                                                    (abst_mult x abst_one) 
                                                    (abst_opposite x))) 
                                              abst_zero))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal abst_zero abst_zero))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus 
                                                    (abst_mult x abst_zero) 
                                                    (abst_plus 
                                                       (abst_mult x abst_one) 
                                                       (abst_opposite x))) 
                                                 abst_zero)))) 
                                     (v_Vsd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_one) 
                                                           (abst_opposite x))) 
                                                     abst_zero))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus 
                                                    (abst_mult x abst_zero) 
                                                    (abst_plus 
                                                       (abst_mult x abst_one) 
                                                       (abst_opposite x))) 
                                                 abst_zero))) __A_1_4_LEMMA 
                                        v_Vsd) 
                                     (v_Vbe:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal abst_zero 
                                                     abst_zero))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_one) 
                                                           (abst_opposite x))) 
                                                     abst_zero))))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal abst_zero abst_zero))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus 
                                                    (abst_mult x abst_zero) 
                                                    (abst_plus 
                                                       (abst_mult x abst_one) 
                                                       (abst_opposite x))) 
                                                 abst_zero))) 
                                        (v_Vce:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal abst_zero 
                                                        abst_zero))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal abst_zero 
                                                    abst_zero))) v_Vxd v_Vce) 
                                        (__A_1_4_LEMMA:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_one) 
                                                           (abst_opposite x))) 
                                                     abst_zero)))) =>
                                         zen.Rsubst basics.bool__t 
                                           (v_Vcd:
                                            (zen.term basics.bool__t) =>
                                            zen.triangle 
                                              (focal.is_true v_Vcd)) 
                                           (abst_equal 
                                              (abst_plus 
                                                 (abst_mult x abst_zero) 
                                                 (abst_plus 
                                                    (abst_mult x abst_one) 
                                                    (abst_opposite x))) 
                                              abst_zero) 
                                           (abst_equal 
                                              (abst_plus 
                                                 (abst_mult x abst_zero) 
                                                 abst_zero) abst_zero) 
                                           (v_Vdd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                 (abst_opposite 
                                                                    x))) 
                                                           abst_zero) 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              abst_zero) 
                                                           abst_zero))))) =>
                                            zen.Rsubst abst_T 
                                              (v_Ved:(zen.term abst_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal v_Ved 
                                                          abst_zero) 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_zero) 
                                                             abst_zero) 
                                                          abst_zero)))) 
                                              (abst_plus 
                                                 (abst_mult x abst_zero) 
                                                 (abst_plus 
                                                    (abst_mult x abst_one) 
                                                    (abst_opposite x))) 
                                              (abst_plus 
                                                 (abst_mult x abst_zero) 
                                                 abst_zero) 
                                              (v_Vfd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                 (abst_opposite 
                                                                    x))) 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              abst_zero))))) =>
                                               zen.Rnotand 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_zero) 
                                                             abst_zero) 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_zero) 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   abst_one) 
                                                                (abst_opposite 
                                                                   x)))))) 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   abst_zero) 
                                                                abst_zero) 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   abst_zero) 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                   (abst_opposite 
                                                                    x))))))) 
                                                 (v_Vgd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_zero) 
                                                             abst_zero) 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_zero) 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   abst_one) 
                                                                (abst_opposite 
                                                                   x))))) 
                                                    (v_Vhd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                 abst_zero) 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (
                                                                    abst_opposite 
                                                                    x)))))) =>
                                                     zen.Reqsym abst_T 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             abst_zero) 
                                                          abst_zero) 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             abst_zero) 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_one) 
                                                             (abst_opposite x))) 
                                                       v_Vhd v_Vfd) v_Vgd) 
                                                 (v_Vnd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))))))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   abst_zero) 
                                                                abst_zero) 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   abst_zero) 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                   (abst_opposite 
                                                                    x)))))) 
                                                    (v_Vzc:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Voc:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vpc:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vqc:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vpc 
                                                                    v_Vqc))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vqc))))))) 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             abst_zero) 
                                                          abst_zero) 
                                                       (v_Vod:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              abst_T 
                                                              (v_Vpc:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.forall 
                                                                 abst_T 
                                                                 (v_Vqc:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    v_Vpc))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vpc 
                                                                    v_Vqc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    v_Vqc)))))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vpc:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vqc:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    v_Vpc))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vpc 
                                                                    v_Vqc))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    v_Vqc)))))) 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_zero) 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   abst_one) 
                                                                (abst_opposite 
                                                                   x))) 
                                                          (v_Vpd:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 abst_T 
                                                                 (v_Vqc:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vqc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    v_Vqc))))))) =>
                                                           zen.Rall abst_T 
                                                             (v_Vqc:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vqc))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    v_Vqc))))) 
                                                             abst_zero 
                                                             (v_Vqd:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero)))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero)))) 
                                                                (v_Vnc:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x)))))) 
                                                                   v_Vzc 
                                                                   v_Vnc) 
                                                                (v_Vrd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero))) 
                                                                   (v_Vsd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero))) 
                                                                    __A_1_4_LEMMA 
                                                                    v_Vsd) 
                                                                   (v_Vtd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero))) 
                                                                    v_Vtd 
                                                                    v_Vkc) 
                                                                   v_Vrd) 
                                                                v_Vqd) v_Vpd) 
                                                          v_Vod) 
                                                       abst_equal_transitive) 
                                                    v_Vnd) v_Vad) 
                                              (v_Vud:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                 abst_zero) 
                                                              abst_zero) 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                 abst_zero) 
                                                              abst_zero))))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Vvd:(zen.term abst_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   abst_zero) 
                                                                abst_zero) 
                                                             v_Vvd) 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   abst_zero) 
                                                                abst_zero) 
                                                             abst_zero)))) 
                                                 abst_zero abst_zero 
                                                 (v_Vwd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              abst_zero 
                                                              abst_zero)))) =>
                                                  zen.Rnoteq abst_T 
                                                    abst_zero v_Vwd) 
                                                 (v_Vud:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                 abst_zero) 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                 abst_zero))))) =>
                                                  zen.Rnoteq basics.bool__t 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             abst_zero) 
                                                          abst_zero) 
                                                       abst_zero) v_Vud) 
                                                 v_Vud) v_Vdd) 
                                           (v_Vtd:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           abst_zero) 
                                                        abst_zero)))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             abst_zero) 
                                                          abst_zero) 
                                                       abst_zero))) v_Vtd 
                                              v_Vkc) __A_1_4_LEMMA) v_Vbe) 
                                     v_Vae) v_Vzd) v_Vyd) 
                            abst_equal_transitive) 
                         (v_Vce:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal abst_zero abst_zero))))) =>
                          zen.Rnoteq abst_T abst_zero v_Vwd)))))) 
            (dk_builtins.magic_prove 
               (dk_logic.ebP 
                  (abst_equal 
                     (abst_plus (abst_mult x abst_one) (abst_opposite x)) 
                     abst_zero)))) 
           (zen.nnpp 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal 
                       (abst_plus (abst_mult x abst_zero) 
                          (abst_plus (abst_mult x abst_one) (abst_opposite x))) 
                       abst_zero))) 
              (v_Vkc:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal 
                              (abst_plus (abst_mult x abst_zero) 
                                 (abst_plus (abst_mult x abst_one) 
                                    (abst_opposite x))) abst_zero))))) =>
               zen.Rcut 
                 (zen.and 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal abst_T 
                             (abst_plus (abst_mult x abst_zero) 
                                (abst_plus (abst_mult x abst_one) 
                                   (abst_opposite x))) 
                             (abst_plus 
                                (abst_plus (abst_mult x abst_zero) 
                                   (abst_mult x abst_one)) (abst_opposite x))))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus (abst_mult x abst_zero) 
                                   (abst_plus (abst_mult x abst_one) 
                                      (abst_opposite x))) 
                                (abst_plus 
                                   (abst_plus (abst_mult x abst_zero) 
                                      (abst_mult x abst_one)) 
                                   (abst_opposite x))))))) 
                 (v_Vlc:
                  (zen.proof 
                     (zen.and 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal abst_T 
                                 (abst_plus (abst_mult x abst_zero) 
                                    (abst_plus (abst_mult x abst_one) 
                                       (abst_opposite x))) 
                                 (abst_plus 
                                    (abst_plus (abst_mult x abst_zero) 
                                       (abst_mult x abst_one)) 
                                    (abst_opposite x))))) 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_plus (abst_mult x abst_zero) 
                                       (abst_plus (abst_mult x abst_one) 
                                          (abst_opposite x))) 
                                    (abst_plus 
                                       (abst_plus (abst_mult x abst_zero) 
                                          (abst_mult x abst_one)) 
                                       (abst_opposite x)))))))) =>
                  zen.Rand 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal abst_T 
                             (abst_plus (abst_mult x abst_zero) 
                                (abst_plus (abst_mult x abst_one) 
                                   (abst_opposite x))) 
                             (abst_plus 
                                (abst_plus (abst_mult x abst_zero) 
                                   (abst_mult x abst_one)) (abst_opposite x))))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus (abst_mult x abst_zero) 
                                   (abst_plus (abst_mult x abst_one) 
                                      (abst_opposite x))) 
                                (abst_plus 
                                   (abst_plus (abst_mult x abst_zero) 
                                      (abst_mult x abst_one)) 
                                   (abst_opposite x)))))) 
                    (v_Vmc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal abst_T 
                                 (abst_plus (abst_mult x abst_zero) 
                                    (abst_plus (abst_mult x abst_one) 
                                       (abst_opposite x))) 
                                 (abst_plus 
                                    (abst_plus (abst_mult x abst_zero) 
                                       (abst_mult x abst_one)) 
                                    (abst_opposite x)))))) =>
                     v_Vnc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_plus (abst_mult x abst_zero) 
                                       (abst_plus (abst_mult x abst_one) 
                                          (abst_opposite x))) 
                                    (abst_plus 
                                       (abst_plus (abst_mult x abst_zero) 
                                          (abst_mult x abst_one)) 
                                       (abst_opposite x))))))) =>
                     zen.Rall abst_T 
                       (v_Voc:(zen.term abst_T) =>
                        zen.forall abst_T 
                          (v_Vpc:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vqc:(zen.term abst_T) =>
                              zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus v_Voc 
                                         (abst_plus v_Vpc v_Vqc)) 
                                      (abst_plus (abst_plus v_Voc v_Vpc) 
                                         v_Vqc)))))) (abst_mult x abst_zero) 
                       (v_Vrc:
                        (zen.proof 
                           (zen.forall abst_T 
                              (v_Vpc:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vqc:(zen.term abst_T) =>
                                  zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus (abst_mult x abst_zero) 
                                             (abst_plus v_Vpc v_Vqc)) 
                                          (abst_plus 
                                             (abst_plus 
                                                (abst_mult x abst_zero) v_Vpc) 
                                             v_Vqc))))))) =>
                        zen.Rall abst_T 
                          (v_Vpc:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vqc:(zen.term abst_T) =>
                              zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_mult x abst_zero) 
                                         (abst_plus v_Vpc v_Vqc)) 
                                      (abst_plus 
                                         (abst_plus (abst_mult x abst_zero) 
                                            v_Vpc) v_Vqc))))) 
                          (abst_mult x abst_one) 
                          (v_Vsc:
                           (zen.proof 
                              (zen.forall abst_T 
                                 (v_Vqc:(zen.term abst_T) =>
                                  zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus (abst_mult x abst_zero) 
                                             (abst_plus 
                                                (abst_mult x abst_one) v_Vqc)) 
                                          (abst_plus 
                                             (abst_plus 
                                                (abst_mult x abst_zero) 
                                                (abst_mult x abst_one)) v_Vqc)))))) =>
                           zen.Rall abst_T 
                             (v_Vqc:(zen.term abst_T) =>
                              zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_mult x abst_zero) 
                                         (abst_plus (abst_mult x abst_one) 
                                            v_Vqc)) 
                                      (abst_plus 
                                         (abst_plus (abst_mult x abst_zero) 
                                            (abst_mult x abst_one)) v_Vqc)))) 
                             (abst_opposite x) 
                             (v_Vtc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus (abst_mult x abst_zero) 
                                             (abst_plus 
                                                (abst_mult x abst_one) 
                                                (abst_opposite x))) 
                                          (abst_plus 
                                             (abst_plus 
                                                (abst_mult x abst_zero) 
                                                (abst_mult x abst_one)) 
                                             (abst_opposite x)))))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus (abst_mult x abst_zero) 
                                            (abst_plus 
                                               (abst_mult x abst_one) 
                                               (abst_opposite x))) 
                                         (abst_plus 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               (abst_mult x abst_one)) 
                                            (abst_opposite x))))) v_Vtc v_Vnc) 
                             v_Vsc) v_Vrc) abst_plus_is_associative) v_Vlc) 
                 (v_Vuc:
                  (zen.proof 
                     (zen.not 
                        (zen.and 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal abst_T 
                                    (abst_plus (abst_mult x abst_zero) 
                                       (abst_plus (abst_mult x abst_one) 
                                          (abst_opposite x))) 
                                    (abst_plus 
                                       (abst_plus (abst_mult x abst_zero) 
                                          (abst_mult x abst_one)) 
                                       (abst_opposite x))))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult x abst_zero) 
                                          (abst_plus (abst_mult x abst_one) 
                                             (abst_opposite x))) 
                                       (abst_plus 
                                          (abst_plus (abst_mult x abst_zero) 
                                             (abst_mult x abst_one)) 
                                          (abst_opposite x))))))))) =>
                  zen.Rcut 
                    (zen.triangle (zen.equal abst_T abst_zero abst_zero)) 
                    (v_Vvc:
                     (zen.proof 
                        (zen.triangle (zen.equal abst_T abst_zero abst_zero))) =>
                     zen.Rsubst basics.bool__t 
                       (v_Vwc:(zen.term basics.bool__t) =>
                        zen.triangle (focal.is_true v_Vwc)) 
                       (abst_equal 
                          (abst_plus 
                             (abst_plus (abst_mult x abst_zero) 
                                (abst_mult x abst_one)) (abst_opposite x)) 
                          abst_zero) 
                       (abst_equal 
                          (abst_plus (abst_mult x abst_zero) 
                             (abst_plus (abst_mult x abst_one) 
                                (abst_opposite x))) abst_zero) 
                       (v_Vxc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (abst_equal 
                                       (abst_plus 
                                          (abst_plus (abst_mult x abst_zero) 
                                             (abst_mult x abst_one)) 
                                          (abst_opposite x)) abst_zero) 
                                    (abst_equal 
                                       (abst_plus (abst_mult x abst_zero) 
                                          (abst_plus (abst_mult x abst_one) 
                                             (abst_opposite x))) abst_zero))))) =>
                        zen.Rsubst abst_T 
                          (v_Vyc:(zen.term abst_T) =>
                           zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (abst_equal v_Vyc abst_zero) 
                                   (abst_equal 
                                      (abst_plus (abst_mult x abst_zero) 
                                         (abst_plus (abst_mult x abst_one) 
                                            (abst_opposite x))) abst_zero)))) 
                          (abst_plus 
                             (abst_plus (abst_mult x abst_zero) 
                                (abst_mult x abst_one)) (abst_opposite x)) 
                          (abst_plus (abst_mult x abst_zero) 
                             (abst_plus (abst_mult x abst_one) 
                                (abst_opposite x))) 
                          (v_Vzc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal abst_T 
                                       (abst_plus 
                                          (abst_plus (abst_mult x abst_zero) 
                                             (abst_mult x abst_one)) 
                                          (abst_opposite x)) 
                                       (abst_plus (abst_mult x abst_zero) 
                                          (abst_plus (abst_mult x abst_one) 
                                             (abst_opposite x))))))) =>
                           zen.Rnotand 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_plus (abst_mult x abst_zero) 
                                         (abst_plus (abst_mult x abst_one) 
                                            (abst_opposite x))) 
                                      (abst_plus 
                                         (abst_plus (abst_mult x abst_zero) 
                                            (abst_mult x abst_one)) 
                                         (abst_opposite x))))) 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus (abst_mult x abst_zero) 
                                            (abst_plus 
                                               (abst_mult x abst_one) 
                                               (abst_opposite x))) 
                                         (abst_plus 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               (abst_mult x abst_one)) 
                                            (abst_opposite x)))))) 
                             (v_Vad:
                              (zen.proof 
                                 (zen.not 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_plus 
                                                (abst_mult x abst_zero) 
                                                (abst_plus 
                                                   (abst_mult x abst_one) 
                                                   (abst_opposite x))) 
                                             (abst_plus 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   (abst_mult x abst_one)) 
                                                (abst_opposite x))))))) =>
                              zen.Rnotnot 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_plus (abst_mult x abst_zero) 
                                         (abst_plus (abst_mult x abst_one) 
                                            (abst_opposite x))) 
                                      (abst_plus 
                                         (abst_plus (abst_mult x abst_zero) 
                                            (abst_mult x abst_one)) 
                                         (abst_opposite x)))) 
                                (v_Vbd:
                                 (zen.proof 
                                    (zen.triangle 
                                       (zen.equal abst_T 
                                          (abst_plus (abst_mult x abst_zero) 
                                             (abst_plus 
                                                (abst_mult x abst_one) 
                                                (abst_opposite x))) 
                                          (abst_plus 
                                             (abst_plus 
                                                (abst_mult x abst_zero) 
                                                (abst_mult x abst_one)) 
                                             (abst_opposite x))))) =>
                                 zen.Rcut 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_plus (abst_mult x abst_zero) 
                                            (abst_plus 
                                               (abst_mult x abst_one) 
                                               (abst_opposite x))) 
                                         (abst_plus (abst_mult x abst_zero) 
                                            (abst_plus 
                                               (abst_mult x abst_one) 
                                               (abst_opposite x))))) 
                                   (v_Vcd:
                                    (zen.proof 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_plus 
                                                (abst_mult x abst_zero) 
                                                (abst_plus 
                                                   (abst_mult x abst_one) 
                                                   (abst_opposite x))) 
                                             (abst_plus 
                                                (abst_mult x abst_zero) 
                                                (abst_plus 
                                                   (abst_mult x abst_one) 
                                                   (abst_opposite x)))))) =>
                                    zen.Rsubst abst_T 
                                      (v_Vdd:(zen.term abst_T) =>
                                       zen.triangle 
                                         (zen.equal abst_T v_Vdd 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               (abst_plus 
                                                  (abst_mult x abst_one) 
                                                  (abst_opposite x))))) 
                                      (abst_plus (abst_mult x abst_zero) 
                                         (abst_plus (abst_mult x abst_one) 
                                            (abst_opposite x))) 
                                      (abst_plus 
                                         (abst_plus (abst_mult x abst_zero) 
                                            (abst_mult x abst_one)) 
                                         (abst_opposite x)) 
                                      (v_Vmc:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal abst_T 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            abst_one) 
                                                         (abst_opposite x))) 
                                                   (abst_plus 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            abst_zero) 
                                                         (abst_mult x 
                                                            abst_one)) 
                                                      (abst_opposite x)))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  (abst_plus 
                                                     (abst_mult x abst_one) 
                                                     (abst_opposite x))) 
                                               (abst_plus 
                                                  (abst_plus 
                                                     (abst_mult x abst_zero) 
                                                     (abst_mult x abst_one)) 
                                                  (abst_opposite x)))) v_Vbd 
                                         v_Vmc) 
                                      (v_Ved:
                                       (zen.proof 
                                          (zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_plus 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      (abst_mult x abst_one)) 
                                                   (abst_opposite x)) 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   (abst_plus 
                                                      (abst_mult x abst_one) 
                                                      (abst_opposite x)))))) =>
                                       zen.Rsubst abst_T 
                                         (v_Vfd:(zen.term abst_T) =>
                                          zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus 
                                                  (abst_plus 
                                                     (abst_mult x abst_zero) 
                                                     (abst_mult x abst_one)) 
                                                  (abst_opposite x)) v_Vfd)) 
                                         (abst_plus (abst_mult x abst_zero) 
                                            (abst_plus 
                                               (abst_mult x abst_one) 
                                               (abst_opposite x))) 
                                         (abst_plus (abst_mult x abst_zero) 
                                            (abst_plus 
                                               (abst_mult x abst_one) 
                                               (abst_opposite x))) 
                                         (v_Vgd:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            abst_zero) 
                                                         (abst_plus 
                                                            (abst_mult x 
                                                               abst_one) 
                                                            (abst_opposite x))) 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            abst_zero) 
                                                         (abst_plus 
                                                            (abst_mult x 
                                                               abst_one) 
                                                            (abst_opposite x))))))) =>
                                          zen.Rnoteq abst_T 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               (abst_plus 
                                                  (abst_mult x abst_one) 
                                                  (abst_opposite x))) v_Vgd) 
                                         (v_Ved:
                                          (zen.proof 
                                             (zen.triangle 
                                                (zen.equal abst_T 
                                                   (abst_plus 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            abst_zero) 
                                                         (abst_mult x 
                                                            abst_one)) 
                                                      (abst_opposite x)) 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            abst_one) 
                                                         (abst_opposite x)))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        (abst_mult x abst_one)) 
                                                     (abst_opposite x)) 
                                                  (abst_plus 
                                                     (abst_mult x abst_zero) 
                                                     (abst_plus 
                                                        (abst_mult x abst_one) 
                                                        (abst_opposite x))))) 
                                            v_Ved v_Vzc) v_Ved) v_Vcd) 
                                   (v_Vgd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   (abst_plus 
                                                      (abst_mult x abst_one) 
                                                      (abst_opposite x))) 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   (abst_plus 
                                                      (abst_mult x abst_one) 
                                                      (abst_opposite x))))))) =>
                                    zen.Rnoteq abst_T 
                                      (abst_plus (abst_mult x abst_zero) 
                                         (abst_plus (abst_mult x abst_one) 
                                            (abst_opposite x))) v_Vgd)) v_Vad) 
                             (v_Vhd:
                              (zen.proof 
                                 (zen.not 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   (abst_plus 
                                                      (abst_mult x abst_one) 
                                                      (abst_opposite x))) 
                                                (abst_plus 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      (abst_mult x abst_one)) 
                                                   (abst_opposite x)))))))) =>
                              zen.Rnotnot 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus (abst_mult x abst_zero) 
                                            (abst_plus 
                                               (abst_mult x abst_one) 
                                               (abst_opposite x))) 
                                         (abst_plus 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               (abst_mult x abst_one)) 
                                            (abst_opposite x))))) 
                                (v_Vtc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus 
                                                (abst_mult x abst_zero) 
                                                (abst_plus 
                                                   (abst_mult x abst_one) 
                                                   (abst_opposite x))) 
                                             (abst_plus 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   (abst_mult x abst_one)) 
                                                (abst_opposite x)))))) =>
                                 zen.Rall abst_T 
                                   (v_Voc:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Vpc:(zen.term abst_T) =>
                                       zen.forall abst_T 
                                         (v_Vqc:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Voc v_Vpc))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vpc v_Vqc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Voc v_Vqc))))))) 
                                   (abst_plus (abst_mult x abst_zero) 
                                      (abst_plus (abst_mult x abst_one) 
                                         (abst_opposite x))) 
                                   (v_Vid:
                                    (zen.proof 
                                       (zen.forall abst_T 
                                          (v_Vpc:(zen.term abst_T) =>
                                           zen.forall abst_T 
                                             (v_Vqc:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_mult x 
                                                               abst_zero) 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_one) 
                                                               (abst_opposite 
                                                                  x))) v_Vpc))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal v_Vpc 
                                                            v_Vqc))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                  (abst_opposite 
                                                                    x))) 
                                                            v_Vqc)))))))) =>
                                    zen.Rall abst_T 
                                      (v_Vpc:(zen.term abst_T) =>
                                       zen.forall abst_T 
                                         (v_Vqc:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_one) 
                                                           (abst_opposite x))) 
                                                     v_Vpc))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vpc v_Vqc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_one) 
                                                              (abst_opposite 
                                                                 x))) v_Vqc)))))) 
                                      (abst_plus 
                                         (abst_plus (abst_mult x abst_zero) 
                                            (abst_mult x abst_one)) 
                                         (abst_opposite x)) 
                                      (v_Vjd:
                                       (zen.proof 
                                          (zen.forall abst_T 
                                             (v_Vqc:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_mult x 
                                                               abst_zero) 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_one) 
                                                               (abst_opposite 
                                                                  x))) 
                                                         (abst_plus 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               (abst_mult x 
                                                                  abst_one)) 
                                                            (abst_opposite x))))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                               (abst_opposite 
                                                                  x)) v_Vqc))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                  (abst_opposite 
                                                                    x))) 
                                                            v_Vqc))))))) =>
                                       zen.Rall abst_T 
                                         (v_Vqc:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_one) 
                                                           (abst_opposite x))) 
                                                     (abst_plus 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           (abst_mult x 
                                                              abst_one)) 
                                                        (abst_opposite x))))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              (abst_mult x 
                                                                 abst_one)) 
                                                           (abst_opposite x)) 
                                                        v_Vqc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_one) 
                                                              (abst_opposite 
                                                                 x))) v_Vqc))))) 
                                         abst_zero 
                                         (v_Vkd:
                                          (zen.proof 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_mult x 
                                                               abst_zero) 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_one) 
                                                               (abst_opposite 
                                                                  x))) 
                                                         (abst_plus 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               (abst_mult x 
                                                                  abst_one)) 
                                                            (abst_opposite x))))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                               (abst_opposite 
                                                                  x)) 
                                                            abst_zero))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                  (abst_opposite 
                                                                    x))) 
                                                            abst_zero)))))) =>
                                          zen.Rimply 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_one) 
                                                           (abst_opposite x))) 
                                                     (abst_plus 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           (abst_mult x 
                                                              abst_one)) 
                                                        (abst_opposite x))))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              (abst_mult x 
                                                                 abst_one)) 
                                                           (abst_opposite x)) 
                                                        abst_zero))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_one) 
                                                              (abst_opposite 
                                                                 x))) 
                                                        abst_zero)))) 
                                            (v_Vnc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                  (abst_opposite 
                                                                    x))) 
                                                            (abst_plus 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                               (abst_opposite 
                                                                  x))))))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_one) 
                                                              (abst_opposite 
                                                                 x))) 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              (abst_mult x 
                                                                 abst_one)) 
                                                           (abst_opposite x))))) 
                                               v_Vtc v_Vnc) 
                                            (v_Vld:
                                             (zen.proof 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                               (abst_opposite 
                                                                  x)) 
                                                            abst_zero))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                  (abst_opposite 
                                                                    x))) 
                                                            abst_zero))))) =>
                                             zen.Rimply 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              (abst_mult x 
                                                                 abst_one)) 
                                                           (abst_opposite x)) 
                                                        abst_zero))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_one) 
                                                              (abst_opposite 
                                                                 x))) 
                                                        abst_zero))) 
                                               (v_Vmd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_plus 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                  (abst_opposite 
                                                                    x)) 
                                                               abst_zero))))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                              (abst_opposite 
                                                                 x)) 
                                                           abst_zero))) 
                                                  __A_1_3_LEMMA v_Vmd) 
                                               (v_Vnd:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                  (abst_opposite 
                                                                    x))) 
                                                            abst_zero)))) =>
                                                zen.Rsubst basics.bool__t 
                                                  (v_Vwc:
                                                   (zen.term basics.bool__t) =>
                                                   zen.triangle 
                                                     (focal.is_true v_Vwc)) 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_one) 
                                                           (abst_opposite x))) 
                                                     abst_zero) 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_one) 
                                                           (abst_opposite x))) 
                                                     abst_zero) 
                                                  (v_Vod:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                  abst_zero) 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                  abst_zero))))) =>
                                                   zen.Rsubst abst_T 
                                                     (v_Vyc:
                                                      (zen.term abst_T) =>
                                                      zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 v_Vyc 
                                                                 abst_zero) 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                 abst_zero)))) 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_one) 
                                                           (abst_opposite x))) 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_one) 
                                                           (abst_opposite x))) 
                                                     (v_Vgd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                      zen.Rnoteq abst_T 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_one) 
                                                              (abst_opposite 
                                                                 x))) v_Vgd) 
                                                     (v_Vod:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero) 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero))))) =>
                                                      zen.Rsubst abst_T 
                                                        (v_Vpd:
                                                         (zen.term abst_T) =>
                                                         zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vpd) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero)))) 
                                                        abst_zero abst_zero 
                                                        (v_Vqd:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    abst_T 
                                                                    abst_zero 
                                                                    abst_zero)))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 abst_zero 
                                                                 abst_zero)) 
                                                           v_Vvc v_Vqd) 
                                                        (v_Vod:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero))))) =>
                                                         zen.Rnoteq 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (
                                                                    abst_opposite 
                                                                    x))) 
                                                              abst_zero) 
                                                           v_Vod) v_Vod) 
                                                     v_Vod) 
                                                  (v_Vnd:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                               abst_zero)))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (
                                                                    abst_opposite 
                                                                    x))) 
                                                              abst_zero))) 
                                                     v_Vnd v_Vkc) v_Vnd) 
                                               v_Vld) v_Vkd) v_Vjd) v_Vid) 
                                   abst_equal_transitive) v_Vhd) v_Vuc) 
                          (v_Vod:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal basics.bool__t 
                                       (abst_equal 
                                          (abst_plus (abst_mult x abst_zero) 
                                             (abst_plus 
                                                (abst_mult x abst_one) 
                                                (abst_opposite x))) abst_zero) 
                                       (abst_equal 
                                          (abst_plus (abst_mult x abst_zero) 
                                             (abst_plus 
                                                (abst_mult x abst_one) 
                                                (abst_opposite x))) abst_zero))))) =>
                           zen.Rsubst abst_T 
                             (v_Vpd:(zen.term abst_T) =>
                              zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_equal 
                                         (abst_plus (abst_mult x abst_zero) 
                                            (abst_plus 
                                               (abst_mult x abst_one) 
                                               (abst_opposite x))) v_Vpd) 
                                      (abst_equal 
                                         (abst_plus (abst_mult x abst_zero) 
                                            (abst_plus 
                                               (abst_mult x abst_one) 
                                               (abst_opposite x))) abst_zero)))) 
                             abst_zero abst_zero 
                             (v_Vqd:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal abst_T abst_zero abst_zero)))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (zen.equal abst_T abst_zero abst_zero)) 
                                v_Vvc v_Vqd) 
                             (v_Vod:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal basics.bool__t 
                                          (abst_equal 
                                             (abst_plus 
                                                (abst_mult x abst_zero) 
                                                (abst_plus 
                                                   (abst_mult x abst_one) 
                                                   (abst_opposite x))) 
                                             abst_zero) 
                                          (abst_equal 
                                             (abst_plus 
                                                (abst_mult x abst_zero) 
                                                (abst_plus 
                                                   (abst_mult x abst_one) 
                                                   (abst_opposite x))) 
                                             abst_zero))))) =>
                              zen.Rnoteq basics.bool__t 
                                (abst_equal 
                                   (abst_plus (abst_mult x abst_zero) 
                                      (abst_plus (abst_mult x abst_one) 
                                         (abst_opposite x))) abst_zero) v_Vod) 
                             v_Vod) v_Vxc) 
                       (v_Vnd:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_plus (abst_mult x abst_zero) 
                                       (abst_plus (abst_mult x abst_one) 
                                          (abst_opposite x))) abst_zero)))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_mult x abst_zero) 
                                      (abst_plus (abst_mult x abst_one) 
                                         (abst_opposite x))) abst_zero))) 
                          v_Vnd v_Vkc) __A_1_3_LEMMA) 
                    (v_Vqd:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal abst_T abst_zero abst_zero)))) =>
                     zen.Rcut 
                       (zen.triangle 
                          (focal.is_true (abst_equal abst_zero abst_zero))) 
                       (v_Vrd:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true (abst_equal abst_zero abst_zero)))) =>
                        zen.Rall abst_T 
                          (v_Voc:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vpc:(zen.term abst_T) =>
                              zen.forall abst_T 
                                (v_Vqc:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Voc v_Vpc))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vpc v_Vqc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Voc v_Vqc))))))) 
                          (abst_plus 
                             (abst_plus (abst_mult x abst_zero) 
                                (abst_mult x abst_one)) (abst_opposite x)) 
                          (v_Vsd:
                           (zen.proof 
                              (zen.forall abst_T 
                                 (v_Vpc:(zen.term abst_T) =>
                                  zen.forall abst_T 
                                    (v_Vqc:(zen.term abst_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      (abst_mult x abst_one)) 
                                                   (abst_opposite x)) v_Vpc))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal v_Vpc v_Vqc))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            abst_zero) 
                                                         (abst_mult x 
                                                            abst_one)) 
                                                      (abst_opposite x)) 
                                                   v_Vqc)))))))) =>
                           zen.Rall abst_T 
                             (v_Vpc:(zen.term abst_T) =>
                              zen.forall abst_T 
                                (v_Vqc:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  (abst_mult x abst_one)) 
                                               (abst_opposite x)) v_Vpc))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vpc v_Vqc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_plus 
                                                     (abst_mult x abst_zero) 
                                                     (abst_mult x abst_one)) 
                                                  (abst_opposite x)) v_Vqc)))))) 
                             abst_zero 
                             (v_Vtd:
                              (zen.proof 
                                 (zen.forall abst_T 
                                    (v_Vqc:(zen.term abst_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      (abst_mult x abst_one)) 
                                                   (abst_opposite x)) 
                                                abst_zero))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal abst_zero v_Vqc))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            abst_zero) 
                                                         (abst_mult x 
                                                            abst_one)) 
                                                      (abst_opposite x)) 
                                                   v_Vqc))))))) =>
                              zen.Rall abst_T 
                                (v_Vqc:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  (abst_mult x abst_one)) 
                                               (abst_opposite x)) abst_zero))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal abst_zero v_Vqc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_plus 
                                                     (abst_mult x abst_zero) 
                                                     (abst_mult x abst_one)) 
                                                  (abst_opposite x)) v_Vqc))))) 
                                abst_zero 
                                (v_Vud:
                                 (zen.proof 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      (abst_mult x abst_one)) 
                                                   (abst_opposite x)) 
                                                abst_zero))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal abst_zero 
                                                   abst_zero))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            abst_zero) 
                                                         (abst_mult x 
                                                            abst_one)) 
                                                      (abst_opposite x)) 
                                                   abst_zero)))))) =>
                                 zen.Rimply 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  (abst_mult x abst_one)) 
                                               (abst_opposite x)) abst_zero))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal abst_zero abst_zero))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_plus 
                                                     (abst_mult x abst_zero) 
                                                     (abst_mult x abst_one)) 
                                                  (abst_opposite x)) 
                                               abst_zero)))) 
                                   (v_Vmd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            abst_zero) 
                                                         (abst_mult x 
                                                            abst_one)) 
                                                      (abst_opposite x)) 
                                                   abst_zero))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_plus 
                                                     (abst_mult x abst_zero) 
                                                     (abst_mult x abst_one)) 
                                                  (abst_opposite x)) 
                                               abst_zero))) __A_1_3_LEMMA 
                                      v_Vmd) 
                                   (v_Vvd:
                                    (zen.proof 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal abst_zero 
                                                   abst_zero))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            abst_zero) 
                                                         (abst_mult x 
                                                            abst_one)) 
                                                      (abst_opposite x)) 
                                                   abst_zero))))) =>
                                    zen.Rimply 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal abst_zero abst_zero))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_plus 
                                                     (abst_mult x abst_zero) 
                                                     (abst_mult x abst_one)) 
                                                  (abst_opposite x)) 
                                               abst_zero))) 
                                      (v_Vwd:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal abst_zero 
                                                      abst_zero))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal abst_zero 
                                                  abst_zero))) v_Vrd v_Vwd) 
                                      (__A_1_3_LEMMA:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            abst_zero) 
                                                         (abst_mult x 
                                                            abst_one)) 
                                                      (abst_opposite x)) 
                                                   abst_zero)))) =>
                                       zen.Rsubst basics.bool__t 
                                         (v_Vxd:(zen.term basics.bool__t) =>
                                          zen.triangle (focal.is_true v_Vxd)) 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  (abst_mult x abst_one)) 
                                               (abst_opposite x)) abst_zero) 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               (abst_plus 
                                                  (abst_mult x abst_one) 
                                                  (abst_opposite x))) 
                                            abst_zero) 
                                         (v_Vxc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               (abst_mult x 
                                                                  abst_one)) 
                                                            (abst_opposite x)) 
                                                         abst_zero) 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_mult x 
                                                               abst_zero) 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_one) 
                                                               (abst_opposite 
                                                                  x))) 
                                                         abst_zero))))) =>
                                          zen.Rsubst abst_T 
                                            (v_Vyd:(zen.term abst_T) =>
                                             zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal v_Vyd 
                                                        abst_zero) 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_one) 
                                                              (abst_opposite 
                                                                 x))) 
                                                        abst_zero)))) 
                                            (abst_plus 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  (abst_mult x abst_one)) 
                                               (abst_opposite x)) 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               (abst_plus 
                                                  (abst_mult x abst_one) 
                                                  (abst_opposite x))) 
                                            (v_Vzc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         (abst_plus 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               (abst_mult x 
                                                                  abst_one)) 
                                                            (abst_opposite x)) 
                                                         (abst_plus 
                                                            (abst_mult x 
                                                               abst_zero) 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_one) 
                                                               (abst_opposite 
                                                                  x))))))) =>
                                             zen.Rnotand 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_one) 
                                                              (abst_opposite 
                                                                 x))) 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              (abst_mult x 
                                                                 abst_one)) 
                                                           (abst_opposite x))))) 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                 (abst_opposite 
                                                                    x))) 
                                                           (abst_plus 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                              (abst_opposite 
                                                                 x)))))) 
                                               (v_Vad:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                               (abst_plus 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                  (abst_opposite 
                                                                    x))))))) =>
                                                zen.Rnotnot 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_one) 
                                                              (abst_opposite 
                                                                 x))) 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              (abst_mult x 
                                                                 abst_one)) 
                                                           (abst_opposite x)))) 
                                                  (v_Vbd:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                  (abst_opposite 
                                                                    x))) 
                                                            (abst_plus 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                               (abst_opposite 
                                                                  x))))) =>
                                                   zen.Reqsym abst_T 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_one) 
                                                           (abst_opposite x))) 
                                                     (abst_plus 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           (abst_mult x 
                                                              abst_one)) 
                                                        (abst_opposite x)) 
                                                     v_Vbd v_Vzc) v_Vad) 
                                               (v_Vhd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                  (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                zen.Rnotnot 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                 (abst_opposite 
                                                                    x))) 
                                                           (abst_plus 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                              (abst_opposite 
                                                                 x))))) 
                                                  (v_Vtc:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                               (abst_plus 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                  (abst_opposite 
                                                                    x)))))) =>
                                                   zen.Rall abst_T 
                                                     (v_Voc:
                                                      (zen.term abst_T) =>
                                                      zen.forall abst_T 
                                                        (v_Vpc:
                                                         (zen.term abst_T) =>
                                                         zen.forall abst_T 
                                                           (v_Vqc:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vpc 
                                                                    v_Vqc))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vqc))))))) 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_one) 
                                                           (abst_opposite x))) 
                                                     (v_Vid:
                                                      (zen.proof 
                                                         (zen.forall abst_T 
                                                            (v_Vpc:
                                                             (zen.term abst_T) =>
                                                             zen.forall 
                                                               abst_T 
                                                               (v_Vqc:
                                                                (zen.term 
                                                                   abst_T) =>
                                                                zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vpc))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vpc 
                                                                    v_Vqc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vqc)))))))) =>
                                                      zen.Rall abst_T 
                                                        (v_Vpc:
                                                         (zen.term abst_T) =>
                                                         zen.forall abst_T 
                                                           (v_Vqc:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vpc))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vpc 
                                                                    v_Vqc))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vqc)))))) 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              (abst_mult x 
                                                                 abst_one)) 
                                                           (abst_opposite x)) 
                                                        (v_Vjd:
                                                         (zen.proof 
                                                            (zen.forall 
                                                               abst_T 
                                                               (v_Vqc:
                                                                (zen.term 
                                                                   abst_T) =>
                                                                zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) v_Vqc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vqc))))))) =>
                                                         zen.Rall abst_T 
                                                           (v_Vqc:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) v_Vqc))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    v_Vqc))))) 
                                                           abst_zero 
                                                           (v_Vkd:
                                                            (zen.proof 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero)))))) =>
                                                            zen.Rimply 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero)))) 
                                                              (v_Vnc:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                                 v_Vtc v_Vnc) 
                                                              (v_Vld:
                                                               (zen.proof 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero))))) =>
                                                               zen.Rimply 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero))) 
                                                                 (v_Vmd:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))) 
                                                                    __A_1_3_LEMMA 
                                                                    v_Vmd) 
                                                                 (v_Vnd:
                                                                  (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero)))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                                    abst_zero))) 
                                                                    v_Vnd 
                                                                    v_Vkc) 
                                                                 v_Vld) v_Vkd) 
                                                           v_Vjd) v_Vid) 
                                                     abst_equal_transitive) 
                                                  v_Vhd) v_Vuc) 
                                            (v_Vod:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         basics.bool__t 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                  (abst_opposite 
                                                                    x))) 
                                                            abst_zero) 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                  (abst_opposite 
                                                                    x))) 
                                                            abst_zero))))) =>
                                             zen.Rsubst abst_T 
                                               (v_Vzd:(zen.term abst_T) =>
                                                zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                 (abst_opposite 
                                                                    x))) 
                                                           v_Vzd) 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                 (abst_opposite 
                                                                    x))) 
                                                           abst_zero)))) 
                                               abst_zero abst_zero 
                                               (v_Vqd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            abst_zero 
                                                            abst_zero)))) =>
                                                zen.Rnoteq abst_T abst_zero 
                                                  v_Vqd) 
                                               (v_Vod:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (abst_equal 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                               abst_zero) 
                                                            (abst_equal 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    (abst_opposite 
                                                                    x))) 
                                                               abst_zero))))) =>
                                                zen.Rnoteq basics.bool__t 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_one) 
                                                           (abst_opposite x))) 
                                                     abst_zero) v_Vod) v_Vod) 
                                            v_Vxc) 
                                         (v_Vnd:
                                          (zen.proof 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            abst_zero) 
                                                         (abst_plus 
                                                            (abst_mult x 
                                                               abst_one) 
                                                            (abst_opposite x))) 
                                                      abst_zero)))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_one) 
                                                           (abst_opposite x))) 
                                                     abst_zero))) v_Vnd v_Vkc) 
                                         __A_1_3_LEMMA) v_Vvd) v_Vud) v_Vtd) 
                             v_Vsd) abst_equal_transitive) 
                       (v_Vwd:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal abst_zero abst_zero))))) =>
                        zen.Rnoteq abst_T abst_zero v_Vqd)))))) 
          ((__A_1_3_1_LEMMA:
            (dk_logic.eP 
               (dk_logic.ebP 
                  (abst_equal 
                     (abst_plus (abst_mult x abst_zero) 
                        (abst_mult x abst_one)) 
                     (abst_mult x (abst_plus abst_zero abst_one))))) =>
            zen.nnpp 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal 
                       (abst_plus 
                          (abst_plus (abst_mult x abst_zero) 
                             (abst_mult x abst_one)) (abst_opposite x)) 
                       abst_zero))) 
              (v_Vkc:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal 
                              (abst_plus 
                                 (abst_plus (abst_mult x abst_zero) 
                                    (abst_mult x abst_one)) (abst_opposite x)) 
                              abst_zero))))) =>
               zen.Rcut 
                 (zen.and 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal abst_T 
                             (abst_plus 
                                (abst_plus (abst_mult x abst_zero) 
                                   (abst_mult x abst_one)) (abst_opposite x)) 
                             (abst_plus 
                                (abst_mult x (abst_plus abst_zero abst_one)) 
                                (abst_opposite x))))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus 
                                   (abst_plus (abst_mult x abst_zero) 
                                      (abst_mult x abst_one)) 
                                   (abst_opposite x)) 
                                (abst_plus 
                                   (abst_mult x 
                                      (abst_plus abst_zero abst_one)) 
                                   (abst_opposite x))))))) 
                 (v_Vlc:
                  (zen.proof 
                     (zen.and 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal abst_T 
                                 (abst_plus 
                                    (abst_plus (abst_mult x abst_zero) 
                                       (abst_mult x abst_one)) 
                                    (abst_opposite x)) 
                                 (abst_plus 
                                    (abst_mult x 
                                       (abst_plus abst_zero abst_one)) 
                                    (abst_opposite x))))) 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_plus 
                                       (abst_plus (abst_mult x abst_zero) 
                                          (abst_mult x abst_one)) 
                                       (abst_opposite x)) 
                                    (abst_plus 
                                       (abst_mult x 
                                          (abst_plus abst_zero abst_one)) 
                                       (abst_opposite x)))))))) =>
                  zen.Rand 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal abst_T 
                             (abst_plus 
                                (abst_plus (abst_mult x abst_zero) 
                                   (abst_mult x abst_one)) (abst_opposite x)) 
                             (abst_plus 
                                (abst_mult x (abst_plus abst_zero abst_one)) 
                                (abst_opposite x))))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus 
                                   (abst_plus (abst_mult x abst_zero) 
                                      (abst_mult x abst_one)) 
                                   (abst_opposite x)) 
                                (abst_plus 
                                   (abst_mult x 
                                      (abst_plus abst_zero abst_one)) 
                                   (abst_opposite x)))))) 
                    (v_Vmc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal abst_T 
                                 (abst_plus 
                                    (abst_plus (abst_mult x abst_zero) 
                                       (abst_mult x abst_one)) 
                                    (abst_opposite x)) 
                                 (abst_plus 
                                    (abst_mult x 
                                       (abst_plus abst_zero abst_one)) 
                                    (abst_opposite x)))))) =>
                     v_Vnc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_plus 
                                       (abst_plus (abst_mult x abst_zero) 
                                          (abst_mult x abst_one)) 
                                       (abst_opposite x)) 
                                    (abst_plus 
                                       (abst_mult x 
                                          (abst_plus abst_zero abst_one)) 
                                       (abst_opposite x))))))) =>
                     zen.Rall abst_T 
                       (v_Voc:(zen.term abst_T) =>
                        zen.forall abst_T 
                          (v_Vpc:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vqc:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Voc v_Vpc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus v_Voc v_Vqc) 
                                         (abst_plus v_Vpc v_Vqc))))))) 
                       (abst_plus (abst_mult x abst_zero) 
                          (abst_mult x abst_one)) 
                       (v_Vrc:
                        (zen.proof 
                           (zen.forall abst_T 
                              (v_Vpc:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vqc:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus 
                                                (abst_mult x abst_zero) 
                                                (abst_mult x abst_one)) v_Vpc))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   (abst_mult x abst_one)) 
                                                v_Vqc) 
                                             (abst_plus v_Vpc v_Vqc)))))))) =>
                        zen.Rall abst_T 
                          (v_Vpc:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vqc:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus (abst_mult x abst_zero) 
                                            (abst_mult x abst_one)) v_Vpc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               (abst_mult x abst_one)) v_Vqc) 
                                         (abst_plus v_Vpc v_Vqc)))))) 
                          (abst_mult x (abst_plus abst_zero abst_one)) 
                          (v_Vsc:
                           (zen.proof 
                              (zen.forall abst_T 
                                 (v_Vqc:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus 
                                                (abst_mult x abst_zero) 
                                                (abst_mult x abst_one)) 
                                             (abst_mult x 
                                                (abst_plus abst_zero abst_one))))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   (abst_mult x abst_one)) 
                                                v_Vqc) 
                                             (abst_plus 
                                                (abst_mult x 
                                                   (abst_plus abst_zero 
                                                      abst_one)) v_Vqc))))))) =>
                           zen.Rall abst_T 
                             (v_Vqc:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus (abst_mult x abst_zero) 
                                            (abst_mult x abst_one)) 
                                         (abst_mult x 
                                            (abst_plus abst_zero abst_one))))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               (abst_mult x abst_one)) v_Vqc) 
                                         (abst_plus 
                                            (abst_mult x 
                                               (abst_plus abst_zero abst_one)) 
                                            v_Vqc))))) (abst_opposite x) 
                             (v_Vtc:
                              (zen.proof 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus 
                                                (abst_mult x abst_zero) 
                                                (abst_mult x abst_one)) 
                                             (abst_mult x 
                                                (abst_plus abst_zero abst_one))))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   (abst_mult x abst_one)) 
                                                (abst_opposite x)) 
                                             (abst_plus 
                                                (abst_mult x 
                                                   (abst_plus abst_zero 
                                                      abst_one)) 
                                                (abst_opposite x))))))) =>
                              zen.Rimply 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus (abst_mult x abst_zero) 
                                            (abst_mult x abst_one)) 
                                         (abst_mult x 
                                            (abst_plus abst_zero abst_one))))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               (abst_mult x abst_one)) 
                                            (abst_opposite x)) 
                                         (abst_plus 
                                            (abst_mult x 
                                               (abst_plus abst_zero abst_one)) 
                                            (abst_opposite x))))) 
                                (v_Vuc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   (abst_mult x abst_one)) 
                                                (abst_mult x 
                                                   (abst_plus abst_zero 
                                                      abst_one))))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               (abst_mult x abst_one)) 
                                            (abst_mult x 
                                               (abst_plus abst_zero abst_one))))) 
                                   __A_1_3_1_LEMMA v_Vuc) 
                                (v_Vvc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   (abst_mult x abst_one)) 
                                                (abst_opposite x)) 
                                             (abst_plus 
                                                (abst_mult x 
                                                   (abst_plus abst_zero 
                                                      abst_one)) 
                                                (abst_opposite x)))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  (abst_mult x abst_one)) 
                                               (abst_opposite x)) 
                                            (abst_plus 
                                               (abst_mult x 
                                                  (abst_plus abst_zero 
                                                     abst_one)) 
                                               (abst_opposite x))))) v_Vvc 
                                   v_Vnc) v_Vtc) v_Vsc) v_Vrc) 
                       abst_plus_left_substitution_rule) v_Vlc) 
                 (v_Vwc:
                  (zen.proof 
                     (zen.not 
                        (zen.and 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal abst_T 
                                    (abst_plus 
                                       (abst_plus (abst_mult x abst_zero) 
                                          (abst_mult x abst_one)) 
                                       (abst_opposite x)) 
                                    (abst_plus 
                                       (abst_mult x 
                                          (abst_plus abst_zero abst_one)) 
                                       (abst_opposite x))))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus 
                                          (abst_plus (abst_mult x abst_zero) 
                                             (abst_mult x abst_one)) 
                                          (abst_opposite x)) 
                                       (abst_plus 
                                          (abst_mult x 
                                             (abst_plus abst_zero abst_one)) 
                                          (abst_opposite x))))))))) =>
                  zen.Rcut 
                    (zen.triangle (zen.equal abst_T abst_zero abst_zero)) 
                    (v_Vxc:
                     (zen.proof 
                        (zen.triangle (zen.equal abst_T abst_zero abst_zero))) =>
                     zen.Rsubst basics.bool__t 
                       (v_Vyc:(zen.term basics.bool__t) =>
                        zen.triangle (focal.is_true v_Vyc)) 
                       (abst_equal 
                          (abst_plus 
                             (abst_mult x (abst_plus abst_zero abst_one)) 
                             (abst_opposite x)) abst_zero) 
                       (abst_equal 
                          (abst_plus 
                             (abst_plus (abst_mult x abst_zero) 
                                (abst_mult x abst_one)) (abst_opposite x)) 
                          abst_zero) 
                       (v_Vzc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (abst_equal 
                                       (abst_plus 
                                          (abst_mult x 
                                             (abst_plus abst_zero abst_one)) 
                                          (abst_opposite x)) abst_zero) 
                                    (abst_equal 
                                       (abst_plus 
                                          (abst_plus (abst_mult x abst_zero) 
                                             (abst_mult x abst_one)) 
                                          (abst_opposite x)) abst_zero))))) =>
                        zen.Rsubst abst_T 
                          (v_Vad:(zen.term abst_T) =>
                           zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (abst_equal v_Vad abst_zero) 
                                   (abst_equal 
                                      (abst_plus 
                                         (abst_plus (abst_mult x abst_zero) 
                                            (abst_mult x abst_one)) 
                                         (abst_opposite x)) abst_zero)))) 
                          (abst_plus 
                             (abst_mult x (abst_plus abst_zero abst_one)) 
                             (abst_opposite x)) 
                          (abst_plus 
                             (abst_plus (abst_mult x abst_zero) 
                                (abst_mult x abst_one)) (abst_opposite x)) 
                          (v_Vbd:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal abst_T 
                                       (abst_plus 
                                          (abst_mult x 
                                             (abst_plus abst_zero abst_one)) 
                                          (abst_opposite x)) 
                                       (abst_plus 
                                          (abst_plus (abst_mult x abst_zero) 
                                             (abst_mult x abst_one)) 
                                          (abst_opposite x)))))) =>
                           zen.Rnotand 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_plus 
                                         (abst_plus (abst_mult x abst_zero) 
                                            (abst_mult x abst_one)) 
                                         (abst_opposite x)) 
                                      (abst_plus 
                                         (abst_mult x 
                                            (abst_plus abst_zero abst_one)) 
                                         (abst_opposite x))))) 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               (abst_mult x abst_one)) 
                                            (abst_opposite x)) 
                                         (abst_plus 
                                            (abst_mult x 
                                               (abst_plus abst_zero abst_one)) 
                                            (abst_opposite x)))))) 
                             (v_Vcd:
                              (zen.proof 
                                 (zen.not 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_plus 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   (abst_mult x abst_one)) 
                                                (abst_opposite x)) 
                                             (abst_plus 
                                                (abst_mult x 
                                                   (abst_plus abst_zero 
                                                      abst_one)) 
                                                (abst_opposite x))))))) =>
                              zen.Rnotnot 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_plus 
                                         (abst_plus (abst_mult x abst_zero) 
                                            (abst_mult x abst_one)) 
                                         (abst_opposite x)) 
                                      (abst_plus 
                                         (abst_mult x 
                                            (abst_plus abst_zero abst_one)) 
                                         (abst_opposite x)))) 
                                (v_Vdd:
                                 (zen.proof 
                                    (zen.triangle 
                                       (zen.equal abst_T 
                                          (abst_plus 
                                             (abst_plus 
                                                (abst_mult x abst_zero) 
                                                (abst_mult x abst_one)) 
                                             (abst_opposite x)) 
                                          (abst_plus 
                                             (abst_mult x 
                                                (abst_plus abst_zero abst_one)) 
                                             (abst_opposite x))))) =>
                                 zen.Rcut 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_plus 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               (abst_mult x abst_one)) 
                                            (abst_opposite x)) 
                                         (abst_plus 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               (abst_mult x abst_one)) 
                                            (abst_opposite x)))) 
                                   (v_Ved:
                                    (zen.proof 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_plus 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   (abst_mult x abst_one)) 
                                                (abst_opposite x)) 
                                             (abst_plus 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   (abst_mult x abst_one)) 
                                                (abst_opposite x))))) =>
                                    zen.Rsubst abst_T 
                                      (v_Vfd:(zen.term abst_T) =>
                                       zen.triangle 
                                         (zen.equal abst_T v_Vfd 
                                            (abst_plus 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  (abst_mult x abst_one)) 
                                               (abst_opposite x)))) 
                                      (abst_plus 
                                         (abst_plus (abst_mult x abst_zero) 
                                            (abst_mult x abst_one)) 
                                         (abst_opposite x)) 
                                      (abst_plus 
                                         (abst_mult x 
                                            (abst_plus abst_zero abst_one)) 
                                         (abst_opposite x)) 
                                      (v_Vmc:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal abst_T 
                                                   (abst_plus 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            abst_zero) 
                                                         (abst_mult x 
                                                            abst_one)) 
                                                      (abst_opposite x)) 
                                                   (abst_plus 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) 
                                                      (abst_opposite x)))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus 
                                                  (abst_plus 
                                                     (abst_mult x abst_zero) 
                                                     (abst_mult x abst_one)) 
                                                  (abst_opposite x)) 
                                               (abst_plus 
                                                  (abst_mult x 
                                                     (abst_plus abst_zero 
                                                        abst_one)) 
                                                  (abst_opposite x)))) v_Vdd 
                                         v_Vmc) 
                                      (v_Vgd:
                                       (zen.proof 
                                          (zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_plus 
                                                   (abst_mult x 
                                                      (abst_plus abst_zero 
                                                         abst_one)) 
                                                   (abst_opposite x)) 
                                                (abst_plus 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      (abst_mult x abst_one)) 
                                                   (abst_opposite x))))) =>
                                       zen.Rsubst abst_T 
                                         (v_Vhd:(zen.term abst_T) =>
                                          zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus 
                                                  (abst_mult x 
                                                     (abst_plus abst_zero 
                                                        abst_one)) 
                                                  (abst_opposite x)) v_Vhd)) 
                                         (abst_plus 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               (abst_mult x abst_one)) 
                                            (abst_opposite x)) 
                                         (abst_plus 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               (abst_mult x abst_one)) 
                                            (abst_opposite x)) 
                                         (v_Vid:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_plus 
                                                         (abst_plus 
                                                            (abst_mult x 
                                                               abst_zero) 
                                                            (abst_mult x 
                                                               abst_one)) 
                                                         (abst_opposite x)) 
                                                      (abst_plus 
                                                         (abst_plus 
                                                            (abst_mult x 
                                                               abst_zero) 
                                                            (abst_mult x 
                                                               abst_one)) 
                                                         (abst_opposite x)))))) =>
                                          zen.Rnoteq abst_T 
                                            (abst_plus 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  (abst_mult x abst_one)) 
                                               (abst_opposite x)) v_Vid) 
                                         (v_Vgd:
                                          (zen.proof 
                                             (zen.triangle 
                                                (zen.equal abst_T 
                                                   (abst_plus 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) 
                                                      (abst_opposite x)) 
                                                   (abst_plus 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            abst_zero) 
                                                         (abst_mult x 
                                                            abst_one)) 
                                                      (abst_opposite x))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus 
                                                     (abst_mult x 
                                                        (abst_plus abst_zero 
                                                           abst_one)) 
                                                     (abst_opposite x)) 
                                                  (abst_plus 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           abst_zero) 
                                                        (abst_mult x abst_one)) 
                                                     (abst_opposite x)))) 
                                            v_Vgd v_Vbd) v_Vgd) v_Ved) 
                                   (v_Vid:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_plus 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      (abst_mult x abst_one)) 
                                                   (abst_opposite x)) 
                                                (abst_plus 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      (abst_mult x abst_one)) 
                                                   (abst_opposite x)))))) =>
                                    zen.Rnoteq abst_T 
                                      (abst_plus 
                                         (abst_plus (abst_mult x abst_zero) 
                                            (abst_mult x abst_one)) 
                                         (abst_opposite x)) v_Vid)) v_Vcd) 
                             (v_Vjd:
                              (zen.proof 
                                 (zen.not 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      (abst_mult x abst_one)) 
                                                   (abst_opposite x)) 
                                                (abst_plus 
                                                   (abst_mult x 
                                                      (abst_plus abst_zero 
                                                         abst_one)) 
                                                   (abst_opposite x)))))))) =>
                              zen.Rnotnot 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               (abst_mult x abst_one)) 
                                            (abst_opposite x)) 
                                         (abst_plus 
                                            (abst_mult x 
                                               (abst_plus abst_zero abst_one)) 
                                            (abst_opposite x))))) 
                                (v_Vvc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   (abst_mult x abst_one)) 
                                                (abst_opposite x)) 
                                             (abst_plus 
                                                (abst_mult x 
                                                   (abst_plus abst_zero 
                                                      abst_one)) 
                                                (abst_opposite x)))))) =>
                                 zen.Rall abst_T 
                                   (v_Voc:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Vpc:(zen.term abst_T) =>
                                       zen.forall abst_T 
                                         (v_Vqc:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Voc v_Vpc))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vpc v_Vqc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Voc v_Vqc))))))) 
                                   (abst_plus 
                                      (abst_plus (abst_mult x abst_zero) 
                                         (abst_mult x abst_one)) 
                                      (abst_opposite x)) 
                                   (v_Vkd:
                                    (zen.proof 
                                       (zen.forall abst_T 
                                          (v_Vpc:(zen.term abst_T) =>
                                           zen.forall abst_T 
                                             (v_Vqc:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               (abst_mult x 
                                                                  abst_one)) 
                                                            (abst_opposite x)) 
                                                         v_Vpc))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal v_Vpc 
                                                            v_Vqc))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                               (abst_opposite 
                                                                  x)) v_Vqc)))))))) =>
                                    zen.Rall abst_T 
                                      (v_Vpc:(zen.term abst_T) =>
                                       zen.forall abst_T 
                                         (v_Vqc:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           (abst_mult x 
                                                              abst_one)) 
                                                        (abst_opposite x)) 
                                                     v_Vpc))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vpc v_Vqc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              (abst_mult x 
                                                                 abst_one)) 
                                                           (abst_opposite x)) 
                                                        v_Vqc)))))) 
                                      (abst_plus 
                                         (abst_mult x 
                                            (abst_plus abst_zero abst_one)) 
                                         (abst_opposite x)) 
                                      (v_Vld:
                                       (zen.proof 
                                          (zen.forall abst_T 
                                             (v_Vqc:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               (abst_mult x 
                                                                  abst_one)) 
                                                            (abst_opposite x)) 
                                                         (abst_plus 
                                                            (abst_mult x 
                                                               (abst_plus 
                                                                  abst_zero 
                                                                  abst_one)) 
                                                            (abst_opposite x))))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                               (abst_opposite 
                                                                  x)) v_Vqc))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                               (abst_opposite 
                                                                  x)) v_Vqc))))))) =>
                                       zen.Rall abst_T 
                                         (v_Vqc:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           (abst_mult x 
                                                              abst_one)) 
                                                        (abst_opposite x)) 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           (abst_plus 
                                                              abst_zero 
                                                              abst_one)) 
                                                        (abst_opposite x))))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              (abst_plus 
                                                                 abst_zero 
                                                                 abst_one)) 
                                                           (abst_opposite x)) 
                                                        v_Vqc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              (abst_mult x 
                                                                 abst_one)) 
                                                           (abst_opposite x)) 
                                                        v_Vqc))))) abst_zero 
                                         (v_Vmd:
                                          (zen.proof 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               (abst_mult x 
                                                                  abst_one)) 
                                                            (abst_opposite x)) 
                                                         (abst_plus 
                                                            (abst_mult x 
                                                               (abst_plus 
                                                                  abst_zero 
                                                                  abst_one)) 
                                                            (abst_opposite x))))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                               (abst_opposite 
                                                                  x)) 
                                                            abst_zero))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                               (abst_opposite 
                                                                  x)) 
                                                            abst_zero)))))) =>
                                          zen.Rimply 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           (abst_mult x 
                                                              abst_one)) 
                                                        (abst_opposite x)) 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           (abst_plus 
                                                              abst_zero 
                                                              abst_one)) 
                                                        (abst_opposite x))))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              (abst_plus 
                                                                 abst_zero 
                                                                 abst_one)) 
                                                           (abst_opposite x)) 
                                                        abst_zero))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              (abst_mult x 
                                                                 abst_one)) 
                                                           (abst_opposite x)) 
                                                        abst_zero)))) 
                                            (v_Vnc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                               (abst_opposite 
                                                                  x)) 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                               (abst_opposite 
                                                                  x))))))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              (abst_mult x 
                                                                 abst_one)) 
                                                           (abst_opposite x)) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              (abst_plus 
                                                                 abst_zero 
                                                                 abst_one)) 
                                                           (abst_opposite x))))) 
                                               v_Vvc v_Vnc) 
                                            (v_Vnd:
                                             (zen.proof 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                               (abst_opposite 
                                                                  x)) 
                                                            abst_zero))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                               (abst_opposite 
                                                                  x)) 
                                                            abst_zero))))) =>
                                             zen.Rimply 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              (abst_plus 
                                                                 abst_zero 
                                                                 abst_one)) 
                                                           (abst_opposite x)) 
                                                        abst_zero))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              (abst_mult x 
                                                                 abst_one)) 
                                                           (abst_opposite x)) 
                                                        abst_zero))) 
                                               (v_Vod:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                  (abst_opposite 
                                                                    x)) 
                                                               abst_zero))))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                              (abst_opposite 
                                                                 x)) 
                                                           abst_zero))) 
                                                  __A_1_2_LEMMA v_Vod) 
                                               (v_Vpd:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                               (abst_opposite 
                                                                  x)) 
                                                            abst_zero)))) =>
                                                zen.Rsubst basics.bool__t 
                                                  (v_Vyc:
                                                   (zen.term basics.bool__t) =>
                                                   zen.triangle 
                                                     (focal.is_true v_Vyc)) 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           (abst_mult x 
                                                              abst_one)) 
                                                        (abst_opposite x)) 
                                                     abst_zero) 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           (abst_mult x 
                                                              abst_one)) 
                                                        (abst_opposite x)) 
                                                     abst_zero) 
                                                  (v_Vqd:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                  abst_zero) 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                  abst_zero))))) =>
                                                   zen.Rsubst abst_T 
                                                     (v_Vad:
                                                      (zen.term abst_T) =>
                                                      zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 v_Vad 
                                                                 abst_zero) 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (
                                                                    abst_opposite 
                                                                    x)) 
                                                                 abst_zero)))) 
                                                     (abst_plus 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           (abst_mult x 
                                                              abst_one)) 
                                                        (abst_opposite x)) 
                                                     (abst_plus 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           (abst_mult x 
                                                              abst_one)) 
                                                        (abst_opposite x)) 
                                                     (v_Vid:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T 
                                                                  (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                  (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)))))) =>
                                                      zen.Rnoteq abst_T 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              (abst_mult x 
                                                                 abst_one)) 
                                                           (abst_opposite x)) 
                                                        v_Vid) 
                                                     (v_Vqd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero) 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))))) =>
                                                      zen.Rsubst abst_T 
                                                        (v_Vrd:
                                                         (zen.term abst_T) =>
                                                         zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) v_Vrd) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero)))) 
                                                        abst_zero abst_zero 
                                                        (v_Vsd:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    abst_T 
                                                                    abst_zero 
                                                                    abst_zero)))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 abst_zero 
                                                                 abst_zero)) 
                                                           v_Vxc v_Vsd) 
                                                        (v_Vqd:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))))) =>
                                                         zen.Rnoteq 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (
                                                                    abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                 (abst_opposite 
                                                                    x)) 
                                                              abst_zero) 
                                                           v_Vqd) v_Vqd) 
                                                     v_Vqd) 
                                                  (v_Vpd:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_plus 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                  (abst_opposite 
                                                                    x)) 
                                                               abst_zero)))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (
                                                                    abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                 (abst_opposite 
                                                                    x)) 
                                                              abst_zero))) 
                                                     v_Vpd v_Vkc) v_Vpd) 
                                               v_Vnd) v_Vmd) v_Vld) v_Vkd) 
                                   abst_equal_transitive) v_Vjd) v_Vwc) 
                          (v_Vqd:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal basics.bool__t 
                                       (abst_equal 
                                          (abst_plus 
                                             (abst_plus 
                                                (abst_mult x abst_zero) 
                                                (abst_mult x abst_one)) 
                                             (abst_opposite x)) abst_zero) 
                                       (abst_equal 
                                          (abst_plus 
                                             (abst_plus 
                                                (abst_mult x abst_zero) 
                                                (abst_mult x abst_one)) 
                                             (abst_opposite x)) abst_zero))))) =>
                           zen.Rsubst abst_T 
                             (v_Vrd:(zen.term abst_T) =>
                              zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_equal 
                                         (abst_plus 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               (abst_mult x abst_one)) 
                                            (abst_opposite x)) v_Vrd) 
                                      (abst_equal 
                                         (abst_plus 
                                            (abst_plus 
                                               (abst_mult x abst_zero) 
                                               (abst_mult x abst_one)) 
                                            (abst_opposite x)) abst_zero)))) 
                             abst_zero abst_zero 
                             (v_Vsd:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal abst_T abst_zero abst_zero)))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (zen.equal abst_T abst_zero abst_zero)) 
                                v_Vxc v_Vsd) 
                             (v_Vqd:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal basics.bool__t 
                                          (abst_equal 
                                             (abst_plus 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   (abst_mult x abst_one)) 
                                                (abst_opposite x)) abst_zero) 
                                          (abst_equal 
                                             (abst_plus 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   (abst_mult x abst_one)) 
                                                (abst_opposite x)) abst_zero))))) =>
                              zen.Rnoteq basics.bool__t 
                                (abst_equal 
                                   (abst_plus 
                                      (abst_plus (abst_mult x abst_zero) 
                                         (abst_mult x abst_one)) 
                                      (abst_opposite x)) abst_zero) v_Vqd) 
                             v_Vqd) v_Vzc) 
                       (v_Vpd:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_plus 
                                       (abst_plus (abst_mult x abst_zero) 
                                          (abst_mult x abst_one)) 
                                       (abst_opposite x)) abst_zero)))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus 
                                      (abst_plus (abst_mult x abst_zero) 
                                         (abst_mult x abst_one)) 
                                      (abst_opposite x)) abst_zero))) v_Vpd 
                          v_Vkc) __A_1_2_LEMMA) 
                    (v_Vsd:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal abst_T abst_zero abst_zero)))) =>
                     zen.Rcut 
                       (zen.triangle 
                          (focal.is_true (abst_equal abst_zero abst_zero))) 
                       (v_Vtd:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true (abst_equal abst_zero abst_zero)))) =>
                        zen.Rall abst_T 
                          (v_Voc:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vpc:(zen.term abst_T) =>
                              zen.forall abst_T 
                                (v_Vqc:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Voc v_Vpc))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vpc v_Vqc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Voc v_Vqc))))))) 
                          (abst_plus 
                             (abst_mult x (abst_plus abst_zero abst_one)) 
                             (abst_opposite x)) 
                          (v_Vud:
                           (zen.proof 
                              (zen.forall abst_T 
                                 (v_Vpc:(zen.term abst_T) =>
                                  zen.forall abst_T 
                                    (v_Vqc:(zen.term abst_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus 
                                                   (abst_mult x 
                                                      (abst_plus abst_zero 
                                                         abst_one)) 
                                                   (abst_opposite x)) v_Vpc))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal v_Vpc v_Vqc))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) 
                                                      (abst_opposite x)) 
                                                   v_Vqc)))))))) =>
                           zen.Rall abst_T 
                             (v_Vpc:(zen.term abst_T) =>
                              zen.forall abst_T 
                                (v_Vqc:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_mult x 
                                                  (abst_plus abst_zero 
                                                     abst_one)) 
                                               (abst_opposite x)) v_Vpc))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vpc v_Vqc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_mult x 
                                                     (abst_plus abst_zero 
                                                        abst_one)) 
                                                  (abst_opposite x)) v_Vqc)))))) 
                             abst_zero 
                             (v_Vvd:
                              (zen.proof 
                                 (zen.forall abst_T 
                                    (v_Vqc:(zen.term abst_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus 
                                                   (abst_mult x 
                                                      (abst_plus abst_zero 
                                                         abst_one)) 
                                                   (abst_opposite x)) 
                                                abst_zero))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal abst_zero v_Vqc))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) 
                                                      (abst_opposite x)) 
                                                   v_Vqc))))))) =>
                              zen.Rall abst_T 
                                (v_Vqc:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_mult x 
                                                  (abst_plus abst_zero 
                                                     abst_one)) 
                                               (abst_opposite x)) abst_zero))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal abst_zero v_Vqc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_mult x 
                                                     (abst_plus abst_zero 
                                                        abst_one)) 
                                                  (abst_opposite x)) v_Vqc))))) 
                                abst_zero 
                                (v_Vwd:
                                 (zen.proof 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus 
                                                   (abst_mult x 
                                                      (abst_plus abst_zero 
                                                         abst_one)) 
                                                   (abst_opposite x)) 
                                                abst_zero))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal abst_zero 
                                                   abst_zero))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) 
                                                      (abst_opposite x)) 
                                                   abst_zero)))))) =>
                                 zen.Rimply 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_mult x 
                                                  (abst_plus abst_zero 
                                                     abst_one)) 
                                               (abst_opposite x)) abst_zero))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal abst_zero abst_zero))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_mult x 
                                                     (abst_plus abst_zero 
                                                        abst_one)) 
                                                  (abst_opposite x)) 
                                               abst_zero)))) 
                                   (v_Vod:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) 
                                                      (abst_opposite x)) 
                                                   abst_zero))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_mult x 
                                                     (abst_plus abst_zero 
                                                        abst_one)) 
                                                  (abst_opposite x)) 
                                               abst_zero))) __A_1_2_LEMMA 
                                      v_Vod) 
                                   (v_Vxd:
                                    (zen.proof 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal abst_zero 
                                                   abst_zero))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) 
                                                      (abst_opposite x)) 
                                                   abst_zero))))) =>
                                    zen.Rimply 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal abst_zero abst_zero))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_mult x 
                                                     (abst_plus abst_zero 
                                                        abst_one)) 
                                                  (abst_opposite x)) 
                                               abst_zero))) 
                                      (v_Vyd:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal abst_zero 
                                                      abst_zero))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal abst_zero 
                                                  abst_zero))) v_Vtd v_Vyd) 
                                      (__A_1_2_LEMMA:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) 
                                                      (abst_opposite x)) 
                                                   abst_zero)))) =>
                                       zen.Rsubst basics.bool__t 
                                         (v_Vzd:(zen.term basics.bool__t) =>
                                          zen.triangle (focal.is_true v_Vzd)) 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_mult x 
                                                  (abst_plus abst_zero 
                                                     abst_one)) 
                                               (abst_opposite x)) abst_zero) 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  (abst_mult x abst_one)) 
                                               (abst_opposite x)) abst_zero) 
                                         (v_Vzc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_mult x 
                                                               (abst_plus 
                                                                  abst_zero 
                                                                  abst_one)) 
                                                            (abst_opposite x)) 
                                                         abst_zero) 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               (abst_mult x 
                                                                  abst_one)) 
                                                            (abst_opposite x)) 
                                                         abst_zero))))) =>
                                          zen.Rsubst abst_T 
                                            (v_Vae:(zen.term abst_T) =>
                                             zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal v_Vae 
                                                        abst_zero) 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              (abst_mult x 
                                                                 abst_one)) 
                                                           (abst_opposite x)) 
                                                        abst_zero)))) 
                                            (abst_plus 
                                               (abst_mult x 
                                                  (abst_plus abst_zero 
                                                     abst_one)) 
                                               (abst_opposite x)) 
                                            (abst_plus 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  (abst_mult x abst_one)) 
                                               (abst_opposite x)) 
                                            (v_Vbd:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         (abst_plus 
                                                            (abst_mult x 
                                                               (abst_plus 
                                                                  abst_zero 
                                                                  abst_one)) 
                                                            (abst_opposite x)) 
                                                         (abst_plus 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               (abst_mult x 
                                                                  abst_one)) 
                                                            (abst_opposite x)))))) =>
                                             zen.Rnotand 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              (abst_mult x 
                                                                 abst_one)) 
                                                           (abst_opposite x)) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              (abst_plus 
                                                                 abst_zero 
                                                                 abst_one)) 
                                                           (abst_opposite x))))) 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                              (abst_opposite 
                                                                 x)) 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                              (abst_opposite 
                                                                 x)))))) 
                                               (v_Vcd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T 
                                                               (abst_plus 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                  (abst_opposite 
                                                                    x)) 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                  (abst_opposite 
                                                                    x))))))) =>
                                                zen.Rnotnot 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_plus 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 abst_zero) 
                                                              (abst_mult x 
                                                                 abst_one)) 
                                                           (abst_opposite x)) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              (abst_plus 
                                                                 abst_zero 
                                                                 abst_one)) 
                                                           (abst_opposite x)))) 
                                                  (v_Vdd:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            (abst_plus 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                               (abst_opposite 
                                                                  x)) 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                               (abst_opposite 
                                                                  x))))) =>
                                                   zen.Reqsym abst_T 
                                                     (abst_plus 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           (abst_mult x 
                                                              abst_one)) 
                                                        (abst_opposite x)) 
                                                     (abst_plus 
                                                        (abst_mult x 
                                                           (abst_plus 
                                                              abst_zero 
                                                              abst_one)) 
                                                        (abst_opposite x)) 
                                                     v_Vdd v_Vbd) v_Vcd) 
                                               (v_Vjd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)))))))) =>
                                                zen.Rnotnot 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                              (abst_opposite 
                                                                 x)) 
                                                           (abst_plus 
                                                              (abst_mult x 
                                                                 (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                              (abst_opposite 
                                                                 x))))) 
                                                  (v_Vvc:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_plus 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                  (abst_opposite 
                                                                    x)) 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                  (abst_opposite 
                                                                    x)))))) =>
                                                   zen.Rall abst_T 
                                                     (v_Voc:
                                                      (zen.term abst_T) =>
                                                      zen.forall abst_T 
                                                        (v_Vpc:
                                                         (zen.term abst_T) =>
                                                         zen.forall abst_T 
                                                           (v_Vqc:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vpc 
                                                                    v_Vqc))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vqc))))))) 
                                                     (abst_plus 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           (abst_mult x 
                                                              abst_one)) 
                                                        (abst_opposite x)) 
                                                     (v_Vkd:
                                                      (zen.proof 
                                                         (zen.forall abst_T 
                                                            (v_Vpc:
                                                             (zen.term abst_T) =>
                                                             zen.forall 
                                                               abst_T 
                                                               (v_Vqc:
                                                                (zen.term 
                                                                   abst_T) =>
                                                                zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) v_Vpc))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vpc 
                                                                    v_Vqc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) v_Vqc)))))))) =>
                                                      zen.Rall abst_T 
                                                        (v_Vpc:
                                                         (zen.term abst_T) =>
                                                         zen.forall abst_T 
                                                           (v_Vqc:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) v_Vpc))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vpc 
                                                                    v_Vqc))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) v_Vqc)))))) 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              (abst_plus 
                                                                 abst_zero 
                                                                 abst_one)) 
                                                           (abst_opposite x)) 
                                                        (v_Vld:
                                                         (zen.proof 
                                                            (zen.forall 
                                                               abst_T 
                                                               (v_Vqc:
                                                                (zen.term 
                                                                   abst_T) =>
                                                                zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) v_Vqc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) v_Vqc))))))) =>
                                                         zen.Rall abst_T 
                                                           (v_Vqc:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) v_Vqc))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) v_Vqc))))) 
                                                           abst_zero 
                                                           (v_Vmd:
                                                            (zen.proof 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero)))))) =>
                                                            zen.Rimply 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero)))) 
                                                              (v_Vnc:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                                 v_Vvc v_Vnc) 
                                                              (v_Vnd:
                                                               (zen.proof 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))))) =>
                                                               zen.Rimply 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))) 
                                                                 (v_Vod:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))) 
                                                                    __A_1_2_LEMMA 
                                                                    v_Vod) 
                                                                 (v_Vpd:
                                                                  (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero)))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))) 
                                                                    v_Vpd 
                                                                    v_Vkc) 
                                                                 v_Vnd) v_Vmd) 
                                                           v_Vld) v_Vkd) 
                                                     abst_equal_transitive) 
                                                  v_Vjd) v_Vwc) 
                                            (v_Vqd:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         basics.bool__t 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                               (abst_opposite 
                                                                  x)) 
                                                            abst_zero) 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                               (abst_opposite 
                                                                  x)) 
                                                            abst_zero))))) =>
                                             zen.Rsubst abst_T 
                                               (v_Vbe:(zen.term abst_T) =>
                                                zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                              (abst_opposite 
                                                                 x)) v_Vbe) 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                 (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                              (abst_opposite 
                                                                 x)) 
                                                           abst_zero)))) 
                                               abst_zero abst_zero 
                                               (v_Vsd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            abst_zero 
                                                            abst_zero)))) =>
                                                zen.Rnoteq abst_T abst_zero 
                                                  v_Vsd) 
                                               (v_Vqd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (abst_equal 
                                                               (abst_plus 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                  (abst_opposite 
                                                                    x)) 
                                                               abst_zero) 
                                                            (abst_equal 
                                                               (abst_plus 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)) 
                                                                  (abst_opposite 
                                                                    x)) 
                                                               abst_zero))))) =>
                                                zen.Rnoteq basics.bool__t 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           (abst_mult x 
                                                              abst_one)) 
                                                        (abst_opposite x)) 
                                                     abst_zero) v_Vqd) v_Vqd) 
                                            v_Vzc) 
                                         (v_Vpd:
                                          (zen.proof 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_plus 
                                                            (abst_mult x 
                                                               abst_zero) 
                                                            (abst_mult x 
                                                               abst_one)) 
                                                         (abst_opposite x)) 
                                                      abst_zero)))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_plus 
                                                           (abst_mult x 
                                                              abst_zero) 
                                                           (abst_mult x 
                                                              abst_one)) 
                                                        (abst_opposite x)) 
                                                     abst_zero))) v_Vpd v_Vkc) 
                                         __A_1_2_LEMMA) v_Vxd) v_Vwd) v_Vvd) 
                             v_Vud) abst_equal_transitive) 
                       (v_Vyd:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal abst_zero abst_zero))))) =>
                        zen.Rnoteq abst_T abst_zero v_Vsd))))) 
             (zen.nnpp 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal 
                         (abst_plus (abst_mult x abst_zero) 
                            (abst_mult x abst_one)) 
                         (abst_mult x (abst_plus abst_zero abst_one))))) 
                (v_Vzb:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_plus (abst_mult x abst_zero) 
                                   (abst_mult x abst_one)) 
                                (abst_mult x (abst_plus abst_zero abst_one))))))) =>
                 zen.Rall abst_T 
                   (v_Vac:(zen.term abst_T) =>
                    zen.forall abst_T 
                      (v_Vbc:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vcc:(zen.term abst_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_mult v_Vac (abst_plus v_Vbc v_Vcc)) 
                                  (abst_plus (abst_mult v_Vac v_Vbc) 
                                     (abst_mult v_Vac v_Vcc))))))) x 
                   (v_Vdc:
                    (zen.proof 
                       (zen.forall abst_T 
                          (v_Vbc:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vcc:(zen.term abst_T) =>
                              zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_mult x (abst_plus v_Vbc v_Vcc)) 
                                      (abst_plus (abst_mult x v_Vbc) 
                                         (abst_mult x v_Vcc)))))))) =>
                    zen.Rall abst_T 
                      (v_Vbc:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vcc:(zen.term abst_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_mult x (abst_plus v_Vbc v_Vcc)) 
                                  (abst_plus (abst_mult x v_Vbc) 
                                     (abst_mult x v_Vcc)))))) abst_zero 
                      (v_Vec:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vcc:(zen.term abst_T) =>
                              zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_mult x 
                                         (abst_plus abst_zero v_Vcc)) 
                                      (abst_plus (abst_mult x abst_zero) 
                                         (abst_mult x v_Vcc))))))) =>
                       zen.Rall abst_T 
                         (v_Vcc:(zen.term abst_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_mult x (abst_plus abst_zero v_Vcc)) 
                                  (abst_plus (abst_mult x abst_zero) 
                                     (abst_mult x v_Vcc))))) abst_one 
                         (v_Vfc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_mult x 
                                         (abst_plus abst_zero abst_one)) 
                                      (abst_plus (abst_mult x abst_zero) 
                                         (abst_mult x abst_one)))))) =>
                          zen.Rall abst_T 
                            (v_Vac:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vbc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vac v_Vbc))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vbc v_Vac))))) 
                            (abst_mult x (abst_plus abst_zero abst_one)) 
                            (v_Vgc:
                             (zen.proof 
                                (zen.forall abst_T 
                                   (v_Vbc:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult x 
                                                  (abst_plus abst_zero 
                                                     abst_one)) v_Vbc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vbc 
                                               (abst_mult x 
                                                  (abst_plus abst_zero 
                                                     abst_one)))))))) =>
                             zen.Rall abst_T 
                               (v_Vbc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult x 
                                              (abst_plus abst_zero abst_one)) 
                                           v_Vbc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal v_Vbc 
                                           (abst_mult x 
                                              (abst_plus abst_zero abst_one)))))) 
                               (abst_plus (abst_mult x abst_zero) 
                                  (abst_mult x abst_one)) 
                               (v_Vhc:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult x 
                                                  (abst_plus abst_zero 
                                                     abst_one)) 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  (abst_mult x abst_one))))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  (abst_mult x abst_one)) 
                                               (abst_mult x 
                                                  (abst_plus abst_zero 
                                                     abst_one))))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult x 
                                              (abst_plus abst_zero abst_one)) 
                                           (abst_plus 
                                              (abst_mult x abst_zero) 
                                              (abst_mult x abst_one))))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult x abst_zero) 
                                              (abst_mult x abst_one)) 
                                           (abst_mult x 
                                              (abst_plus abst_zero abst_one))))) 
                                  (v_Vic:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult x 
                                                     (abst_plus abst_zero 
                                                        abst_one)) 
                                                  (abst_plus 
                                                     (abst_mult x abst_zero) 
                                                     (abst_mult x abst_one))))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult x 
                                                 (abst_plus abst_zero 
                                                    abst_one)) 
                                              (abst_plus 
                                                 (abst_mult x abst_zero) 
                                                 (abst_mult x abst_one))))) 
                                     v_Vfc v_Vic) 
                                  (v_Vjc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_mult x abst_zero) 
                                                  (abst_mult x abst_one)) 
                                               (abst_mult x 
                                                  (abst_plus abst_zero 
                                                     abst_one)))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus 
                                                 (abst_mult x abst_zero) 
                                                 (abst_mult x abst_one)) 
                                              (abst_mult x 
                                                 (abst_plus abst_zero 
                                                    abst_one))))) v_Vjc v_Vzb) 
                                  v_Vhc) v_Vgc) abst_equal_symmetric) v_Vec) 
                      v_Vdc) abst_mult_left_distributes_on_plus)))) 
         (zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (abst_equal 
                     (abst_plus (abst_mult x (abst_plus abst_zero abst_one)) 
                        (abst_opposite x)) abst_zero))) 
            (v_Vkc:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal 
                            (abst_plus 
                               (abst_mult x (abst_plus abst_zero abst_one)) 
                               (abst_opposite x)) abst_zero))))) =>
             zen.Rcut 
               (zen.and 
                  (zen.not 
                     (zen.triangle 
                        (zen.equal abst_T 
                           (abst_plus 
                              (abst_mult x (abst_plus abst_zero abst_one)) 
                              (abst_opposite x)) 
                           (abst_plus x (abst_opposite x))))) 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal 
                              (abst_plus 
                                 (abst_mult x (abst_plus abst_zero abst_one)) 
                                 (abst_opposite x)) 
                              (abst_plus x (abst_opposite x))))))) 
               (v_Vlc:
                (zen.proof 
                   (zen.and 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal abst_T 
                               (abst_plus 
                                  (abst_mult x (abst_plus abst_zero abst_one)) 
                                  (abst_opposite x)) 
                               (abst_plus x (abst_opposite x))))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus 
                                     (abst_mult x 
                                        (abst_plus abst_zero abst_one)) 
                                     (abst_opposite x)) 
                                  (abst_plus x (abst_opposite x)))))))) =>
                zen.Rand 
                  (zen.not 
                     (zen.triangle 
                        (zen.equal abst_T 
                           (abst_plus 
                              (abst_mult x (abst_plus abst_zero abst_one)) 
                              (abst_opposite x)) 
                           (abst_plus x (abst_opposite x))))) 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal 
                              (abst_plus 
                                 (abst_mult x (abst_plus abst_zero abst_one)) 
                                 (abst_opposite x)) 
                              (abst_plus x (abst_opposite x)))))) 
                  (v_Vmc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal abst_T 
                               (abst_plus 
                                  (abst_mult x (abst_plus abst_zero abst_one)) 
                                  (abst_opposite x)) 
                               (abst_plus x (abst_opposite x)))))) =>
                   v_Vnc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus 
                                     (abst_mult x 
                                        (abst_plus abst_zero abst_one)) 
                                     (abst_opposite x)) 
                                  (abst_plus x (abst_opposite x))))))) =>
                   zen.Rall abst_T 
                     (v_Voc:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vpc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vqc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_equal v_Voc v_Vpc))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_plus v_Voc v_Vqc) 
                                       (abst_plus v_Vpc v_Vqc))))))) 
                     (abst_mult x (abst_plus abst_zero abst_one)) 
                     (v_Vrc:
                      (zen.proof 
                         (zen.forall abst_T 
                            (v_Vpc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vqc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult x 
                                              (abst_plus abst_zero abst_one)) 
                                           v_Vpc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult x 
                                                 (abst_plus abst_zero 
                                                    abst_one)) v_Vqc) 
                                           (abst_plus v_Vpc v_Vqc)))))))) =>
                      zen.Rall abst_T 
                        (v_Vpc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vqc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_mult x 
                                          (abst_plus abst_zero abst_one)) 
                                       v_Vpc))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus 
                                          (abst_mult x 
                                             (abst_plus abst_zero abst_one)) 
                                          v_Vqc) (abst_plus v_Vpc v_Vqc)))))) 
                        x 
                        (v_Vsc:
                         (zen.proof 
                            (zen.forall abst_T 
                               (v_Vqc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult x 
                                              (abst_plus abst_zero abst_one)) 
                                           x))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult x 
                                                 (abst_plus abst_zero 
                                                    abst_one)) v_Vqc) 
                                           (abst_plus x v_Vqc))))))) =>
                         zen.Rall abst_T 
                           (v_Vqc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_mult x 
                                          (abst_plus abst_zero abst_one)) x))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus 
                                          (abst_mult x 
                                             (abst_plus abst_zero abst_one)) 
                                          v_Vqc) (abst_plus x v_Vqc))))) 
                           (abst_opposite x) 
                           (v_Vtc:
                            (zen.proof 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult x 
                                              (abst_plus abst_zero abst_one)) 
                                           x))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult x 
                                                 (abst_plus abst_zero 
                                                    abst_one)) 
                                              (abst_opposite x)) 
                                           (abst_plus x (abst_opposite x))))))) =>
                            zen.Rimply 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_mult x 
                                          (abst_plus abst_zero abst_one)) x))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus 
                                          (abst_mult x 
                                             (abst_plus abst_zero abst_one)) 
                                          (abst_opposite x)) 
                                       (abst_plus x (abst_opposite x))))) 
                              (v_Vuc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult x 
                                                 (abst_plus abst_zero 
                                                    abst_one)) x))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_mult x 
                                             (abst_plus abst_zero abst_one)) 
                                          x))) __A_1_0_LEMMA v_Vuc) 
                              (v_Vvc:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult x 
                                                 (abst_plus abst_zero 
                                                    abst_one)) 
                                              (abst_opposite x)) 
                                           (abst_plus x (abst_opposite x)))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus 
                                             (abst_mult x 
                                                (abst_plus abst_zero abst_one)) 
                                             (abst_opposite x)) 
                                          (abst_plus x (abst_opposite x))))) 
                                 v_Vvc v_Vnc) v_Vtc) v_Vsc) v_Vrc) 
                     abst_plus_left_substitution_rule) v_Vlc) 
               (v_Vwc:
                (zen.proof 
                   (zen.not 
                      (zen.and 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T 
                                  (abst_plus 
                                     (abst_mult x 
                                        (abst_plus abst_zero abst_one)) 
                                     (abst_opposite x)) 
                                  (abst_plus x (abst_opposite x))))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus 
                                        (abst_mult x 
                                           (abst_plus abst_zero abst_one)) 
                                        (abst_opposite x)) 
                                     (abst_plus x (abst_opposite x))))))))) =>
                zen.Rcut 
                  (zen.triangle (zen.equal abst_T abst_zero abst_zero)) 
                  (v_Vxc:
                   (zen.proof 
                      (zen.triangle (zen.equal abst_T abst_zero abst_zero))) =>
                   zen.Rsubst basics.bool__t 
                     (v_Vyc:(zen.term basics.bool__t) =>
                      zen.triangle (focal.is_true v_Vyc)) 
                     (abst_equal (abst_plus x (abst_opposite x)) abst_zero) 
                     (abst_equal 
                        (abst_plus 
                           (abst_mult x (abst_plus abst_zero abst_one)) 
                           (abst_opposite x)) abst_zero) 
                     (v_Vzc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (abst_equal 
                                     (abst_plus x (abst_opposite x)) 
                                     abst_zero) 
                                  (abst_equal 
                                     (abst_plus 
                                        (abst_mult x 
                                           (abst_plus abst_zero abst_one)) 
                                        (abst_opposite x)) abst_zero))))) =>
                      zen.Rsubst abst_T 
                        (v_Vad:(zen.term abst_T) =>
                         zen.not 
                           (zen.triangle 
                              (zen.equal basics.bool__t 
                                 (abst_equal v_Vad abst_zero) 
                                 (abst_equal 
                                    (abst_plus 
                                       (abst_mult x 
                                          (abst_plus abst_zero abst_one)) 
                                       (abst_opposite x)) abst_zero)))) 
                        (abst_plus x (abst_opposite x)) 
                        (abst_plus 
                           (abst_mult x (abst_plus abst_zero abst_one)) 
                           (abst_opposite x)) 
                        (v_Vbd:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_plus x (abst_opposite x)) 
                                     (abst_plus 
                                        (abst_mult x 
                                           (abst_plus abst_zero abst_one)) 
                                        (abst_opposite x)))))) =>
                         zen.Rnotand 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal abst_T 
                                    (abst_plus 
                                       (abst_mult x 
                                          (abst_plus abst_zero abst_one)) 
                                       (abst_opposite x)) 
                                    (abst_plus x (abst_opposite x))))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus 
                                          (abst_mult x 
                                             (abst_plus abst_zero abst_one)) 
                                          (abst_opposite x)) 
                                       (abst_plus x (abst_opposite x)))))) 
                           (v_Vcd:
                            (zen.proof 
                               (zen.not 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_plus 
                                              (abst_mult x 
                                                 (abst_plus abst_zero 
                                                    abst_one)) 
                                              (abst_opposite x)) 
                                           (abst_plus x (abst_opposite x))))))) =>
                            zen.Rnotnot 
                              (zen.triangle 
                                 (zen.equal abst_T 
                                    (abst_plus 
                                       (abst_mult x 
                                          (abst_plus abst_zero abst_one)) 
                                       (abst_opposite x)) 
                                    (abst_plus x (abst_opposite x)))) 
                              (v_Vdd:
                               (zen.proof 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_plus 
                                           (abst_mult x 
                                              (abst_plus abst_zero abst_one)) 
                                           (abst_opposite x)) 
                                        (abst_plus x (abst_opposite x))))) =>
                               zen.Rcut 
                                 (zen.triangle 
                                    (zen.equal abst_T 
                                       (abst_plus 
                                          (abst_mult x 
                                             (abst_plus abst_zero abst_one)) 
                                          (abst_opposite x)) 
                                       (abst_plus 
                                          (abst_mult x 
                                             (abst_plus abst_zero abst_one)) 
                                          (abst_opposite x)))) 
                                 (v_Ved:
                                  (zen.proof 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_plus 
                                              (abst_mult x 
                                                 (abst_plus abst_zero 
                                                    abst_one)) 
                                              (abst_opposite x)) 
                                           (abst_plus 
                                              (abst_mult x 
                                                 (abst_plus abst_zero 
                                                    abst_one)) 
                                              (abst_opposite x))))) =>
                                  zen.Rsubst abst_T 
                                    (v_Vfd:(zen.term abst_T) =>
                                     zen.triangle 
                                       (zen.equal abst_T v_Vfd 
                                          (abst_plus 
                                             (abst_mult x 
                                                (abst_plus abst_zero abst_one)) 
                                             (abst_opposite x)))) 
                                    (abst_plus 
                                       (abst_mult x 
                                          (abst_plus abst_zero abst_one)) 
                                       (abst_opposite x)) 
                                    (abst_plus x (abst_opposite x)) 
                                    (v_Vmc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus 
                                                    (abst_mult x 
                                                       (abst_plus abst_zero 
                                                          abst_one)) 
                                                    (abst_opposite x)) 
                                                 (abst_plus x 
                                                    (abst_opposite x)))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_plus 
                                                (abst_mult x 
                                                   (abst_plus abst_zero 
                                                      abst_one)) 
                                                (abst_opposite x)) 
                                             (abst_plus x (abst_opposite x)))) 
                                       v_Vdd v_Vmc) 
                                    (v_Vgd:
                                     (zen.proof 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus x (abst_opposite x)) 
                                              (abst_plus 
                                                 (abst_mult x 
                                                    (abst_plus abst_zero 
                                                       abst_one)) 
                                                 (abst_opposite x))))) =>
                                     zen.Rsubst abst_T 
                                       (v_Vhd:(zen.term abst_T) =>
                                        zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_plus x (abst_opposite x)) 
                                             v_Vhd)) 
                                       (abst_plus 
                                          (abst_mult x 
                                             (abst_plus abst_zero abst_one)) 
                                          (abst_opposite x)) 
                                       (abst_plus 
                                          (abst_mult x 
                                             (abst_plus abst_zero abst_one)) 
                                          (abst_opposite x)) 
                                       (v_Vid:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_plus 
                                                       (abst_mult x 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_one)) 
                                                       (abst_opposite x)) 
                                                    (abst_plus 
                                                       (abst_mult x 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_one)) 
                                                       (abst_opposite x)))))) =>
                                        zen.Rnoteq abst_T 
                                          (abst_plus 
                                             (abst_mult x 
                                                (abst_plus abst_zero abst_one)) 
                                             (abst_opposite x)) v_Vid) 
                                       (v_Vgd:
                                        (zen.proof 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus x 
                                                    (abst_opposite x)) 
                                                 (abst_plus 
                                                    (abst_mult x 
                                                       (abst_plus abst_zero 
                                                          abst_one)) 
                                                    (abst_opposite x))))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_plus x 
                                                   (abst_opposite x)) 
                                                (abst_plus 
                                                   (abst_mult x 
                                                      (abst_plus abst_zero 
                                                         abst_one)) 
                                                   (abst_opposite x)))) 
                                          v_Vgd v_Vbd) v_Vgd) v_Ved) 
                                 (v_Vid:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus 
                                                 (abst_mult x 
                                                    (abst_plus abst_zero 
                                                       abst_one)) 
                                                 (abst_opposite x)) 
                                              (abst_plus 
                                                 (abst_mult x 
                                                    (abst_plus abst_zero 
                                                       abst_one)) 
                                                 (abst_opposite x)))))) =>
                                  zen.Rnoteq abst_T 
                                    (abst_plus 
                                       (abst_mult x 
                                          (abst_plus abst_zero abst_one)) 
                                       (abst_opposite x)) v_Vid)) v_Vcd) 
                           (v_Vjd:
                            (zen.proof 
                               (zen.not 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus 
                                                 (abst_mult x 
                                                    (abst_plus abst_zero 
                                                       abst_one)) 
                                                 (abst_opposite x)) 
                                              (abst_plus x (abst_opposite x)))))))) =>
                            zen.Rnotnot 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus 
                                          (abst_mult x 
                                             (abst_plus abst_zero abst_one)) 
                                          (abst_opposite x)) 
                                       (abst_plus x (abst_opposite x))))) 
                              (v_Vvc:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult x 
                                                 (abst_plus abst_zero 
                                                    abst_one)) 
                                              (abst_opposite x)) 
                                           (abst_plus x (abst_opposite x)))))) =>
                               zen.Rall abst_T 
                                 (v_Voc:(zen.term abst_T) =>
                                  zen.forall abst_T 
                                    (v_Vpc:(zen.term abst_T) =>
                                     zen.forall abst_T 
                                       (v_Vqc:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal v_Voc v_Vpc))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Vpc v_Vqc))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Voc v_Vqc))))))) 
                                 (abst_plus 
                                    (abst_mult x 
                                       (abst_plus abst_zero abst_one)) 
                                    (abst_opposite x)) 
                                 (v_Vkd:
                                  (zen.proof 
                                     (zen.forall abst_T 
                                        (v_Vpc:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vqc:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one)) 
                                                          (abst_opposite x)) 
                                                       v_Vpc))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vpc 
                                                          v_Vqc))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one)) 
                                                             (abst_opposite x)) 
                                                          v_Vqc)))))))) =>
                                  zen.Rall abst_T 
                                    (v_Vpc:(zen.term abst_T) =>
                                     zen.forall abst_T 
                                       (v_Vqc:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) 
                                                      (abst_opposite x)) 
                                                   v_Vpc))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Vpc v_Vqc))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            (abst_plus 
                                                               abst_zero 
                                                               abst_one)) 
                                                         (abst_opposite x)) 
                                                      v_Vqc)))))) 
                                    (abst_plus x (abst_opposite x)) 
                                    (v_Vld:
                                     (zen.proof 
                                        (zen.forall abst_T 
                                           (v_Vqc:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one)) 
                                                          (abst_opposite x)) 
                                                       (abst_plus x 
                                                          (abst_opposite x))))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_opposite x)) 
                                                          v_Vqc))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one)) 
                                                             (abst_opposite x)) 
                                                          v_Vqc))))))) =>
                                     zen.Rall abst_T 
                                       (v_Vqc:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) 
                                                      (abst_opposite x)) 
                                                   (abst_plus x 
                                                      (abst_opposite x))))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus x 
                                                         (abst_opposite x)) 
                                                      v_Vqc))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            (abst_plus 
                                                               abst_zero 
                                                               abst_one)) 
                                                         (abst_opposite x)) 
                                                      v_Vqc))))) abst_zero 
                                       (v_Vmd:
                                        (zen.proof 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one)) 
                                                          (abst_opposite x)) 
                                                       (abst_plus x 
                                                          (abst_opposite x))))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_opposite x)) 
                                                          abst_zero))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one)) 
                                                             (abst_opposite x)) 
                                                          abst_zero)))))) =>
                                        zen.Rimply 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) 
                                                      (abst_opposite x)) 
                                                   (abst_plus x 
                                                      (abst_opposite x))))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus x 
                                                         (abst_opposite x)) 
                                                      abst_zero))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            (abst_plus 
                                                               abst_zero 
                                                               abst_one)) 
                                                         (abst_opposite x)) 
                                                      abst_zero)))) 
                                          (v_Vnc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one)) 
                                                             (abst_opposite x)) 
                                                          (abst_plus x 
                                                             (abst_opposite x))))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            (abst_plus 
                                                               abst_zero 
                                                               abst_one)) 
                                                         (abst_opposite x)) 
                                                      (abst_plus x 
                                                         (abst_opposite x))))) 
                                             v_Vvc v_Vnc) 
                                          (v_Vnd:
                                           (zen.proof 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus x 
                                                             (abst_opposite x)) 
                                                          abst_zero))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one)) 
                                                             (abst_opposite x)) 
                                                          abst_zero))))) =>
                                           zen.Rimply 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus x 
                                                         (abst_opposite x)) 
                                                      abst_zero))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            (abst_plus 
                                                               abst_zero 
                                                               abst_one)) 
                                                         (abst_opposite x)) 
                                                      abst_zero))) 
                                             (v_Vod:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus x 
                                                                (abst_opposite 
                                                                   x)) 
                                                             abst_zero))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus x 
                                                            (abst_opposite x)) 
                                                         abst_zero))) 
                                                __A_1_1_LEMMA v_Vod) 
                                             (v_Vpd:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one)) 
                                                             (abst_opposite x)) 
                                                          abst_zero)))) =>
                                              zen.Rsubst basics.bool__t 
                                                (v_Vyc:
                                                 (zen.term basics.bool__t) =>
                                                 zen.triangle 
                                                   (focal.is_true v_Vyc)) 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) 
                                                      (abst_opposite x)) 
                                                   abst_zero) 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) 
                                                      (abst_opposite x)) 
                                                   abst_zero) 
                                                (v_Vqd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                   (abst_opposite 
                                                                    x)) 
                                                                abst_zero) 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                   (abst_opposite 
                                                                    x)) 
                                                                abst_zero))))) =>
                                                 zen.Rsubst abst_T 
                                                   (v_Vad:
                                                    (zen.term abst_T) =>
                                                    zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (abst_equal 
                                                               v_Vad 
                                                               abst_zero) 
                                                            (abst_equal 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                  (abst_opposite 
                                                                    x)) 
                                                               abst_zero)))) 
                                                   (abst_plus 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) 
                                                      (abst_opposite x)) 
                                                   (abst_plus 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) 
                                                      (abst_opposite x)) 
                                                   (v_Vid:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                   (abst_opposite 
                                                                    x)) 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                   (abst_opposite 
                                                                    x)))))) =>
                                                    zen.Rnoteq abst_T 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            (abst_plus 
                                                               abst_zero 
                                                               abst_one)) 
                                                         (abst_opposite x)) 
                                                      v_Vid) 
                                                   (v_Vqd:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                   abst_zero) 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                   abst_zero))))) =>
                                                    zen.Rsubst abst_T 
                                                      (v_Vrd:
                                                       (zen.term abst_T) =>
                                                       zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) v_Vrd) 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                  abst_zero)))) 
                                                      abst_zero abst_zero 
                                                      (v_Vsd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   abst_zero 
                                                                   abst_zero)))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T 
                                                               abst_zero 
                                                               abst_zero)) 
                                                         v_Vxc v_Vsd) 
                                                      (v_Vqd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero) 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))))) =>
                                                       zen.Rnoteq 
                                                         basics.bool__t 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                               (abst_opposite 
                                                                  x)) 
                                                            abst_zero) v_Vqd) 
                                                      v_Vqd) v_Vqd) 
                                                (v_Vpd:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                (abst_opposite 
                                                                   x)) 
                                                             abst_zero)))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                               (abst_opposite 
                                                                  x)) 
                                                            abst_zero))) 
                                                   v_Vpd v_Vkc) v_Vpd) v_Vnd) 
                                          v_Vmd) v_Vld) v_Vkd) 
                                 abst_equal_transitive) v_Vjd) v_Vwc) 
                        (v_Vqd:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (abst_equal 
                                        (abst_plus 
                                           (abst_mult x 
                                              (abst_plus abst_zero abst_one)) 
                                           (abst_opposite x)) abst_zero) 
                                     (abst_equal 
                                        (abst_plus 
                                           (abst_mult x 
                                              (abst_plus abst_zero abst_one)) 
                                           (abst_opposite x)) abst_zero))))) =>
                         zen.Rsubst abst_T 
                           (v_Vrd:(zen.term abst_T) =>
                            zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (abst_equal 
                                       (abst_plus 
                                          (abst_mult x 
                                             (abst_plus abst_zero abst_one)) 
                                          (abst_opposite x)) v_Vrd) 
                                    (abst_equal 
                                       (abst_plus 
                                          (abst_mult x 
                                             (abst_plus abst_zero abst_one)) 
                                          (abst_opposite x)) abst_zero)))) 
                           abst_zero abst_zero 
                           (v_Vsd:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal abst_T abst_zero abst_zero)))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (zen.equal abst_T abst_zero abst_zero)) 
                              v_Vxc v_Vsd) 
                           (v_Vqd:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult x 
                                                 (abst_plus abst_zero 
                                                    abst_one)) 
                                              (abst_opposite x)) abst_zero) 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult x 
                                                 (abst_plus abst_zero 
                                                    abst_one)) 
                                              (abst_opposite x)) abst_zero))))) =>
                            zen.Rnoteq basics.bool__t 
                              (abst_equal 
                                 (abst_plus 
                                    (abst_mult x 
                                       (abst_plus abst_zero abst_one)) 
                                    (abst_opposite x)) abst_zero) v_Vqd) 
                           v_Vqd) v_Vzc) 
                     (v_Vpd:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus 
                                     (abst_mult x 
                                        (abst_plus abst_zero abst_one)) 
                                     (abst_opposite x)) abst_zero)))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus 
                                    (abst_mult x 
                                       (abst_plus abst_zero abst_one)) 
                                    (abst_opposite x)) abst_zero))) v_Vpd 
                        v_Vkc) __A_1_1_LEMMA) 
                  (v_Vsd:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle (zen.equal abst_T abst_zero abst_zero)))) =>
                   zen.Rcut 
                     (zen.triangle 
                        (focal.is_true (abst_equal abst_zero abst_zero))) 
                     (v_Vtd:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true (abst_equal abst_zero abst_zero)))) =>
                      zen.Rall abst_T 
                        (v_Voc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vpc:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vqc:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal v_Voc v_Vpc))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vpc v_Vqc))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Voc v_Vqc))))))) 
                        (abst_plus x (abst_opposite x)) 
                        (v_Vud:
                         (zen.proof 
                            (zen.forall abst_T 
                               (v_Vpc:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vqc:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus x (abst_opposite x)) 
                                              v_Vpc))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vpc v_Vqc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus x 
                                                    (abst_opposite x)) v_Vqc)))))))) =>
                         zen.Rall abst_T 
                           (v_Vpc:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vqc:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus x (abst_opposite x)) 
                                          v_Vpc))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vpc v_Vqc))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus x (abst_opposite x)) 
                                             v_Vqc)))))) abst_zero 
                           (v_Vvd:
                            (zen.proof 
                               (zen.forall abst_T 
                                  (v_Vqc:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus x (abst_opposite x)) 
                                              abst_zero))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal abst_zero v_Vqc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus x 
                                                    (abst_opposite x)) v_Vqc))))))) =>
                            zen.Rall abst_T 
                              (v_Vqc:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus x (abst_opposite x)) 
                                          abst_zero))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal abst_zero v_Vqc))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus x (abst_opposite x)) 
                                             v_Vqc))))) abst_zero 
                              (v_Vwd:
                               (zen.proof 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus x (abst_opposite x)) 
                                              abst_zero))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal abst_zero abst_zero))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus x 
                                                    (abst_opposite x)) 
                                                 abst_zero)))))) =>
                               zen.Rimply 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus x (abst_opposite x)) 
                                          abst_zero))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal abst_zero abst_zero))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus x (abst_opposite x)) 
                                             abst_zero)))) 
                                 (v_Vod:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus x 
                                                    (abst_opposite x)) 
                                                 abst_zero))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus x (abst_opposite x)) 
                                             abst_zero))) __A_1_1_LEMMA v_Vod) 
                                 (v_Vxd:
                                  (zen.proof 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal abst_zero abst_zero))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus x 
                                                    (abst_opposite x)) 
                                                 abst_zero))))) =>
                                  zen.Rimply 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal abst_zero abst_zero))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus x (abst_opposite x)) 
                                             abst_zero))) 
                                    (v_Vyd:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal abst_zero 
                                                    abst_zero))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal abst_zero abst_zero))) 
                                       v_Vtd v_Vyd) 
                                    (__A_1_1_LEMMA:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus x 
                                                    (abst_opposite x)) 
                                                 abst_zero)))) =>
                                     zen.Rsubst basics.bool__t 
                                       (v_Vyc:(zen.term basics.bool__t) =>
                                        zen.triangle (focal.is_true v_Vyc)) 
                                       (abst_equal 
                                          (abst_plus x (abst_opposite x)) 
                                          abst_zero) 
                                       (abst_equal 
                                          (abst_plus 
                                             (abst_mult x 
                                                (abst_plus abst_zero abst_one)) 
                                             (abst_opposite x)) abst_zero) 
                                       (v_Vzc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal 
                                                       (abst_plus x 
                                                          (abst_opposite x)) 
                                                       abst_zero) 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one)) 
                                                          (abst_opposite x)) 
                                                       abst_zero))))) =>
                                        zen.Rsubst abst_T 
                                          (v_Vad:(zen.term abst_T) =>
                                           zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (abst_equal v_Vad 
                                                      abst_zero) 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            (abst_plus 
                                                               abst_zero 
                                                               abst_one)) 
                                                         (abst_opposite x)) 
                                                      abst_zero)))) 
                                          (abst_plus x (abst_opposite x)) 
                                          (abst_plus 
                                             (abst_mult x 
                                                (abst_plus abst_zero abst_one)) 
                                             (abst_opposite x)) 
                                          (v_Vbd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_plus x 
                                                          (abst_opposite x)) 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one)) 
                                                          (abst_opposite x)))))) =>
                                           zen.Rnotand 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            (abst_plus 
                                                               abst_zero 
                                                               abst_one)) 
                                                         (abst_opposite x)) 
                                                      (abst_plus x 
                                                         (abst_opposite x))))) 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_mult x 
                                                               (abst_plus 
                                                                  abst_zero 
                                                                  abst_one)) 
                                                            (abst_opposite x)) 
                                                         (abst_plus x 
                                                            (abst_opposite x)))))) 
                                             (v_Vcd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                (abst_opposite 
                                                                   x)) 
                                                             (abst_plus x 
                                                                (abst_opposite 
                                                                   x))))))) =>
                                              zen.Rnotnot 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            (abst_plus 
                                                               abst_zero 
                                                               abst_one)) 
                                                         (abst_opposite x)) 
                                                      (abst_plus x 
                                                         (abst_opposite x)))) 
                                                (v_Vdd:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one)) 
                                                             (abst_opposite x)) 
                                                          (abst_plus x 
                                                             (abst_opposite x))))) =>
                                                 zen.Reqsym abst_T 
                                                   (abst_plus 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) 
                                                      (abst_opposite x)) 
                                                   (abst_plus x 
                                                      (abst_opposite x)) 
                                                   v_Vdd v_Vbd) v_Vcd) 
                                             (v_Vjd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                   (abst_opposite 
                                                                    x)) 
                                                                (abst_plus x 
                                                                   (abst_opposite 
                                                                    x)))))))) =>
                                              zen.Rnotnot 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_mult x 
                                                               (abst_plus 
                                                                  abst_zero 
                                                                  abst_one)) 
                                                            (abst_opposite x)) 
                                                         (abst_plus x 
                                                            (abst_opposite x))))) 
                                                (v_Vvc:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                (abst_opposite 
                                                                   x)) 
                                                             (abst_plus x 
                                                                (abst_opposite 
                                                                   x)))))) =>
                                                 zen.Rall abst_T 
                                                   (v_Voc:
                                                    (zen.term abst_T) =>
                                                    zen.forall abst_T 
                                                      (v_Vpc:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vqc:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vpc 
                                                                    v_Vqc))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vqc))))))) 
                                                   (abst_plus 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) 
                                                      (abst_opposite x)) 
                                                   (v_Vkd:
                                                    (zen.proof 
                                                       (zen.forall abst_T 
                                                          (v_Vpc:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vqc:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) v_Vpc))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vpc 
                                                                    v_Vqc))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) v_Vqc)))))))) =>
                                                    zen.Rall abst_T 
                                                      (v_Vpc:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vqc:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) v_Vpc))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vpc 
                                                                    v_Vqc))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) v_Vqc)))))) 
                                                      (abst_plus x 
                                                         (abst_opposite x)) 
                                                      (v_Vld:
                                                       (zen.proof 
                                                          (zen.forall abst_T 
                                                             (v_Vqc:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) v_Vqc))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) v_Vqc))))))) =>
                                                       zen.Rall abst_T 
                                                         (v_Vqc:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) v_Vqc))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) v_Vqc))))) 
                                                         abst_zero 
                                                         (v_Vmd:
                                                          (zen.proof 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero)))))) =>
                                                          zen.Rimply 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero)))) 
                                                            (v_Vnc:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x))))))) =>
                                                             zen.Raxiom 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x))))) 
                                                               v_Vvc v_Vnc) 
                                                            (v_Vnd:
                                                             (zen.proof 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))))) =>
                                                             zen.Rimply 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))) 
                                                               (v_Vod:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    x 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))) 
                                                                  __A_1_1_LEMMA 
                                                                  v_Vod) 
                                                               (v_Vpd:
                                                                (zen.proof 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero)))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_opposite 
                                                                    x)) 
                                                                    abst_zero))) 
                                                                  v_Vpd v_Vkc) 
                                                               v_Vnd) v_Vmd) 
                                                         v_Vld) v_Vkd) 
                                                   abst_equal_transitive) 
                                                v_Vjd) v_Vwc) 
                                          (v_Vqd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one)) 
                                                             (abst_opposite x)) 
                                                          abst_zero) 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one)) 
                                                             (abst_opposite x)) 
                                                          abst_zero))))) =>
                                           zen.Rsubst abst_T 
                                             (v_Vrd:(zen.term abst_T) =>
                                              zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_mult x 
                                                               (abst_plus 
                                                                  abst_zero 
                                                                  abst_one)) 
                                                            (abst_opposite x)) 
                                                         v_Vrd) 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_mult x 
                                                               (abst_plus 
                                                                  abst_zero 
                                                                  abst_one)) 
                                                            (abst_opposite x)) 
                                                         abst_zero)))) 
                                             abst_zero abst_zero 
                                             (v_Vsd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          abst_zero abst_zero)))) =>
                                              zen.Rnoteq abst_T abst_zero 
                                                v_Vsd) 
                                             (v_Vqd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                (abst_opposite 
                                                                   x)) 
                                                             abst_zero) 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                (abst_opposite 
                                                                   x)) 
                                                             abst_zero))))) =>
                                              zen.Rnoteq basics.bool__t 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) 
                                                      (abst_opposite x)) 
                                                   abst_zero) v_Vqd) v_Vqd) 
                                          v_Vzc) 
                                       (v_Vpd:
                                        (zen.proof 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult x 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_one)) 
                                                       (abst_opposite x)) 
                                                    abst_zero)))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) 
                                                      (abst_opposite x)) 
                                                   abst_zero))) v_Vpd v_Vkc) 
                                       __A_1_1_LEMMA) v_Vxd) v_Vwd) v_Vvd) 
                           v_Vud) abst_equal_transitive) 
                     (v_Vyd:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal abst_zero abst_zero))))) =>
                      zen.Rnoteq abst_T abst_zero v_Vsd)))))) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true 
                 (abst_equal (abst_plus x (abst_opposite x)) abst_zero))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_plus x (abst_opposite x)) abst_zero))))) =>
            zen.Rall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.triangle 
                 (focal.is_true 
                    (abst_equal (abst_plus v_Vac (abst_opposite v_Vac)) 
                       abst_zero))) x 
              (v_Vbc:
               (zen.proof 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_plus x (abst_opposite x)) abst_zero)))) =>
               zen.Raxiom 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_plus x (abst_opposite x)) abst_zero))) 
                 v_Vbc v_Vzb) abst_opposite_is_opposite))) 
       ((__A_1_0_1_LEMMA:
         (dk_logic.eP 
            (dk_logic.ebP 
               (abst_equal (abst_plus abst_zero abst_one) abst_one))) =>
         (__A_1_0_2_LEMMA:
          (dk_logic.eP (dk_logic.ebP (abst_equal (abst_mult x abst_one) x))) =>
          zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (abst_equal (abst_mult x (abst_plus abst_zero abst_one)) x))) 
            (v_Vkc:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal 
                            (abst_mult x (abst_plus abst_zero abst_one)) x))))) =>
             zen.Rcut 
               (zen.and 
                  (zen.not 
                     (zen.triangle 
                        (zen.equal abst_T 
                           (abst_mult x (abst_plus abst_zero abst_one)) 
                           (abst_mult x abst_one)))) 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal 
                              (abst_mult x (abst_plus abst_zero abst_one)) 
                              (abst_mult x abst_one)))))) 
               (v_Vlc:
                (zen.proof 
                   (zen.and 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal abst_T 
                               (abst_mult x (abst_plus abst_zero abst_one)) 
                               (abst_mult x abst_one)))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_mult x (abst_plus abst_zero abst_one)) 
                                  (abst_mult x abst_one))))))) =>
                zen.Rand 
                  (zen.not 
                     (zen.triangle 
                        (zen.equal abst_T 
                           (abst_mult x (abst_plus abst_zero abst_one)) 
                           (abst_mult x abst_one)))) 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal 
                              (abst_mult x (abst_plus abst_zero abst_one)) 
                              (abst_mult x abst_one))))) 
                  (v_Vmc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal abst_T 
                               (abst_mult x (abst_plus abst_zero abst_one)) 
                               (abst_mult x abst_one))))) =>
                   v_Vnc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_mult x (abst_plus abst_zero abst_one)) 
                                  (abst_mult x abst_one)))))) =>
                   zen.Rall abst_T 
                     (v_Voc:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vpc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vqc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_equal v_Voc v_Vpc))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_mult v_Vqc v_Voc) 
                                       (abst_mult v_Vqc v_Vpc))))))) 
                     (abst_plus abst_zero abst_one) 
                     (v_Vrc:
                      (zen.proof 
                         (zen.forall abst_T 
                            (v_Vpc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vqc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus abst_zero abst_one) 
                                           v_Vpc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult v_Vqc 
                                              (abst_plus abst_zero abst_one)) 
                                           (abst_mult v_Vqc v_Vpc)))))))) =>
                      zen.Rall abst_T 
                        (v_Vpc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vqc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus abst_zero abst_one) v_Vpc))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_mult v_Vqc 
                                          (abst_plus abst_zero abst_one)) 
                                       (abst_mult v_Vqc v_Vpc)))))) abst_one 
                        (v_Vsc:
                         (zen.proof 
                            (zen.forall abst_T 
                               (v_Vqc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus abst_zero abst_one) 
                                           abst_one))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult v_Vqc 
                                              (abst_plus abst_zero abst_one)) 
                                           (abst_mult v_Vqc abst_one))))))) =>
                         zen.Rall abst_T 
                           (v_Vqc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus abst_zero abst_one) 
                                       abst_one))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_mult v_Vqc 
                                          (abst_plus abst_zero abst_one)) 
                                       (abst_mult v_Vqc abst_one))))) x 
                           (v_Vtc:
                            (zen.proof 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus abst_zero abst_one) 
                                           abst_one))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult x 
                                              (abst_plus abst_zero abst_one)) 
                                           (abst_mult x abst_one)))))) =>
                            zen.Rimply 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus abst_zero abst_one) 
                                       abst_one))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_mult x 
                                          (abst_plus abst_zero abst_one)) 
                                       (abst_mult x abst_one)))) 
                              (v_Vuc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus abst_zero abst_one) 
                                              abst_one))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus abst_zero abst_one) 
                                          abst_one))) __A_1_0_1_LEMMA v_Vuc) 
                              (v_Vvc:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult x 
                                              (abst_plus abst_zero abst_one)) 
                                           (abst_mult x abst_one))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_mult x 
                                             (abst_plus abst_zero abst_one)) 
                                          (abst_mult x abst_one)))) v_Vvc 
                                 v_Vnc) v_Vtc) v_Vsc) v_Vrc) 
                     abst_mult_right_substitution_rule) v_Vlc) 
               (v_Vwc:
                (zen.proof 
                   (zen.not 
                      (zen.and 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T 
                                  (abst_mult x (abst_plus abst_zero abst_one)) 
                                  (abst_mult x abst_one)))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_mult x 
                                        (abst_plus abst_zero abst_one)) 
                                     (abst_mult x abst_one)))))))) =>
                zen.Rcut (zen.triangle (zen.equal abst_T x x)) 
                  (v_Vxc:(zen.proof (zen.triangle (zen.equal abst_T x x))) =>
                   zen.Rsubst basics.bool__t 
                     (v_Vyc:(zen.term basics.bool__t) =>
                      zen.triangle (focal.is_true v_Vyc)) 
                     (abst_equal (abst_mult x abst_one) x) 
                     (abst_equal 
                        (abst_mult x (abst_plus abst_zero abst_one)) x) 
                     (v_Vzc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (abst_equal (abst_mult x abst_one) x) 
                                  (abst_equal 
                                     (abst_mult x 
                                        (abst_plus abst_zero abst_one)) x))))) =>
                      zen.Rsubst abst_T 
                        (v_Vad:(zen.term abst_T) =>
                         zen.not 
                           (zen.triangle 
                              (zen.equal basics.bool__t (abst_equal v_Vad x) 
                                 (abst_equal 
                                    (abst_mult x 
                                       (abst_plus abst_zero abst_one)) x)))) 
                        (abst_mult x abst_one) 
                        (abst_mult x (abst_plus abst_zero abst_one)) 
                        (v_Vbd:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal abst_T (abst_mult x abst_one) 
                                     (abst_mult x 
                                        (abst_plus abst_zero abst_one)))))) =>
                         zen.Rnotand 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal abst_T 
                                    (abst_mult x 
                                       (abst_plus abst_zero abst_one)) 
                                    (abst_mult x abst_one)))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_mult x 
                                          (abst_plus abst_zero abst_one)) 
                                       (abst_mult x abst_one))))) 
                           (v_Vcd:
                            (zen.proof 
                               (zen.not 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_mult x 
                                              (abst_plus abst_zero abst_one)) 
                                           (abst_mult x abst_one)))))) =>
                            zen.Rnotnot 
                              (zen.triangle 
                                 (zen.equal abst_T 
                                    (abst_mult x 
                                       (abst_plus abst_zero abst_one)) 
                                    (abst_mult x abst_one))) 
                              (v_Vdd:
                               (zen.proof 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_mult x 
                                           (abst_plus abst_zero abst_one)) 
                                        (abst_mult x abst_one)))) =>
                               zen.Rcut 
                                 (zen.triangle 
                                    (zen.equal abst_T 
                                       (abst_mult x 
                                          (abst_plus abst_zero abst_one)) 
                                       (abst_mult x 
                                          (abst_plus abst_zero abst_one)))) 
                                 (v_Ved:
                                  (zen.proof 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_mult x 
                                              (abst_plus abst_zero abst_one)) 
                                           (abst_mult x 
                                              (abst_plus abst_zero abst_one))))) =>
                                  zen.Rsubst abst_T 
                                    (v_Vfd:(zen.term abst_T) =>
                                     zen.triangle 
                                       (zen.equal abst_T v_Vfd 
                                          (abst_mult x 
                                             (abst_plus abst_zero abst_one)))) 
                                    (abst_mult x 
                                       (abst_plus abst_zero abst_one)) 
                                    (abst_mult x abst_one) 
                                    (v_Vmc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_mult x 
                                                    (abst_plus abst_zero 
                                                       abst_one)) 
                                                 (abst_mult x abst_one))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_mult x 
                                                (abst_plus abst_zero abst_one)) 
                                             (abst_mult x abst_one))) v_Vdd 
                                       v_Vmc) 
                                    (v_Vgd:
                                     (zen.proof 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult x abst_one) 
                                              (abst_mult x 
                                                 (abst_plus abst_zero 
                                                    abst_one))))) =>
                                     zen.Rsubst abst_T 
                                       (v_Vhd:(zen.term abst_T) =>
                                        zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_mult x abst_one) v_Vhd)) 
                                       (abst_mult x 
                                          (abst_plus abst_zero abst_one)) 
                                       (abst_mult x 
                                          (abst_plus abst_zero abst_one)) 
                                       (v_Vid:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_mult x 
                                                       (abst_plus abst_zero 
                                                          abst_one)) 
                                                    (abst_mult x 
                                                       (abst_plus abst_zero 
                                                          abst_one)))))) =>
                                        zen.Rnoteq abst_T 
                                          (abst_mult x 
                                             (abst_plus abst_zero abst_one)) 
                                          v_Vid) 
                                       (v_Vgd:
                                        (zen.proof 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_mult x abst_one) 
                                                 (abst_mult x 
                                                    (abst_plus abst_zero 
                                                       abst_one))))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_mult x abst_one) 
                                                (abst_mult x 
                                                   (abst_plus abst_zero 
                                                      abst_one)))) v_Vgd 
                                          v_Vbd) v_Vgd) v_Ved) 
                                 (v_Vid:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult x 
                                                 (abst_plus abst_zero 
                                                    abst_one)) 
                                              (abst_mult x 
                                                 (abst_plus abst_zero 
                                                    abst_one)))))) =>
                                  zen.Rnoteq abst_T 
                                    (abst_mult x 
                                       (abst_plus abst_zero abst_one)) v_Vid)) 
                              v_Vcd) 
                           (v_Vjd:
                            (zen.proof 
                               (zen.not 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult x 
                                                 (abst_plus abst_zero 
                                                    abst_one)) 
                                              (abst_mult x abst_one))))))) =>
                            zen.Rnotnot 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_mult x 
                                          (abst_plus abst_zero abst_one)) 
                                       (abst_mult x abst_one)))) 
                              (v_Vvc:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult x 
                                              (abst_plus abst_zero abst_one)) 
                                           (abst_mult x abst_one))))) =>
                               zen.Rall abst_T 
                                 (v_Voc:(zen.term abst_T) =>
                                  zen.forall abst_T 
                                    (v_Vpc:(zen.term abst_T) =>
                                     zen.forall abst_T 
                                       (v_Vqc:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal v_Voc v_Vpc))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Vpc v_Vqc))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Voc v_Vqc))))))) 
                                 (abst_mult x (abst_plus abst_zero abst_one)) 
                                 (v_Vkd:
                                  (zen.proof 
                                     (zen.forall abst_T 
                                        (v_Vpc:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vqc:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult x 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_one)) v_Vpc))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vpc 
                                                          v_Vqc))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult x 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one)) 
                                                          v_Vqc)))))))) =>
                                  zen.Rall abst_T 
                                    (v_Vpc:(zen.term abst_T) =>
                                     zen.forall abst_T 
                                       (v_Vqc:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_mult x 
                                                      (abst_plus abst_zero 
                                                         abst_one)) v_Vpc))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Vpc v_Vqc))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) v_Vqc)))))) 
                                    (abst_mult x abst_one) 
                                    (v_Vld:
                                     (zen.proof 
                                        (zen.forall abst_T 
                                           (v_Vqc:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult x 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_one)) 
                                                       (abst_mult x abst_one)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult x 
                                                             abst_one) v_Vqc))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult x 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one)) 
                                                          v_Vqc))))))) =>
                                     zen.Rall abst_T 
                                       (v_Vqc:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_mult x 
                                                      (abst_plus abst_zero 
                                                         abst_one)) 
                                                   (abst_mult x abst_one)))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult x abst_one) 
                                                      v_Vqc))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) v_Vqc))))) 
                                       x 
                                       (v_Vmd:
                                        (zen.proof 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult x 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_one)) 
                                                       (abst_mult x abst_one)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult x 
                                                             abst_one) x))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult x 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one)) x)))))) =>
                                        zen.Rimply 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_mult x 
                                                      (abst_plus abst_zero 
                                                         abst_one)) 
                                                   (abst_mult x abst_one)))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult x abst_one) 
                                                      x))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) x)))) 
                                          (v_Vnc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult x 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one)) 
                                                          (abst_mult x 
                                                             abst_one)))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) 
                                                      (abst_mult x abst_one)))) 
                                             v_Vvc v_Vnc) 
                                          (v_Vnd:
                                           (zen.proof 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult x 
                                                             abst_one) x))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult x 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one)) x))))) =>
                                           zen.Rimply 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult x abst_one) 
                                                      x))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) x))) 
                                             (v_Vod:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult x 
                                                                abst_one) x))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_mult x 
                                                            abst_one) x))) 
                                                __A_1_0_2_LEMMA v_Vod) 
                                             (v_Vpd:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult x 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one)) x)))) =>
                                              zen.Rsubst basics.bool__t 
                                                (v_Vyc:
                                                 (zen.term basics.bool__t) =>
                                                 zen.triangle 
                                                   (focal.is_true v_Vyc)) 
                                                (abst_equal 
                                                   (abst_mult x 
                                                      (abst_plus abst_zero 
                                                         abst_one)) x) 
                                                (abst_equal 
                                                   (abst_mult x 
                                                      (abst_plus abst_zero 
                                                         abst_one)) x) 
                                                (v_Vqd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                (abst_mult x 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                x) 
                                                             (abst_equal 
                                                                (abst_mult x 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                x))))) =>
                                                 zen.Rsubst abst_T 
                                                   (v_Vad:
                                                    (zen.term abst_T) =>
                                                    zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (abst_equal 
                                                               v_Vad x) 
                                                            (abst_equal 
                                                               (abst_mult x 
                                                                  (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                               x)))) 
                                                   (abst_mult x 
                                                      (abst_plus abst_zero 
                                                         abst_one)) 
                                                   (abst_mult x 
                                                      (abst_plus abst_zero 
                                                         abst_one)) 
                                                   (v_Vid:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T 
                                                                (abst_mult x 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                (abst_mult x 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)))))) =>
                                                    zen.Rnoteq abst_T 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) v_Vid) 
                                                   (v_Vqd:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                   x) 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                   x))))) =>
                                                    zen.Rsubst abst_T 
                                                      (v_Vrd:
                                                       (zen.term abst_T) =>
                                                       zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (abst_equal 
                                                                  (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                  v_Vrd) 
                                                               (abst_equal 
                                                                  (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                  x)))) x x 
                                                      (v_Vsd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T x x)))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T x x)) 
                                                         v_Vxc v_Vsd) 
                                                      (v_Vqd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    x) 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    x))))) =>
                                                       zen.Rnoteq 
                                                         basics.bool__t 
                                                         (abst_equal 
                                                            (abst_mult x 
                                                               (abst_plus 
                                                                  abst_zero 
                                                                  abst_one)) 
                                                            x) v_Vqd) v_Vqd) 
                                                   v_Vqd) 
                                                (v_Vpd:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one)) 
                                                             x)))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_mult x 
                                                               (abst_plus 
                                                                  abst_zero 
                                                                  abst_one)) 
                                                            x))) v_Vpd v_Vkc) 
                                                v_Vpd) v_Vnd) v_Vmd) v_Vld) 
                                    v_Vkd) abst_equal_transitive) v_Vjd) 
                           v_Vwc) 
                        (v_Vqd:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (abst_equal 
                                        (abst_mult x 
                                           (abst_plus abst_zero abst_one)) x) 
                                     (abst_equal 
                                        (abst_mult x 
                                           (abst_plus abst_zero abst_one)) x))))) =>
                         zen.Rsubst abst_T 
                           (v_Vrd:(zen.term abst_T) =>
                            zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (abst_equal 
                                       (abst_mult x 
                                          (abst_plus abst_zero abst_one)) 
                                       v_Vrd) 
                                    (abst_equal 
                                       (abst_mult x 
                                          (abst_plus abst_zero abst_one)) x)))) 
                           x x 
                           (v_Vsd:
                            (zen.proof 
                               (zen.not (zen.triangle (zen.equal abst_T x x)))) =>
                            zen.Raxiom (zen.triangle (zen.equal abst_T x x)) 
                              v_Vxc v_Vsd) 
                           (v_Vqd:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (abst_equal 
                                           (abst_mult x 
                                              (abst_plus abst_zero abst_one)) 
                                           x) 
                                        (abst_equal 
                                           (abst_mult x 
                                              (abst_plus abst_zero abst_one)) 
                                           x))))) =>
                            zen.Rnoteq basics.bool__t 
                              (abst_equal 
                                 (abst_mult x (abst_plus abst_zero abst_one)) 
                                 x) v_Vqd) v_Vqd) v_Vzc) 
                     (v_Vpd:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_mult x (abst_plus abst_zero abst_one)) 
                                  x)))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_mult x (abst_plus abst_zero abst_one)) 
                                 x))) v_Vpd v_Vkc) __A_1_0_2_LEMMA) 
                  (v_Vsd:
                   (zen.proof (zen.not (zen.triangle (zen.equal abst_T x x)))) =>
                   zen.Rcut (zen.triangle (focal.is_true (abst_equal x x))) 
                     (v_Vtd:
                      (zen.proof 
                         (zen.triangle (focal.is_true (abst_equal x x)))) =>
                      zen.Rall abst_T 
                        (v_Voc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vpc:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vqc:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal v_Voc v_Vpc))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vpc v_Vqc))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Voc v_Vqc))))))) 
                        (abst_mult x abst_one) 
                        (v_Vud:
                         (zen.proof 
                            (zen.forall abst_T 
                               (v_Vpc:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vqc:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult x abst_one) v_Vpc))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vpc v_Vqc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult x abst_one) v_Vqc)))))))) =>
                         zen.Rall abst_T 
                           (v_Vpc:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vqc:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_mult x abst_one) 
                                          v_Vpc))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vpc v_Vqc))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_mult x abst_one) 
                                             v_Vqc)))))) x 
                           (v_Vvd:
                            (zen.proof 
                               (zen.forall abst_T 
                                  (v_Vqc:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult x abst_one) x))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x v_Vqc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult x abst_one) v_Vqc))))))) =>
                            zen.Rall abst_T 
                              (v_Vqc:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_mult x abst_one) x))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal x v_Vqc))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_mult x abst_one) 
                                             v_Vqc))))) x 
                              (v_Vwd:
                               (zen.proof 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult x abst_one) x))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true (abst_equal x x))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult x abst_one) x)))))) =>
                               zen.Rimply 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_mult x abst_one) x))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal x x))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_mult x abst_one) 
                                             x)))) 
                                 (v_Vod:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult x abst_one) x))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_mult x abst_one) 
                                             x))) __A_1_0_2_LEMMA v_Vod) 
                                 (v_Vxd:
                                  (zen.proof 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true (abst_equal x x))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult x abst_one) x))))) =>
                                  zen.Rimply 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal x x))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_mult x abst_one) 
                                             x))) 
                                    (v_Vyd:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true (abst_equal x x))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true (abst_equal x x))) 
                                       v_Vtd v_Vyd) 
                                    (__A_1_0_2_LEMMA:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult x abst_one) x)))) =>
                                     zen.Rsubst basics.bool__t 
                                       (v_Vyc:(zen.term basics.bool__t) =>
                                        zen.triangle (focal.is_true v_Vyc)) 
                                       (abst_equal (abst_mult x abst_one) x) 
                                       (abst_equal 
                                          (abst_mult x 
                                             (abst_plus abst_zero abst_one)) 
                                          x) 
                                       (v_Vzc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal 
                                                       (abst_mult x abst_one) 
                                                       x) 
                                                    (abst_equal 
                                                       (abst_mult x 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_one)) x))))) =>
                                        zen.Rsubst abst_T 
                                          (v_Vad:(zen.term abst_T) =>
                                           zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (abst_equal v_Vad x) 
                                                   (abst_equal 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) x)))) 
                                          (abst_mult x abst_one) 
                                          (abst_mult x 
                                             (abst_plus abst_zero abst_one)) 
                                          (v_Vbd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_mult x abst_one) 
                                                       (abst_mult x 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_one)))))) =>
                                           zen.Rnotand 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) 
                                                      (abst_mult x abst_one)))) 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_mult x 
                                                            (abst_plus 
                                                               abst_zero 
                                                               abst_one)) 
                                                         (abst_mult x 
                                                            abst_one))))) 
                                             (v_Vcd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_mult x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one)) 
                                                             (abst_mult x 
                                                                abst_one)))))) =>
                                              zen.Rnotnot 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_mult x 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one)) 
                                                      (abst_mult x abst_one))) 
                                                (v_Vdd:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_mult x 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one)) 
                                                          (abst_mult x 
                                                             abst_one)))) =>
                                                 zen.Reqsym abst_T 
                                                   (abst_mult x 
                                                      (abst_plus abst_zero 
                                                         abst_one)) 
                                                   (abst_mult x abst_one) 
                                                   v_Vdd v_Vbd) v_Vcd) 
                                             (v_Vjd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult x 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                (abst_mult x 
                                                                   abst_one))))))) =>
                                              zen.Rnotnot 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_mult x 
                                                            (abst_plus 
                                                               abst_zero 
                                                               abst_one)) 
                                                         (abst_mult x 
                                                            abst_one)))) 
                                                (v_Vvc:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one)) 
                                                             (abst_mult x 
                                                                abst_one))))) =>
                                                 zen.Rall abst_T 
                                                   (v_Voc:
                                                    (zen.term abst_T) =>
                                                    zen.forall abst_T 
                                                      (v_Vpc:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vqc:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vpc 
                                                                    v_Vqc))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vqc))))))) 
                                                   (abst_mult x 
                                                      (abst_plus abst_zero 
                                                         abst_one)) 
                                                   (v_Vkd:
                                                    (zen.proof 
                                                       (zen.forall abst_T 
                                                          (v_Vpc:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vqc:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    v_Vpc))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vpc 
                                                                    v_Vqc))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    v_Vqc)))))))) =>
                                                    zen.Rall abst_T 
                                                      (v_Vpc:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vqc:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    v_Vpc))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vpc 
                                                                    v_Vqc))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    v_Vqc)))))) 
                                                      (abst_mult x abst_one) 
                                                      (v_Vld:
                                                       (zen.proof 
                                                          (zen.forall abst_T 
                                                             (v_Vqc:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    v_Vqc))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    v_Vqc))))))) =>
                                                       zen.Rall abst_T 
                                                         (v_Vqc:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    v_Vqc))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    v_Vqc))))) 
                                                         x 
                                                         (v_Vmd:
                                                          (zen.proof 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    x))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    x)))))) =>
                                                          zen.Rimply 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    x))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    x)))) 
                                                            (v_Vnc:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)))))) =>
                                                             zen.Raxiom 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one)))) 
                                                               v_Vvc v_Vnc) 
                                                            (v_Vnd:
                                                             (zen.proof 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    x))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    x))))) =>
                                                             zen.Rimply 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    x))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    x))) 
                                                               (v_Vod:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    x))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_one) 
                                                                    x))) 
                                                                  __A_1_0_2_LEMMA 
                                                                  v_Vod) 
                                                               (v_Vpd:
                                                                (zen.proof 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    x)))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    x 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one)) 
                                                                    x))) 
                                                                  v_Vpd v_Vkc) 
                                                               v_Vnd) v_Vmd) 
                                                         v_Vld) v_Vkd) 
                                                   abst_equal_transitive) 
                                                v_Vjd) v_Vwc) 
                                          (v_Vqd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_mult x 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one)) x) 
                                                       (abst_equal 
                                                          (abst_mult x 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one)) x))))) =>
                                           zen.Rsubst abst_T 
                                             (v_Vrd:(zen.term abst_T) =>
                                              zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (abst_equal 
                                                         (abst_mult x 
                                                            (abst_plus 
                                                               abst_zero 
                                                               abst_one)) 
                                                         v_Vrd) 
                                                      (abst_equal 
                                                         (abst_mult x 
                                                            (abst_plus 
                                                               abst_zero 
                                                               abst_one)) x)))) 
                                             x x 
                                             (v_Vsd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T x x)))) =>
                                              zen.Rnoteq abst_T x v_Vsd) 
                                             (v_Vqd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_mult x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one)) 
                                                             x) 
                                                          (abst_equal 
                                                             (abst_mult x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one)) 
                                                             x))))) =>
                                              zen.Rnoteq basics.bool__t 
                                                (abst_equal 
                                                   (abst_mult x 
                                                      (abst_plus abst_zero 
                                                         abst_one)) x) v_Vqd) 
                                             v_Vqd) v_Vzc) 
                                       (v_Vpd:
                                        (zen.proof 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult x 
                                                       (abst_plus abst_zero 
                                                          abst_one)) x)))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_mult x 
                                                      (abst_plus abst_zero 
                                                         abst_one)) x))) 
                                          v_Vpd v_Vkc) __A_1_0_2_LEMMA) v_Vxd) 
                                 v_Vwd) v_Vvd) v_Vud) abst_equal_transitive) 
                     (v_Vyd:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle (focal.is_true (abst_equal x x))))) =>
                      zen.Rnoteq abst_T x v_Vsd))))) 
           (zen.nnpp 
              (zen.triangle 
                 (focal.is_true (abst_equal (abst_mult x abst_one) x))) 
              (v_Vzb:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true (abst_equal (abst_mult x abst_one) x))))) =>
               zen.Rall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult v_Vac abst_one) v_Vac))) x 
                 (v_Vbc:
                  (zen.proof 
                     (zen.triangle 
                        (focal.is_true (abst_equal (abst_mult x abst_one) x)))) =>
                  zen.Raxiom 
                    (zen.triangle 
                       (focal.is_true (abst_equal (abst_mult x abst_one) x))) 
                    v_Vbc v_Vzb) abst_one_is_right_neutral))) 
          (zen.nnpp 
             (zen.triangle 
                (focal.is_true 
                   (abst_equal (abst_plus abst_zero abst_one) abst_one))) 
             (v_Vzb:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_plus abst_zero abst_one) abst_one))))) =>
              zen.Rall abst_T 
                (v_Vac:(zen.term abst_T) =>
                 zen.and 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_plus v_Vac abst_zero) v_Vac))) 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_plus abst_zero v_Vac) v_Vac)))) 
                abst_one 
                (v_Vbc:
                 (zen.proof 
                    (zen.and 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_plus abst_one abst_zero) 
                                abst_one))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_plus abst_zero abst_one) 
                                abst_one))))) =>
                 zen.Rand 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_plus abst_one abst_zero) abst_one))) 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_plus abst_zero abst_one) abst_one))) 
                   (v_Vcc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_plus abst_one abst_zero) 
                                abst_one)))) =>
                    v_Vdc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_plus abst_zero abst_one) 
                                abst_one)))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_plus abst_zero abst_one) 
                               abst_one))) v_Vdc v_Vzb) v_Vbc) 
                abst_zero_is_neutral)))).

def Ring__zero_left_absorbes :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_one:(cc.eT abst_T) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (abst_equal x y)) 
                                   (dk_logic.ebP (abst_equal y x)))))) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_mult_left_substitution_rule:(dk_logic.eP 
                                      (dk_logic.forall abst_T 
                                         (x:(cc.eT abst_T) =>
                                          dk_logic.forall abst_T 
                                            (y:(cc.eT abst_T) =>
                                             dk_logic.forall abst_T 
                                               (z:(cc.eT abst_T) =>
                                                dk_logic.imp 
                                                  (dk_logic.ebP 
                                                     (abst_equal x y)) 
                                                  (dk_logic.ebP 
                                                     (abst_equal 
                                                        (abst_mult x z) 
                                                        (abst_mult y z)))))))) ->
  abst_mult_right_distributes_on_plus:(dk_logic.eP 
                                         (dk_logic.forall abst_T 
                                            (x:(cc.eT abst_T) =>
                                             dk_logic.forall abst_T 
                                               (y:(cc.eT abst_T) =>
                                                dk_logic.forall abst_T 
                                                  (z:(cc.eT abst_T) =>
                                                   dk_logic.ebP 
                                                     (abst_equal 
                                                        (abst_mult 
                                                           (abst_plus x y) z) 
                                                        (abst_plus 
                                                           (abst_mult x z) 
                                                           (abst_mult y z)))))))) ->
  abst_one_is_left_neutral:(dk_logic.eP 
                              (dk_logic.forall abst_T 
                                 (x:(cc.eT abst_T) =>
                                  dk_logic.ebP 
                                    (abst_equal (abst_mult abst_one x) x)))) ->
  abst_plus_right_substitution_rule:(dk_logic.eP 
                                       (dk_logic.forall abst_T 
                                          (x:(cc.eT abst_T) =>
                                           dk_logic.forall abst_T 
                                             (y:(cc.eT abst_T) =>
                                              dk_logic.forall abst_T 
                                                (z:(cc.eT abst_T) =>
                                                 dk_logic.imp 
                                                   (dk_logic.ebP 
                                                      (abst_equal x y)) 
                                                   (dk_logic.ebP 
                                                      (abst_equal 
                                                         (abst_plus z x) 
                                                         (abst_plus z y)))))))) ->
  abst_zero:(cc.eT abst_T) ->
  abst_zero_is_neutral:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.and 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus x abst_zero) x)) 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus abst_zero x) x))))) ->
  abst_plus_is_regular:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.forall abst_T 
                                   (z:(cc.eT abst_T) =>
                                    dk_logic.and 
                                      (dk_logic.imp 
                                         (dk_logic.ebP 
                                            (abst_equal (abst_plus x y) 
                                               (abst_plus x z))) 
                                         (dk_logic.ebP (abst_equal y z))) 
                                      (dk_logic.imp 
                                         (dk_logic.ebP 
                                            (abst_equal (abst_plus x z) 
                                               (abst_plus y z))) 
                                         (dk_logic.ebP (abst_equal x y)))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.ebP (abst_equal (abst_mult abst_zero x) abst_zero)))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_one:(cc.eT abst_T) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal y x)))))) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_mult_left_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.ebP (abst_equal (abst_mult x z) (abst_mult y z)))))))) =>
  abst_mult_right_distributes_on_plus:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.ebP 
                 (abst_equal (abst_mult (abst_plus x y) z) 
                    (abst_plus (abst_mult x z) (abst_mult y z)))))))) =>
  abst_one_is_left_neutral:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.ebP (abst_equal (abst_mult abst_one x) x)))) =>
  abst_plus_right_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.ebP (abst_equal (abst_plus z x) (abst_plus z y)))))))) =>
  abst_zero:(cc.eT abst_T) =>
  abst_zero_is_neutral:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.and (dk_logic.ebP (abst_equal (abst_plus x abst_zero) x)) 
           (dk_logic.ebP (abst_equal (abst_plus abst_zero x) x))))) =>
  abst_plus_is_regular:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.and 
                 (dk_logic.imp 
                    (dk_logic.ebP 
                       (abst_equal (abst_plus x y) (abst_plus x z))) 
                    (dk_logic.ebP (abst_equal y z))) 
                 (dk_logic.imp 
                    (dk_logic.ebP 
                       (abst_equal (abst_plus x z) (abst_plus y z))) 
                    (dk_logic.ebP (abst_equal x y)))))))) =>
  (__B_1_LEMMA:
   (x:(cc.eT abst_T) ->
    dk_logic.eP (dk_logic.ebP (abst_equal (abst_mult abst_zero x) abst_zero))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.triangle 
           (focal.is_true (abst_equal (abst_mult abst_zero v_Vzb) abst_zero)))) 
     (v_Vac:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.triangle 
                  (focal.is_true 
                     (abst_equal (abst_mult abst_zero v_Vzb) abst_zero)))))) =>
      zen.Raxiom 
        (zen.forall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.triangle 
              (focal.is_true 
                 (abst_equal (abst_mult abst_zero v_Vzb) abst_zero)))) 
        __B_1_LEMMA v_Vac)) 
    (x:(cc.eT abst_T) =>
     (__B_1_2_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (abst_equal (abst_mult (abst_plus abst_zero abst_one) x) x))) =>
      (__B_1_3_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP 
             (abst_equal (abst_mult (abst_plus abst_zero abst_one) x) 
                (abst_plus (abst_mult abst_zero x) (abst_mult abst_one x))))) =>
       (__B_1_4_LEMMA:
        (dk_logic.eP 
           (dk_logic.ebP (abst_equal (abst_plus (abst_mult abst_zero x) x) x))) =>
        (__B_1_5_LEMMA:
         (dk_logic.eP 
            (dk_logic.ebP 
               (abst_equal (abst_plus (abst_mult abst_zero x) x) 
                  (abst_plus abst_zero x)))) =>
         zen.nnpp 
           (zen.triangle 
              (focal.is_true (abst_equal (abst_mult abst_zero x) abst_zero))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_mult abst_zero x) abst_zero))))) =>
            zen.Rall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.and 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus v_Vac v_Vbc) 
                                   (abst_plus v_Vac v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vbc v_Vcc)))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus v_Vac v_Vcc) 
                                   (abst_plus v_Vbc v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vac v_Vbc))))))) 
              (abst_mult abst_zero x) 
              (v_Vdc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.and 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult abst_zero x) 
                                          v_Vbc) 
                                       (abst_plus (abst_mult abst_zero x) 
                                          v_Vcc)))) 
                              (zen.triangle 
                                 (focal.is_true (abst_equal v_Vbc v_Vcc)))) 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult abst_zero x) 
                                          v_Vcc) (abst_plus v_Vbc v_Vcc)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_mult abst_zero x) v_Vbc)))))))) =>
               zen.Rall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.and 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_mult abst_zero x) v_Vbc) 
                                   (abst_plus (abst_mult abst_zero x) v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vbc v_Vcc)))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_mult abst_zero x) v_Vcc) 
                                   (abst_plus v_Vbc v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult abst_zero x) v_Vbc)))))) 
                 abst_zero 
                 (v_Vec:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.and 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult abst_zero x) 
                                          abst_zero) 
                                       (abst_plus (abst_mult abst_zero x) 
                                          v_Vcc)))) 
                              (zen.triangle 
                                 (focal.is_true (abst_equal abst_zero v_Vcc)))) 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult abst_zero x) 
                                          v_Vcc) (abst_plus abst_zero v_Vcc)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_mult abst_zero x) 
                                       abst_zero))))))) =>
                  zen.Rall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.and 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_mult abst_zero x) 
                                      abst_zero) 
                                   (abst_plus (abst_mult abst_zero x) v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal abst_zero v_Vcc)))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_mult abst_zero x) v_Vcc) 
                                   (abst_plus abst_zero v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult abst_zero x) abst_zero))))) 
                    x 
                    (v_Vfc:
                     (zen.proof 
                        (zen.and 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult abst_zero x) 
                                          abst_zero) 
                                       (abst_plus (abst_mult abst_zero x) x)))) 
                              (zen.triangle 
                                 (focal.is_true (abst_equal abst_zero x)))) 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult abst_zero x) x) 
                                       (abst_plus abst_zero x)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_mult abst_zero x) 
                                       abst_zero)))))) =>
                     zen.Rand 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_mult abst_zero x) 
                                      abst_zero) 
                                   (abst_plus (abst_mult abst_zero x) x)))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal abst_zero x)))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_mult abst_zero x) x) 
                                   (abst_plus abst_zero x)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult abst_zero x) abst_zero)))) 
                       (v_Vgc:
                        (zen.proof 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult abst_zero x) 
                                          abst_zero) 
                                       (abst_plus (abst_mult abst_zero x) x)))) 
                              (zen.triangle 
                                 (focal.is_true (abst_equal abst_zero x))))) =>
                        v_Vhc:
                        (zen.proof 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult abst_zero x) x) 
                                       (abst_plus abst_zero x)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_mult abst_zero x) 
                                       abst_zero))))) =>
                        zen.Rimply 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_mult abst_zero x) x) 
                                   (abst_plus abst_zero x)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult abst_zero x) abst_zero))) 
                          (v_Vic:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus (abst_mult abst_zero x) 
                                             x) (abst_plus abst_zero x)))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_mult abst_zero x) x) 
                                      (abst_plus abst_zero x)))) 
                             __B_1_5_LEMMA v_Vic) 
                          (v_Vjc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_mult abst_zero x) 
                                       abst_zero)))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_mult abst_zero x) 
                                      abst_zero))) v_Vjc v_Vzb) v_Vhc) v_Vfc) 
                    v_Vec) v_Vdc) abst_plus_is_regular)) 
          (zen.nnpp 
             (zen.triangle 
                (focal.is_true 
                   (abst_equal (abst_plus (abst_mult abst_zero x) x) 
                      (abst_plus abst_zero x)))) 
             (v_Vkc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_plus (abst_mult abst_zero x) x) 
                             (abst_plus abst_zero x)))))) =>
              zen.Rcut 
                (zen.and 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T 
                            (abst_plus (abst_mult abst_zero x) x) 
                            (abst_plus (abst_mult abst_zero x) x)))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_plus (abst_mult abst_zero x) x) 
                               (abst_plus (abst_mult abst_zero x) x)))))) 
                (v_Vlc:
                 (zen.proof 
                    (zen.and 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T 
                                (abst_plus (abst_mult abst_zero x) x) 
                                (abst_plus (abst_mult abst_zero x) x)))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_mult abst_zero x) x) 
                                   (abst_plus (abst_mult abst_zero x) x))))))) =>
                 zen.Rand 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T 
                            (abst_plus (abst_mult abst_zero x) x) 
                            (abst_plus (abst_mult abst_zero x) x)))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_plus (abst_mult abst_zero x) x) 
                               (abst_plus (abst_mult abst_zero x) x))))) 
                   (v_Vmc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T 
                                (abst_plus (abst_mult abst_zero x) x) 
                                (abst_plus (abst_mult abst_zero x) x))))) =>
                    v_Vnc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_mult abst_zero x) x) 
                                   (abst_plus (abst_mult abst_zero x) x)))))) =>
                    zen.Rnoteq abst_T (abst_plus (abst_mult abst_zero x) x) 
                      v_Vmc) v_Vlc) 
                (v_Voc:
                 (zen.proof 
                    (zen.not 
                       (zen.and 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal abst_T 
                                   (abst_plus (abst_mult abst_zero x) x) 
                                   (abst_plus (abst_mult abst_zero x) x)))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_mult abst_zero x) x) 
                                      (abst_plus (abst_mult abst_zero x) x)))))))) =>
                 zen.Rcut 
                   (zen.triangle (zen.equal abst_T x (abst_plus abst_zero x))) 
                   (v_Vpc:
                    (zen.proof 
                       (zen.triangle 
                          (zen.equal abst_T x (abst_plus abst_zero x)))) =>
                    zen.Rsubst basics.bool__t 
                      (v_Vqc:(zen.term basics.bool__t) =>
                       zen.triangle (focal.is_true v_Vqc)) 
                      (abst_equal (abst_plus (abst_mult abst_zero x) x) x) 
                      (abst_equal (abst_plus (abst_mult abst_zero x) x) 
                         (abst_plus abst_zero x)) 
                      (v_Vrc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (abst_equal 
                                      (abst_plus (abst_mult abst_zero x) x) x) 
                                   (abst_equal 
                                      (abst_plus (abst_mult abst_zero x) x) 
                                      (abst_plus abst_zero x)))))) =>
                       zen.Rsubst abst_T 
                         (v_Vsc:(zen.term abst_T) =>
                          zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (abst_equal v_Vsc x) 
                                  (abst_equal 
                                     (abst_plus (abst_mult abst_zero x) x) 
                                     (abst_plus abst_zero x))))) 
                         (abst_plus (abst_mult abst_zero x) x) 
                         (abst_plus (abst_mult abst_zero x) x) 
                         (v_Vmc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_plus (abst_mult abst_zero x) x) 
                                      (abst_plus (abst_mult abst_zero x) x))))) =>
                          zen.Rnotand 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_plus (abst_mult abst_zero x) x) 
                                     (abst_plus (abst_mult abst_zero x) x)))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus (abst_mult abst_zero x) x) 
                                        (abst_plus (abst_mult abst_zero x) x))))) 
                            (v_Vtc:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_plus 
                                               (abst_mult abst_zero x) x) 
                                            (abst_plus 
                                               (abst_mult abst_zero x) x)))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_plus (abst_mult abst_zero x) x) 
                                     (abst_plus (abst_mult abst_zero x) x))) 
                               (v_Vuc:
                                (zen.proof 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_plus (abst_mult abst_zero x) x) 
                                         (abst_plus (abst_mult abst_zero x) x)))) =>
                                zen.Rcut 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_plus (abst_mult abst_zero x) x) 
                                        (abst_plus (abst_mult abst_zero x) x))) 
                                  (v_Vuc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_plus 
                                               (abst_mult abst_zero x) x) 
                                            (abst_plus 
                                               (abst_mult abst_zero x) x)))) =>
                                   zen.Rsubst abst_T 
                                     (v_Vvc:(zen.term abst_T) =>
                                      zen.triangle 
                                        (zen.equal abst_T v_Vvc 
                                           (abst_plus 
                                              (abst_mult abst_zero x) x))) 
                                     (abst_plus (abst_mult abst_zero x) x) 
                                     (abst_plus (abst_mult abst_zero x) x) 
                                     (v_Vmc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus 
                                                     (abst_mult abst_zero x) 
                                                     x) 
                                                  (abst_plus 
                                                     (abst_mult abst_zero x) 
                                                     x))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus 
                                                 (abst_mult abst_zero x) x) 
                                              (abst_plus 
                                                 (abst_mult abst_zero x) x))) 
                                        v_Vuc v_Vmc) 
                                     (v_Vuc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus 
                                                  (abst_mult abst_zero x) x) 
                                               (abst_plus 
                                                  (abst_mult abst_zero x) x)))) =>
                                      zen.Rsubst abst_T 
                                        (v_Vwc:(zen.term abst_T) =>
                                         zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus 
                                                 (abst_mult abst_zero x) x) 
                                              v_Vwc)) 
                                        (abst_plus (abst_mult abst_zero x) x) 
                                        (abst_plus (abst_mult abst_zero x) x) 
                                        (v_Vmc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus 
                                                        (abst_mult abst_zero 
                                                           x) x) 
                                                     (abst_plus 
                                                        (abst_mult abst_zero 
                                                           x) x))))) =>
                                         zen.Rnoteq abst_T 
                                           (abst_plus 
                                              (abst_mult abst_zero x) x) 
                                           v_Vmc) 
                                        (v_Vuc:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus 
                                                     (abst_mult abst_zero x) 
                                                     x) 
                                                  (abst_plus 
                                                     (abst_mult abst_zero x) 
                                                     x)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus 
                                                    (abst_mult abst_zero x) x) 
                                                 (abst_plus 
                                                    (abst_mult abst_zero x) x))) 
                                           v_Vuc v_Vmc) v_Vuc) v_Vuc) 
                                  (v_Vmc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus 
                                                  (abst_mult abst_zero x) x) 
                                               (abst_plus 
                                                  (abst_mult abst_zero x) x))))) =>
                                   zen.Rnoteq abst_T 
                                     (abst_plus (abst_mult abst_zero x) x) 
                                     v_Vmc)) v_Vtc) 
                            (v_Vxc:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_mult abst_zero x) x) 
                                               (abst_plus 
                                                  (abst_mult abst_zero x) x))))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus (abst_mult abst_zero x) x) 
                                        (abst_plus (abst_mult abst_zero x) x)))) 
                               (v_Vyc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_mult abst_zero x) x) 
                                            (abst_plus 
                                               (abst_mult abst_zero x) x))))) =>
                                zen.Rall abst_T 
                                  (v_Vzc:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vad:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vbd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vzc v_Vad))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vad v_Vbd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vzc v_Vbd))))))) 
                                  (abst_plus (abst_mult abst_zero x) x) 
                                  (v_Vcd:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vad:(zen.term abst_T) =>
                                          zen.forall abst_T 
                                            (v_Vbd:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult 
                                                              abst_zero x) x) 
                                                        v_Vad))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vad 
                                                           v_Vbd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 abst_zero x) 
                                                              x) v_Vbd)))))))) =>
                                   zen.Rall abst_T 
                                     (v_Vad:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vbd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult abst_zero x) 
                                                       x) v_Vad))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vad v_Vbd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             abst_zero x) x) 
                                                       v_Vbd)))))) 
                                     (abst_plus (abst_mult abst_zero x) x) 
                                     (v_Vdd:
                                      (zen.proof 
                                         (zen.forall abst_T 
                                            (v_Vbd:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult 
                                                              abst_zero x) x) 
                                                        (abst_plus 
                                                           (abst_mult 
                                                              abst_zero x) x)))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 abst_zero x) 
                                                              x) v_Vbd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 abst_zero x) 
                                                              x) v_Vbd))))))) =>
                                      zen.Rall abst_T 
                                        (v_Vbd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult abst_zero x) 
                                                       x) 
                                                    (abst_plus 
                                                       (abst_mult abst_zero x) 
                                                       x)))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             abst_zero x) x) 
                                                       v_Vbd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             abst_zero x) x) 
                                                       v_Vbd))))) x 
                                        (v_Ved:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult 
                                                              abst_zero x) x) 
                                                        (abst_plus 
                                                           (abst_mult 
                                                              abst_zero x) x)))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 abst_zero x) 
                                                              x) x))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 abst_zero x) 
                                                              x) x)))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult abst_zero x) 
                                                       x) 
                                                    (abst_plus 
                                                       (abst_mult abst_zero x) 
                                                       x)))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             abst_zero x) x) 
                                                       x))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             abst_zero x) x) 
                                                       x)))) 
                                           (v_Vnc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 abst_zero x) 
                                                              x) 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 abst_zero x) 
                                                              x)))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             abst_zero x) x) 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             abst_zero x) x)))) 
                                              v_Vyc v_Vnc) 
                                           (v_Vfd:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 abst_zero x) 
                                                              x) x))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 abst_zero x) 
                                                              x) x))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             abst_zero x) x) 
                                                       x))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             abst_zero x) x) 
                                                       x))) 
                                              (v_Vgd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    abst_zero 
                                                                    x) x) x))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                abst_zero x) 
                                                             x) x))) 
                                                 __B_1_4_LEMMA v_Vgd) 
                                              (__B_1_4_LEMMA:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 abst_zero x) 
                                                              x) x)))) =>
                                               zen.Rsubst basics.bool__t 
                                                 (v_Vqc:
                                                  (zen.term basics.bool__t) =>
                                                  zen.triangle 
                                                    (focal.is_true v_Vqc)) 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult abst_zero x) 
                                                       x) x) 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult abst_zero x) 
                                                       x) 
                                                    (abst_plus abst_zero x)) 
                                                 (v_Vrc:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    abst_zero 
                                                                    x) x) x) 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                 (abst_plus 
                                                                    abst_zero 
                                                                    x)))))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Vsc:
                                                     (zen.term abst_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                v_Vsc x) 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   x))))) 
                                                    (abst_plus 
                                                       (abst_mult abst_zero x) 
                                                       x) 
                                                    (abst_plus 
                                                       (abst_mult abst_zero x) 
                                                       x) 
                                                    (v_Vmc:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    abst_zero 
                                                                    x) x))))) =>
                                                     zen.Rnoteq abst_T 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             abst_zero x) x) 
                                                       v_Vmc) 
                                                    (v_Vrc:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) x) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (
                                                                    abst_plus 
                                                                    abst_zero 
                                                                    x)))))) =>
                                                     zen.Rsubst abst_T 
                                                       (v_Vhd:
                                                        (zen.term abst_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                   v_Vhd) 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    x))))) x 
                                                       (abst_plus abst_zero x) 
                                                       (v_Vid:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T x 
                                                                    (
                                                                    abst_plus 
                                                                    abst_zero 
                                                                    x))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   x))) 
                                                          v_Vpc v_Vid) 
                                                       (v_Vjd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x)) 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x)))))) =>
                                                        zen.Rnoteq 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   abst_zero 
                                                                   x) x) 
                                                             (abst_plus 
                                                                abst_zero x)) 
                                                          v_Vjd) v_Vrc) v_Vrc) 
                                                 (v_Vkd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                              (abst_plus 
                                                                 abst_zero x))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   abst_zero 
                                                                   x) x) 
                                                             (abst_plus 
                                                                abst_zero x)))) 
                                                    v_Vkd v_Vkc) 
                                                 __B_1_4_LEMMA) v_Vfd) v_Ved) 
                                        v_Vdd) v_Vcd) abst_equal_transitive) 
                               v_Vxc) v_Voc) 
                         (v_Vrc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_equal 
                                         (abst_plus (abst_mult abst_zero x) x) 
                                         x) 
                                      (abst_equal 
                                         (abst_plus (abst_mult abst_zero x) x) 
                                         (abst_plus abst_zero x)))))) =>
                          zen.Rsubst abst_T 
                            (v_Vhd:(zen.term abst_T) =>
                             zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (abst_equal 
                                        (abst_plus (abst_mult abst_zero x) x) 
                                        v_Vhd) 
                                     (abst_equal 
                                        (abst_plus (abst_mult abst_zero x) x) 
                                        (abst_plus abst_zero x))))) x 
                            (abst_plus abst_zero x) 
                            (v_Vid:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T x 
                                         (abst_plus abst_zero x))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (zen.equal abst_T x (abst_plus abst_zero x))) 
                               v_Vpc v_Vid) 
                            (v_Vjd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_mult abst_zero x) x) 
                                            (abst_plus abst_zero x)) 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_mult abst_zero x) x) 
                                            (abst_plus abst_zero x)))))) =>
                             zen.Rnoteq basics.bool__t 
                               (abst_equal 
                                  (abst_plus (abst_mult abst_zero x) x) 
                                  (abst_plus abst_zero x)) v_Vjd) v_Vrc) 
                         v_Vrc) 
                      (v_Vkd:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_mult abst_zero x) x) 
                                   (abst_plus abst_zero x))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_mult abst_zero x) x) 
                                  (abst_plus abst_zero x)))) v_Vkd v_Vkc) 
                      __B_1_4_LEMMA) 
                   (v_Vid:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T x (abst_plus abst_zero x))))) =>
                    zen.Rcut 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal x (abst_plus abst_zero x)))) 
                      (v_Vld:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal x (abst_plus abst_zero x))))) =>
                       zen.Rall abst_T 
                         (v_Vzc:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vad:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vbd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vzc v_Vad))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vad v_Vbd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vzc v_Vbd))))))) 
                         (abst_plus (abst_mult abst_zero x) x) 
                         (v_Vcd:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vad:(zen.term abst_T) =>
                                 zen.forall abst_T 
                                   (v_Vbd:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_mult abst_zero x) x) 
                                               v_Vad))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vad v_Vbd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus 
                                                     (abst_mult abst_zero x) 
                                                     x) v_Vbd)))))))) =>
                          zen.Rall abst_T 
                            (v_Vad:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vbd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult abst_zero x) x) 
                                           v_Vad))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vad v_Vbd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus 
                                                 (abst_mult abst_zero x) x) 
                                              v_Vbd)))))) x 
                            (v_Vmd:
                             (zen.proof 
                                (zen.forall abst_T 
                                   (v_Vbd:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_mult abst_zero x) x) 
                                               x))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal x v_Vbd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus 
                                                     (abst_mult abst_zero x) 
                                                     x) v_Vbd))))))) =>
                             zen.Rall abst_T 
                               (v_Vbd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult abst_zero x) x) x))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (abst_equal x v_Vbd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus 
                                                 (abst_mult abst_zero x) x) 
                                              v_Vbd))))) 
                               (abst_plus abst_zero x) 
                               (v_Vnd:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_mult abst_zero x) x) 
                                               x))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal x 
                                                  (abst_plus abst_zero x)))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus 
                                                     (abst_mult abst_zero x) 
                                                     x) 
                                                  (abst_plus abst_zero x))))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult abst_zero x) x) x))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal x 
                                              (abst_plus abst_zero x)))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus 
                                                 (abst_mult abst_zero x) x) 
                                              (abst_plus abst_zero x))))) 
                                  (v_Vgd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus 
                                                     (abst_mult abst_zero x) 
                                                     x) x))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus 
                                                 (abst_mult abst_zero x) x) x))) 
                                     __B_1_4_LEMMA v_Vgd) 
                                  (v_Vod:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal x 
                                                  (abst_plus abst_zero x)))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus 
                                                     (abst_mult abst_zero x) 
                                                     x) 
                                                  (abst_plus abst_zero x)))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal x 
                                              (abst_plus abst_zero x)))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus 
                                                 (abst_mult abst_zero x) x) 
                                              (abst_plus abst_zero x)))) 
                                     (v_Vpd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal x 
                                                     (abst_plus abst_zero x)))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x 
                                                 (abst_plus abst_zero x)))) 
                                        v_Vld v_Vpd) 
                                     (v_Vkd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus 
                                                     (abst_mult abst_zero x) 
                                                     x) 
                                                  (abst_plus abst_zero x))))) =>
                                      zen.Rsubst basics.bool__t 
                                        (v_Vqc:(zen.term basics.bool__t) =>
                                         zen.triangle (focal.is_true v_Vqc)) 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult abst_zero x) x) 
                                           (abst_plus abst_zero x)) 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult abst_zero x) x) 
                                           (abst_plus abst_zero x)) 
                                        (v_Vjd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult 
                                                              abst_zero x) x) 
                                                        (abst_plus abst_zero 
                                                           x)) 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult 
                                                              abst_zero x) x) 
                                                        (abst_plus abst_zero 
                                                           x)))))) =>
                                         zen.Rsubst abst_T 
                                           (v_Vqd:(zen.term abst_T) =>
                                            zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal v_Vqd 
                                                       (abst_plus abst_zero x)) 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             abst_zero x) x) 
                                                       (abst_plus abst_zero x))))) 
                                           (abst_plus 
                                              (abst_mult abst_zero x) x) 
                                           (abst_plus 
                                              (abst_mult abst_zero x) x) 
                                           (v_Vmc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_plus 
                                                           (abst_mult 
                                                              abst_zero x) x) 
                                                        (abst_plus 
                                                           (abst_mult 
                                                              abst_zero x) x))))) =>
                                            zen.Rnotand 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             abst_zero x) x) 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             abst_zero x) x)))) 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                abst_zero x) 
                                                             x) 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                abst_zero x) 
                                                             x))))) 
                                              (v_Vtc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             abst_zero x) x) 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             abst_zero x) x))) 
                                                 (v_Vuc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 abst_zero x) 
                                                              x) 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 abst_zero x) 
                                                              x)))) =>
                                                  zen.Reqsym abst_T 
                                                    (abst_plus 
                                                       (abst_mult abst_zero x) 
                                                       x) 
                                                    (abst_plus 
                                                       (abst_mult abst_zero x) 
                                                       x) v_Vuc v_Vmc) v_Vtc) 
                                              (v_Vxc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    abst_zero 
                                                                    x) x))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                abst_zero x) 
                                                             x) 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                abst_zero x) 
                                                             x)))) 
                                                 (v_Vyc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    abst_zero 
                                                                    x) x))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vzc:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vad:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vbd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vbd))))))) 
                                                    (abst_plus 
                                                       (abst_mult abst_zero x) 
                                                       x) 
                                                    (v_Vcd:
                                                     (zen.proof 
                                                        (zen.forall abst_T 
                                                           (v_Vad:
                                                            (zen.term abst_T) =>
                                                            zen.forall 
                                                              abst_T 
                                                              (v_Vbd:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    v_Vad))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    v_Vbd)))))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vad:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vbd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    v_Vad))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    v_Vbd)))))) 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             abst_zero x) x) 
                                                       (v_Vdd:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              abst_T 
                                                              (v_Vbd:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    v_Vbd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    v_Vbd))))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vbd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    v_Vbd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    v_Vbd))))) 
                                                          (abst_plus 
                                                             abst_zero x) 
                                                          (v_Vrd:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x)))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x))))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x)))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x))))) 
                                                             (v_Vnc:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))) 
                                                                v_Vyc v_Vnc) 
                                                             (v_Vsd:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x)))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x)))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x)))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x)))) 
                                                                (v_Vkc:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x)))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x)))) 
                                                                   v_Vkd 
                                                                   v_Vkc) 
                                                                (v_Vkd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x)))) 
                                                                   v_Vkd 
                                                                   v_Vkc) 
                                                                v_Vsd) v_Vrd) 
                                                          v_Vdd) v_Vcd) 
                                                    abst_equal_transitive) 
                                                 v_Vxc) v_Voc) 
                                           (v_Vjd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 abst_zero x) 
                                                              x) 
                                                           (abst_plus 
                                                              abst_zero x)) 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 abst_zero x) 
                                                              x) 
                                                           (abst_plus 
                                                              abst_zero x)))))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vhd:(zen.term abst_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                abst_zero x) 
                                                             x) v_Vhd) 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                abst_zero x) 
                                                             x) 
                                                          (abst_plus 
                                                             abst_zero x))))) 
                                              (abst_plus abst_zero x) 
                                              (abst_plus abst_zero x) 
                                              (v_Vtd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_plus 
                                                              abst_zero x) 
                                                           (abst_plus 
                                                              abst_zero x))))) =>
                                               zen.Rnoteq abst_T 
                                                 (abst_plus abst_zero x) 
                                                 v_Vtd) 
                                              (v_Vjd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                              (abst_plus 
                                                                 abst_zero x)) 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                              (abst_plus 
                                                                 abst_zero x)))))) =>
                                               zen.Rnoteq basics.bool__t 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult abst_zero x) 
                                                       x) 
                                                    (abst_plus abst_zero x)) 
                                                 v_Vjd) v_Vjd) v_Vjd) 
                                        (v_Vkd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_mult abst_zero 
                                                           x) x) 
                                                     (abst_plus abst_zero x))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult abst_zero x) 
                                                       x) 
                                                    (abst_plus abst_zero x)))) 
                                           v_Vkd v_Vkc) v_Vkd) v_Vod) v_Vnd) 
                               v_Vmd) v_Vcd) abst_equal_transitive) 
                      (v_Vpd:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal x (abst_plus abst_zero x)))))) =>
                       zen.Rall abst_T 
                         (v_Vzc:(zen.term abst_T) =>
                          zen.and 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_plus v_Vzc abst_zero) 
                                     v_Vzc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_plus abst_zero v_Vzc) 
                                     v_Vzc)))) x 
                         (v_Vud:
                          (zen.proof 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus x abst_zero) x))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus abst_zero x) x))))) =>
                          zen.Rand 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_plus x abst_zero) x))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_plus abst_zero x) x))) 
                            (v_Vvd:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus x abst_zero) x)))) =>
                             v_Vwd:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus abst_zero x) x)))) =>
                             zen.Rall abst_T 
                               (v_Vzc:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vad:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vzc v_Vad))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vad v_Vzc))))) 
                               (abst_plus abst_zero x) 
                               (v_Vxd:
                                (zen.proof 
                                   (zen.forall abst_T 
                                      (v_Vad:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus abst_zero x) 
                                                  v_Vad))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vad 
                                                  (abst_plus abst_zero x))))))) =>
                                zen.Rall abst_T 
                                  (v_Vad:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus abst_zero x) v_Vad))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vad 
                                              (abst_plus abst_zero x))))) x 
                                  (v_Vyd:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus abst_zero x) x))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal x 
                                                  (abst_plus abst_zero x)))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus abst_zero x) x))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal x 
                                              (abst_plus abst_zero x)))) 
                                     (v_Vzd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus abst_zero x) 
                                                     x))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus abst_zero x) x))) 
                                        v_Vwd v_Vzd) 
                                     (v_Vld:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal x 
                                                  (abst_plus abst_zero x))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x 
                                                 (abst_plus abst_zero x)))) 
                                        v_Vld v_Vpd) v_Vyd) v_Vxd) 
                               abst_equal_symmetric) v_Vud) 
                         abst_zero_is_neutral)))))) 
         (zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (abst_equal (abst_plus (abst_mult abst_zero x) x) x))) 
            (v_Vvc:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_plus (abst_mult abst_zero x) x) x))))) =>
             zen.Rcut 
               (zen.and 
                  (zen.not 
                     (zen.triangle 
                        (zen.equal abst_T 
                           (abst_plus (abst_mult abst_zero x) x) 
                           (abst_mult (abst_plus abst_zero abst_one) x)))) 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_plus (abst_mult abst_zero x) x) 
                              (abst_mult (abst_plus abst_zero abst_one) x)))))) 
               (v_Vwc:
                (zen.proof 
                   (zen.and 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal abst_T 
                               (abst_plus (abst_mult abst_zero x) x) 
                               (abst_mult (abst_plus abst_zero abst_one) x)))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_mult abst_zero x) x) 
                                  (abst_mult (abst_plus abst_zero abst_one) x))))))) =>
                zen.Rand 
                  (zen.not 
                     (zen.triangle 
                        (zen.equal abst_T 
                           (abst_plus (abst_mult abst_zero x) x) 
                           (abst_mult (abst_plus abst_zero abst_one) x)))) 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_plus (abst_mult abst_zero x) x) 
                              (abst_mult (abst_plus abst_zero abst_one) x))))) 
                  (v_Vxc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal abst_T 
                               (abst_plus (abst_mult abst_zero x) x) 
                               (abst_mult (abst_plus abst_zero abst_one) x))))) =>
                   v_Vyc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_mult abst_zero x) x) 
                                  (abst_mult (abst_plus abst_zero abst_one) x)))))) =>
                   zen.Rall abst_T 
                     (v_Vzc:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vad:(zen.term abst_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Vzc v_Vad))) 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Vad v_Vzc))))) 
                     (abst_mult (abst_plus abst_zero abst_one) x) 
                     (v_Vbd:
                      (zen.proof 
                         (zen.forall abst_T 
                            (v_Vad:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_mult 
                                           (abst_plus abst_zero abst_one) x) 
                                        v_Vad))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal v_Vad 
                                        (abst_mult 
                                           (abst_plus abst_zero abst_one) x))))))) =>
                      zen.Rall abst_T 
                        (v_Vad:(zen.term abst_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_mult 
                                       (abst_plus abst_zero abst_one) x) 
                                    v_Vad))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal v_Vad 
                                    (abst_mult 
                                       (abst_plus abst_zero abst_one) x))))) 
                        (abst_plus (abst_mult abst_zero x) x) 
                        (v_Vcd:
                         (zen.proof 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_mult 
                                           (abst_plus abst_zero abst_one) x) 
                                        (abst_plus (abst_mult abst_zero x) x)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus (abst_mult abst_zero x) x) 
                                        (abst_mult 
                                           (abst_plus abst_zero abst_one) x)))))) =>
                         zen.Rimply 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_mult 
                                       (abst_plus abst_zero abst_one) x) 
                                    (abst_plus (abst_mult abst_zero x) x)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_plus (abst_mult abst_zero x) x) 
                                    (abst_mult 
                                       (abst_plus abst_zero abst_one) x)))) 
                           (v_Vdd:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult 
                                              (abst_plus abst_zero abst_one) 
                                              x) 
                                           (abst_plus 
                                              (abst_mult abst_zero x) x)))))) =>
                            zen.Rcut 
                              (zen.and 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal abst_T 
                                          (abst_mult 
                                             (abst_plus abst_zero abst_one) x) 
                                          (abst_mult 
                                             (abst_plus abst_zero abst_one) x)))) 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_mult 
                                                (abst_plus abst_zero abst_one) 
                                                x) 
                                             (abst_mult 
                                                (abst_plus abst_zero abst_one) 
                                                x)))))) 
                              (v_Ved:
                               (zen.proof 
                                  (zen.and 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult 
                                                 (abst_plus abst_zero 
                                                    abst_one) x) 
                                              (abst_mult 
                                                 (abst_plus abst_zero 
                                                    abst_one) x)))) 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult 
                                                    (abst_plus abst_zero 
                                                       abst_one) x) 
                                                 (abst_mult 
                                                    (abst_plus abst_zero 
                                                       abst_one) x))))))) =>
                               zen.Rand 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal abst_T 
                                          (abst_mult 
                                             (abst_plus abst_zero abst_one) x) 
                                          (abst_mult 
                                             (abst_plus abst_zero abst_one) x)))) 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_mult 
                                                (abst_plus abst_zero abst_one) 
                                                x) 
                                             (abst_mult 
                                                (abst_plus abst_zero abst_one) 
                                                x))))) 
                                 (v_Vfd:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult 
                                                 (abst_plus abst_zero 
                                                    abst_one) x) 
                                              (abst_mult 
                                                 (abst_plus abst_zero 
                                                    abst_one) x))))) =>
                                  v_Vgd:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult 
                                                    (abst_plus abst_zero 
                                                       abst_one) x) 
                                                 (abst_mult 
                                                    (abst_plus abst_zero 
                                                       abst_one) x)))))) =>
                                  zen.Rnoteq abst_T 
                                    (abst_mult 
                                       (abst_plus abst_zero abst_one) x) 
                                    v_Vfd) v_Ved) 
                              (v_Vhd:
                               (zen.proof 
                                  (zen.not 
                                     (zen.and 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_mult 
                                                    (abst_plus abst_zero 
                                                       abst_one) x) 
                                                 (abst_mult 
                                                    (abst_plus abst_zero 
                                                       abst_one) x)))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_plus abst_zero 
                                                          abst_one) x) 
                                                    (abst_mult 
                                                       (abst_plus abst_zero 
                                                          abst_one) x)))))))) =>
                               zen.Rcut 
                                 (zen.triangle 
                                    (zen.equal abst_T 
                                       (abst_plus (abst_mult abst_zero x) 
                                          (abst_mult abst_one x)) 
                                       (abst_plus (abst_mult abst_zero x) x))) 
                                 (v_Vid:
                                  (zen.proof 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_plus 
                                              (abst_mult abst_zero x) 
                                              (abst_mult abst_one x)) 
                                           (abst_plus 
                                              (abst_mult abst_zero x) x)))) =>
                                  zen.Rsubst basics.bool__t 
                                    (v_Vjd:(zen.term basics.bool__t) =>
                                     zen.triangle (focal.is_true v_Vjd)) 
                                    (abst_equal 
                                       (abst_mult 
                                          (abst_plus abst_zero abst_one) x) 
                                       (abst_plus (abst_mult abst_zero x) 
                                          (abst_mult abst_one x))) 
                                    (abst_equal 
                                       (abst_mult 
                                          (abst_plus abst_zero abst_one) x) 
                                       (abst_plus (abst_mult abst_zero x) x)) 
                                    (v_Vkd:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_plus abst_zero 
                                                          abst_one) x) 
                                                    (abst_plus 
                                                       (abst_mult abst_zero x) 
                                                       (abst_mult abst_one x))) 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_plus abst_zero 
                                                          abst_one) x) 
                                                    (abst_plus 
                                                       (abst_mult abst_zero x) 
                                                       x)))))) =>
                                     zen.Rsubst abst_T 
                                       (v_Vld:(zen.term abst_T) =>
                                        zen.not 
                                          (zen.triangle 
                                             (zen.equal basics.bool__t 
                                                (abst_equal v_Vld 
                                                   (abst_plus 
                                                      (abst_mult abst_zero x) 
                                                      (abst_mult abst_one x))) 
                                                (abst_equal 
                                                   (abst_mult 
                                                      (abst_plus abst_zero 
                                                         abst_one) x) 
                                                   (abst_plus 
                                                      (abst_mult abst_zero x) 
                                                      x))))) 
                                       (abst_mult 
                                          (abst_plus abst_zero abst_one) x) 
                                       (abst_mult 
                                          (abst_plus abst_zero abst_one) x) 
                                       (v_Vfd:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_mult 
                                                       (abst_plus abst_zero 
                                                          abst_one) x) 
                                                    (abst_mult 
                                                       (abst_plus abst_zero 
                                                          abst_one) x))))) =>
                                        zen.Rnotand 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal abst_T 
                                                   (abst_mult 
                                                      (abst_plus abst_zero 
                                                         abst_one) x) 
                                                   (abst_mult 
                                                      (abst_plus abst_zero 
                                                         abst_one) x)))) 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one) x) 
                                                      (abst_mult 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one) x))))) 
                                          (v_Vmd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_mult 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one) x) 
                                                          (abst_mult 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one) x)))))) =>
                                           zen.Rnotnot 
                                             (zen.triangle 
                                                (zen.equal abst_T 
                                                   (abst_mult 
                                                      (abst_plus abst_zero 
                                                         abst_one) x) 
                                                   (abst_mult 
                                                      (abst_plus abst_zero 
                                                         abst_one) x))) 
                                             (v_Vnd:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_mult 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_one) x) 
                                                       (abst_mult 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_one) x)))) =>
                                              zen.Rcut 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_mult 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one) x) 
                                                      (abst_mult 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one) x))) 
                                                (v_Vnd:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_mult 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one) x) 
                                                          (abst_mult 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one) x)))) =>
                                                 zen.Rsubst abst_T 
                                                   (v_Vod:
                                                    (zen.term abst_T) =>
                                                    zen.triangle 
                                                      (zen.equal abst_T 
                                                         v_Vod 
                                                         (abst_mult 
                                                            (abst_plus 
                                                               abst_zero 
                                                               abst_one) x))) 
                                                   (abst_mult 
                                                      (abst_plus abst_zero 
                                                         abst_one) x) 
                                                   (abst_mult 
                                                      (abst_plus abst_zero 
                                                         abst_one) x) 
                                                   (v_Vfd:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T 
                                                                (abst_mult 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                   x) 
                                                                (abst_mult 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                   x))))) =>
                                                    zen.Raxiom 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            (abst_mult 
                                                               (abst_plus 
                                                                  abst_zero 
                                                                  abst_one) x) 
                                                            (abst_mult 
                                                               (abst_plus 
                                                                  abst_zero 
                                                                  abst_one) x))) 
                                                      v_Vnd v_Vfd) 
                                                   (v_Vnd:
                                                    (zen.proof 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_mult 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one) 
                                                                x) 
                                                             (abst_mult 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one) 
                                                                x)))) =>
                                                    zen.Rsubst abst_T 
                                                      (v_Vpd:
                                                       (zen.term abst_T) =>
                                                       zen.triangle 
                                                         (zen.equal abst_T 
                                                            (abst_mult 
                                                               (abst_plus 
                                                                  abst_zero 
                                                                  abst_one) x) 
                                                            v_Vpd)) 
                                                      (abst_mult 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one) x) 
                                                      (abst_mult 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one) x) 
                                                      (v_Vfd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                   (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x))))) =>
                                                       zen.Rnoteq abst_T 
                                                         (abst_mult 
                                                            (abst_plus 
                                                               abst_zero 
                                                               abst_one) x) 
                                                         v_Vfd) 
                                                      (v_Vnd:
                                                       (zen.proof 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T 
                                                                (abst_mult 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                   x) 
                                                                (abst_mult 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                   x)))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T 
                                                               (abst_mult 
                                                                  (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                  x) 
                                                               (abst_mult 
                                                                  (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                  x))) v_Vnd 
                                                         v_Vfd) v_Vnd) v_Vnd) 
                                                (v_Vfd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_mult 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one) 
                                                                x) 
                                                             (abst_mult 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one) 
                                                                x))))) =>
                                                 zen.Rnoteq abst_T 
                                                   (abst_mult 
                                                      (abst_plus abst_zero 
                                                         abst_one) x) v_Vfd)) 
                                             v_Vmd) 
                                          (v_Vqd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one) 
                                                                x) 
                                                             (abst_mult 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one) 
                                                                x))))))) =>
                                           zen.Rnotnot 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one) x) 
                                                      (abst_mult 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one) x)))) 
                                             (v_Vrd:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one) x) 
                                                          (abst_mult 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one) x))))) =>
                                              zen.Rall abst_T 
                                                (v_Vzc:(zen.term abst_T) =>
                                                 zen.forall abst_T 
                                                   (v_Vad:
                                                    (zen.term abst_T) =>
                                                    zen.forall abst_T 
                                                      (v_Vsd:
                                                       (zen.term abst_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  v_Vzc v_Vad))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Vad 
                                                                    v_Vsd))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vsd))))))) 
                                                (abst_mult 
                                                   (abst_plus abst_zero 
                                                      abst_one) x) 
                                                (v_Vtd:
                                                 (zen.proof 
                                                    (zen.forall abst_T 
                                                       (v_Vad:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vsd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vad))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vsd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vsd)))))))) =>
                                                 zen.Rall abst_T 
                                                   (v_Vad:
                                                    (zen.term abst_T) =>
                                                    zen.forall abst_T 
                                                      (v_Vsd:
                                                       (zen.term abst_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vad))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Vad 
                                                                    v_Vsd))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vsd)))))) 
                                                   (abst_mult 
                                                      (abst_plus abst_zero 
                                                         abst_one) x) 
                                                   (v_Vud:
                                                    (zen.proof 
                                                       (zen.forall abst_T 
                                                          (v_Vsd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x)))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vsd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vsd))))))) =>
                                                    zen.Rall abst_T 
                                                      (v_Vsd:
                                                       (zen.term abst_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                  (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x)))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vsd))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vsd))))) 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            abst_zero x) 
                                                         (abst_mult abst_one 
                                                            x)) 
                                                      (v_Vvd:
                                                       (zen.proof 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x)))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x))))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x)))))))) =>
                                                       zen.Rimply 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                  (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x)))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x))))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x)))))) 
                                                         (v_Vgd:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x)))))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x)))) 
                                                            v_Vrd v_Vgd) 
                                                         (v_Vwd:
                                                          (zen.proof 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x))))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x))))))) =>
                                                          zen.Rimply 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x))))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x))))) 
                                                            (v_Vxd:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x))))))) =>
                                                             zen.Raxiom 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x))))) 
                                                               __B_1_3_LEMMA 
                                                               v_Vxd) 
                                                            (__B_1_3_LEMMA:
                                                             (zen.proof 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x)))))) =>
                                                             zen.Rsubst 
                                                               basics.bool__t 
                                                               (v_Vjd:
                                                                (zen.term 
                                                                   basics.bool__t) =>
                                                                zen.triangle 
                                                                  (focal.is_true 
                                                                    v_Vjd)) 
                                                               (abst_equal 
                                                                  (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x))) 
                                                               (abst_equal 
                                                                  (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)) 
                                                               (v_Vkd:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x))) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))))) =>
                                                                zen.Rsubst 
                                                                  abst_T 
                                                                  (v_Vld:
                                                                   (zen.term 
                                                                    abst_T) =>
                                                                   zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x))) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x))))) 
                                                                  (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                  (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                  (v_Vfd:
                                                                   (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x))))) =>
                                                                   zen.Rnoteq 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vfd) 
                                                                  (v_Vkd:
                                                                   (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x))) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))))) =>
                                                                   zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vyd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vyd) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x))))) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (v_Vzd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x))) 
                                                                    v_Vid 
                                                                    v_Vzd) 
                                                                    (v_Vae:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)) 
                                                                    v_Vae) 
                                                                    v_Vkd) 
                                                                  v_Vkd) 
                                                               (v_Vbe:
                                                                (zen.proof 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))) 
                                                                  v_Vbe v_Vdd) 
                                                               __B_1_3_LEMMA) 
                                                            v_Vwd) v_Vvd) 
                                                      v_Vud) v_Vtd) 
                                                abst_equal_transitive) v_Vqd) 
                                          v_Vhd) 
                                       (v_Vkd:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_one) x) 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             abst_zero x) 
                                                          (abst_mult 
                                                             abst_one x))) 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_one) x) 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             abst_zero x) x)))))) =>
                                        zen.Rsubst abst_T 
                                          (v_Vyd:(zen.term abst_T) =>
                                           zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one) x) 
                                                      v_Vyd) 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one) x) 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            abst_zero x) x))))) 
                                          (abst_plus (abst_mult abst_zero x) 
                                             (abst_mult abst_one x)) 
                                          (abst_plus (abst_mult abst_zero x) 
                                             x) 
                                          (v_Vzd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             abst_zero x) 
                                                          (abst_mult 
                                                             abst_one x)) 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             abst_zero x) x))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (zen.equal abst_T 
                                                   (abst_plus 
                                                      (abst_mult abst_zero x) 
                                                      (abst_mult abst_one x)) 
                                                   (abst_plus 
                                                      (abst_mult abst_zero x) 
                                                      x))) v_Vid v_Vzd) 
                                          (v_Vae:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one) x) 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                abst_zero x) 
                                                             x)) 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one) x) 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                abst_zero x) 
                                                             x)))))) =>
                                           zen.Rnoteq basics.bool__t 
                                             (abst_equal 
                                                (abst_mult 
                                                   (abst_plus abst_zero 
                                                      abst_one) x) 
                                                (abst_plus 
                                                   (abst_mult abst_zero x) x)) 
                                             v_Vae) v_Vkd) v_Vkd) 
                                    (v_Vbe:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult 
                                                    (abst_plus abst_zero 
                                                       abst_one) x) 
                                                 (abst_plus 
                                                    (abst_mult abst_zero x) x))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_mult 
                                                   (abst_plus abst_zero 
                                                      abst_one) x) 
                                                (abst_plus 
                                                   (abst_mult abst_zero x) x)))) 
                                       v_Vbe v_Vdd) __B_1_3_LEMMA) 
                                 (v_Vzd:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus 
                                                 (abst_mult abst_zero x) 
                                                 (abst_mult abst_one x)) 
                                              (abst_plus 
                                                 (abst_mult abst_zero x) x))))) =>
                                  zen.Rcut 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus 
                                                (abst_mult abst_zero x) 
                                                (abst_mult abst_one x)) 
                                             (abst_plus 
                                                (abst_mult abst_zero x) x)))) 
                                    (v_Vce:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus 
                                                    (abst_mult abst_zero x) 
                                                    (abst_mult abst_one x)) 
                                                 (abst_plus 
                                                    (abst_mult abst_zero x) x))))) =>
                                     zen.Rall abst_T 
                                       (v_Vzc:(zen.term abst_T) =>
                                        zen.forall abst_T 
                                          (v_Vad:(zen.term abst_T) =>
                                           zen.forall abst_T 
                                             (v_Vsd:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vzc v_Vad))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal v_Vad 
                                                            v_Vsd))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal v_Vzc 
                                                            v_Vsd))))))) 
                                       (abst_mult 
                                          (abst_plus abst_zero abst_one) x) 
                                       (v_Vtd:
                                        (zen.proof 
                                           (zen.forall abst_T 
                                              (v_Vad:(zen.term abst_T) =>
                                               zen.forall abst_T 
                                                 (v_Vsd:(zen.term abst_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one) 
                                                                x) v_Vad))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                v_Vad v_Vsd))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                   x) v_Vsd)))))))) =>
                                        zen.Rall abst_T 
                                          (v_Vad:(zen.term abst_T) =>
                                           zen.forall abst_T 
                                             (v_Vsd:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_mult 
                                                            (abst_plus 
                                                               abst_zero 
                                                               abst_one) x) 
                                                         v_Vad))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal v_Vad 
                                                            v_Vsd))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_mult 
                                                               (abst_plus 
                                                                  abst_zero 
                                                                  abst_one) x) 
                                                            v_Vsd)))))) 
                                          (abst_plus (abst_mult abst_zero x) 
                                             (abst_mult abst_one x)) 
                                          (v_Vde:
                                           (zen.proof 
                                              (zen.forall abst_T 
                                                 (v_Vsd:(zen.term abst_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one) 
                                                                x) 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   abst_zero 
                                                                   x) 
                                                                (abst_mult 
                                                                   abst_one x))))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                   (abst_mult 
                                                                    abst_one 
                                                                    x)) v_Vsd))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                   x) v_Vsd))))))) =>
                                           zen.Rall abst_T 
                                             (v_Vsd:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_mult 
                                                            (abst_plus 
                                                               abst_zero 
                                                               abst_one) x) 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               abst_zero x) 
                                                            (abst_mult 
                                                               abst_one x))))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  abst_zero x) 
                                                               (abst_mult 
                                                                  abst_one x)) 
                                                            v_Vsd))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_mult 
                                                               (abst_plus 
                                                                  abst_zero 
                                                                  abst_one) x) 
                                                            v_Vsd))))) 
                                             (abst_plus 
                                                (abst_mult abst_zero x) x) 
                                             (v_Vee:
                                              (zen.proof 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one) 
                                                                x) 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   abst_zero 
                                                                   x) 
                                                                (abst_mult 
                                                                   abst_one x))))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                   (abst_mult 
                                                                    abst_one 
                                                                    x)) 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                   x) 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    abst_zero 
                                                                    x) x))))))) =>
                                              zen.Rimply 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_mult 
                                                            (abst_plus 
                                                               abst_zero 
                                                               abst_one) x) 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               abst_zero x) 
                                                            (abst_mult 
                                                               abst_one x))))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  abst_zero x) 
                                                               (abst_mult 
                                                                  abst_one x)) 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  abst_zero x) 
                                                               x)))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_mult 
                                                               (abst_plus 
                                                                  abst_zero 
                                                                  abst_one) x) 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  abst_zero x) 
                                                               x))))) 
                                                (v_Vxd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                   x) 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                   (abst_mult 
                                                                    abst_one 
                                                                    x))))))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_mult 
                                                               (abst_plus 
                                                                  abst_zero 
                                                                  abst_one) x) 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  abst_zero x) 
                                                               (abst_mult 
                                                                  abst_one x))))) 
                                                   __B_1_3_LEMMA v_Vxd) 
                                                (v_Vfe:
                                                 (zen.proof 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                   (abst_mult 
                                                                    abst_one 
                                                                    x)) 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                   x) 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))))) =>
                                                 zen.Rimply 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  abst_zero x) 
                                                               (abst_mult 
                                                                  abst_one x)) 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  abst_zero x) 
                                                               x)))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_mult 
                                                               (abst_plus 
                                                                  abst_zero 
                                                                  abst_one) x) 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  abst_zero x) 
                                                               x)))) 
                                                   (v_Vge:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x)) 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))))) =>
                                                    zen.Raxiom 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                  (abst_mult 
                                                                    abst_one 
                                                                    x)) 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))) 
                                                      v_Vce v_Vge) 
                                                   (v_Vbe:
                                                    (zen.proof 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                   x) 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    abst_zero 
                                                                    x) x))))) =>
                                                    zen.Rsubst 
                                                      basics.bool__t 
                                                      (v_Vjd:
                                                       (zen.term 
                                                          basics.bool__t) =>
                                                       zen.triangle 
                                                         (focal.is_true v_Vjd)) 
                                                      (abst_equal 
                                                         (abst_mult 
                                                            (abst_plus 
                                                               abst_zero 
                                                               abst_one) x) 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               abst_zero x) x)) 
                                                      (abst_equal 
                                                         (abst_mult 
                                                            (abst_plus 
                                                               abst_zero 
                                                               abst_one) x) 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               abst_zero x) x)) 
                                                      (v_Vae:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)) 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))))) =>
                                                       zen.Rsubst abst_T 
                                                         (v_Vhe:
                                                          (zen.term abst_T) =>
                                                          zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (abst_equal 
                                                                    v_Vhe 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)) 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x))))) 
                                                         (abst_mult 
                                                            (abst_plus 
                                                               abst_zero 
                                                               abst_one) x) 
                                                         (abst_mult 
                                                            (abst_plus 
                                                               abst_zero 
                                                               abst_one) x) 
                                                         (v_Vfd:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x))))) =>
                                                          zen.Rnotand 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x)))) 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x))))) 
                                                            (v_Vmd:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x)))))) =>
                                                             zen.Rnotnot 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x))) 
                                                               (v_Vnd:
                                                                (zen.proof 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x)))) =>
                                                                zen.Reqsym 
                                                                  abst_T 
                                                                  (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                  (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vnd 
                                                                  v_Vfd) 
                                                               v_Vmd) 
                                                            (v_Vqd:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x))))))) =>
                                                             zen.Rnotnot 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x)))) 
                                                               (v_Vrd:
                                                                (zen.proof 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x))))) =>
                                                                zen.Rall 
                                                                  abst_T 
                                                                  (v_Vzc:
                                                                   (zen.term 
                                                                    abst_T) =>
                                                                   zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vsd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vsd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vsd))))))) 
                                                                  (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                  (v_Vtd:
                                                                   (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vsd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vad))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vsd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vsd)))))))) =>
                                                                   zen.Rall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vsd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vad))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vsd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vsd)))))) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (v_Vud:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vsd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vsd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vsd))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vsd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vsd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vsd))))) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (v_Vie:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x))))) 
                                                                    (v_Vgd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x)))) 
                                                                    v_Vrd 
                                                                    v_Vgd) 
                                                                    (v_Vje:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))) 
                                                                    (v_Vdd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))) 
                                                                    v_Vbe 
                                                                    v_Vdd) 
                                                                    (v_Vbe:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))) 
                                                                    v_Vbe 
                                                                    v_Vdd) 
                                                                    v_Vje) 
                                                                    v_Vie) 
                                                                    v_Vud) 
                                                                    v_Vtd) 
                                                                  abst_equal_transitive) 
                                                               v_Vqd) v_Vhd) 
                                                         (v_Vae:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))))) =>
                                                          zen.Rsubst abst_T 
                                                            (v_Vyd:
                                                             (zen.term abst_T) =>
                                                             zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vyd) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x))))) 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  abst_zero x) 
                                                               x) 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  abst_zero x) 
                                                               x) 
                                                            (v_Vke:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x))))) =>
                                                             zen.Rnoteq 
                                                               abst_T 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                               v_Vke) 
                                                            (v_Vae:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))))) =>
                                                             zen.Rnoteq 
                                                               basics.bool__t 
                                                               (abst_equal 
                                                                  (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)) 
                                                               v_Vae) v_Vae) 
                                                         v_Vae) 
                                                      (v_Vbe:
                                                       (zen.proof 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x))))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))) 
                                                         v_Vbe v_Vdd) v_Vbe) 
                                                   v_Vfe) v_Vee) v_Vde) v_Vtd) 
                                       abst_equal_transitive) 
                                    (v_Vge:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult abst_zero x) 
                                                       (abst_mult abst_one x)) 
                                                    (abst_plus 
                                                       (abst_mult abst_zero x) 
                                                       x)))))) =>
                                     zen.Rall abst_T 
                                       (v_Vzc:(zen.term abst_T) =>
                                        zen.forall abst_T 
                                          (v_Vad:(zen.term abst_T) =>
                                           zen.forall abst_T 
                                             (v_Vsd:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vzc v_Vad))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus v_Vsd 
                                                            v_Vzc) 
                                                         (abst_plus v_Vsd 
                                                            v_Vad))))))) x 
                                       (v_Vle:
                                        (zen.proof 
                                           (zen.forall abst_T 
                                              (v_Vad:(zen.term abst_T) =>
                                               zen.forall abst_T 
                                                 (v_Vsd:(zen.term abst_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal x v_Vad))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                v_Vsd x) 
                                                             (abst_plus 
                                                                v_Vsd v_Vad)))))))) =>
                                        zen.Rall abst_T 
                                          (v_Vad:(zen.term abst_T) =>
                                           zen.forall abst_T 
                                             (v_Vsd:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x v_Vad))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus v_Vsd x) 
                                                         (abst_plus v_Vsd 
                                                            v_Vad)))))) 
                                          (abst_mult abst_one x) 
                                          (v_Vme:
                                           (zen.proof 
                                              (zen.forall abst_T 
                                                 (v_Vsd:(zen.term abst_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal x 
                                                             (abst_mult 
                                                                abst_one x)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                v_Vsd x) 
                                                             (abst_plus 
                                                                v_Vsd 
                                                                (abst_mult 
                                                                   abst_one x)))))))) =>
                                           zen.Rall abst_T 
                                             (v_Vsd:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x 
                                                         (abst_mult abst_one 
                                                            x)))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus v_Vsd x) 
                                                         (abst_plus v_Vsd 
                                                            (abst_mult 
                                                               abst_one x)))))) 
                                             (abst_mult abst_zero x) 
                                             (v_Vne:
                                              (zen.proof 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal x 
                                                             (abst_mult 
                                                                abst_one x)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   abst_zero 
                                                                   x) x) 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   abst_zero 
                                                                   x) 
                                                                (abst_mult 
                                                                   abst_one x))))))) =>
                                              zen.Rimply 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x 
                                                         (abst_mult abst_one 
                                                            x)))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               abst_zero x) x) 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               abst_zero x) 
                                                            (abst_mult 
                                                               abst_one x))))) 
                                                (v_Voe:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal x 
                                                                (abst_mult 
                                                                   abst_one x)))))) =>
                                                 zen.Rall abst_T 
                                                   (v_Vzc:
                                                    (zen.term abst_T) =>
                                                    zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_mult 
                                                               abst_one v_Vzc) 
                                                            v_Vzc))) x 
                                                   (v_Vpe:
                                                    (zen.proof 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   abst_one x) 
                                                                x)))) =>
                                                    zen.Rall abst_T 
                                                      (v_Vzc:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vad:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Vad 
                                                                    v_Vzc))))) 
                                                      (abst_mult abst_one x) 
                                                      (v_Vqe:
                                                       (zen.proof 
                                                          (zen.forall abst_T 
                                                             (v_Vad:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x) v_Vad))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x))))))) =>
                                                       zen.Rall abst_T 
                                                         (v_Vad:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x) v_Vad))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Vad 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x))))) x 
                                                         (v_Vre:
                                                          (zen.proof 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x) x))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x)))))) =>
                                                          zen.Rimply 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x) x))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    x 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x)))) 
                                                            (v_Vse:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x) x))))) =>
                                                             zen.Raxiom 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x) x))) 
                                                               v_Vpe v_Vse) 
                                                            (v_Vte:
                                                             (zen.proof 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x))))) =>
                                                             zen.Raxiom 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x)))) 
                                                               v_Vte v_Voe) 
                                                            v_Vre) v_Vqe) 
                                                      abst_equal_symmetric) 
                                                   abst_one_is_left_neutral) 
                                                (v_Vue:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   abst_zero 
                                                                   x) x) 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   abst_zero 
                                                                   x) 
                                                                (abst_mult 
                                                                   abst_one x)))))) =>
                                                 zen.Rall abst_T 
                                                   (v_Vzc:
                                                    (zen.term abst_T) =>
                                                    zen.forall abst_T 
                                                      (v_Vad:
                                                       (zen.term abst_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  v_Vzc v_Vad))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  v_Vad v_Vzc))))) 
                                                   (abst_plus 
                                                      (abst_mult abst_zero x) 
                                                      x) 
                                                   (v_Vve:
                                                    (zen.proof 
                                                       (zen.forall abst_T 
                                                          (v_Vad:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    v_Vad))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vad 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x))))))) =>
                                                    zen.Rall abst_T 
                                                      (v_Vad:
                                                       (zen.term abst_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                  v_Vad))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  v_Vad 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x))))) 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            abst_zero x) 
                                                         (abst_mult abst_one 
                                                            x)) 
                                                      (v_Vwe:
                                                       (zen.proof 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x))))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))))) =>
                                                       zen.Rimply 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x))))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x)) 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))) 
                                                         (v_Vxe:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x))))))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x))))) 
                                                            v_Vue v_Vxe) 
                                                         (v_Vce:
                                                          (zen.proof 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x))))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x)))) 
                                                            v_Vce v_Vge) 
                                                         v_Vwe) v_Vve) 
                                                   abst_equal_symmetric) 
                                                v_Vne) v_Vme) v_Vle) 
                                       abst_plus_right_substitution_rule)))) 
                           (v_Vye:
                            (zen.proof 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus (abst_mult abst_zero x) x) 
                                        (abst_mult 
                                           (abst_plus abst_zero abst_one) x))))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult abst_zero x) x) 
                                       (abst_mult 
                                          (abst_plus abst_zero abst_one) x)))) 
                              v_Vye v_Vyc) v_Vcd) v_Vbd) abst_equal_symmetric) 
                  v_Vwc) 
               (v_Vze:
                (zen.proof 
                   (zen.not 
                      (zen.and 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T 
                                  (abst_plus (abst_mult abst_zero x) x) 
                                  (abst_mult (abst_plus abst_zero abst_one) x)))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus (abst_mult abst_zero x) x) 
                                     (abst_mult 
                                        (abst_plus abst_zero abst_one) x)))))))) =>
                zen.Rcut (zen.triangle (zen.equal abst_T x x)) 
                  (v_Vaf:(zen.proof (zen.triangle (zen.equal abst_T x x))) =>
                   zen.Rsubst basics.bool__t 
                     (v_Vjd:(zen.term basics.bool__t) =>
                      zen.triangle (focal.is_true v_Vjd)) 
                     (abst_equal 
                        (abst_mult (abst_plus abst_zero abst_one) x) x) 
                     (abst_equal (abst_plus (abst_mult abst_zero x) x) x) 
                     (v_Vbf:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (abst_equal 
                                     (abst_mult 
                                        (abst_plus abst_zero abst_one) x) x) 
                                  (abst_equal 
                                     (abst_plus (abst_mult abst_zero x) x) x))))) =>
                      zen.Rsubst abst_T 
                        (v_Vcf:(zen.term abst_T) =>
                         zen.not 
                           (zen.triangle 
                              (zen.equal basics.bool__t (abst_equal v_Vcf x) 
                                 (abst_equal 
                                    (abst_plus (abst_mult abst_zero x) x) x)))) 
                        (abst_mult (abst_plus abst_zero abst_one) x) 
                        (abst_plus (abst_mult abst_zero x) x) 
                        (v_Vdf:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_mult 
                                        (abst_plus abst_zero abst_one) x) 
                                     (abst_plus (abst_mult abst_zero x) x))))) =>
                         zen.Rnotand 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal abst_T 
                                    (abst_plus (abst_mult abst_zero x) x) 
                                    (abst_mult 
                                       (abst_plus abst_zero abst_one) x)))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult abst_zero x) x) 
                                       (abst_mult 
                                          (abst_plus abst_zero abst_one) x))))) 
                           (v_Vef:
                            (zen.proof 
                               (zen.not 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_plus 
                                              (abst_mult abst_zero x) x) 
                                           (abst_mult 
                                              (abst_plus abst_zero abst_one) 
                                              x)))))) =>
                            zen.Rnotnot 
                              (zen.triangle 
                                 (zen.equal abst_T 
                                    (abst_plus (abst_mult abst_zero x) x) 
                                    (abst_mult 
                                       (abst_plus abst_zero abst_one) x))) 
                              (v_Vff:
                               (zen.proof 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_plus (abst_mult abst_zero x) x) 
                                        (abst_mult 
                                           (abst_plus abst_zero abst_one) x)))) =>
                               zen.Rcut 
                                 (zen.triangle 
                                    (zen.equal abst_T 
                                       (abst_plus (abst_mult abst_zero x) x) 
                                       (abst_plus (abst_mult abst_zero x) x))) 
                                 (v_Vgf:
                                  (zen.proof 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_plus 
                                              (abst_mult abst_zero x) x) 
                                           (abst_plus 
                                              (abst_mult abst_zero x) x)))) =>
                                  zen.Rsubst abst_T 
                                    (v_Vhf:(zen.term abst_T) =>
                                     zen.triangle 
                                       (zen.equal abst_T v_Vhf 
                                          (abst_plus (abst_mult abst_zero x) 
                                             x))) 
                                    (abst_plus (abst_mult abst_zero x) x) 
                                    (abst_mult 
                                       (abst_plus abst_zero abst_one) x) 
                                    (v_Vxc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus 
                                                    (abst_mult abst_zero x) x) 
                                                 (abst_mult 
                                                    (abst_plus abst_zero 
                                                       abst_one) x))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_plus 
                                                (abst_mult abst_zero x) x) 
                                             (abst_mult 
                                                (abst_plus abst_zero abst_one) 
                                                x))) v_Vff v_Vxc) 
                                    (v_Vif:
                                     (zen.proof 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult 
                                                 (abst_plus abst_zero 
                                                    abst_one) x) 
                                              (abst_plus 
                                                 (abst_mult abst_zero x) x)))) =>
                                     zen.Rsubst abst_T 
                                       (v_Vpd:(zen.term abst_T) =>
                                        zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_mult 
                                                (abst_plus abst_zero abst_one) 
                                                x) v_Vpd)) 
                                       (abst_plus (abst_mult abst_zero x) x) 
                                       (abst_plus (abst_mult abst_zero x) x) 
                                       (v_Vke:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_plus 
                                                       (abst_mult abst_zero x) 
                                                       x) 
                                                    (abst_plus 
                                                       (abst_mult abst_zero x) 
                                                       x))))) =>
                                        zen.Rnoteq abst_T 
                                          (abst_plus (abst_mult abst_zero x) 
                                             x) v_Vke) 
                                       (v_Vif:
                                        (zen.proof 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_mult 
                                                    (abst_plus abst_zero 
                                                       abst_one) x) 
                                                 (abst_plus 
                                                    (abst_mult abst_zero x) x)))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_mult 
                                                   (abst_plus abst_zero 
                                                      abst_one) x) 
                                                (abst_plus 
                                                   (abst_mult abst_zero x) x))) 
                                          v_Vif v_Vdf) v_Vif) v_Vgf) 
                                 (v_Vke:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus 
                                                 (abst_mult abst_zero x) x) 
                                              (abst_plus 
                                                 (abst_mult abst_zero x) x))))) =>
                                  zen.Rnoteq abst_T 
                                    (abst_plus (abst_mult abst_zero x) x) 
                                    v_Vke)) v_Vef) 
                           (v_Vjf:
                            (zen.proof 
                               (zen.not 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus 
                                                 (abst_mult abst_zero x) x) 
                                              (abst_mult 
                                                 (abst_plus abst_zero 
                                                    abst_one) x))))))) =>
                            zen.Rnotnot 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult abst_zero x) x) 
                                       (abst_mult 
                                          (abst_plus abst_zero abst_one) x)))) 
                              (v_Vye:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult abst_zero x) x) 
                                           (abst_mult 
                                              (abst_plus abst_zero abst_one) 
                                              x))))) =>
                               zen.Rall abst_T 
                                 (v_Vzc:(zen.term abst_T) =>
                                  zen.forall abst_T 
                                    (v_Vad:(zen.term abst_T) =>
                                     zen.forall abst_T 
                                       (v_Vsd:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal v_Vzc v_Vad))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Vad v_Vsd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Vzc v_Vsd))))))) 
                                 (abst_plus (abst_mult abst_zero x) x) 
                                 (v_Vkf:
                                  (zen.proof 
                                     (zen.forall abst_T 
                                        (v_Vad:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vsd:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             abst_zero x) x) 
                                                       v_Vad))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vad 
                                                          v_Vsd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                abst_zero x) 
                                                             x) v_Vsd)))))))) =>
                                  zen.Rall abst_T 
                                    (v_Vad:(zen.term abst_T) =>
                                     zen.forall abst_T 
                                       (v_Vsd:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult abst_zero x) 
                                                      x) v_Vad))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Vad v_Vsd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            abst_zero x) x) 
                                                      v_Vsd)))))) 
                                    (abst_mult 
                                       (abst_plus abst_zero abst_one) x) 
                                    (v_Vlf:
                                     (zen.proof 
                                        (zen.forall abst_T 
                                           (v_Vsd:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             abst_zero x) x) 
                                                       (abst_mult 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_one) x)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one) x) 
                                                          v_Vsd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                abst_zero x) 
                                                             x) v_Vsd))))))) =>
                                     zen.Rall abst_T 
                                       (v_Vsd:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult abst_zero x) 
                                                      x) 
                                                   (abst_mult 
                                                      (abst_plus abst_zero 
                                                         abst_one) x)))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one) x) 
                                                      v_Vsd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            abst_zero x) x) 
                                                      v_Vsd))))) x 
                                       (v_Vmf:
                                        (zen.proof 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             abst_zero x) x) 
                                                       (abst_mult 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_one) x)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one) x) 
                                                          x))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                abst_zero x) 
                                                             x) x)))))) =>
                                        zen.Rimply 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult abst_zero x) 
                                                      x) 
                                                   (abst_mult 
                                                      (abst_plus abst_zero 
                                                         abst_one) x)))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one) x) x))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            abst_zero x) x) x)))) 
                                          (v_Vyc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                abst_zero x) 
                                                             x) 
                                                          (abst_mult 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one) x)))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            abst_zero x) x) 
                                                      (abst_mult 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one) x)))) 
                                             v_Vye v_Vyc) 
                                          (v_Vnf:
                                           (zen.proof 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one) x) 
                                                          x))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                abst_zero x) 
                                                             x) x))))) =>
                                           zen.Rimply 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one) x) x))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            abst_zero x) x) x))) 
                                             (v_Vof:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one) 
                                                                x) x))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_mult 
                                                            (abst_plus 
                                                               abst_zero 
                                                               abst_one) x) x))) 
                                                __B_1_2_LEMMA v_Vof) 
                                             (v_Vpf:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                abst_zero x) 
                                                             x) x)))) =>
                                              zen.Rsubst basics.bool__t 
                                                (v_Vjd:
                                                 (zen.term basics.bool__t) =>
                                                 zen.triangle 
                                                   (focal.is_true v_Vjd)) 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult abst_zero x) 
                                                      x) x) 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult abst_zero x) 
                                                      x) x) 
                                                (v_Vqf:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    abst_zero 
                                                                    x) x) x) 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    abst_zero 
                                                                    x) x) x))))) =>
                                                 zen.Rsubst abst_T 
                                                   (v_Vcf:
                                                    (zen.term abst_T) =>
                                                    zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (abst_equal 
                                                               v_Vcf x) 
                                                            (abst_equal 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    abst_zero 
                                                                    x) x) x)))) 
                                                   (abst_plus 
                                                      (abst_mult abst_zero x) 
                                                      x) 
                                                   (abst_plus 
                                                      (abst_mult abst_zero x) 
                                                      x) 
                                                   (v_Vke:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    abst_zero 
                                                                    x) x))))) =>
                                                    zen.Rnoteq abst_T 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            abst_zero x) x) 
                                                      v_Vke) 
                                                   (v_Vqf:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) x) 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) x))))) =>
                                                    zen.Rsubst abst_T 
                                                      (v_Vrf:
                                                       (zen.term abst_T) =>
                                                       zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                  v_Vrf) 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) x)))) 
                                                      x x 
                                                      (v_Vsf:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T x x)))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T x x)) 
                                                         v_Vaf v_Vsf) 
                                                      (v_Vqf:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) x) 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) x))))) =>
                                                       zen.Rnoteq 
                                                         basics.bool__t 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  abst_zero x) 
                                                               x) x) v_Vqf) 
                                                      v_Vqf) v_Vqf) 
                                                (v_Vpf:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   abst_zero 
                                                                   x) x) x)))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  abst_zero x) 
                                                               x) x))) v_Vpf 
                                                   v_Vvc) v_Vpf) v_Vnf) v_Vmf) 
                                       v_Vlf) v_Vkf) abst_equal_transitive) 
                              v_Vjf) v_Vze) 
                        (v_Vqf:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (abst_equal 
                                        (abst_plus (abst_mult abst_zero x) x) 
                                        x) 
                                     (abst_equal 
                                        (abst_plus (abst_mult abst_zero x) x) 
                                        x))))) =>
                         zen.Rsubst abst_T 
                           (v_Vrf:(zen.term abst_T) =>
                            zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (abst_equal 
                                       (abst_plus (abst_mult abst_zero x) x) 
                                       v_Vrf) 
                                    (abst_equal 
                                       (abst_plus (abst_mult abst_zero x) x) 
                                       x)))) x x 
                           (v_Vsf:
                            (zen.proof 
                               (zen.not (zen.triangle (zen.equal abst_T x x)))) =>
                            zen.Raxiom (zen.triangle (zen.equal abst_T x x)) 
                              v_Vaf v_Vsf) 
                           (v_Vqf:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult abst_zero x) x) x) 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult abst_zero x) x) x))))) =>
                            zen.Rnoteq basics.bool__t 
                              (abst_equal 
                                 (abst_plus (abst_mult abst_zero x) x) x) 
                              v_Vqf) v_Vqf) v_Vbf) 
                     (v_Vpf:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_mult abst_zero x) x) x)))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus (abst_mult abst_zero x) x) x))) 
                        v_Vpf v_Vvc) __B_1_2_LEMMA) 
                  (v_Vsf:
                   (zen.proof (zen.not (zen.triangle (zen.equal abst_T x x)))) =>
                   zen.Rcut (zen.triangle (focal.is_true (abst_equal x x))) 
                     (v_Vtf:
                      (zen.proof 
                         (zen.triangle (focal.is_true (abst_equal x x)))) =>
                      zen.Rall abst_T 
                        (v_Vzc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vad:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vsd:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal v_Vzc v_Vad))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vad v_Vsd))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vzc v_Vsd))))))) 
                        (abst_mult (abst_plus abst_zero abst_one) x) 
                        (v_Vtd:
                         (zen.proof 
                            (zen.forall abst_T 
                               (v_Vad:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vsd:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult 
                                                 (abst_plus abst_zero 
                                                    abst_one) x) v_Vad))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vad v_Vsd))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult 
                                                    (abst_plus abst_zero 
                                                       abst_one) x) v_Vsd)))))))) =>
                         zen.Rall abst_T 
                           (v_Vad:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vsd:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_mult 
                                             (abst_plus abst_zero abst_one) x) 
                                          v_Vad))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vad v_Vsd))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_mult 
                                                (abst_plus abst_zero abst_one) 
                                                x) v_Vsd)))))) x 
                           (v_Vuf:
                            (zen.proof 
                               (zen.forall abst_T 
                                  (v_Vsd:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult 
                                                 (abst_plus abst_zero 
                                                    abst_one) x) x))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x v_Vsd))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult 
                                                    (abst_plus abst_zero 
                                                       abst_one) x) v_Vsd))))))) =>
                            zen.Rall abst_T 
                              (v_Vsd:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_mult 
                                             (abst_plus abst_zero abst_one) x) 
                                          x))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal x v_Vsd))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_mult 
                                                (abst_plus abst_zero abst_one) 
                                                x) v_Vsd))))) x 
                              (v_Vvf:
                               (zen.proof 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult 
                                                 (abst_plus abst_zero 
                                                    abst_one) x) x))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true (abst_equal x x))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult 
                                                    (abst_plus abst_zero 
                                                       abst_one) x) x)))))) =>
                               zen.Rimply 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_mult 
                                             (abst_plus abst_zero abst_one) x) 
                                          x))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal x x))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_mult 
                                                (abst_plus abst_zero abst_one) 
                                                x) x)))) 
                                 (v_Vof:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult 
                                                    (abst_plus abst_zero 
                                                       abst_one) x) x))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_mult 
                                                (abst_plus abst_zero abst_one) 
                                                x) x))) __B_1_2_LEMMA v_Vof) 
                                 (v_Vwf:
                                  (zen.proof 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true (abst_equal x x))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult 
                                                    (abst_plus abst_zero 
                                                       abst_one) x) x))))) =>
                                  zen.Rimply 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal x x))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_mult 
                                                (abst_plus abst_zero abst_one) 
                                                x) x))) 
                                    (v_Vxf:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true (abst_equal x x))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true (abst_equal x x))) 
                                       v_Vtf v_Vxf) 
                                    (__B_1_2_LEMMA:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult 
                                                    (abst_plus abst_zero 
                                                       abst_one) x) x)))) =>
                                     zen.Rsubst basics.bool__t 
                                       (v_Vjd:(zen.term basics.bool__t) =>
                                        zen.triangle (focal.is_true v_Vjd)) 
                                       (abst_equal 
                                          (abst_mult 
                                             (abst_plus abst_zero abst_one) x) 
                                          x) 
                                       (abst_equal 
                                          (abst_plus (abst_mult abst_zero x) 
                                             x) x) 
                                       (v_Vbf:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_one) x) x) 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             abst_zero x) x) 
                                                       x))))) =>
                                        zen.Rsubst abst_T 
                                          (v_Vcf:(zen.term abst_T) =>
                                           zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (abst_equal v_Vcf x) 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            abst_zero x) x) x)))) 
                                          (abst_mult 
                                             (abst_plus abst_zero abst_one) x) 
                                          (abst_plus (abst_mult abst_zero x) 
                                             x) 
                                          (v_Vdf:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_mult 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_one) x) 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             abst_zero x) x))))) =>
                                           zen.Rnotand 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            abst_zero x) x) 
                                                      (abst_mult 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one) x)))) 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               abst_zero x) x) 
                                                         (abst_mult 
                                                            (abst_plus 
                                                               abst_zero 
                                                               abst_one) x))))) 
                                             (v_Vef:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   abst_zero 
                                                                   x) x) 
                                                             (abst_mult 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one) 
                                                                x)))))) =>
                                              zen.Rnotnot 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            abst_zero x) x) 
                                                      (abst_mult 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one) x))) 
                                                (v_Vff:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                abst_zero x) 
                                                             x) 
                                                          (abst_mult 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one) x)))) =>
                                                 zen.Reqsym abst_T 
                                                   (abst_plus 
                                                      (abst_mult abst_zero x) 
                                                      x) 
                                                   (abst_mult 
                                                      (abst_plus abst_zero 
                                                         abst_one) x) v_Vff 
                                                   v_Vdf) v_Vef) 
                                             (v_Vjf:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                (abst_mult 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                   x))))))) =>
                                              zen.Rnotnot 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               abst_zero x) x) 
                                                         (abst_mult 
                                                            (abst_plus 
                                                               abst_zero 
                                                               abst_one) x)))) 
                                                (v_Vye:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   abst_zero 
                                                                   x) x) 
                                                             (abst_mult 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one) 
                                                                x))))) =>
                                                 zen.Rall abst_T 
                                                   (v_Vzc:
                                                    (zen.term abst_T) =>
                                                    zen.forall abst_T 
                                                      (v_Vad:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vsd:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vsd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vsd))))))) 
                                                   (abst_plus 
                                                      (abst_mult abst_zero x) 
                                                      x) 
                                                   (v_Vkf:
                                                    (zen.proof 
                                                       (zen.forall abst_T 
                                                          (v_Vad:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vsd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    v_Vad))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vsd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    v_Vsd)))))))) =>
                                                    zen.Rall abst_T 
                                                      (v_Vad:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vsd:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    v_Vad))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vsd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    v_Vsd)))))) 
                                                      (abst_mult 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_one) x) 
                                                      (v_Vlf:
                                                       (zen.proof 
                                                          (zen.forall abst_T 
                                                             (v_Vsd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vsd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    v_Vsd))))))) =>
                                                       zen.Rall abst_T 
                                                         (v_Vsd:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x)))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vsd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    v_Vsd))))) 
                                                         x 
                                                         (v_Vmf:
                                                          (zen.proof 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) x))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) x)))))) =>
                                                          zen.Rimply 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x)))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) x))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) x)))) 
                                                            (v_Vyc:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x)))))) =>
                                                             zen.Raxiom 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x)))) 
                                                               v_Vye v_Vyc) 
                                                            (v_Vnf:
                                                             (zen.proof 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) x))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) x))))) =>
                                                             zen.Rimply 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) x))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) x))) 
                                                               (v_Vof:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) x))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) x))) 
                                                                  __B_1_2_LEMMA 
                                                                  v_Vof) 
                                                               (v_Vpf:
                                                                (zen.proof 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) x)))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    x) x) x))) 
                                                                  v_Vpf v_Vvc) 
                                                               v_Vnf) v_Vmf) 
                                                         v_Vlf) v_Vkf) 
                                                   abst_equal_transitive) 
                                                v_Vjf) v_Vze) 
                                          (v_Vqf:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                abst_zero x) 
                                                             x) x) 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                abst_zero x) 
                                                             x) x))))) =>
                                           zen.Rsubst abst_T 
                                             (v_Vrf:(zen.term abst_T) =>
                                              zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               abst_zero x) x) 
                                                         v_Vrf) 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               abst_zero x) x) 
                                                         x)))) x x 
                                             (v_Vsf:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T x x)))) =>
                                              zen.Rnoteq abst_T x v_Vsf) 
                                             (v_Vqf:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   abst_zero 
                                                                   x) x) x) 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   abst_zero 
                                                                   x) x) x))))) =>
                                              zen.Rnoteq basics.bool__t 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult abst_zero x) 
                                                      x) x) v_Vqf) v_Vqf) 
                                          v_Vbf) 
                                       (v_Vpf:
                                        (zen.proof 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult abst_zero x) 
                                                       x) x)))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult abst_zero x) 
                                                      x) x))) v_Vpf v_Vvc) 
                                       __B_1_2_LEMMA) v_Vwf) v_Vvf) v_Vuf) 
                           v_Vtd) abst_equal_transitive) 
                     (v_Vxf:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle (focal.is_true (abst_equal x x))))) =>
                      zen.Rnoteq abst_T x v_Vsf)))))) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true 
                 (abst_equal (abst_mult (abst_plus abst_zero abst_one) x) 
                    (abst_plus (abst_mult abst_zero x) (abst_mult abst_one x))))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal 
                           (abst_mult (abst_plus abst_zero abst_one) x) 
                           (abst_plus (abst_mult abst_zero x) 
                              (abst_mult abst_one x))))))) =>
            zen.Rall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (abst_equal 
                             (abst_mult (abst_plus v_Vac v_Vbc) v_Vcc) 
                             (abst_plus (abst_mult v_Vac v_Vcc) 
                                (abst_mult v_Vbc v_Vcc))))))) abst_zero 
              (v_Vdc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_mult (abst_plus abst_zero v_Vbc) v_Vcc) 
                                 (abst_plus (abst_mult abst_zero v_Vcc) 
                                    (abst_mult v_Vbc v_Vcc)))))))) =>
               zen.Rall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (abst_equal 
                             (abst_mult (abst_plus abst_zero v_Vbc) v_Vcc) 
                             (abst_plus (abst_mult abst_zero v_Vcc) 
                                (abst_mult v_Vbc v_Vcc)))))) abst_one 
                 (v_Vec:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_mult (abst_plus abst_zero abst_one) 
                                    v_Vcc) 
                                 (abst_plus (abst_mult abst_zero v_Vcc) 
                                    (abst_mult abst_one v_Vcc))))))) =>
                  zen.Rall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (abst_equal 
                             (abst_mult (abst_plus abst_zero abst_one) v_Vcc) 
                             (abst_plus (abst_mult abst_zero v_Vcc) 
                                (abst_mult abst_one v_Vcc))))) x 
                    (v_Vfc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_mult (abst_plus abst_zero abst_one) x) 
                                 (abst_plus (abst_mult abst_zero x) 
                                    (abst_mult abst_one x)))))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_mult (abst_plus abst_zero abst_one) x) 
                                (abst_plus (abst_mult abst_zero x) 
                                   (abst_mult abst_one x))))) v_Vfc v_Vzb) 
                    v_Vec) v_Vdc) abst_mult_right_distributes_on_plus))) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (abst_equal (abst_mult (abst_plus abst_zero abst_one) x) x))) 
          (v_Vkc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal 
                          (abst_mult (abst_plus abst_zero abst_one) x) x))))) =>
           zen.Rall abst_T 
             (v_Vlc:(zen.term abst_T) =>
              zen.triangle 
                (focal.is_true (abst_equal (abst_mult abst_one v_Vlc) v_Vlc))) 
             x 
             (v_Vmc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true (abst_equal (abst_mult abst_one x) x)))) =>
              zen.Rcut 
                (zen.and 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T 
                            (abst_mult (abst_plus abst_zero abst_one) x) 
                            (abst_mult abst_one x)))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_mult (abst_plus abst_zero abst_one) x) 
                               (abst_mult abst_one x)))))) 
                (v_Vnc:
                 (zen.proof 
                    (zen.and 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T 
                                (abst_mult (abst_plus abst_zero abst_one) x) 
                                (abst_mult abst_one x)))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_mult (abst_plus abst_zero abst_one) 
                                      x) (abst_mult abst_one x))))))) =>
                 zen.Rand 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T 
                            (abst_mult (abst_plus abst_zero abst_one) x) 
                            (abst_mult abst_one x)))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_mult (abst_plus abst_zero abst_one) x) 
                               (abst_mult abst_one x))))) 
                   (v_Voc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T 
                                (abst_mult (abst_plus abst_zero abst_one) x) 
                                (abst_mult abst_one x))))) =>
                    v_Vpc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_mult (abst_plus abst_zero abst_one) 
                                      x) (abst_mult abst_one x)))))) =>
                    zen.Rall abst_T 
                      (v_Vlc:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vqc:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vrc:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vlc v_Vqc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_mult v_Vlc v_Vrc) 
                                        (abst_mult v_Vqc v_Vrc))))))) 
                      (abst_plus abst_zero abst_one) 
                      (v_Vsc:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vqc:(zen.term abst_T) =>
                              zen.forall abst_T 
                                (v_Vrc:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus abst_zero abst_one) 
                                            v_Vqc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_mult 
                                               (abst_plus abst_zero abst_one) 
                                               v_Vrc) (abst_mult v_Vqc v_Vrc)))))))) =>
                       zen.Rall abst_T 
                         (v_Vqc:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vrc:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus abst_zero abst_one) v_Vqc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_mult 
                                           (abst_plus abst_zero abst_one) 
                                           v_Vrc) (abst_mult v_Vqc v_Vrc)))))) 
                         abst_one 
                         (v_Vtc:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vrc:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus abst_zero abst_one) 
                                            abst_one))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_mult 
                                               (abst_plus abst_zero abst_one) 
                                               v_Vrc) 
                                            (abst_mult abst_one v_Vrc))))))) =>
                          zen.Rall abst_T 
                            (v_Vrc:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus abst_zero abst_one) 
                                        abst_one))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_mult 
                                           (abst_plus abst_zero abst_one) 
                                           v_Vrc) (abst_mult abst_one v_Vrc))))) 
                            x 
                            (v_Vuc:
                             (zen.proof 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus abst_zero abst_one) 
                                            abst_one))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_mult 
                                               (abst_plus abst_zero abst_one) 
                                               x) (abst_mult abst_one x)))))) =>
                             zen.Rimply 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus abst_zero abst_one) 
                                        abst_one))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_mult 
                                           (abst_plus abst_zero abst_one) x) 
                                        (abst_mult abst_one x)))) 
                               (v_Vvc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus abst_zero abst_one) 
                                               abst_one))))) =>
                                zen.Rall abst_T 
                                  (v_Vlc:(zen.term abst_T) =>
                                   zen.and 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus v_Vlc abst_zero) 
                                              v_Vlc))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus abst_zero v_Vlc) 
                                              v_Vlc)))) abst_one 
                                  (v_Vwc:
                                   (zen.proof 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus abst_one 
                                                     abst_zero) abst_one))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus abst_zero 
                                                     abst_one) abst_one))))) =>
                                   zen.Rand 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus abst_one abst_zero) 
                                              abst_one))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus abst_zero abst_one) 
                                              abst_one))) 
                                     (v_Vxc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus abst_one 
                                                     abst_zero) abst_one)))) =>
                                      v_Vyc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus abst_zero 
                                                     abst_one) abst_one)))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus abst_zero 
                                                    abst_one) abst_one))) 
                                        v_Vyc v_Vvc) v_Vwc) 
                                  abst_zero_is_neutral) 
                               (v_Vzc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_mult 
                                               (abst_plus abst_zero abst_one) 
                                               x) (abst_mult abst_one x))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult 
                                              (abst_plus abst_zero abst_one) 
                                              x) (abst_mult abst_one x)))) 
                                  v_Vzc v_Vpc) v_Vuc) v_Vtc) v_Vsc) 
                      abst_mult_left_substitution_rule) v_Vnc) 
                (v_Vad:
                 (zen.proof 
                    (zen.not 
                       (zen.and 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal abst_T 
                                   (abst_mult (abst_plus abst_zero abst_one) 
                                      x) (abst_mult abst_one x)))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_mult 
                                         (abst_plus abst_zero abst_one) x) 
                                      (abst_mult abst_one x)))))))) =>
                 zen.Rcut (zen.triangle (zen.equal abst_T x x)) 
                   (v_Vbd:
                    (zen.proof (zen.triangle (zen.equal abst_T x x))) =>
                    zen.Rsubst basics.bool__t 
                      (v_Vcd:(zen.term basics.bool__t) =>
                       zen.triangle (focal.is_true v_Vcd)) 
                      (abst_equal (abst_mult abst_one x) x) 
                      (abst_equal 
                         (abst_mult (abst_plus abst_zero abst_one) x) x) 
                      (v_Vdd:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (abst_equal (abst_mult abst_one x) x) 
                                   (abst_equal 
                                      (abst_mult 
                                         (abst_plus abst_zero abst_one) x) x))))) =>
                       zen.Rsubst abst_T 
                         (v_Ved:(zen.term abst_T) =>
                          zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (abst_equal v_Ved x) 
                                  (abst_equal 
                                     (abst_mult 
                                        (abst_plus abst_zero abst_one) x) x)))) 
                         (abst_mult abst_one x) 
                         (abst_mult (abst_plus abst_zero abst_one) x) 
                         (v_Vfd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T (abst_mult abst_one x) 
                                      (abst_mult 
                                         (abst_plus abst_zero abst_one) x))))) =>
                          zen.Rnotand 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_mult 
                                        (abst_plus abst_zero abst_one) x) 
                                     (abst_mult abst_one x)))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_mult 
                                           (abst_plus abst_zero abst_one) x) 
                                        (abst_mult abst_one x))))) 
                            (v_Vgd:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_mult 
                                               (abst_plus abst_zero abst_one) 
                                               x) (abst_mult abst_one x)))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_mult 
                                        (abst_plus abst_zero abst_one) x) 
                                     (abst_mult abst_one x))) 
                               (v_Vhd:
                                (zen.proof 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_mult 
                                            (abst_plus abst_zero abst_one) x) 
                                         (abst_mult abst_one x)))) =>
                                zen.Rcut 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_mult 
                                           (abst_plus abst_zero abst_one) x) 
                                        (abst_mult 
                                           (abst_plus abst_zero abst_one) x))) 
                                  (v_Vid:
                                   (zen.proof 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_mult 
                                               (abst_plus abst_zero abst_one) 
                                               x) 
                                            (abst_mult 
                                               (abst_plus abst_zero abst_one) 
                                               x)))) =>
                                   zen.Rsubst abst_T 
                                     (v_Vjd:(zen.term abst_T) =>
                                      zen.triangle 
                                        (zen.equal abst_T v_Vjd 
                                           (abst_mult 
                                              (abst_plus abst_zero abst_one) 
                                              x))) 
                                     (abst_mult 
                                        (abst_plus abst_zero abst_one) x) 
                                     (abst_mult abst_one x) 
                                     (v_Voc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_mult 
                                                     (abst_plus abst_zero 
                                                        abst_one) x) 
                                                  (abst_mult abst_one x))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult 
                                                 (abst_plus abst_zero 
                                                    abst_one) x) 
                                              (abst_mult abst_one x))) v_Vhd 
                                        v_Voc) 
                                     (v_Vkd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_mult abst_one x) 
                                               (abst_mult 
                                                  (abst_plus abst_zero 
                                                     abst_one) x)))) =>
                                      zen.Rsubst abst_T 
                                        (v_Vld:(zen.term abst_T) =>
                                         zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult abst_one x) v_Vld)) 
                                        (abst_mult 
                                           (abst_plus abst_zero abst_one) x) 
                                        (abst_mult 
                                           (abst_plus abst_zero abst_one) x) 
                                        (v_Vmd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_mult 
                                                        (abst_plus abst_zero 
                                                           abst_one) x) 
                                                     (abst_mult 
                                                        (abst_plus abst_zero 
                                                           abst_one) x))))) =>
                                         zen.Rnoteq abst_T 
                                           (abst_mult 
                                              (abst_plus abst_zero abst_one) 
                                              x) v_Vmd) 
                                        (v_Vkd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_mult abst_one x) 
                                                  (abst_mult 
                                                     (abst_plus abst_zero 
                                                        abst_one) x)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_mult abst_one x) 
                                                 (abst_mult 
                                                    (abst_plus abst_zero 
                                                       abst_one) x))) v_Vkd 
                                           v_Vfd) v_Vkd) v_Vid) 
                                  (v_Vmd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_mult 
                                                  (abst_plus abst_zero 
                                                     abst_one) x) 
                                               (abst_mult 
                                                  (abst_plus abst_zero 
                                                     abst_one) x))))) =>
                                   zen.Rnoteq abst_T 
                                     (abst_mult 
                                        (abst_plus abst_zero abst_one) x) 
                                     v_Vmd)) v_Vgd) 
                            (v_Vnd:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult 
                                                  (abst_plus abst_zero 
                                                     abst_one) x) 
                                               (abst_mult abst_one x))))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_mult 
                                           (abst_plus abst_zero abst_one) x) 
                                        (abst_mult abst_one x)))) 
                               (v_Vzc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_mult 
                                               (abst_plus abst_zero abst_one) 
                                               x) (abst_mult abst_one x))))) =>
                                zen.Rall abst_T 
                                  (v_Vlc:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vqc:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vrc:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vlc v_Vqc))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vqc v_Vrc))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vlc v_Vrc))))))) 
                                  (abst_mult (abst_plus abst_zero abst_one) x) 
                                  (v_Vod:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vqc:(zen.term abst_T) =>
                                          zen.forall abst_T 
                                            (v_Vrc:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult 
                                                           (abst_plus 
                                                              abst_zero 
                                                              abst_one) x) 
                                                        v_Vqc))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vqc 
                                                           v_Vrc))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (abst_plus 
                                                                 abst_zero 
                                                                 abst_one) x) 
                                                           v_Vrc)))))))) =>
                                   zen.Rall abst_T 
                                     (v_Vqc:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vrc:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_plus abst_zero 
                                                          abst_one) x) v_Vqc))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vqc v_Vrc))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_one) x) 
                                                       v_Vrc)))))) 
                                     (abst_mult abst_one x) 
                                     (v_Vpd:
                                      (zen.proof 
                                         (zen.forall abst_T 
                                            (v_Vrc:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult 
                                                           (abst_plus 
                                                              abst_zero 
                                                              abst_one) x) 
                                                        (abst_mult abst_one x)))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              abst_one x) 
                                                           v_Vrc))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (abst_plus 
                                                                 abst_zero 
                                                                 abst_one) x) 
                                                           v_Vrc))))))) =>
                                      zen.Rall abst_T 
                                        (v_Vrc:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_plus abst_zero 
                                                          abst_one) x) 
                                                    (abst_mult abst_one x)))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult abst_one x) 
                                                       v_Vrc))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_one) x) 
                                                       v_Vrc))))) x 
                                        (v_Vqd:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult 
                                                           (abst_plus 
                                                              abst_zero 
                                                              abst_one) x) 
                                                        (abst_mult abst_one x)))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              abst_one x) x))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (abst_plus 
                                                                 abst_zero 
                                                                 abst_one) x) 
                                                           x)))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_plus abst_zero 
                                                          abst_one) x) 
                                                    (abst_mult abst_one x)))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult abst_one x) 
                                                       x))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_one) x) x)))) 
                                           (v_Vpc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (abst_plus 
                                                                 abst_zero 
                                                                 abst_one) x) 
                                                           (abst_mult 
                                                              abst_one x)))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_one) x) 
                                                       (abst_mult abst_one x)))) 
                                              v_Vzc v_Vpc) 
                                           (v_Vrd:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              abst_one x) x))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (abst_plus 
                                                                 abst_zero 
                                                                 abst_one) x) 
                                                           x))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult abst_one x) 
                                                       x))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_one) x) x))) 
                                              (v_Vsd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 abst_one x) 
                                                              x))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             abst_one x) x))) 
                                                 v_Vmc v_Vsd) 
                                              (v_Vtd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (abst_plus 
                                                                 abst_zero 
                                                                 abst_one) x) 
                                                           x)))) =>
                                               zen.Rsubst basics.bool__t 
                                                 (v_Vcd:
                                                  (zen.term basics.bool__t) =>
                                                  zen.triangle 
                                                    (focal.is_true v_Vcd)) 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_plus abst_zero 
                                                          abst_one) x) x) 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_plus abst_zero 
                                                          abst_one) x) x) 
                                                 (v_Vud:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    (
                                                                    abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) x) 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    (
                                                                    abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) x))))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Ved:
                                                     (zen.term abst_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                v_Ved x) 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                   x) x)))) 
                                                    (abst_mult 
                                                       (abst_plus abst_zero 
                                                          abst_one) x) 
                                                    (abst_mult 
                                                       (abst_plus abst_zero 
                                                          abst_one) x) 
                                                    (v_Vmd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_mult 
                                                                    (
                                                                    abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                 (abst_mult 
                                                                    (
                                                                    abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x))))) =>
                                                     zen.Rnoteq abst_T 
                                                       (abst_mult 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_one) x) 
                                                       v_Vmd) 
                                                    (v_Vud:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) x) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) x))))) =>
                                                     zen.Rsubst abst_T 
                                                       (v_Vvd:
                                                        (zen.term abst_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vvd) 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) x)))) 
                                                       x x 
                                                       (v_Vwd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T x 
                                                                    x)))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T x x)) 
                                                          v_Vbd v_Vwd) 
                                                       (v_Vud:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) x) 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) x))))) =>
                                                        zen.Rnoteq 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one) 
                                                                x) x) v_Vud) 
                                                       v_Vud) v_Vud) 
                                                 (v_Vtd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                 x) x)))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   abst_one) 
                                                                x) x))) 
                                                    v_Vtd v_Vkc) v_Vtd) v_Vrd) 
                                           v_Vqd) v_Vpd) v_Vod) 
                                  abst_equal_transitive) v_Vnd) v_Vad) 
                         (v_Vud:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_equal 
                                         (abst_mult 
                                            (abst_plus abst_zero abst_one) x) 
                                         x) 
                                      (abst_equal 
                                         (abst_mult 
                                            (abst_plus abst_zero abst_one) x) 
                                         x))))) =>
                          zen.Rsubst abst_T 
                            (v_Vvd:(zen.term abst_T) =>
                             zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (abst_equal 
                                        (abst_mult 
                                           (abst_plus abst_zero abst_one) x) 
                                        v_Vvd) 
                                     (abst_equal 
                                        (abst_mult 
                                           (abst_plus abst_zero abst_one) x) 
                                        x)))) x x 
                            (v_Vwd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle (zen.equal abst_T x x)))) =>
                             zen.Raxiom 
                               (zen.triangle (zen.equal abst_T x x)) v_Vbd 
                               v_Vwd) 
                            (v_Vud:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (abst_equal 
                                            (abst_mult 
                                               (abst_plus abst_zero abst_one) 
                                               x) x) 
                                         (abst_equal 
                                            (abst_mult 
                                               (abst_plus abst_zero abst_one) 
                                               x) x))))) =>
                             zen.Rnoteq basics.bool__t 
                               (abst_equal 
                                  (abst_mult (abst_plus abst_zero abst_one) x) 
                                  x) v_Vud) v_Vud) v_Vdd) 
                      (v_Vtd:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_mult (abst_plus abst_zero abst_one) 
                                      x) x)))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_mult (abst_plus abst_zero abst_one) x) 
                                  x))) v_Vtd v_Vkc) v_Vmc) 
                   (v_Vwd:
                    (zen.proof 
                       (zen.not (zen.triangle (zen.equal abst_T x x)))) =>
                    zen.Rcut (zen.triangle (focal.is_true (abst_equal x x))) 
                      (v_Vxd:
                       (zen.proof 
                          (zen.triangle (focal.is_true (abst_equal x x)))) =>
                       zen.Rall abst_T 
                         (v_Vlc:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vqc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vrc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vlc v_Vqc))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vqc v_Vrc))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vlc v_Vrc))))))) 
                         (abst_mult abst_one x) 
                         (v_Vyd:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vqc:(zen.term abst_T) =>
                                 zen.forall abst_T 
                                   (v_Vrc:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult abst_one x) v_Vqc))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vqc v_Vrc))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult abst_one x) 
                                                  v_Vrc)))))))) =>
                          zen.Rall abst_T 
                            (v_Vqc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vrc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_mult abst_one x) 
                                           v_Vqc))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vqc v_Vrc))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult abst_one x) v_Vrc)))))) 
                            x 
                            (v_Vzd:
                             (zen.proof 
                                (zen.forall abst_T 
                                   (v_Vrc:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult abst_one x) x))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal x v_Vrc))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult abst_one x) 
                                                  v_Vrc))))))) =>
                             zen.Rall abst_T 
                               (v_Vrc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_mult abst_one x) x))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (abst_equal x v_Vrc))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult abst_one x) v_Vrc))))) 
                               x 
                               (v_Vae:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult abst_one x) x))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true (abst_equal x x))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult abst_one x) x)))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_mult abst_one x) x))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (abst_equal x x))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult abst_one x) x)))) 
                                  (v_Vsd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult abst_one x) x))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult abst_one x) x))) 
                                     v_Vmc v_Vsd) 
                                  (v_Vbe:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true (abst_equal x x))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult abst_one x) x))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true (abst_equal x x))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult abst_one x) x))) 
                                     (v_Vce:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal x x))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true (abst_equal x x))) 
                                        v_Vxd v_Vce) 
                                     (v_Vmc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult abst_one x) x)))) =>
                                      zen.Rsubst basics.bool__t 
                                        (v_Vcd:(zen.term basics.bool__t) =>
                                         zen.triangle (focal.is_true v_Vcd)) 
                                        (abst_equal (abst_mult abst_one x) x) 
                                        (abst_equal 
                                           (abst_mult 
                                              (abst_plus abst_zero abst_one) 
                                              x) x) 
                                        (v_Vdd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal 
                                                        (abst_mult abst_one x) 
                                                        x) 
                                                     (abst_equal 
                                                        (abst_mult 
                                                           (abst_plus 
                                                              abst_zero 
                                                              abst_one) x) x))))) =>
                                         zen.Rsubst abst_T 
                                           (v_Ved:(zen.term abst_T) =>
                                            zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal v_Ved x) 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_one) x) x)))) 
                                           (abst_mult abst_one x) 
                                           (abst_mult 
                                              (abst_plus abst_zero abst_one) 
                                              x) 
                                           (v_Vfd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_mult abst_one x) 
                                                        (abst_mult 
                                                           (abst_plus 
                                                              abst_zero 
                                                              abst_one) x))))) =>
                                            zen.Rnotand 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_mult 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_one) x) 
                                                       (abst_mult abst_one x)))) 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one) x) 
                                                          (abst_mult 
                                                             abst_one x))))) 
                                              (v_Vgd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_mult 
                                                                 (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                 x) 
                                                              (abst_mult 
                                                                 abst_one x)))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_mult 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_one) x) 
                                                       (abst_mult abst_one x))) 
                                                 (v_Vhd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_mult 
                                                              (abst_plus 
                                                                 abst_zero 
                                                                 abst_one) x) 
                                                           (abst_mult 
                                                              abst_one x)))) =>
                                                  zen.Reqsym abst_T 
                                                    (abst_mult 
                                                       (abst_plus abst_zero 
                                                          abst_one) x) 
                                                    (abst_mult abst_one x) 
                                                    v_Vhd v_Vfd) v_Vgd) 
                                              (v_Vnd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    (
                                                                    abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                 (abst_mult 
                                                                    abst_one 
                                                                    x))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one) x) 
                                                          (abst_mult 
                                                             abst_one x)))) 
                                                 (v_Vzc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                 x) 
                                                              (abst_mult 
                                                                 abst_one x))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vlc:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vqc:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vrc:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vqc))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vqc 
                                                                    v_Vrc))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vrc))))))) 
                                                    (abst_mult 
                                                       (abst_plus abst_zero 
                                                          abst_one) x) 
                                                    (v_Vod:
                                                     (zen.proof 
                                                        (zen.forall abst_T 
                                                           (v_Vqc:
                                                            (zen.term abst_T) =>
                                                            zen.forall 
                                                              abst_T 
                                                              (v_Vrc:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vqc))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vqc 
                                                                    v_Vrc))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vrc)))))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vqc:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vrc:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vqc))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vqc 
                                                                    v_Vrc))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vrc)))))) 
                                                       (abst_mult abst_one x) 
                                                       (v_Vpd:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              abst_T 
                                                              (v_Vrc:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x)))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x) v_Vrc))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vrc))))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vrc:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x)))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x) v_Vrc))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) v_Vrc))))) 
                                                          x 
                                                          (v_Vqd:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x)))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x) x))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) x)))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x)))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x) x))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) x)))) 
                                                             (v_Vpc:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x)))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x)))) 
                                                                v_Vzc v_Vpc) 
                                                             (v_Vrd:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x) x))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) x))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x) x))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) x))) 
                                                                (v_Vsd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x) x))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    x) x))) 
                                                                   v_Vmc 
                                                                   v_Vsd) 
                                                                (v_Vtd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) x)))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                    x) x))) 
                                                                   v_Vtd 
                                                                   v_Vkc) 
                                                                v_Vrd) v_Vqd) 
                                                          v_Vpd) v_Vod) 
                                                    abst_equal_transitive) 
                                                 v_Vnd) v_Vad) 
                                           (v_Vud:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (abst_plus 
                                                                 abst_zero 
                                                                 abst_one) x) 
                                                           x) 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (abst_plus 
                                                                 abst_zero 
                                                                 abst_one) x) 
                                                           x))))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vvd:(zen.term abst_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one) x) 
                                                          v_Vvd) 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_one) x) 
                                                          x)))) x x 
                                              (v_Vwd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T x x)))) =>
                                               zen.Rnoteq abst_T x v_Vwd) 
                                              (v_Vud:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                 x) x) 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 (abst_plus 
                                                                    abst_zero 
                                                                    abst_one) 
                                                                 x) x))))) =>
                                               zen.Rnoteq basics.bool__t 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_plus abst_zero 
                                                          abst_one) x) x) 
                                                 v_Vud) v_Vud) v_Vdd) 
                                        (v_Vtd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult 
                                                        (abst_plus abst_zero 
                                                           abst_one) x) x)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_plus abst_zero 
                                                          abst_one) x) x))) 
                                           v_Vtd v_Vkc) v_Vmc) v_Vbe) v_Vae) 
                               v_Vzd) v_Vyd) abst_equal_transitive) 
                      (v_Vce:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle (focal.is_true (abst_equal x x))))) =>
                       zen.Rnoteq abst_T x v_Vwd)))) abst_one_is_left_neutral))).

def Module__zero_left_absorbes :
  _p_R_T:cc.uT ->
  _p_R_zero:(cc.eT _p_R_T) ->
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT _p_R_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.ebP (abst_equal (abst_mult _p_R_zero x) abst_zero)))
  :=
  _p_R_T:cc.uT =>
  _p_R_zero:(cc.eT _p_R_T) =>
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT _p_R_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.ebP (abst_equal (abst_mult _p_R_zero x) abst_zero))).

def Ordered_ring__abs :
  abst_T:cc.uT ->
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) ->
  abst_sign:((cc.eT abst_T) -> cc.eT basics.int__t) ->
  x:(cc.eT abst_T) -> cc.eT abst_T
  :=
  abst_T:cc.uT =>
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) =>
  abst_sign:((cc.eT abst_T) -> cc.eT basics.int__t) =>
  x:(cc.eT abst_T) =>
  dk_bool.ite abst_T 
    (basics._lt_ (abst_sign x) (dk_int.from_nat builtins.0)) 
    (abst_opposite x) x.

def Pseudo_algebra__opposite :
  _p_R_T:cc.uT ->
  _p_R_one:(cc.eT _p_R_T) ->
  _p_R_opposite:((cc.eT _p_R_T) -> cc.eT _p_R_T) ->
  abst_T:cc.uT ->
  abst_module_mult:((cc.eT _p_R_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  x:(cc.eT abst_T) -> cc.eT abst_T
  :=
  _p_R_T:cc.uT =>
  _p_R_one:(cc.eT _p_R_T) =>
  _p_R_opposite:((cc.eT _p_R_T) -> cc.eT _p_R_T) =>
  abst_T:cc.uT =>
  abst_module_mult:((cc.eT _p_R_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  x:(cc.eT abst_T) =>
  (under_minus_un:(cc.eT _p_R_T) => abst_module_mult under_minus_un x) 
    (_p_R_opposite _p_R_one).

def Pseudo_algebra__opposite_is_opposite :
  _p_R_T:cc.uT ->
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.ebP (abst_equal (abst_plus x (abst_opposite x)) abst_zero)))
  :=
  _p_R_T:cc.uT =>
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.ebP (abst_equal (abst_plus x (abst_opposite x)) abst_zero))).

def Integral_domain__unit_canonical :
  abst_T:cc.uT -> x:(cc.eT abst_T) -> cc.eT abst_T
  :=
  abst_T:cc.uT => x:(cc.eT abst_T) => x.

def Integral_domain__mult_is_left_regular :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp 
                (dk_logic.ebP (abst_equal (abst_mult x y) (abst_mult x z))) 
                (dk_logic.not 
                   (dk_logic.imp (dk_logic.ebP (abst_equal x abst_zero)) 
                      (dk_logic.ebP (abst_equal y z))))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp 
                (dk_logic.ebP (abst_equal (abst_mult x y) (abst_mult x z))) 
                (dk_logic.not 
                   (dk_logic.imp (dk_logic.ebP (abst_equal x abst_zero)) 
                      (dk_logic.ebP (abst_equal y z)))))))).

def Torsion_free_algebra__module_mult_is_regular :
  _p_R_T:cc.uT ->
  _p_R_equal:((cc.eT _p_R_T) -> (cc.eT _p_R_T) -> cc.eT basics.bool__t) ->
  _p_R_zero:(cc.eT _p_R_T) ->
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_module_mult:((cc.eT _p_R_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  dk_logic.eP 
    (dk_logic.forall _p_R_T 
       (x:(cc.eT _p_R_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.not 
                (dk_logic.imp (dk_logic.ebP (_p_R_equal x _p_R_zero)) 
                   (dk_logic.imp 
                      (dk_logic.ebP 
                         (abst_equal (abst_module_mult x y) 
                            (abst_module_mult x z))) 
                      (dk_logic.ebP (abst_equal y z))))))))
  :=
  _p_R_T:cc.uT =>
  _p_R_equal:((cc.eT _p_R_T) -> (cc.eT _p_R_T) -> cc.eT basics.bool__t) =>
  _p_R_zero:(cc.eT _p_R_T) =>
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_module_mult:((cc.eT _p_R_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  dk_builtins.magic_prove 
    (dk_logic.forall _p_R_T 
       (x:(cc.eT _p_R_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.not 
                (dk_logic.imp (dk_logic.ebP (_p_R_equal x _p_R_zero)) 
                   (dk_logic.imp 
                      (dk_logic.ebP 
                         (abst_equal (abst_module_mult x y) 
                            (abst_module_mult x z))) 
                      (dk_logic.ebP (abst_equal y z)))))))).

def Euclidean_domain__bez_aux :
  abst_T:cc.uT ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_quo_rem:((cc.eT abst_T) ->
                (cc.eT abst_T) ->
                cc.eT (weak_structures.quo_rem_result__t abst_T)) ->
  abst_minus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  (cc.eT abst_T) ->
  (cc.eT abst_T) ->
  (cc.eT abst_T) ->
  (cc.eT abst_T) ->
  (cc.eT abst_T) ->
  (cc.eT abst_T) -> cc.eT (weak_structures.bezout_res__t abst_T).

[c22, c21, p2, c12, c11, p1, abst_is_zero, abst_minus, abst_quo_rem, abst_mult, abst_T]
  Euclidean_domain__bez_aux abst_T abst_mult abst_quo_rem abst_minus 
    abst_is_zero p1 c11 c12 p2 c21 c22
  -->
  dk_bool.ite (weak_structures.bezout_res__t abst_T) (abst_is_zero p2) 
    (weak_structures.cr_br abst_T p1 c11 c12) 
    ((qr:(cc.eT (weak_structures.quo_rem_result__t abst_T)) =>
      (q:(cc.eT abst_T) =>
       (p3:(cc.eT abst_T) =>
        (abst_T:cc.uT =>
         abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
         abst_quo_rem:
         ((cc.eT abst_T) ->
          (cc.eT abst_T) -> cc.eT (weak_structures.quo_rem_result__t abst_T)) =>
         abst_minus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
         abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
         p1:(cc.eT abst_T) =>
         c11:(cc.eT abst_T) =>
         c12:(cc.eT abst_T) =>
         p2:(cc.eT abst_T) =>
         c21:(cc.eT abst_T) =>
         c22:(cc.eT abst_T) =>
         dk_builtins.call_by_value abst_T 
           (weak_structures.bezout_res__t abst_T) 
           (dk_builtins.call_by_value abst_T 
              (cc.Arrow abst_T (weak_structures.bezout_res__t abst_T)) 
              (dk_builtins.call_by_value abst_T 
                 (cc.Arrow abst_T 
                    (cc.Arrow abst_T (weak_structures.bezout_res__t abst_T))) 
                 (dk_builtins.call_by_value abst_T 
                    (cc.Arrow abst_T 
                       (cc.Arrow abst_T 
                          (cc.Arrow abst_T 
                             (weak_structures.bezout_res__t abst_T)))) 
                    (dk_builtins.call_by_value abst_T 
                       (cc.Arrow abst_T 
                          (cc.Arrow abst_T 
                             (cc.Arrow abst_T 
                                (cc.Arrow abst_T 
                                   (weak_structures.bezout_res__t abst_T))))) 
                       (dk_builtins.call_by_value abst_T 
                          (cc.Arrow abst_T 
                             (cc.Arrow abst_T 
                                (cc.Arrow abst_T 
                                   (cc.Arrow abst_T 
                                      (cc.Arrow abst_T 
                                         (weak_structures.bezout_res__t 
                                            abst_T)))))) 
                          (Euclidean_domain__bez_aux abst_T abst_mult 
                             abst_quo_rem abst_minus abst_is_zero) p1) c11) 
                    c12) p2) c21) c22) abst_T abst_mult abst_quo_rem 
          abst_minus abst_is_zero p2 c21 c22 p3 
          (abst_minus c11 (abst_mult q c21)) 
          (abst_minus c12 (abst_mult q c22))) 
         (weak_structures.rema abst_T qr)) (weak_structures.quot abst_T qr)) 
       (abst_quo_rem p1 p2)).

def Euclidean_domain__bezout :
  abst_T:cc.uT ->
  abst_one:(cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_bez_aux:((cc.eT abst_T) ->
                (cc.eT abst_T) ->
                (cc.eT abst_T) ->
                (cc.eT abst_T) ->
                (cc.eT abst_T) ->
                (cc.eT abst_T) ->
                cc.eT (weak_structures.bezout_res__t abst_T)) ->
  p:(cc.eT abst_T) ->
  q:(cc.eT abst_T) -> cc.eT (weak_structures.bezout_res__t abst_T)
  :=
  abst_T:cc.uT =>
  abst_one:(cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_bez_aux:
  ((cc.eT abst_T) ->
   (cc.eT abst_T) ->
   (cc.eT abst_T) ->
   (cc.eT abst_T) ->
   (cc.eT abst_T) ->
   (cc.eT abst_T) -> cc.eT (weak_structures.bezout_res__t abst_T)) =>
  p:(cc.eT abst_T) =>
  q:(cc.eT abst_T) => abst_bez_aux p abst_one abst_zero q abst_zero abst_one.

def Euclidean_domain__bezout_relation :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_bezout:((cc.eT abst_T) ->
               (cc.eT abst_T) -> cc.eT (weak_structures.bezout_res__t abst_T)) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall (weak_structures.bezout_res__t abst_T) 
             (b:(cc.eT (weak_structures.bezout_res__t abst_T)) =>
              dk_logic.ebP 
                (abst_equal (weak_structures.gcd abst_T (abst_bezout x y)) 
                   (abst_plus 
                      (abst_mult 
                         (weak_structures.coef1 abst_T (abst_bezout x y)) x) 
                      (abst_mult 
                         (weak_structures.coef2 abst_T (abst_bezout x y)) y)))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_bezout:
  ((cc.eT abst_T) ->
   (cc.eT abst_T) -> cc.eT (weak_structures.bezout_res__t abst_T)) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall (weak_structures.bezout_res__t abst_T) 
             (b:(cc.eT (weak_structures.bezout_res__t abst_T)) =>
              dk_logic.ebP 
                (abst_equal (weak_structures.gcd abst_T (abst_bezout x y)) 
                   (abst_plus 
                      (abst_mult 
                         (weak_structures.coef1 abst_T (abst_bezout x y)) x) 
                      (abst_mult 
                         (weak_structures.coef2 abst_T (abst_bezout x y)) y))))))).

def Skew_field__div_divides :
  abst_T:cc.uT ->
  abst_div:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_div_is_complete:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.or (dk_logic.ebP (abst_is_zero y)) 
                                   (dk_logic.ebP 
                                      (abst_equal x 
                                         (abst_mult y (abst_div x y)))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.or (dk_logic.ebP (abst_equal y abst_zero)) 
             (dk_logic.ebP (abst_equal (abst_mult (abst_div x y) y) x)))))
  :=
  abst_T:cc.uT =>
  abst_div:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_div_is_complete:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.or (dk_logic.ebP (abst_is_zero y)) 
              (dk_logic.ebP (abst_equal x (abst_mult y (abst_div x y)))))))) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.or (dk_logic.ebP (abst_equal y abst_zero)) 
             (dk_logic.ebP (abst_equal (abst_mult (abst_div x y) y) x))))).

def Vector_space__opposite :
  _p_F_T:cc.uT ->
  _p_F_one:(cc.eT _p_F_T) ->
  _p_F_opposite:((cc.eT _p_F_T) -> cc.eT _p_F_T) ->
  abst_T:cc.uT ->
  abst_mult:((cc.eT _p_F_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  x:(cc.eT abst_T) -> cc.eT abst_T
  :=
  _p_F_T:cc.uT =>
  _p_F_one:(cc.eT _p_F_T) =>
  _p_F_opposite:((cc.eT _p_F_T) -> cc.eT _p_F_T) =>
  abst_T:cc.uT =>
  abst_mult:((cc.eT _p_F_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  x:(cc.eT abst_T) => abst_mult (_p_F_opposite _p_F_one) x.

def Vector_space__opposite_is_opposite :
  _p_F_T:cc.uT ->
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.ebP (abst_equal (abst_plus x (abst_opposite x)) abst_zero)))
  :=
  _p_F_T:cc.uT =>
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_opposite:((cc.eT abst_T) -> cc.eT abst_T) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.ebP (abst_equal (abst_plus x (abst_opposite x)) abst_zero))).

def Field__exquo :
  abst_T:cc.uT ->
  abst_div:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  x:(cc.eT abst_T) -> y:(cc.eT abst_T) -> cc.eT (basics.partiel__t abst_T)
  :=
  abst_T:cc.uT =>
  abst_div:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  x:(cc.eT abst_T) =>
  y:(cc.eT abst_T) =>
  dk_bool.ite (basics.partiel__t abst_T) (abst_is_zero y) 
    (basics.Failed abst_T) (basics.Unfailed abst_T (abst_div x y)).

def Field__gcd :
  abst_T:cc.uT ->
  abst_one:(cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  x:(cc.eT abst_T) -> y:(cc.eT abst_T) -> cc.eT abst_T
  :=
  abst_T:cc.uT =>
  abst_one:(cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  x:(cc.eT abst_T) =>
  y:(cc.eT abst_T) =>
  dk_bool.ite abst_T 
    (basics._amper__amper_ (abst_is_zero x) (abst_is_zero y)) abst_zero 
    abst_one.

def Field__exquo_divides :
  abst_T:cc.uT ->
  abst_div:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (a:(cc.eT abst_T) =>
              dk_logic.or 
                (dk_logic.ebP 
                   (basics.is_failed abst_T 
                      (Field__exquo abst_T abst_div abst_is_zero x a))) 
                (dk_logic.imp 
                   (dk_logic.ebP 
                      (abst_equal y 
                         (basics.non_failed abst_T 
                            (Field__exquo abst_T abst_div abst_is_zero x a)))) 
                   (dk_logic.ebP (abst_equal x (abst_mult a y))))))))
  :=
  abst_T:cc.uT =>
  abst_div:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (a:(cc.eT abst_T) =>
              dk_logic.or 
                (dk_logic.ebP 
                   (basics.is_failed abst_T 
                      (Field__exquo abst_T abst_div abst_is_zero x a))) 
                (dk_logic.imp 
                   (dk_logic.ebP 
                      (abst_equal y 
                         (basics.non_failed abst_T 
                            (Field__exquo abst_T abst_div abst_is_zero x a)))) 
                   (dk_logic.ebP (abst_equal x (abst_mult a y)))))))).

def Field__divisor_is_multiple_of_gcd :
  abst_T:cc.uT ->
  abst_one:(cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_exquo:((cc.eT abst_T) ->
              (cc.eT abst_T) -> cc.eT (basics.partiel__t abst_T)) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (d:(cc.eT abst_T) =>
              dk_logic.not 
                (dk_logic.imp 
                   (dk_logic.ebP (basics.is_failed abst_T (abst_exquo x d))) 
                   (dk_logic.not 
                      (dk_logic.imp 
                         (dk_logic.ebP 
                            (basics.is_failed abst_T (abst_exquo y d))) 
                         (dk_logic.not 
                            (dk_logic.ebP 
                               (basics.is_failed abst_T 
                                  (abst_exquo d 
                                     (Field__gcd abst_T abst_one abst_zero 
                                        abst_is_zero x y))))))))))))
  :=
  abst_T:cc.uT =>
  abst_one:(cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_exquo:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT (basics.partiel__t abst_T)) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (d:(cc.eT abst_T) =>
              dk_logic.not 
                (dk_logic.imp 
                   (dk_logic.ebP (basics.is_failed abst_T (abst_exquo x d))) 
                   (dk_logic.not 
                      (dk_logic.imp 
                         (dk_logic.ebP 
                            (basics.is_failed abst_T (abst_exquo y d))) 
                         (dk_logic.not 
                            (dk_logic.ebP 
                               (basics.is_failed abst_T 
                                  (abst_exquo d 
                                     (Field__gcd abst_T abst_one abst_zero 
                                        abst_is_zero x y)))))))))))).

def Field__gcd_divides :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_one:(cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_exquo:((cc.eT abst_T) ->
              (cc.eT abst_T) -> cc.eT (basics.partiel__t abst_T)) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp 
                (dk_logic.ebP 
                   (abst_equal z 
                      (Field__gcd abst_T abst_one abst_zero abst_is_zero x y))) 
                (dk_logic.and 
                   (dk_logic.not 
                      (dk_logic.ebP 
                         (basics.is_failed abst_T (abst_exquo x z)))) 
                   (dk_logic.not 
                      (dk_logic.ebP 
                         (basics.is_failed abst_T (abst_exquo y z)))))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_one:(cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_exquo:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT (basics.partiel__t abst_T)) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp 
                (dk_logic.ebP 
                   (abst_equal z 
                      (Field__gcd abst_T abst_one abst_zero abst_is_zero x y))) 
                (dk_logic.and 
                   (dk_logic.not 
                      (dk_logic.ebP 
                         (basics.is_failed abst_T (abst_exquo x z)))) 
                   (dk_logic.not 
                      (dk_logic.ebP 
                         (basics.is_failed abst_T (abst_exquo y z))))))))).

